###############################################################################
#                                                                             #
#                                                       18/Jun/2012  10:22:55 #
# IAR ANSI C/C++ Compiler V6.21.1.32794/W32 KICKSTART for ARM                 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\console.c                        #
#    Command line =  "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\console.c" -D at91sam3u4 -D      #
#                    flash -D TRACE_LEVEL=4 -D BC_ena=1 -D RT2_ena=0 -D       #
#                    RT1_ena=0 -D SMT_ena=0 -D IMT_ena=0 -lC "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\ewp\BC_ONLY\List\" --remarks     #
#                    --diag_suppress Pe826,Pe1375,Pe068 -o "C:\Program        #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\ewp\BC_ONLY\Obj\" --no_cse       #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\ewp\..\..\..\at91lib/peripherals #
#                    \" -I "C:\Program Files\IAR Systems\Embedded Workbench   #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 2_0\ewp\..\..\..\at91lib/components\ #
#                    " -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 2_0\ewp\..\..\..\at91lib\" -I        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\ewp\..\..\..\external_libs\" -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\ewp\..\..\..\at91lib/boards/at91 #
#                    sam3u-ek\" --cpu_mode thumb -On --use_c++_inline         #
#    List file    =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\ewp\BC_ONLY\List\console.lst     #
#    Object file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 2_0\ewp\BC_ONLY\Obj\console.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Program Files\IAR Systems\Embedded Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt HI-6130-40 EBI Demo 2_0\console.c
      1          /* ----------------------------------------------------------------------------
      2           *                            HOLT Integrated Circuits 
      3           * ----------------------------------------------------------------------------
      4           *
      5           *    file	console.c
      6           *    object    HyperTerminal-style console I/O for reference design, Holt
      7                          HI-6130 or HI-6131 Evaluation Board based on the Atmel Cortex M-3
      8           
      9           *    brief     This file contains functions for UART initialization, console
     10           *              screen text display and keyboard input when using a program 
     11           *              like HyperTerminal. As a debug aid, this function is optional
     12           *              and is enabled or disabled in file 613x_initialization.h :
     13           *
     14           *		     CONSOLE_IO  YES  enables console I/O for debug.
     15           *                               NO   disables it, reducing program size
     16           *
     17           *              Settings: 115200 baud, 8 data bits, 1 stop bit, no parity, 
     18           *              hardware flow control OFF
     19           *
     20           *	   	HOLT DISCLAIMER
     21           *      	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
     22           *      	KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
     23           *      	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
     24           *      	PURPOSE AND NONINFRINGEMENT. 
     25           *      	IN NO EVENT SHALL HOLT, INC BE LIABLE FOR ANY CLAIM, DAMAGES
     26           *      	OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
     27           *      	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
     28           *      	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
     29           *
     30           *              Copyright (C) 2009-2011 by  HOLT, Inc.
     31           *              All Rights Reserved
     32           */
     33          
     34          // standard Atmel/IAR headers
     35          #include <usart/usart.h>
     36          #include <stdio.h>
     37          #include <pio/pio.h>
     38          #include <pmc/pmc.h>
     39          
     40          // Holt project headers
     41          #include "613x_regs.h"
     42          #include "board_613x.h"
     43          #include "613x_bc.h"
     44          #include "613x_mt.h"
     45          #include "613x_initialization.h"
     46          #include "console.h"
     47          
     48          #include "device_6130.h"
     49          #include "board_6130.h"
     50          extern const H6130 pH6130;
     51          
     52          
     53          //------------------------------------------------------------------------------
     54          //         Global variables
     55          //------------------------------------------------------------------------------
     56          

   \                                 In section .bss, align 2
     57          static unsigned short waddr = 0;
   \                     waddr:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     58          static unsigned char watch = 0;
   \                     watch:
   \   00000000                      DS8 1
     59          
     60          
     61          //------------------------------------------------------------------------------
     62          //         Functions
     63          //------------------------------------------------------------------------------
     64          
     65          //------------------------------------------------------------------------------
     66          /// Configures USART: hardware flow control OFF, asynchronous, 8 bits, 1 stop
     67          /// bit, no parity, 115200 baud, then enables USART transmitter and receiver.
     68          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     69          void ConfigureUsart1(void)
     70          {
   \                     ConfigureUsart1:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   A0B0               SUB      SP,SP,#+128
     71            const Pin pins[] = {PINS_USART};
   \   00000004   00A8               ADD      R0,SP,#+0
   \   00000006   ....               LDR.N    R1,??DataTable1_2
   \   00000008   8022               MOVS     R2,#+128
   \   0000000A   ........           BL       __aeabi_memcpy4
     72            
     73            unsigned int mode = AT91C_US_USMODE_NORMAL // USMODE_HWHSH enables RTS/CTS handshaking
     74                                  | AT91C_US_CLKS_CLOCK
     75                                  | AT91C_US_CHRL_8_BITS
     76                                  | AT91C_US_PAR_NONE
     77                                  | AT91C_US_NBSTOP_1_BIT
     78                                  | AT91C_US_CHMODE_NORMAL;
   \   0000000E   4FF40C64           MOV      R4,#+2240
     79          
     80              // configure PIO pins used by USART1
     81              PIO_Configure(pins, PIO_LISTSIZE(pins));  
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   00A8               ADD      R0,SP,#+0
   \   00000016   ........           BL       PIO_Configure
     82            
     83              // Enable the peripheral clock in the PMC
     84              PMC_EnablePeripheral(BOARD_ID_USART);
   \   0000001A   0E20               MOVS     R0,#+14
   \   0000001C   ........           BL       PMC_EnablePeripheral
     85          
     86              // Configure the USART in the desired mode @ 115200 baud
     87              USART_Configure(BOARD_USART_BASE, mode, 115200, BOARD_MCK);
   \   00000020   ....               LDR.N    R3,??DataTable1_3  ;; 0x2dc6c00
   \   00000022   5FF4E132           MOVS     R2,#+115200
   \   00000026   2100               MOVS     R1,R4
   \   00000028   ........           LDR.W    R0,??DataTable2  ;; 0x40094000
   \   0000002C   ........           BL       USART_Configure
     88          
     89             // Enable USART receiver & transmitter
     90              USART_SetTransmitterEnabled(BOARD_USART_BASE, 1);
   \   00000030   0121               MOVS     R1,#+1
   \   00000032   ........           LDR.W    R0,??DataTable2  ;; 0x40094000
   \   00000036   ........           BL       USART_SetTransmitterEnabled
     91              USART_SetReceiverEnabled(BOARD_USART_BASE, 1);
   \   0000003A   0121               MOVS     R1,#+1
   \   0000003C   ........           LDR.W    R0,??DataTable2  ;; 0x40094000
   \   00000040   ........           BL       USART_SetReceiverEnabled
     92          }
   \   00000044   20B0               ADD      SP,SP,#+128
   \   00000046   10BD               POP      {R4,PC}          ;; return
     93          
     94          
     95          //------------------------------------------------------------------------------
     96          //     function sends ASCII text header to screen
     97          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     98          void show_menu(void) {
   \                     show_menu:
   \   00000000   80B5               PUSH     {R7,LR}
     99            
    100            // Console Output via USART to user HyperTerminal
    101            
    102            putchar(12); // clear screen
   \   00000002   0C20               MOVS     R0,#+12
   \   00000004   ........           BL       putchar
    103          
    104            printf("\n\r*************************************************\n\r");
   \   00000008   ....               LDR.N    R0,??DataTable1_4
   \   0000000A   ........           BL       printf
    105            printf("   Holt Integrated Circuits HI-6130_40 EBI Project   \n\r");
   \   0000000E   ....               LDR.N    R0,??DataTable1_5
   \   00000010   ........           BL       printf
    106            printf("        Compiled: %s %s        \n\r", __DATE__, __TIME__);
   \   00000014   ....               LDR.N    R2,??DataTable1_6
   \   00000016   ....               LDR.N    R1,??DataTable1_7
   \   00000018   ....               LDR.N    R0,??DataTable1_8
   \   0000001A   ........           BL       printf
    107            printf("*************************************************\n\n\r");
   \   0000001E   ....               LDR.N    R0,??DataTable1_9
   \   00000020   ........           BL       printf
    108            #if(BC_ena) 
    109              printf("   BC On   "); 
   \   00000024   ....               LDR.N    R0,??DataTable1_10
   \   00000026   ........           BL       printf
    110            #else 
    111              printf("   BC Off  ");
    112            #endif
    113            #if(SMT_ena) 
    114              printf("SMT On    ");
    115            #elif(IMT_ena) 
    116              printf("IMT On    ");
    117            #else 
    118              printf("MT Off   ");
   \   0000002A   ....               LDR.N    R0,??DataTable1_11
   \   0000002C   ........           BL       printf
    119            #endif
    120            #if(RT1_ena) 
    121              printf("RT1 On   ");
    122            #else 
    123              printf("RT1 Off  ");
   \   00000030   ....               LDR.N    R0,??DataTable1_12
   \   00000032   ........           BL       printf
    124            #endif
    125            #if(RT2_ena) 
    126              printf("RT2 On");
    127            #else 
    128              printf("RT2 Off");
   \   00000036   ....               LDR.N    R0,??DataTable1_13
   \   00000038   ........           BL       printf
    129            #endif
    130              printf("\n\n\r");
   \   0000003C   ....               ADR.N    R0,??DataTable1  ;; "\n\n\r"
   \   0000003E   ........           BL       printf
    131            #if(BC_ena) 
    132              printf(" Press '1' to step BC and list results...\n\r");
   \   00000042   ....               LDR.N    R0,??DataTable1_14
   \   00000044   ........           BL       printf
    133              printf(" Press '2' to list BC configuration...\n\r");
   \   00000048   ....               LDR.N    R0,??DataTable1_15
   \   0000004A   ........           BL       printf
    134              printf(" Press '3' to list BC condition codes & GP flags...\n\r");
   \   0000004E   ....               LDR.N    R0,??DataTable1_16
   \   00000050   ........           BL       printf
    135            #endif
    136            #if(SMT_ena || IMT_ena)
    137              printf(" Press '4' to list MT configuration...\n\r");
    138              printf(" Press '5' to list MT results, last msg...\n\r");
    139            #endif
    140              printf(" Press '6' to list HW interrupt status...\n\r");
   \   00000054   ....               LDR.N    R0,??DataTable1_17
   \   00000056   ........           BL       printf
    141            #if(BC_ena) 
    142              printf(" Press '7' to list BC interrupt status...\n\r");
   \   0000005A   ....               LDR.N    R0,??DataTable1_18
   \   0000005C   ........           BL       printf
    143            #endif
    144            #if(RT1_ena || RT2_ena)
    145              printf(" Press '8' to list RT interrupt status...\n\r");
    146            #endif
    147            #if(SMT_ena || IMT_ena)
    148              printf(" Press '9' to list MT interrupt status...\n\r");
    149            #endif
    150              
    151              printf(" NOTE: Options 6-9 clear the accessed Pending Interrupt Register!\n\r"); 
   \   00000060   ....               LDR.N    R0,??DataTable1_19
   \   00000062   ........           BL       printf
    152              print_line();
   \   00000066   ........           BL       print_line
    153              printf("\n\r");
   \   0000006A   ....               ADR.N    R0,??DataTable1_1  ;; 0x0A, 0x0D, 0x00, 0x00
   \   0000006C   ........           BL       printf
    154              print_menuprompt();
   \   00000070   ........           BL       print_menuprompt
    155          
    156          } // end of show_menu()
   \   00000074   01BD               POP      {R0,PC}          ;; return
    157          
    158          
    159          #if(BC_ena) 
    160          //------------------------------------------------------------------------------
    161          //	This function generates a BC external trigger pulse for the HI-613x. 
    162          //	The pin has a pull-down with a push button pulling high. This function
    163          //	provides an alternate, software-generated trigger. To avoid contention
    164          //	with the button, the PA0 GPIO rests in high-z input mode. The PAOUT
    165          //	register sets PA0 high, so this function simply pulses the pin in 
    166          //	output mode to generate trigger.
    167          //
    168          //	After triggering, an in-line delay provides adequate time for 
    169          //	worst case message completion, then console output displays 
    170          //	formatted message results
    171          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    172          void bc_last_msg_console(void) {
   \                     bc_last_msg_console:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   97B0               SUB      SP,SP,#+92
    173          
    174            unsigned short int i, j, k, addr, wordcount=8, mcsb[10], data[32];
   \   00000006   0825               MOVS     R5,#+8
    175            char rtrt=0,bcast=0,mcode=0,tx=0,nr=0,mtype=0; //,mcd=0;
   \   00000008   0026               MOVS     R6,#+0
   \   0000000A   0027               MOVS     R7,#+0
   \   0000000C   5FF0000B           MOVS     R11,#+0
   \   00000010   5FF00008           MOVS     R8,#+0
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   8DF80400           STRB     R0,[SP, #+4]
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   8DF80500           STRB     R0,[SP, #+5]
    176          
    177            // formfeed 
    178            putchar(12); 	
   \   00000020   0C20               MOVS     R0,#+12
   \   00000022   ........           BL       putchar
    179            printf("\n\rResults From Last Message Issued by BC\n\r");
   \   00000026   ........           LDR.W    R0,??DataTable2_1
   \   0000002A   ........           BL       printf
    180            print_line();
   \   0000002E   ........           BL       print_line
    181            printf("Message Type: ");
   \   00000032   ........           LDR.W    R0,??DataTable2_2
   \   00000036   ........           BL       printf
    182          
    183          	// read block address for the last message 
    184          	addr = pH6130->BC_LAST_MSG_BLOCK_ADDR_REG;
   \   0000003A   ........           LDR.W    R0,??DataTable2_3
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   B0F89E00           LDRH     R0,[R0, #+158]
   \   00000044   8146               MOV      R9,R0
    185          	// read BC Control Word 
    186          	mcsb[0] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   00000046   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000004A   5FEA4900           LSLS     R0,R9,#+1
   \   0000004E   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000052   0068               LDR      R0,[R0, #+0]
   \   00000054   ADF80800           STRH     R0,[SP, #+8]
    187          	// read Command Word 
    188          	addr++;
   \   00000058   19F10109           ADDS     R9,R9,#+1
    189          	mcsb[1] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   0000005C   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000060   5FEA4900           LSLS     R0,R9,#+1
   \   00000064   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000068   0068               LDR      R0,[R0, #+0]
   \   0000006A   ADF80A00           STRH     R0,[SP, #+10]
    190                  
    191            if((mcsb[1] & 0xF800) == 0xF800) {
   \   0000006E   BDF80A00           LDRH     R0,[SP, #+10]
   \   00000072   10F47840           ANDS     R0,R0,#0xF800
   \   00000076   B0F5784F           CMP      R0,#+63488
   \   0000007A   05D1               BNE.N    ??bc_last_msg_console_0
    192          	printf("Broadcast ");
   \   0000007C   ........           LDR.W    R0,??DataTable2_4
   \   00000080   ........           BL       printf
    193          	bcast = 1;
   \   00000084   0120               MOVS     R0,#+1
   \   00000086   0700               MOVS     R7,R0
    194            }
    195          
    196            // RT-RT message? 
    197            if(mcsb[0] & 1) {
   \                     ??bc_last_msg_console_0:
   \   00000088   BDF80800           LDRH     R0,[SP, #+8]
   \   0000008C   C007               LSLS     R0,R0,#+31
   \   0000008E   07D5               BPL.N    ??bc_last_msg_console_1
    198          	rtrt=1;
   \   00000090   0120               MOVS     R0,#+1
   \   00000092   0600               MOVS     R6,R0
    199          	printf("RT-RT Message, ");
   \   00000094   ........           LDR.W    R0,??DataTable2_5
   \   00000098   ........           BL       printf
    200          	wordcount = 10;
   \   0000009C   0A20               MOVS     R0,#+10
   \   0000009E   0500               MOVS     R5,R0
    201            }
    202          
    203            // read rest of control-status block 
    204          	for (i=2,addr++; i<wordcount; i++,addr++) {
   \                     ??bc_last_msg_console_1:
   \   000000A0   0220               MOVS     R0,#+2
   \   000000A2   8246               MOV      R10,R0
   \   000000A4   19F10109           ADDS     R9,R9,#+1
   \                     ??bc_last_msg_console_2:
   \   000000A8   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000AC   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AE   AA45               CMP      R10,R5
   \   000000B0   10D2               BCS.N    ??bc_last_msg_console_3
    205          		mcsb[i] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   000000B2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000B6   02A8               ADD      R0,SP,#+8
   \   000000B8   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000BC   5FEA4901           LSLS     R1,R9,#+1
   \   000000C0   11F1C041           ADDS     R1,R1,#+1610612736
   \   000000C4   0968               LDR      R1,[R1, #+0]
   \   000000C6   20F81A10           STRH     R1,[R0, R10, LSL #+1]
    206          	}
   \   000000CA   1AF1010A           ADDS     R10,R10,#+1
   \   000000CE   19F10109           ADDS     R9,R9,#+1
   \   000000D2   E9E7               B.N      ??bc_last_msg_console_2
    207          
    208            
    209            if(!rtrt) {
   \                     ??bc_last_msg_console_3:
   \   000000D4   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D6   002E               CMP      R6,#+0
   \   000000D8   0CD1               BNE.N    ??bc_last_msg_console_4
    210          	if(mcsb[1] & (1<<10)) {
   \   000000DA   BDF80A00           LDRH     R0,[SP, #+10]
   \   000000DE   4005               LSLS     R0,R0,#+21
   \   000000E0   05D5               BPL.N    ??bc_last_msg_console_5
    211          	    printf("Tx ");
   \   000000E2   8BA0               ADR.N    R0,??bc_last_msg_console_6  ;; "Tx "
   \   000000E4   ........           BL       printf
    212                      tx = 1;
   \   000000E8   0120               MOVS     R0,#+1
   \   000000EA   8046               MOV      R8,R0
   \   000000EC   02E0               B.N      ??bc_last_msg_console_4
    213                  }
    214          	else printf("Rx ");
   \                     ??bc_last_msg_console_5:
   \   000000EE   89A0               ADR.N    R0,??bc_last_msg_console_6+0x4  ;; "Rx "
   \   000000F0   ........           BL       printf
    215            }
    216          
    217          //mtype = mcsb[0] & 7;
    218            // check CW subaddress field to detect mode code 
    219            j = mcsb[1] & 0x03E0;
   \                     ??bc_last_msg_console_4:
   \   000000F4   BDF80A00           LDRH     R0,[SP, #+10]
   \   000000F8   4FF47871           MOV      R1,#+992
   \   000000FC   0840               ANDS     R0,R1,R0
   \   000000FE   0400               MOVS     R4,R0
    220            if((j == 0) || (j == 0x03E0)) {
   \   00000100   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000102   002C               CMP      R4,#+0
   \   00000104   04D0               BEQ.N    ??bc_last_msg_console_7
   \   00000106   4FF47870           MOV      R0,#+992
   \   0000010A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000010C   8442               CMP      R4,R0
   \   0000010E   3FD1               BNE.N    ??bc_last_msg_console_8
    221                // mode code 
    222                mcode = 1;
   \                     ??bc_last_msg_console_7:
   \   00000110   0120               MOVS     R0,#+1
   \   00000112   8346               MOV      R11,R0
    223                i = 0x1F & mcsb[1];
   \   00000114   9DF80A00           LDRB     R0,[SP, #+10]
   \   00000118   10F01F00           ANDS     R0,R0,#0x1F
   \   0000011C   8246               MOV      R10,R0
    224                if(i > 15) {
   \   0000011E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000122   BAF1100F           CMP      R10,#+16
   \   00000126   1DD3               BCC.N    ??bc_last_msg_console_9
    225                    wordcount = 1;
   \   00000128   0120               MOVS     R0,#+1
   \   0000012A   0500               MOVS     R5,R0
    226                    addr = mcsb[2];
   \   0000012C   BDF80C00           LDRH     R0,[SP, #+12]
   \   00000130   8146               MOV      R9,R0
    227          			data[0] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   00000132   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000136   5FEA4900           LSLS     R0,R9,#+1
   \   0000013A   10F1C040           ADDS     R0,R0,#+1610612736
   \   0000013E   0068               LDR      R0,[R0, #+0]
   \   00000140   ADF81C00           STRH     R0,[SP, #+28]
    228          
    229              //    mcd=1;
    230                    printf("Mode Code %02d With Data 0x%.2X%.2X\n\n\r", i, (char)(data[0]>>8), (char)data[0]);
   \   00000144   BDF81C30           LDRH     R3,[SP, #+28]
   \   00000148   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000014A   BDF81C00           LDRH     R0,[SP, #+28]
   \   0000014E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000150   020A               LSRS     R2,R0,#+8
   \   00000152   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000154   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000158   5146               MOV      R1,R10
   \   0000015A   ........           LDR.W    R0,??DataTable2_6
   \   0000015E   ........           BL       printf
   \   00000162   32E0               B.N      ??bc_last_msg_console_10
    231                }
    232                else {
    233                    wordcount = 0;
   \                     ??bc_last_msg_console_9:
   \   00000164   0020               MOVS     R0,#+0
   \   00000166   0500               MOVS     R5,R0
    234                    if(mcsb[1] & (1<<10)) printf("Mode Code %02d w/o Data\n\n\r", i);
   \   00000168   BDF80A00           LDRH     R0,[SP, #+10]
   \   0000016C   4005               LSLS     R0,R0,#+21
   \   0000016E   07D5               BPL.N    ??bc_last_msg_console_11
   \   00000170   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000174   5146               MOV      R1,R10
   \   00000176   ........           LDR.W    R0,??DataTable2_7
   \   0000017A   ........           BL       printf
   \   0000017E   24E0               B.N      ??bc_last_msg_console_10
    235                    // undef Rx MC0-15 
    236                    else printf("Mode Code %02d w/o Data, Undefined\n\n\r", i);
   \                     ??bc_last_msg_console_11:
   \   00000180   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000184   5146               MOV      R1,R10
   \   00000186   ........           LDR.W    R0,??DataTable2_8
   \   0000018A   ........           BL       printf
   \   0000018E   1CE0               B.N      ??bc_last_msg_console_10
    237                }
    238            }
    239            
    240            else {
    241                printf("Subaddress Command, ");
   \                     ??bc_last_msg_console_8:
   \   00000190   ........           LDR.W    R0,??DataTable2_9
   \   00000194   ........           BL       printf
    242                wordcount = mcsb[1] & 0x1F;
   \   00000198   9DF80A00           LDRB     R0,[SP, #+10]
   \   0000019C   10F01F00           ANDS     R0,R0,#0x1F
   \   000001A0   0500               MOVS     R5,R0
    243                if (!wordcount) wordcount = 32;
   \   000001A2   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001A4   002D               CMP      R5,#+0
   \   000001A6   01D1               BNE.N    ??bc_last_msg_console_12
   \   000001A8   2020               MOVS     R0,#+32
   \   000001AA   0500               MOVS     R5,R0
    244                printf("%d data word",wordcount);
   \                     ??bc_last_msg_console_12:
   \   000001AC   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001AE   2900               MOVS     R1,R5
   \   000001B0   ........           LDR.W    R0,??DataTable2_10
   \   000001B4   ........           BL       printf
    245                if(wordcount!=1) printf("s");
   \   000001B8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001BA   012D               CMP      R5,#+1
   \   000001BC   02D0               BEQ.N    ??bc_last_msg_console_13
   \   000001BE   DFA0               ADR.N    R0,??bc_last_msg_console_14  ;; "s"
   \   000001C0   ........           BL       printf
    246                printf("\n\n\r"); 
   \                     ??bc_last_msg_console_13:
   \   000001C4   DEA0               ADR.N    R0,??bc_last_msg_console_14+0x4  ;; "\n\n\r"
   \   000001C6   ........           BL       printf
    247            }                                     
    248          
    249            if (rtrt) {
   \                     ??bc_last_msg_console_10:
   \   000001CA   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001CC   002E               CMP      R6,#+0
   \   000001CE   00F07781           BEQ.W    ??bc_last_msg_console_15
    250              // validity check RT-RT 
    251              if(mcode) printf("RT-RT problem: RxCW mode code.\n\r");
   \   000001D2   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001D6   BBF1000F           CMP      R11,#+0
   \   000001DA   03D0               BEQ.N    ??bc_last_msg_console_16
   \   000001DC   ........           LDR.W    R0,??DataTable2_11
   \   000001E0   ........           BL       printf
    252              // CW1 = Rx? 
    253              if (tx) printf("RT-RT problem: RxCW is transmit.\n\r");
   \                     ??bc_last_msg_console_16:
   \   000001E4   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001E8   B8F1000F           CMP      R8,#+0
   \   000001EC   03D0               BEQ.N    ??bc_last_msg_console_17
   \   000001EE   ........           LDR.W    R0,??DataTable2_12
   \   000001F2   ........           BL       printf
    254              // CW2 = Tx? 
    255              if(!(mcsb[8] & (1<<10))) printf("RT-RT problem: TxCW is receive.\n\r");
   \                     ??bc_last_msg_console_17:
   \   000001F6   BDF81800           LDRH     R0,[SP, #+24]
   \   000001FA   4005               LSLS     R0,R0,#+21
   \   000001FC   03D4               BMI.N    ??bc_last_msg_console_18
   \   000001FE   ........           LDR.W    R0,??DataTable2_13
   \   00000202   ........           BL       printf
    256              // check CW2 mode code 
    257              j = mcsb[8] & 0x03E0;
   \                     ??bc_last_msg_console_18:
   \   00000206   BDF81800           LDRH     R0,[SP, #+24]
   \   0000020A   4FF47871           MOV      R1,#+992
   \   0000020E   0840               ANDS     R0,R1,R0
   \   00000210   0400               MOVS     R4,R0
    258              if((j == 0) || (j == 0x03E0)) printf("RT-RT problem: TxCW mode code.\n\r");
   \   00000212   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000214   002C               CMP      R4,#+0
   \   00000216   04D0               BEQ.N    ??bc_last_msg_console_19
   \   00000218   4FF47870           MOV      R0,#+992
   \   0000021C   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000021E   8442               CMP      R4,R0
   \   00000220   03D1               BNE.N    ??bc_last_msg_console_20
   \                     ??bc_last_msg_console_19:
   \   00000222   ........           LDR.W    R0,??DataTable2_14
   \   00000226   ........           BL       printf
    259              // rule-out CW1 address = CW2 address 
    260              i = mcsb[1] & 0xF800;
   \                     ??bc_last_msg_console_20:
   \   0000022A   BDF80A00           LDRH     R0,[SP, #+10]
   \   0000022E   10F47840           ANDS     R0,R0,#0xF800
   \   00000232   8246               MOV      R10,R0
    261              j = mcsb[8] & 0xF800;
   \   00000234   BDF81800           LDRH     R0,[SP, #+24]
   \   00000238   10F47840           ANDS     R0,R0,#0xF800
   \   0000023C   0400               MOVS     R4,R0
    262              if(i == j) printf("RT-RT problem: RxCW & TxCW have same RT addr.\n\r");
   \   0000023E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000242   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000244   A245               CMP      R10,R4
   \   00000246   03D1               BNE.N    ??bc_last_msg_console_21
   \   00000248   ........           LDR.W    R0,??DataTable2_16
   \   0000024C   ........           BL       printf
    263              // rule-out different word counts 
    264              i = mcsb[8] & 0x001F;
   \                     ??bc_last_msg_console_21:
   \   00000250   9DF81800           LDRB     R0,[SP, #+24]
   \   00000254   10F01F00           ANDS     R0,R0,#0x1F
   \   00000258   8246               MOV      R10,R0
    265              if(i != wordcount) printf("RT-RT problem: RxCW & TxCW word counts differ.\n\r");
   \   0000025A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000025E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000260   AA45               CMP      R10,R5
   \   00000262   03D0               BEQ.N    ??bc_last_msg_console_22
   \   00000264   ........           LDR.W    R0,??DataTable2_17
   \   00000268   ........           BL       printf
    266              printf("\n\r");
   \                     ??bc_last_msg_console_22:
   \   0000026C   C8A0               ADR.N    R0,??bc_last_msg_console_23  ;; 0x0A, 0x0D, 0x00, 0x00
   \   0000026E   ........           BL       printf
    267          
    268              i = mcsb[1];
   \   00000272   BDF80A00           LDRH     R0,[SP, #+10]
   \   00000276   8246               MOV      R10,R0
    269              printf("CW1: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   00000278   5246               MOV      R2,R10
   \   0000027A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000027C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000280   5FEA1A21           LSRS     R1,R10,#+8
   \   00000284   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000286   ........           LDR.W    R0,??DataTable2_18
   \   0000028A   ........           BL       printf
    270              printf(" = %02d-%1d-%02d-%02d     ", i>>11, (0x0400 & i)>>10, (0x03E0 & i)>>5, (0x001F & i));
   \   0000028E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000292   1AF01F00           ANDS     R0,R10,#0x1F
   \   00000296   0090               STR      R0,[SP, #+0]
   \   00000298   CAF34413           UBFX     R3,R10,#+5,#+5
   \   0000029C   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000029E   CAF38022           UBFX     R2,R10,#+10,#+1
   \   000002A2   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000002A4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000002A8   5FEADA21           LSRS     R1,R10,#+11
   \   000002AC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002AE   ........           LDR.W    R0,??DataTable2_19
   \   000002B2   ........           BL       printf
    271              if(bcast) printf("RSW not applicable\n\r");
   \   000002B6   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002B8   002F               CMP      R7,#+0
   \   000002BA   04D0               BEQ.N    ??bc_last_msg_console_24
   \   000002BC   ........           LDR.W    R0,??DataTable2_20
   \   000002C0   ........           BL       printf
   \   000002C4   69E0               B.N      ??bc_last_msg_console_25
    272              else {
    273                  i = mcsb[9];
   \                     ??bc_last_msg_console_24:
   \   000002C6   BDF81A00           LDRH     R0,[SP, #+26]
   \   000002CA   8246               MOV      R10,R0
    274                  printf("RxSW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000002CC   5246               MOV      R2,R10
   \   000002CE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002D0   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000002D4   5FEA1A21           LSRS     R1,R10,#+8
   \   000002D8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002DA   ........           LDR.W    R0,??DataTable2_22
   \   000002DE   ........           BL       printf
    275                  printf(" = RT%02d ", (char)(i>>11));
   \   000002E2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000002E6   5FEADA21           LSRS     R1,R10,#+11
   \   000002EA   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002EC   ........           LDR.W    R0,??DataTable2_23
   \   000002F0   ........           BL       printf
    276                  i &= 0x7FF;
   \   000002F4   5FEA4A5A           LSLS     R10,R10,#+21     ;; ZeroExtS R10,R10,#+21,#+21
   \   000002F8   5FEA5A5A           LSRS     R10,R10,#+21
    277                  if(!i) printf("CS\n\r");
   \   000002FC   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000300   BAF1000F           CMP      R10,#+0
   \   00000304   08D1               BNE.N    ??bc_last_msg_console_26
   \   00000306   ........           LDR.W    R0,??DataTable2_24
   \   0000030A   ........           BL       printf
   \   0000030E   44E0               B.N      ??bc_last_msg_console_25
   \                     ??bc_last_msg_console_6:
   \   00000310   54782000           DC8      "Tx "
   \   00000314   52782000           DC8      "Rx "
    278                  else {
    279                      if(i & (1<<10)) printf("ME ");
   \                     ??bc_last_msg_console_26:
   \   00000318   5FEA4A50           LSLS     R0,R10,#+21
   \   0000031C   02D5               BPL.N    ??bc_last_msg_console_27
   \   0000031E   D9A0               ADR.N    R0,??bc_last_msg_console_28  ;; "ME "
   \   00000320   ........           BL       printf
    280                      if(i & (1<<9)) printf("INST ");
   \                     ??bc_last_msg_console_27:
   \   00000324   5FEA8A50           LSLS     R0,R10,#+22
   \   00000328   03D5               BPL.N    ??bc_last_msg_console_29
   \   0000032A   ........           LDR.W    R0,??DataTable2_25
   \   0000032E   ........           BL       printf
    281                      if(i & (1<<8)) printf("SRQ ");
   \                     ??bc_last_msg_console_29:
   \   00000332   5FEACA50           LSLS     R0,R10,#+23
   \   00000336   03D5               BPL.N    ??bc_last_msg_console_30
   \   00000338   ........           LDR.W    R0,??DataTable2_26
   \   0000033C   ........           BL       printf
    282                      if(i & (7<<5)) printf("RSV ");
   \                     ??bc_last_msg_console_30:
   \   00000340   E021               MOVS     R1,#+224
   \   00000342   1AEA010F           TST      R10,R1
   \   00000346   03D0               BEQ.N    ??bc_last_msg_console_31
   \   00000348   ........           LDR.W    R0,??DataTable2_27
   \   0000034C   ........           BL       printf
    283                      if(i & 16) printf("BCR ");
   \                     ??bc_last_msg_console_31:
   \   00000350   5FEACA60           LSLS     R0,R10,#+27
   \   00000354   03D5               BPL.N    ??bc_last_msg_console_32
   \   00000356   ........           LDR.W    R0,??DataTable2_28
   \   0000035A   ........           BL       printf
    284                      if(i & 8) printf("BSY ");
   \                     ??bc_last_msg_console_32:
   \   0000035E   5FEA0A70           LSLS     R0,R10,#+28
   \   00000362   03D5               BPL.N    ??bc_last_msg_console_33
   \   00000364   ........           LDR.W    R0,??DataTable2_29
   \   00000368   ........           BL       printf
    285                      if(i & 4) printf("SSF ");
   \                     ??bc_last_msg_console_33:
   \   0000036C   5FEA4A70           LSLS     R0,R10,#+29
   \   00000370   03D5               BPL.N    ??bc_last_msg_console_34
   \   00000372   ........           LDR.W    R0,??DataTable2_30
   \   00000376   ........           BL       printf
    286                      if(i & 2) printf("DBCA ");
   \                     ??bc_last_msg_console_34:
   \   0000037A   5FEA8A70           LSLS     R0,R10,#+30
   \   0000037E   03D5               BPL.N    ??bc_last_msg_console_35
   \   00000380   ........           LDR.W    R0,??DataTable2_31
   \   00000384   ........           BL       printf
    287                      if(i & 1) printf("TF ");
   \                     ??bc_last_msg_console_35:
   \   00000388   5FEACA70           LSLS     R0,R10,#+31
   \   0000038C   02D5               BPL.N    ??bc_last_msg_console_36
   \   0000038E   CAA0               ADR.N    R0,??bc_last_msg_console_37  ;; "TF "
   \   00000390   ........           BL       printf
    288                      printf("\n\r");
   \                     ??bc_last_msg_console_36:
   \   00000394   7EA0               ADR.N    R0,??bc_last_msg_console_23  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000396   ........           BL       printf
    289                  }
    290              }
    291              i = mcsb[8];
   \                     ??bc_last_msg_console_25:
   \   0000039A   BDF81800           LDRH     R0,[SP, #+24]
   \   0000039E   8246               MOV      R10,R0
    292              printf("CW2: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000003A0   5246               MOV      R2,R10
   \   000003A2   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003A4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003A8   5FEA1A21           LSRS     R1,R10,#+8
   \   000003AC   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003AE   ........           LDR.W    R0,??DataTable2_32
   \   000003B2   ........           BL       printf
    293              printf(" = %02d-%1d-%02d-%02d     ", (char)(i>>11), (char)((0x0400 & i)>>10), (char)((0x03E0 & i)>>5), (char)((0x001F & i)));
   \   000003B6   1AF01F00           ANDS     R0,R10,#0x1F
   \   000003BA   0090               STR      R0,[SP, #+0]
   \   000003BC   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003C0   5FEA6A10           ASRS     R0,R10,#+5
   \   000003C4   10F01F03           ANDS     R3,R0,#0x1F
   \   000003C8   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003CC   5FEA9A20           LSRS     R0,R10,#+10
   \   000003D0   10F00102           ANDS     R2,R0,#0x1
   \   000003D4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003D8   5FEADA21           LSRS     R1,R10,#+11
   \   000003DC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000003DE   ........           LDR.W    R0,??DataTable2_19
   \   000003E2   ........           BL       printf
    294              i = mcsb[7];
   \   000003E6   BDF81600           LDRH     R0,[SP, #+22]
   \   000003EA   8246               MOV      R10,R0
    295              printf("TxSW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000003EC   5246               MOV      R2,R10
   \   000003EE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003F0   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003F4   5FEA1A21           LSRS     R1,R10,#+8
   \   000003F8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003FA   ........           LDR.W    R0,??DataTable2_33
   \   000003FE   ........           BL       printf
    296              printf(" = RT%02d ", (char)(i>>11));
   \   00000402   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000406   5FEADA21           LSRS     R1,R10,#+11
   \   0000040A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000040C   ........           LDR.W    R0,??DataTable2_23
   \   00000410   ........           BL       printf
    297              i &= 0x7FF;
   \   00000414   5FEA4A5A           LSLS     R10,R10,#+21     ;; ZeroExtS R10,R10,#+21,#+21
   \   00000418   5FEA5A5A           LSRS     R10,R10,#+21
    298              if(!i) printf("CS\n\n\r");
   \   0000041C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000420   BAF1000F           CMP      R10,#+0
   \   00000424   04D1               BNE.N    ??bc_last_msg_console_38
   \   00000426   ........           LDR.W    R0,??DataTable2_34
   \   0000042A   ........           BL       printf
   \   0000042E   40E0               B.N      ??bc_last_msg_console_39
    299              else {
    300                  if(i & (1<<10)) printf("ME ");
   \                     ??bc_last_msg_console_38:
   \   00000430   5FEA4A50           LSLS     R0,R10,#+21
   \   00000434   02D5               BPL.N    ??bc_last_msg_console_40
   \   00000436   93A0               ADR.N    R0,??bc_last_msg_console_28  ;; "ME "
   \   00000438   ........           BL       printf
    301                  if(i & (1<<9)) printf("INST ");
   \                     ??bc_last_msg_console_40:
   \   0000043C   5FEA8A50           LSLS     R0,R10,#+22
   \   00000440   03D5               BPL.N    ??bc_last_msg_console_41
   \   00000442   ........           LDR.W    R0,??DataTable2_25
   \   00000446   ........           BL       printf
    302                  if(i & (1<<8)) printf("SRQ ");
   \                     ??bc_last_msg_console_41:
   \   0000044A   5FEACA50           LSLS     R0,R10,#+23
   \   0000044E   03D5               BPL.N    ??bc_last_msg_console_42
   \   00000450   ........           LDR.W    R0,??DataTable2_26
   \   00000454   ........           BL       printf
    303                  if(i & (7<<5)) printf("RSV ");
   \                     ??bc_last_msg_console_42:
   \   00000458   E021               MOVS     R1,#+224
   \   0000045A   1AEA010F           TST      R10,R1
   \   0000045E   03D0               BEQ.N    ??bc_last_msg_console_43
   \   00000460   ........           LDR.W    R0,??DataTable2_27
   \   00000464   ........           BL       printf
    304                  if(i & 16) printf("BCR ");
   \                     ??bc_last_msg_console_43:
   \   00000468   5FEACA60           LSLS     R0,R10,#+27
   \   0000046C   03D5               BPL.N    ??bc_last_msg_console_44
   \   0000046E   ........           LDR.W    R0,??DataTable2_28
   \   00000472   ........           BL       printf
    305                  if(i & 8) printf("BSY ");
   \                     ??bc_last_msg_console_44:
   \   00000476   5FEA0A70           LSLS     R0,R10,#+28
   \   0000047A   03D5               BPL.N    ??bc_last_msg_console_45
   \   0000047C   ........           LDR.W    R0,??DataTable2_29
   \   00000480   ........           BL       printf
    306                  if(i & 4) printf("SSF ");
   \                     ??bc_last_msg_console_45:
   \   00000484   5FEA4A70           LSLS     R0,R10,#+29
   \   00000488   03D5               BPL.N    ??bc_last_msg_console_46
   \   0000048A   ........           LDR.W    R0,??DataTable2_30
   \   0000048E   ........           BL       printf
    307                  if(i & 2) printf("DBCA ");
   \                     ??bc_last_msg_console_46:
   \   00000492   5FEA8A70           LSLS     R0,R10,#+30
   \   00000496   03D5               BPL.N    ??bc_last_msg_console_47
   \   00000498   ........           LDR.W    R0,??DataTable2_31
   \   0000049C   ........           BL       printf
    308                  if(i & 1) printf("TF ");
   \                     ??bc_last_msg_console_47:
   \   000004A0   5FEACA70           LSLS     R0,R10,#+31
   \   000004A4   02D5               BPL.N    ??bc_last_msg_console_48
   \   000004A6   84A0               ADR.N    R0,??bc_last_msg_console_37  ;; "TF "
   \   000004A8   ........           BL       printf
    309                  printf("\n\n\r");
   \                     ??bc_last_msg_console_48:
   \   000004AC   24A0               ADR.N    R0,??bc_last_msg_console_14+0x4  ;; "\n\n\r"
   \   000004AE   ........           BL       printf
    310              }
    311              
    312              // read Condition Code & General Purpose Flag register
    313          
    314          	j = pH6130->BC_CCODE_AND_GPF_REG;
   \                     ??bc_last_msg_console_39:
   \   000004B2   ........           LDR.W    R0,??DataTable2_3
   \   000004B6   0068               LDR      R0,[R0, #+0]
   \   000004B8   B0F86E00           LDRH     R0,[R0, #+110]
   \   000004BC   0400               MOVS     R4,R0
   \   000004BE   AAE0               B.N      ??bc_last_msg_console_49
    315          
    316            }       // end rtrt
    317                  
    318                  else { 	// not rtrt
    319          
    320          	    // display Command Word  
    321          	    i = mcsb[1];
   \                     ??bc_last_msg_console_15:
   \   000004C0   BDF80A00           LDRH     R0,[SP, #+10]
   \   000004C4   8246               MOV      R10,R0
    322          	    printf("CW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000004C6   5246               MOV      R2,R10
   \   000004C8   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004CA   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004CE   5FEA1A21           LSRS     R1,R10,#+8
   \   000004D2   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000004D4   ........           LDR.W    R0,??DataTable3_1
   \   000004D8   ........           BL       printf
    323          	    printf(" = %02d-%1d-%02d-%02d     ", (char)(i>>11), (char)((0x0400 & i)>>10), (char)((0x03E0 & i)>>5), (char)((0x001F & i)));
   \   000004DC   1AF01F00           ANDS     R0,R10,#0x1F
   \   000004E0   0090               STR      R0,[SP, #+0]
   \   000004E2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004E6   5FEA6A10           ASRS     R0,R10,#+5
   \   000004EA   10F01F03           ANDS     R3,R0,#0x1F
   \   000004EE   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004F2   5FEA9A20           LSRS     R0,R10,#+10
   \   000004F6   10F00102           ANDS     R2,R0,#0x1
   \   000004FA   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004FE   5FEADA21           LSRS     R1,R10,#+11
   \   00000502   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000504   ........           LDR.W    R0,??DataTable2_19
   \   00000508   ........           BL       printf
    324                      
    325                      // read Condition Code & General Purpose Flag register
    326                      
    327          
    328          		j = pH6130->BC_CCODE_AND_GPF_REG;
   \   0000050C   ........           LDR.W    R0,??DataTable2_3
   \   00000510   0068               LDR      R0,[R0, #+0]
   \   00000512   B0F86E00           LDRH     R0,[R0, #+110]
   \   00000516   0400               MOVS     R4,R0
    329          
    330                          
    331          	    // check broadcast 
    332          	    if (bcast) printf("SW not applicable\n\n\r");
   \   00000518   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000051A   002F               CMP      R7,#+0
   \   0000051C   04D0               BEQ.N    ??bc_last_msg_console_50
   \   0000051E   ........           LDR.W    R0,??DataTable3_2
   \   00000522   ........           BL       printf
   \   00000526   76E0               B.N      ??bc_last_msg_console_49
    333          
    334          	    else {
    335          		// not broadcast, check if No Response timeout 
    336          		if(j & (1<<8)) {
   \                     ??bc_last_msg_console_50:
   \   00000528   E005               LSLS     R0,R4,#+23
   \   0000052A   0BD5               BPL.N    ??bc_last_msg_console_51
    337          		    // normal subaddress msg without RT response, excl rt-rt                   
    338          		    printf("SW not received\n\n\r");
   \   0000052C   ........           LDR.W    R0,??DataTable3_3
   \   00000530   ........           BL       printf
    339          		    nr = 1;
   \   00000534   0120               MOVS     R0,#+1
   \   00000536   8DF80400           STRB     R0,[SP, #+4]
   \   0000053A   6CE0               B.N      ??bc_last_msg_console_49
   \                     ??bc_last_msg_console_14:
   \   0000053C   73000000           DC8      "s",0x0,0x0
   \   00000540   0A0A0D00           DC8      "\n\n\r"
    340          		}
    341          		else {
    342          		    // normal subaddress msg with RT response, excl rt-rt 
    343          		    i = mcsb[7];
   \                     ??bc_last_msg_console_51:
   \   00000544   BDF81600           LDRH     R0,[SP, #+22]
   \   00000548   8246               MOV      R10,R0
    344          		    // decode received RT status 
    345          		    printf("SW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   0000054A   5246               MOV      R2,R10
   \   0000054C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000054E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000552   5FEA1A21           LSRS     R1,R10,#+8
   \   00000556   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000558   ........           LDR.W    R0,??DataTable3_4
   \   0000055C   ........           BL       printf
    346          		    printf(" = RT%02d ",i>>11);
   \   00000560   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000564   5FEADA21           LSRS     R1,R10,#+11
   \   00000568   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000056A   ........           LDR.W    R0,??DataTable2_23
   \   0000056E   ........           BL       printf
    347          		    i &= 0x7FF;
   \   00000572   5FEA4A5A           LSLS     R10,R10,#+21     ;; ZeroExtS R10,R10,#+21,#+21
   \   00000576   5FEA5A5A           LSRS     R10,R10,#+21
    348          		    if(!i) printf("CS\n\n\r");
   \   0000057A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000057E   BAF1000F           CMP      R10,#+0
   \   00000582   07D1               BNE.N    ??bc_last_msg_console_52
   \   00000584   ........           LDR.W    R0,??DataTable2_34
   \   00000588   ........           BL       printf
   \   0000058C   43E0               B.N      ??bc_last_msg_console_49
   \   0000058E   00BF               Nop      
   \                     ??bc_last_msg_console_23:
   \   00000590   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00
    349          		    else {
    350          			if(i & (1<<10)) printf("ME ");
   \                     ??bc_last_msg_console_52:
   \   00000594   5FEA4A50           LSLS     R0,R10,#+21
   \   00000598   02D5               BPL.N    ??bc_last_msg_console_53
   \   0000059A   3AA0               ADR.N    R0,??bc_last_msg_console_28  ;; "ME "
   \   0000059C   ........           BL       printf
    351          			if(i & (1<<9)) printf("INST ");
   \                     ??bc_last_msg_console_53:
   \   000005A0   5FEA8A50           LSLS     R0,R10,#+22
   \   000005A4   03D5               BPL.N    ??bc_last_msg_console_54
   \   000005A6   ........           LDR.W    R0,??DataTable2_25
   \   000005AA   ........           BL       printf
    352          			if(i & (1<<8)) printf("SRQ ");
   \                     ??bc_last_msg_console_54:
   \   000005AE   5FEACA50           LSLS     R0,R10,#+23
   \   000005B2   03D5               BPL.N    ??bc_last_msg_console_55
   \   000005B4   ........           LDR.W    R0,??DataTable2_26
   \   000005B8   ........           BL       printf
    353          			if(i & (7<<5)) printf("RSV ");
   \                     ??bc_last_msg_console_55:
   \   000005BC   E021               MOVS     R1,#+224
   \   000005BE   1AEA010F           TST      R10,R1
   \   000005C2   03D0               BEQ.N    ??bc_last_msg_console_56
   \   000005C4   ........           LDR.W    R0,??DataTable2_27
   \   000005C8   ........           BL       printf
    354          			if(i & 16) printf("BCR ");
   \                     ??bc_last_msg_console_56:
   \   000005CC   5FEACA60           LSLS     R0,R10,#+27
   \   000005D0   03D5               BPL.N    ??bc_last_msg_console_57
   \   000005D2   ........           LDR.W    R0,??DataTable2_28
   \   000005D6   ........           BL       printf
    355          			if(i & 8) printf("BSY ");
   \                     ??bc_last_msg_console_57:
   \   000005DA   5FEA0A70           LSLS     R0,R10,#+28
   \   000005DE   03D5               BPL.N    ??bc_last_msg_console_58
   \   000005E0   ........           LDR.W    R0,??DataTable2_29
   \   000005E4   ........           BL       printf
    356          			if(i & 4) printf("SSF ");
   \                     ??bc_last_msg_console_58:
   \   000005E8   5FEA4A70           LSLS     R0,R10,#+29
   \   000005EC   03D5               BPL.N    ??bc_last_msg_console_59
   \   000005EE   ........           LDR.W    R0,??DataTable2_30
   \   000005F2   ........           BL       printf
    357          			if(i & 2) printf("DBCA ");
   \                     ??bc_last_msg_console_59:
   \   000005F6   5FEA8A70           LSLS     R0,R10,#+30
   \   000005FA   03D5               BPL.N    ??bc_last_msg_console_60
   \   000005FC   ........           LDR.W    R0,??DataTable2_31
   \   00000600   ........           BL       printf
    358          			if(i & 1) printf("TF ");
   \                     ??bc_last_msg_console_60:
   \   00000604   5FEACA70           LSLS     R0,R10,#+31
   \   00000608   02D5               BPL.N    ??bc_last_msg_console_61
   \   0000060A   2BA0               ADR.N    R0,??bc_last_msg_console_37  ;; "TF "
   \   0000060C   ........           BL       printf
    359          		        printf("\n\n\r");	
   \                     ??bc_last_msg_console_61:
   \   00000610   C3A0               ADR.N    R0,??bc_last_msg_console_62  ;; "\n\n\r"
   \   00000612   ........           BL       printf
    360                              }
    361                          }
    362                      }
    363          	}	// end "not rtrt"
    364          
    365          	// BC Control Word for message 
    366          	i = mcsb[0];
   \                     ??bc_last_msg_console_49:
   \   00000616   BDF80800           LDRH     R0,[SP, #+8]
   \   0000061A   8246               MOV      R10,R0
    367          	printf("BC Control Word: 0x%.2X%.2X  \n\r", (char)(i>>8), (char)i);
   \   0000061C   5246               MOV      R2,R10
   \   0000061E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000620   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000624   5FEA1A21           LSRS     R1,R10,#+8
   \   00000628   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000062A   ........           LDR.W    R0,??DataTable3_5
   \   0000062E   ........           BL       printf
    368          	if(i & (1<<15)) printf("MC17TTL ");
   \   00000632   5FEA0A40           LSLS     R0,R10,#+16
   \   00000636   03D5               BPL.N    ??bc_last_msg_console_63
   \   00000638   ........           LDR.W    R0,??DataTable4
   \   0000063C   ........           BL       printf
    369          	if(i & (1<<14)) printf("MEmask ");
   \                     ??bc_last_msg_console_63:
   \   00000640   5FEA4A40           LSLS     R0,R10,#+17
   \   00000644   03D5               BPL.N    ??bc_last_msg_console_64
   \   00000646   ........           LDR.W    R0,??DataTable4_1
   \   0000064A   ........           BL       printf
    370          	if(i & (1<<13)) printf("SRQmask ");
   \                     ??bc_last_msg_console_64:
   \   0000064E   5FEA8A40           LSLS     R0,R10,#+18
   \   00000652   03D5               BPL.N    ??bc_last_msg_console_65
   \   00000654   ........           LDR.W    R0,??DataTable4_2
   \   00000658   ........           BL       printf
    371          	if(i & (1<<12)) printf("BSYmask ");
   \                     ??bc_last_msg_console_65:
   \   0000065C   5FEACA40           LSLS     R0,R10,#+19
   \   00000660   03D5               BPL.N    ??bc_last_msg_console_66
   \   00000662   ........           LDR.W    R0,??DataTable4_3
   \   00000666   ........           BL       printf
    372          	if(i & (1<<11)) printf("SSFmask ");
   \                     ??bc_last_msg_console_66:
   \   0000066A   5FEA0A50           LSLS     R0,R10,#+20
   \   0000066E   03D5               BPL.N    ??bc_last_msg_console_67
   \   00000670   ........           LDR.W    R0,??DataTable4_4
   \   00000674   ........           BL       printf
    373          	if(i & (1<<10)) printf("TFmask ");
   \                     ??bc_last_msg_console_67:
   \   00000678   5FEA4A50           LSLS     R0,R10,#+21
   \   0000067C   06D5               BPL.N    ??bc_last_msg_console_68
   \   0000067E   ........           LDR.W    R0,??DataTable4_5
   \   00000682   01E0               B.N      ??bc_last_msg_console_69
   \                     ??bc_last_msg_console_28:
   \   00000684   4D452000           DC8      "ME "
   \                     ??bc_last_msg_console_69:
   \   00000688   ........           BL       printf
    374          	if(i & (1<<9)) printf("RSVmask ");
   \                     ??bc_last_msg_console_68:
   \   0000068C   5FEA8A50           LSLS     R0,R10,#+22
   \   00000690   03D5               BPL.N    ??bc_last_msg_console_70
   \   00000692   ........           LDR.W    R0,??DataTable4_6
   \   00000696   ........           BL       printf
    375          	if(i & (1<<8)) printf("RetryEna ");
   \                     ??bc_last_msg_console_70:
   \   0000069A   5FEACA50           LSLS     R0,R10,#+23
   \   0000069E   03D5               BPL.N    ??bc_last_msg_console_71
   \   000006A0   ........           LDR.W    R0,??DataTable4_7
   \   000006A4   ........           BL       printf
    376          	if(i & (1<<7)) printf("UseBusA ");
   \                     ??bc_last_msg_console_71:
   \   000006A8   5FEA0A60           LSLS     R0,R10,#+24
   \   000006AC   06D5               BPL.N    ??bc_last_msg_console_72
   \   000006AE   ........           LDR.W    R0,??DataTable4_8
   \   000006B2   ........           BL       printf
   \   000006B6   05E0               B.N      ??bc_last_msg_console_73
   \                     ??bc_last_msg_console_37:
   \   000006B8   54462000           DC8      "TF "
    377          	else           printf("UseBusB ");
   \                     ??bc_last_msg_console_72:
   \   000006BC   ........           LDR.W    R0,??DataTable4_9
   \   000006C0   ........           BL       printf
    378          	if(i & (1<<6)) printf("SelfTest ");
   \                     ??bc_last_msg_console_73:
   \   000006C4   5FEA4A60           LSLS     R0,R10,#+25
   \   000006C8   03D5               BPL.N    ??bc_last_msg_console_74
   \   000006CA   ........           LDR.W    R0,??DataTable4_10
   \   000006CE   ........           BL       printf
    379          	if(i & (1<<5)) printf("maskBCR ");
   \                     ??bc_last_msg_console_74:
   \   000006D2   5FEA8A60           LSLS     R0,R10,#+26
   \   000006D6   03D5               BPL.N    ??bc_last_msg_console_75
   \   000006D8   ........           LDR.W    R0,??DataTable4_11
   \   000006DC   ........           BL       printf
    380          	if(i & (1<<4)) printf("EOMirq ");
   \                     ??bc_last_msg_console_75:
   \   000006E0   5FEACA60           LSLS     R0,R10,#+27
   \   000006E4   03D5               BPL.N    ??bc_last_msg_console_76
   \   000006E6   ........           LDR.W    R0,??DataTable4_12
   \   000006EA   ........           BL       printf
    381          	if((i & 7) == 0) printf("NonBcstSA ");
   \                     ??bc_last_msg_console_76:
   \   000006EE   0721               MOVS     R1,#+7
   \   000006F0   1AEA010F           TST      R10,R1
   \   000006F4   03D1               BNE.N    ??bc_last_msg_console_77
   \   000006F6   ........           LDR.W    R0,??DataTable4_13
   \   000006FA   ........           BL       printf
    382          	if((i & 7) == 1) printf("RTRT ");
   \                     ??bc_last_msg_console_77:
   \   000006FE   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000702   1AF00700           ANDS     R0,R10,#0x7
   \   00000706   0128               CMP      R0,#+1
   \   00000708   03D1               BNE.N    ??bc_last_msg_console_78
   \   0000070A   ........           LDR.W    R0,??DataTable4_14
   \   0000070E   ........           BL       printf
    383          	if((i & 7) == 2) printf("BcstSA ");
   \                     ??bc_last_msg_console_78:
   \   00000712   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000716   1AF00700           ANDS     R0,R10,#0x7
   \   0000071A   0228               CMP      R0,#+2
   \   0000071C   03D1               BNE.N    ??bc_last_msg_console_79
   \   0000071E   ........           LDR.W    R0,??DataTable4_15
   \   00000722   ........           BL       printf
    384          	if((i & 7) == 3) printf("BcstRTRT ");
   \                     ??bc_last_msg_console_79:
   \   00000726   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000072A   1AF00700           ANDS     R0,R10,#0x7
   \   0000072E   0328               CMP      R0,#+3
   \   00000730   03D1               BNE.N    ??bc_last_msg_console_80
   \   00000732   ........           LDR.W    R0,??DataTable4_16
   \   00000736   ........           BL       printf
    385          	if((i & 7) == 4) printf("MC ");
   \                     ??bc_last_msg_console_80:
   \   0000073A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000073E   1AF00700           ANDS     R0,R10,#0x7
   \   00000742   0428               CMP      R0,#+4
   \   00000744   02D1               BNE.N    ??bc_last_msg_console_81
   \   00000746   B5A0               ADR.N    R0,??bc_last_msg_console_82  ;; "MC "
   \   00000748   ........           BL       printf
    386          	if((i & 7) == 5) printf("RTRT_MC?? ");
   \                     ??bc_last_msg_console_81:
   \   0000074C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000750   1AF00700           ANDS     R0,R10,#0x7
   \   00000754   0528               CMP      R0,#+5
   \   00000756   03D1               BNE.N    ??bc_last_msg_console_83
   \   00000758   ........           LDR.W    R0,??DataTable4_17
   \   0000075C   ........           BL       printf
    387          	if((i & 7) == 6) printf("BcstMC ");
   \                     ??bc_last_msg_console_83:
   \   00000760   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000764   1AF00700           ANDS     R0,R10,#0x7
   \   00000768   0628               CMP      R0,#+6
   \   0000076A   03D1               BNE.N    ??bc_last_msg_console_84
   \   0000076C   ........           LDR.W    R0,??DataTable4_18
   \   00000770   ........           BL       printf
    388          	if((i & 7) == 7) printf("BcstRTRT_MC?? ");
   \                     ??bc_last_msg_console_84:
   \   00000774   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000778   1AF00700           ANDS     R0,R10,#0x7
   \   0000077C   0728               CMP      R0,#+7
   \   0000077E   03D1               BNE.N    ??bc_last_msg_console_85
   \   00000780   ........           LDR.W    R0,??DataTable4_19
   \   00000784   ........           BL       printf
    389          	printf("\n\r");
   \                     ??bc_last_msg_console_85:
   \   00000788   A5A0               ADR.N    R0,??bc_last_msg_console_82+0x4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   0000078A   ........           BL       printf
    390          
    391          	k = (i & 2) >> 1;
   \   0000078E   CAF34000           UBFX     R0,R10,#+1,#+1
   \   00000792   ADF80600           STRH     R0,[SP, #+6]
    392          	// Block Control broadcast format bit 1 should agree w/ CW1 
    393          	if(k != bcast) printf("The Cmd Word and Control Word bit 1 disagree on broadcast format.\n\r");
   \   00000796   BDF80600           LDRH     R0,[SP, #+6]
   \   0000079A   3900               MOVS     R1,R7
   \   0000079C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000079E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000007A0   8842               CMP      R0,R1
   \   000007A2   03D0               BEQ.N    ??bc_last_msg_console_86
   \   000007A4   ........           LDR.W    R0,??DataTable4_20
   \   000007A8   ........           BL       printf
    394          	k = (i & 4) >> 2;
   \                     ??bc_last_msg_console_86:
   \   000007AC   CAF38000           UBFX     R0,R10,#+2,#+1
   \   000007B0   ADF80600           STRH     R0,[SP, #+6]
    395          	// Block Control mode code format bit 2 should agree w/ CW1 
    396          	if(k != mcode) printf("The Cmd Word and Control Word bit 2 disagree on mode code format.\n\r");
   \   000007B4   BDF80600           LDRH     R0,[SP, #+6]
   \   000007B8   5946               MOV      R1,R11
   \   000007BA   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000007BC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000007BE   8842               CMP      R0,R1
   \   000007C0   03D0               BEQ.N    ??bc_last_msg_console_87
   \   000007C2   ........           LDR.W    R0,??DataTable4_21
   \   000007C6   ........           BL       printf
    397          	printf("\n\r");
   \                     ??bc_last_msg_console_87:
   \   000007CA   95A0               ADR.N    R0,??bc_last_msg_console_82+0x4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   000007CC   ........           BL       printf
    398          
    399          
    400          	// Block Status Word 
    401          	i = mcsb[5];
   \   000007D0   BDF81200           LDRH     R0,[SP, #+18]
   \   000007D4   8246               MOV      R10,R0
    402          	printf("Block Status Word: 0x%.2X%.2X \n\r", (char)(i>>8), (char)i);
   \   000007D6   5246               MOV      R2,R10
   \   000007D8   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000007DA   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000007DE   5FEA1A21           LSRS     R1,R10,#+8
   \   000007E2   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000007E4   ........           LDR.W    R0,??DataTable4_22
   \   000007E8   ........           BL       printf
    403          	if(i & (1<<14)) printf("SOM  ");
   \   000007EC   5FEA4A40           LSLS     R0,R10,#+17
   \   000007F0   03D5               BPL.N    ??bc_last_msg_console_88
   \   000007F2   ........           LDR.W    R0,??DataTable4_23
   \   000007F6   ........           BL       printf
    404          	if(i & (1<<15)) printf("EOM  ");
   \                     ??bc_last_msg_console_88:
   \   000007FA   5FEA0A40           LSLS     R0,R10,#+16
   \   000007FE   03D5               BPL.N    ??bc_last_msg_console_89
   \   00000800   ........           LDR.W    R0,??DataTable4_24
   \   00000804   ........           BL       printf
    405          	if(i & (1<<13)) printf("BusB  ");
   \                     ??bc_last_msg_console_89:
   \   00000808   5FEA8A40           LSLS     R0,R10,#+18
   \   0000080C   04D5               BPL.N    ??bc_last_msg_console_90
   \   0000080E   ........           LDR.W    R0,??DataTable4_25
   \   00000812   ........           BL       printf
   \   00000816   03E0               B.N      ??bc_last_msg_console_91
    406          	else printf("Bus A  ");
   \                     ??bc_last_msg_console_90:
   \   00000818   ........           LDR.W    R0,??DataTable4_26
   \   0000081C   ........           BL       printf
    407          	if(i & (1<<12)) printf("ErrOcc ");
   \                     ??bc_last_msg_console_91:
   \   00000820   5FEACA40           LSLS     R0,R10,#+19
   \   00000824   03D5               BPL.N    ??bc_last_msg_console_92
   \   00000826   ........           LDR.W    R0,??DataTable4_28
   \   0000082A   ........           BL       printf
    408          	if(i & (1<<11)) printf("SSet  ");
   \                     ??bc_last_msg_console_92:
   \   0000082E   5FEA0A50           LSLS     R0,R10,#+20
   \   00000832   03D5               BPL.N    ??bc_last_msg_console_93
   \   00000834   ........           LDR.W    R0,??DataTable4_29
   \   00000838   ........           BL       printf
    409          	if(i & (1<<9)) printf("NoResp  ");
   \                     ??bc_last_msg_console_93:
   \   0000083C   5FEA8A50           LSLS     R0,R10,#+22
   \   00000840   03D5               BPL.N    ??bc_last_msg_console_94
   \   00000842   ........           LDR.W    R0,??DataTable4_30
   \   00000846   ........           BL       printf
    410          	if(i & (1<<8)) printf("LpBk  ");
   \                     ??bc_last_msg_console_94:
   \   0000084A   5FEACA50           LSLS     R0,R10,#+23
   \   0000084E   03D5               BPL.N    ??bc_last_msg_console_95
   \   00000850   ........           LDR.W    R0,??DataTable4_31
   \   00000854   ........           BL       printf
    411          	if(i & (1<<6)) printf("2retry  ");
   \                     ??bc_last_msg_console_95:
   \   00000858   5FEA4A60           LSLS     R0,R10,#+25
   \   0000085C   04D5               BPL.N    ??bc_last_msg_console_96
   \   0000085E   ........           LDR.W    R0,??DataTable4_32
   \   00000862   ........           BL       printf
   \   00000866   06E0               B.N      ??bc_last_msg_console_97
    412          	else if(i & (1<<5)) printf("1retry  ");
   \                     ??bc_last_msg_console_96:
   \   00000868   5FEA8A60           LSLS     R0,R10,#+26
   \   0000086C   03D5               BPL.N    ??bc_last_msg_console_97
   \   0000086E   ........           LDR.W    R0,??DataTable4_33
   \   00000872   ........           BL       printf
    413          	if(i & (1<<4)) printf("GDB  ");
   \                     ??bc_last_msg_console_97:
   \   00000876   5FEACA60           LSLS     R0,R10,#+27
   \   0000087A   03D5               BPL.N    ??bc_last_msg_console_98
   \   0000087C   ........           LDR.W    R0,??DataTable4_34
   \   00000880   ........           BL       printf
    414          	if(i & (1<<3)) printf("WAG  ");
   \                     ??bc_last_msg_console_98:
   \   00000884   5FEA0A70           LSLS     R0,R10,#+28
   \   00000888   03D5               BPL.N    ??bc_last_msg_console_99
   \   0000088A   ........           LDR.W    R0,??DataTable4_35
   \   0000088E   ........           BL       printf
    415          	if(i & (1<<2)) printf("WdCt  ");
   \                     ??bc_last_msg_console_99:
   \   00000892   5FEA4A70           LSLS     R0,R10,#+29
   \   00000896   03D5               BPL.N    ??bc_last_msg_console_100
   \   00000898   ........           LDR.W    R0,??DataTable4_36
   \   0000089C   ........           BL       printf
    416          	if(i & (1<<1)) printf("SyncErr  ");
   \                     ??bc_last_msg_console_100:
   \   000008A0   5FEA8A70           LSLS     R0,R10,#+30
   \   000008A4   03D5               BPL.N    ??bc_last_msg_console_101
   \   000008A6   ........           LDR.W    R0,??DataTable4_37
   \   000008AA   ........           BL       printf
    417          	if(i & (1<<0)) printf("InvWd  ");
   \                     ??bc_last_msg_console_101:
   \   000008AE   5FEACA70           LSLS     R0,R10,#+31
   \   000008B2   03D5               BPL.N    ??bc_last_msg_console_102
   \   000008B4   ........           LDR.W    R0,??DataTable4_38
   \   000008B8   ........           BL       printf
    418          	if(i & (1<<10)) printf("FmtErr  ");
   \                     ??bc_last_msg_console_102:
   \   000008BC   5FEA4A50           LSLS     R0,R10,#+21
   \   000008C0   03D5               BPL.N    ??bc_last_msg_console_103
   \   000008C2   ........           LDR.W    R0,??DataTable4_39
   \   000008C6   ........           BL       printf
    419          	if(i & (1<<7)) printf("MSSet  ");
   \                     ??bc_last_msg_console_103:
   \   000008CA   5FEA0A60           LSLS     R0,R10,#+24
   \   000008CE   03D5               BPL.N    ??bc_last_msg_console_104
   \   000008D0   ........           LDR.W    R0,??DataTable4_40
   \   000008D4   ........           BL       printf
    420          	printf("\n\n\r");
   \                     ??bc_last_msg_console_104:
   \   000008D8   11A0               ADR.N    R0,??bc_last_msg_console_62  ;; "\n\n\r"
   \   000008DA   ........           BL       printf
    421          
    422          	// j = Condition Code Register value
    423          	printf("Condition Code Register: 0x%.2X%.2X\n\r", (char)(j>>8), (char)j);
   \   000008DE   2200               MOVS     R2,R4
   \   000008E0   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000008E2   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000008E4   210A               LSRS     R1,R4,#+8
   \   000008E6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000008E8   ........           LDR.W    R0,??DataTable4_41
   \   000008EC   ........           BL       printf
    424          	if(j==0x0000) printf("BC Stopped: No Condition Codes or Gen Purpose Flags Are Set.");
   \   000008F0   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000008F2   002C               CMP      R4,#+0
   \   000008F4   04D1               BNE.N    ??bc_last_msg_console_105
   \   000008F6   ........           LDR.W    R0,??DataTable4_42
   \   000008FA   ........           BL       printf
   \   000008FE   15E0               B.N      ??bc_last_msg_console_106
    425          	else if(j==0x8000) printf("BC Running: No Condition Codes or Gen Purpose Flags Are Set.");
   \                     ??bc_last_msg_console_105:
   \   00000900   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000902   B4F5004F           CMP      R4,#+32768
   \   00000906   04D1               BNE.N    ??bc_last_msg_console_107
   \   00000908   ........           LDR.W    R0,??DataTable4_43
   \   0000090C   ........           BL       printf
   \   00000910   0CE0               B.N      ??bc_last_msg_console_106
    426          	else if(j & (1<<15)) printf("BC Is Running.\n\r");
   \                     ??bc_last_msg_console_107:
   \   00000912   2004               LSLS     R0,R4,#+16
   \   00000914   06D5               BPL.N    ??bc_last_msg_console_108
   \   00000916   ........           LDR.W    R0,??DataTable4_44
   \   0000091A   ........           BL       printf
   \   0000091E   05E0               B.N      ??bc_last_msg_console_106
   \                     ??bc_last_msg_console_62:
   \   00000920   0A0A0D00           DC8      "\n\n\r"
    427          	else printf("BC Not Running.\n\r");
   \                     ??bc_last_msg_console_108:
   \   00000924   ........           LDR.W    R0,??DataTable4_45
   \   00000928   ........           BL       printf
    428          	if(j & (1<<14)) printf("2Retries  ");
   \                     ??bc_last_msg_console_106:
   \   0000092C   6004               LSLS     R0,R4,#+17
   \   0000092E   03D5               BPL.N    ??bc_last_msg_console_109
   \   00000930   ........           LDR.W    R0,??DataTable5_2
   \   00000934   ........           BL       printf
    429          	if(j & (1<<13)) printf("1Retry  ");
   \                     ??bc_last_msg_console_109:
   \   00000938   A004               LSLS     R0,R4,#+18
   \   0000093A   03D5               BPL.N    ??bc_last_msg_console_110
   \   0000093C   ........           LDR.W    R0,??DataTable5_3
   \   00000940   ........           BL       printf
    430          	if(j & (1<<12)) printf("BadMsg  ");
   \                     ??bc_last_msg_console_110:
   \   00000944   E004               LSLS     R0,R4,#+19
   \   00000946   03D5               BPL.N    ??bc_last_msg_console_111
   \   00000948   ........           LDR.W    R0,??DataTable5_4
   \   0000094C   ........           BL       printf
    431          	if(j & (1<<10)) printf("GdDataBlk  ");
   \                     ??bc_last_msg_console_111:
   \   00000950   6005               LSLS     R0,R4,#+21
   \   00000952   03D5               BPL.N    ??bc_last_msg_console_112
   \   00000954   ........           LDR.W    R0,??DataTable5_5
   \   00000958   ........           BL       printf
    432          	if(j & (1<<9)) printf("FmtErr  ");
   \                     ??bc_last_msg_console_112:
   \   0000095C   A005               LSLS     R0,R4,#+22
   \   0000095E   03D5               BPL.N    ??bc_last_msg_console_113
   \   00000960   ........           LDR.W    R0,??DataTable4_39
   \   00000964   ........           BL       printf
    433          	if(j & (1<<8)) printf("NoResp  ");
   \                     ??bc_last_msg_console_113:
   \   00000968   E005               LSLS     R0,R4,#+23
   \   0000096A   03D5               BPL.N    ??bc_last_msg_console_114
   \   0000096C   ........           LDR.W    R0,??DataTable4_30
   \   00000970   ........           BL       printf
    434          	if(j & (1<<7)) printf("GPF7  ");
   \                     ??bc_last_msg_console_114:
   \   00000974   2006               LSLS     R0,R4,#+24
   \   00000976   03D5               BPL.N    ??bc_last_msg_console_115
   \   00000978   ........           LDR.W    R0,??DataTable5_6
   \   0000097C   ........           BL       printf
    435          	if(j & (1<<6)) printf("GPF6  ");
   \                     ??bc_last_msg_console_115:
   \   00000980   6006               LSLS     R0,R4,#+25
   \   00000982   03D5               BPL.N    ??bc_last_msg_console_116
   \   00000984   ........           LDR.W    R0,??DataTable5_7
   \   00000988   ........           BL       printf
    436          	if(j & (1<<5)) printf("GPF5  ");
   \                     ??bc_last_msg_console_116:
   \   0000098C   A006               LSLS     R0,R4,#+26
   \   0000098E   03D5               BPL.N    ??bc_last_msg_console_117
   \   00000990   ........           LDR.W    R0,??DataTable5_8
   \   00000994   ........           BL       printf
    437          	if(j & (1<<4)) printf("GPF4  ");
   \                     ??bc_last_msg_console_117:
   \   00000998   E006               LSLS     R0,R4,#+27
   \   0000099A   03D5               BPL.N    ??bc_last_msg_console_118
   \   0000099C   ........           LDR.W    R0,??DataTable5_9
   \   000009A0   ........           BL       printf
    438          	if(j & (1<<3)) printf("GPF3  ");
   \                     ??bc_last_msg_console_118:
   \   000009A4   2007               LSLS     R0,R4,#+28
   \   000009A6   03D5               BPL.N    ??bc_last_msg_console_119
   \   000009A8   ........           LDR.W    R0,??DataTable5_10
   \   000009AC   ........           BL       printf
    439          	if(j & (1<<2)) printf("GPF2  ");
   \                     ??bc_last_msg_console_119:
   \   000009B0   6007               LSLS     R0,R4,#+29
   \   000009B2   03D5               BPL.N    ??bc_last_msg_console_120
   \   000009B4   ........           LDR.W    R0,??DataTable5_11
   \   000009B8   ........           BL       printf
    440          	if(j & (1<<1)) printf("LT-GPF1  ");
   \                     ??bc_last_msg_console_120:
   \   000009BC   A007               LSLS     R0,R4,#+30
   \   000009BE   03D5               BPL.N    ??bc_last_msg_console_121
   \   000009C0   ........           LDR.W    R0,??DataTable5_12
   \   000009C4   ........           BL       printf
    441          	if(j & (1<<0)) printf("EQ-GPF0  ");
   \                     ??bc_last_msg_console_121:
   \   000009C8   E007               LSLS     R0,R4,#+31
   \   000009CA   03D5               BPL.N    ??bc_last_msg_console_122
   \   000009CC   ........           LDR.W    R0,??DataTable5_13
   \   000009D0   ........           BL       printf
    442          	if(j & (1<<11)) printf("MSSet  ");
   \                     ??bc_last_msg_console_122:
   \   000009D4   2005               LSLS     R0,R4,#+20
   \   000009D6   03D5               BPL.N    ??bc_last_msg_console_123
   \   000009D8   ........           LDR.W    R0,??DataTable4_40
   \   000009DC   ........           BL       printf
    443          	printf("\n\n\r");
   \                     ??bc_last_msg_console_123:
   \   000009E0   ....               ADR.N    R0,??DataTable2_15  ;; "\n\n\r"
   \   000009E2   ........           BL       printf
    444          
    445          	// if not a mode command, read data block then display it
    446          	if(!(mtype & 4)) {
   \   000009E6   9DF80500           LDRB     R0,[SP, #+5]
   \   000009EA   4007               LSLS     R0,R0,#+29
   \   000009EC   00F1DB80           BMI.W    ??bc_last_msg_console_124
    447          
    448          	    // rule out tx command with no response 
    449          	    if(tx & nr & !rtrt) printf("No RT response, no received data\n\n\r");
   \   000009F0   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009F2   002E               CMP      R6,#+0
   \   000009F4   01D1               BNE.N    ??bc_last_msg_console_125
   \   000009F6   0121               MOVS     R1,#+1
   \   000009F8   00E0               B.N      ??bc_last_msg_console_126
   \                     ??bc_last_msg_console_125:
   \   000009FA   0021               MOVS     R1,#+0
   \                     ??bc_last_msg_console_126:
   \   000009FC   18F00100           ANDS     R0,R8,#0x1
   \   00000A00   9DF80420           LDRB     R2,[SP, #+4]
   \   00000A04   12F00102           ANDS     R2,R2,#0x1
   \   00000A08   1040               ANDS     R0,R2,R0
   \   00000A0A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A0C   0842               TST      R0,R1
   \   00000A0E   09D0               BEQ.N    ??bc_last_msg_console_127
   \   00000A10   ........           LDR.W    R0,??DataTable5_14
   \   00000A14   ........           BL       printf
   \   00000A18   C5E0               B.N      ??bc_last_msg_console_124
   \   00000A1A   00BF               Nop      
   \                     ??bc_last_msg_console_82:
   \   00000A1C   4D432000           DC8      "MC "
   \   00000A20   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00
    450          
    451          	    else {
    452          	        // store data words as array 
    453          	        addr = mcsb[2];
   \                     ??bc_last_msg_console_127:
   \   00000A24   BDF80C00           LDRH     R0,[SP, #+12]
   \   00000A28   8146               MOV      R9,R0
    454          			for (i=0; i<wordcount; i++,addr++) {
   \   00000A2A   0020               MOVS     R0,#+0
   \   00000A2C   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_128:
   \   00000A2E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A32   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000A34   AA45               CMP      R10,R5
   \   00000A36   10D2               BCS.N    ??bc_last_msg_console_129
    455          				data[i] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   00000A38   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A3C   07A8               ADD      R0,SP,#+28
   \   00000A3E   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000A42   5FEA4901           LSLS     R1,R9,#+1
   \   00000A46   11F1C041           ADDS     R1,R1,#+1610612736
   \   00000A4A   0968               LDR      R1,[R1, #+0]
   \   00000A4C   20F81A10           STRH     R1,[R0, R10, LSL #+1]
    456                                  }
   \   00000A50   1AF1010A           ADDS     R10,R10,#+1
   \   00000A54   19F10109           ADDS     R9,R9,#+1
   \   00000A58   E9E7               B.N      ??bc_last_msg_console_128
    457                                  
    458          	        // print the Data Buffer start address 
    459          	        printf("Data Addr: 0x%.2X%.2X,      ",(char)(j>>8),(char)j);
   \                     ??bc_last_msg_console_129:
   \   00000A5A   2200               MOVS     R2,R4
   \   00000A5C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A5E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000A60   210A               LSRS     R1,R4,#+8
   \   00000A62   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000A64   ........           LDR.W    R0,??DataTable5_15
   \   00000A68   ........           BL       printf
    460          
    461          			j = mcsb[2] << 1;
   \   00000A6C   BDF80C00           LDRH     R0,[SP, #+12]
   \   00000A70   4000               LSLS     R0,R0,#+1
   \   00000A72   0400               MOVS     R4,R0
    462          			printf("Bus Addr: 0x6000%.2X%.2X\n\rData:",(char)(j>>8),(char)j);
   \   00000A74   2200               MOVS     R2,R4
   \   00000A76   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A78   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000A7A   210A               LSRS     R1,R4,#+8
   \   00000A7C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000A7E   ........           LDR.W    R0,??DataTable5_16
   \   00000A82   ........           BL       printf
    463          
    464          			printf("\n\r");
   \   00000A86   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000A88   ........           BL       printf
    465          
    466          	        // print data words, 8 words per line 
    467          	        for(i=0; (i<8)&&(i<wordcount); i++) {
   \   00000A8C   0020               MOVS     R0,#+0
   \   00000A8E   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_130:
   \   00000A90   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A94   BAF1080F           CMP      R10,#+8
   \   00000A98   16D2               BCS.N    ??bc_last_msg_console_131
   \   00000A9A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A9E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000AA0   AA45               CMP      R10,R5
   \   00000AA2   11D2               BCS.N    ??bc_last_msg_console_131
    468          			j = data[i];
   \   00000AA4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000AA8   07A8               ADD      R0,SP,#+28
   \   00000AAA   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000AAE   0400               MOVS     R4,R0
    469          			printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000AB0   2200               MOVS     R2,R4
   \   00000AB2   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000AB4   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000AB6   210A               LSRS     R1,R4,#+8
   \   00000AB8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000ABA   ........           LDR.W    R0,??DataTable5_17
   \   00000ABE   ........           BL       printf
    470                          }
   \   00000AC2   1AF1010A           ADDS     R10,R10,#+1
   \   00000AC6   E3E7               B.N      ??bc_last_msg_console_130
    471          	        printf("\n\r");
   \                     ??bc_last_msg_console_131:
   \   00000AC8   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000ACA   ........           BL       printf
    472          	        if(wordcount>7) {
   \   00000ACE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000AD0   082D               CMP      R5,#+8
   \   00000AD2   20D3               BCC.N    ??bc_last_msg_console_132
    473          	    	    for(i=8; (i<16)&&(i<wordcount); i++) {
   \   00000AD4   0820               MOVS     R0,#+8
   \   00000AD6   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_133:
   \   00000AD8   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000ADC   BAF1100F           CMP      R10,#+16
   \   00000AE0   16D2               BCS.N    ??bc_last_msg_console_134
   \   00000AE2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000AE6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000AE8   AA45               CMP      R10,R5
   \   00000AEA   11D2               BCS.N    ??bc_last_msg_console_134
    474          					j = data[i];
   \   00000AEC   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000AF0   07A8               ADD      R0,SP,#+28
   \   00000AF2   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000AF6   0400               MOVS     R4,R0
    475          					printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000AF8   2200               MOVS     R2,R4
   \   00000AFA   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000AFC   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000AFE   210A               LSRS     R1,R4,#+8
   \   00000B00   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000B02   ........           LDR.W    R0,??DataTable5_17
   \   00000B06   ........           BL       printf
    476                          }
   \   00000B0A   1AF1010A           ADDS     R10,R10,#+1
   \   00000B0E   E3E7               B.N      ??bc_last_msg_console_133
    477          				printf("\n\r");
   \                     ??bc_last_msg_console_134:
   \   00000B10   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000B12   ........           BL       printf
    478                      }
    479          	        if(wordcount>15) {
   \                     ??bc_last_msg_console_132:
   \   00000B16   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B18   102D               CMP      R5,#+16
   \   00000B1A   20D3               BCC.N    ??bc_last_msg_console_135
    480          	    	    for(i=16; (i<24)&&(i<wordcount); i++) {
   \   00000B1C   1020               MOVS     R0,#+16
   \   00000B1E   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_136:
   \   00000B20   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B24   BAF1180F           CMP      R10,#+24
   \   00000B28   16D2               BCS.N    ??bc_last_msg_console_137
   \   00000B2A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B2E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B30   AA45               CMP      R10,R5
   \   00000B32   11D2               BCS.N    ??bc_last_msg_console_137
    481          					j = data[i];
   \   00000B34   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B38   07A8               ADD      R0,SP,#+28
   \   00000B3A   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000B3E   0400               MOVS     R4,R0
    482          					printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000B40   2200               MOVS     R2,R4
   \   00000B42   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000B44   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000B46   210A               LSRS     R1,R4,#+8
   \   00000B48   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000B4A   ........           LDR.W    R0,??DataTable5_17
   \   00000B4E   ........           BL       printf
    483                          }
   \   00000B52   1AF1010A           ADDS     R10,R10,#+1
   \   00000B56   E3E7               B.N      ??bc_last_msg_console_136
    484          				printf("\n\r");
   \                     ??bc_last_msg_console_137:
   \   00000B58   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000B5A   ........           BL       printf
    485                      }
    486          	        if(wordcount>23) {
   \                     ??bc_last_msg_console_135:
   \   00000B5E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B60   182D               CMP      R5,#+24
   \   00000B62   20D3               BCC.N    ??bc_last_msg_console_124
    487          				for(i=24; (i<32)&&(i<wordcount); i++) {
   \   00000B64   1820               MOVS     R0,#+24
   \   00000B66   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_138:
   \   00000B68   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B6C   BAF1200F           CMP      R10,#+32
   \   00000B70   16D2               BCS.N    ??bc_last_msg_console_139
   \   00000B72   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B76   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B78   AA45               CMP      R10,R5
   \   00000B7A   11D2               BCS.N    ??bc_last_msg_console_139
    488          					j = data[i];
   \   00000B7C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B80   07A8               ADD      R0,SP,#+28
   \   00000B82   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000B86   0400               MOVS     R4,R0
    489          	                printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000B88   2200               MOVS     R2,R4
   \   00000B8A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000B8C   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000B8E   210A               LSRS     R1,R4,#+8
   \   00000B90   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000B92   ........           LDR.W    R0,??DataTable5_17
   \   00000B96   ........           BL       printf
    490                          }
   \   00000B9A   1AF1010A           ADDS     R10,R10,#+1
   \   00000B9E   E3E7               B.N      ??bc_last_msg_console_138
    491          				printf("\n\r");
   \                     ??bc_last_msg_console_139:
   \   00000BA0   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000BA2   ........           BL       printf
    492                      }
    493                  }	// end else "store data words"
    494              }	// end "not a mode command"
    495          
    496          	printf("\n\r");
   \                     ??bc_last_msg_console_124:
   \   00000BA6   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000BA8   ........           BL       printf
    497          	print_line();
   \   00000BAC   ........           BL       print_line
    498          	print_menuprompt();
   \   00000BB0   ........           BL       print_menuprompt
    499          
    500          }	// end bc_last_msg_console()
   \   00000BB4   17B0               ADD      SP,SP,#+92
   \   00000BB6   BDE8F08F           POP      {R4-R11,PC}      ;; return
    501          #endif //(BC_ena) 
    502          
    503          
    504          
    505          #if (BC_ena) 
    506          //--------------------------------------------------------------
    507          //  this function lists the BC Config reg 0x0032
    508          //	to the console via UART
    509          //--------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    510          void list_bc_config (void) {
   \                     list_bc_config:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    511          
    512          	unsigned short int i, j;
    513          
    514          
    515          	i = pH6130->BC_CONFIG_REG;
   \   00000002   ........           LDR.W    R0,??DataTable6_2
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   B0F86400           LDRH     R0,[R0, #+100]
   \   0000000C   0400               MOVS     R4,R0
    516          
    517                          
    518          	// formfeed 
    519          	putchar(12); 	
   \   0000000E   0C20               MOVS     R0,#+12
   \   00000010   ........           BL       putchar
    520          	printf("\n\rBC Configuration Register: 0x%.2X%.2X\n\r",(char)(i>>8),(char)i);
   \   00000014   2200               MOVS     R2,R4
   \   00000016   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   210A               LSRS     R1,R4,#+8
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   ........           LDR.W    R0,??DataTable5_18
   \   00000022   ........           BL       printf
    521          	print_line();
   \   00000026   ........           BL       print_line
    522          	
    523          	j = (i & 0xC000) >> 14;
   \   0000002A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   A00B               LSRS     R0,R4,#+14
   \   0000002E   0500               MOVS     R5,R0
    524          	if(j == 1) printf("  20");
   \   00000030   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000032   012D               CMP      R5,#+1
   \   00000034   04D1               BNE.N    ??list_bc_config_0
   \   00000036   ........           LDR.W    R0,??DataTable5_19
   \   0000003A   ........           BL       printf
   \   0000003E   13E0               B.N      ??list_bc_config_1
    525          	else if(j == 2) printf("  58");
   \                     ??list_bc_config_0:
   \   00000040   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   022D               CMP      R5,#+2
   \   00000044   04D1               BNE.N    ??list_bc_config_2
   \   00000046   ........           LDR.W    R0,??DataTable5_20
   \   0000004A   ........           BL       printf
   \   0000004E   0BE0               B.N      ??list_bc_config_1
    526          	else if(j == 3) printf(" 138");
   \                     ??list_bc_config_2:
   \   00000050   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   032D               CMP      R5,#+3
   \   00000054   04D1               BNE.N    ??list_bc_config_3
   \   00000056   ........           LDR.W    R0,??DataTable5_21
   \   0000005A   ........           BL       printf
   \   0000005E   03E0               B.N      ??list_bc_config_1
    527          	else printf("  15");
   \                     ??list_bc_config_3:
   \   00000060   ........           LDR.W    R0,??DataTable5_22
   \   00000064   ........           BL       printf
    528          	printf("us Timeout (bus dead time)   ");
   \                     ??list_bc_config_1:
   \   00000068   ........           LDR.W    R0,??DataTable6_3
   \   0000006C   ........           BL       printf
    529          
    530          	if(i & (1<<13)) printf("Check Control Word Format Bits");
   \   00000070   A004               LSLS     R0,R4,#+18
   \   00000072   04D5               BPL.N    ??list_bc_config_4
   \   00000074   ........           LDR.W    R0,??DataTable6_4
   \   00000078   ........           BL       printf
   \   0000007C   03E0               B.N      ??list_bc_config_5
    531          	else printf("Don't Check Control Word Format Bits");
   \                     ??list_bc_config_4:
   \   0000007E   ........           LDR.W    R0,??DataTable7
   \   00000082   ........           BL       printf
    532          	printf("\n\n\r");
   \                     ??list_bc_config_5:
   \   00000086   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   00000088   ........           BL       printf
    533          
    534          	if(i & (1<<11)) {
   \   0000008C   2005               LSLS     R0,R4,#+20
   \   0000008E   1FD5               BPL.N    ??list_bc_config_6
    535          		j = (i & (3<<9)) >> 9;
   \   00000090   C4F34120           UBFX     R0,R4,#+9,#+2
   \   00000094   0500               MOVS     R5,R0
    536          		if(j==0) printf(" 2 Retries, Same Bus, Same Bus   "); 
   \   00000096   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000098   002D               CMP      R5,#+0
   \   0000009A   04D1               BNE.N    ??list_bc_config_7
   \   0000009C   ........           LDR.W    R0,??DataTable7_1
   \   000000A0   ........           BL       printf
   \   000000A4   26E0               B.N      ??list_bc_config_8
    537          		else if(j==2) printf("  2 Retries, Alt Bus, Same Bus   "); 
   \                     ??list_bc_config_7:
   \   000000A6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A8   022D               CMP      R5,#+2
   \   000000AA   04D1               BNE.N    ??list_bc_config_9
   \   000000AC   ........           LDR.W    R0,??DataTable7_2
   \   000000B0   ........           BL       printf
   \   000000B4   1EE0               B.N      ??list_bc_config_8
    538          		else if(j==1) printf("  2 Retries, Same Bus, Alt Bus   "); 
   \                     ??list_bc_config_9:
   \   000000B6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B8   012D               CMP      R5,#+1
   \   000000BA   04D1               BNE.N    ??list_bc_config_10
   \   000000BC   ........           LDR.W    R0,??DataTable7_3
   \   000000C0   ........           BL       printf
   \   000000C4   16E0               B.N      ??list_bc_config_8
    539          		else printf("   2 Retries, Alt Bus, Alt Bus   "); 
   \                     ??list_bc_config_10:
   \   000000C6   ........           LDR.W    R0,??DataTable7_4
   \   000000CA   ........           BL       printf
   \   000000CE   11E0               B.N      ??list_bc_config_8
    540          	}
    541          	else if(i & (1<<12)) {
   \                     ??list_bc_config_6:
   \   000000D0   E004               LSLS     R0,R4,#+19
   \   000000D2   0BD5               BPL.N    ??list_bc_config_11
    542          		if(i & (1<<10)) printf("  1 Retry if Msg Fail, Alt Bus   ");
   \   000000D4   6005               LSLS     R0,R4,#+21
   \   000000D6   04D5               BPL.N    ??list_bc_config_12
   \   000000D8   ........           LDR.W    R0,??DataTable7_5
   \   000000DC   ........           BL       printf
   \   000000E0   08E0               B.N      ??list_bc_config_8
    543          		else printf(" 1 Retry if Msg Fail, Same Bus   ");
   \                     ??list_bc_config_12:
   \   000000E2   ........           LDR.W    R0,??DataTable7_6
   \   000000E6   ........           BL       printf
   \   000000EA   03E0               B.N      ??list_bc_config_8
    544          	}
    545          	else printf("    No Retries for Msg Failure   ");
   \                     ??list_bc_config_11:
   \   000000EC   ........           LDR.W    R0,??DataTable7_7
   \   000000F0   ........           BL       printf
    546          
    547          	if(i & (1<<8)) printf("Retry if RT status bit high");
   \                     ??list_bc_config_8:
   \   000000F4   E005               LSLS     R0,R4,#+23
   \   000000F6   04D5               BPL.N    ??list_bc_config_13
   \   000000F8   ........           LDR.W    R0,??DataTable7_8
   \   000000FC   ........           BL       printf
   \   00000100   03E0               B.N      ??list_bc_config_14
    548          	else printf("No Retry if RT status bit high");
   \                     ??list_bc_config_13:
   \   00000102   ........           LDR.W    R0,??DataTable7_9
   \   00000106   ........           BL       printf
    549          	printf("\n\n\r");
   \                     ??list_bc_config_14:
   \   0000010A   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   0000010C   ........           BL       printf
    550          
    551          	if(i & (1<<7)) printf(    " RT status ME w/o data = Valid   ");
   \   00000110   2006               LSLS     R0,R4,#+24
   \   00000112   04D5               BPL.N    ??list_bc_config_15
   \   00000114   ........           LDR.W    R0,??DataTable7_10
   \   00000118   ........           BL       printf
   \   0000011C   03E0               B.N      ??list_bc_config_16
    552          	else printf(" RT status ME w/o data = Inval   ");
   \                     ??list_bc_config_15:
   \   0000011E   ........           LDR.W    R0,??DataTable7_11
   \   00000122   ........           BL       printf
    553          	if(i & (1<<6)) printf("RT status BSY w/o data = Valid");
   \                     ??list_bc_config_16:
   \   00000126   6006               LSLS     R0,R4,#+25
   \   00000128   04D5               BPL.N    ??list_bc_config_17
   \   0000012A   ........           LDR.W    R0,??DataTable7_12
   \   0000012E   ........           BL       printf
   \   00000132   03E0               B.N      ??list_bc_config_18
    554          	else printf("RT status BSY w/o data = Inval");
   \                     ??list_bc_config_17:
   \   00000134   ........           LDR.W    R0,??DataTable7_13
   \   00000138   ........           BL       printf
    555          	printf("\n\n\r");
   \                     ??list_bc_config_18:
   \   0000013C   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   0000013E   ........           BL       printf
    556          
    557          	if(i & (1<<5)) printf("            Msg Gap Timer = On   ");
   \   00000142   A006               LSLS     R0,R4,#+26
   \   00000144   04D5               BPL.N    ??list_bc_config_19
   \   00000146   ........           LDR.W    R0,??DataTable7_14
   \   0000014A   ........           BL       printf
   \   0000014E   03E0               B.N      ??list_bc_config_20
    558          	else printf("           Msg Gap Timer = Off   ");
   \                     ??list_bc_config_19:
   \   00000150   ........           LDR.W    R0,??DataTable8
   \   00000154   ........           BL       printf
    559          	if(i & (1<<4)) printf("Watchdog Frame Timer = On");
   \                     ??list_bc_config_20:
   \   00000158   E006               LSLS     R0,R4,#+27
   \   0000015A   04D5               BPL.N    ??list_bc_config_21
   \   0000015C   ........           LDR.W    R0,??DataTable8_1
   \   00000160   ........           BL       printf
   \   00000164   03E0               B.N      ??list_bc_config_22
    560          	else printf("Watchdog Frame Timer = Off");
   \                     ??list_bc_config_21:
   \   00000166   ........           LDR.W    R0,??DataTable8_2
   \   0000016A   ........           BL       printf
    561          	printf("\n\n\r");
   \                     ??list_bc_config_22:
   \   0000016E   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   00000170   ........           BL       printf
    562          
    563          	if(i & (1<<3)) printf("MC17 send Time Tag low 16 bits   ");
   \   00000174   2007               LSLS     R0,R4,#+28
   \   00000176   04D5               BPL.N    ??list_bc_config_23
   \   00000178   ........           LDR.W    R0,??DataTable8_3
   \   0000017C   ........           BL       printf
   \   00000180   03E0               B.N      ??list_bc_config_24
    564          	else printf("MC17 send data in msg data blk   ");
   \                     ??list_bc_config_23:
   \   00000182   ........           LDR.W    R0,??DataTable8_4
   \   00000186   ........           BL       printf
    565          	if(i & (1<<2)) printf("MC17 data word always even");
   \                     ??list_bc_config_24:
   \   0000018A   6007               LSLS     R0,R4,#+29
   \   0000018C   04D5               BPL.N    ??list_bc_config_25
   \   0000018E   ........           LDR.W    R0,??DataTable8_5
   \   00000192   ........           BL       printf
   \   00000196   03E0               B.N      ??list_bc_config_26
    566          	else printf("MC17 data may be even or odd");
   \                     ??list_bc_config_25:
   \   00000198   ........           LDR.W    R0,??DataTable9
   \   0000019C   ........           BL       printf
    567          	printf("\n\n\r");
   \                     ??list_bc_config_26:
   \   000001A0   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   000001A2   ........           BL       printf
    568          
    569          	if(i & (1<<1)) printf("  Enable 4us Minimum Gap Check   ");
   \   000001A6   A007               LSLS     R0,R4,#+30
   \   000001A8   04D5               BPL.N    ??list_bc_config_27
   \   000001AA   ........           LDR.W    R0,??DataTable10
   \   000001AE   ........           BL       printf
   \   000001B2   03E0               B.N      ??list_bc_config_28
    570          	else printf("   No 4us Minimum Gap Checking   ");
   \                     ??list_bc_config_27:
   \   000001B4   ........           LDR.W    R0,??DataTable11
   \   000001B8   ........           BL       printf
    571          	if(i & (1<<0)) printf("BCR Mask Enabled, BCRME = 1");
   \                     ??list_bc_config_28:
   \   000001BC   E007               LSLS     R0,R4,#+31
   \   000001BE   04D5               BPL.N    ??list_bc_config_29
   \   000001C0   ........           LDR.W    R0,??DataTable12
   \   000001C4   ........           BL       printf
   \   000001C8   03E0               B.N      ??list_bc_config_30
    572          	else printf("BCR Mask Disabled, BCRME = 0");
   \                     ??list_bc_config_29:
   \   000001CA   ........           LDR.W    R0,??DataTable13
   \   000001CE   ........           BL       printf
    573          	printf("\n\n\r");
   \                     ??list_bc_config_30:
   \   000001D2   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   000001D4   ........           BL       printf
    574          
    575          
    576          		i = pH6130->TTAG_CONFIG_REG;
   \   000001D8   ........           LDR.W    R0,??DataTable6_2
   \   000001DC   0068               LDR      R0,[R0, #+0]
   \   000001DE   B0F87200           LDRH     R0,[R0, #+114]
   \   000001E2   0400               MOVS     R4,R0
    577                     
    578          	printf("Timetag Config Register 0x%.2X%.2X  ",(char)(i>>8),(char)i);
   \   000001E4   2200               MOVS     R2,R4
   \   000001E6   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001E8   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000001EA   210A               LSRS     R1,R4,#+8
   \   000001EC   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001EE   ........           LDR.W    R0,??DataTable15
   \   000001F2   ........           BL       printf
    579          
    580          	if(i & (1<<3)) printf("32-bit timebase with ");
   \   000001F6   2007               LSLS     R0,R4,#+28
   \   000001F8   04D5               BPL.N    ??list_bc_config_31
   \   000001FA   ........           LDR.W    R0,??DataTable16
   \   000001FE   ........           BL       printf
   \   00000202   03E0               B.N      ??list_bc_config_32
    581          	else printf("16-bit timebase with ");
   \                     ??list_bc_config_31:
   \   00000204   ........           LDR.W    R0,??DataTable17
   \   00000208   ........           BL       printf
    582          
    583          	i &= 7;
   \                     ??list_bc_config_32:
   \   0000020C   14F00704           ANDS     R4,R4,#0x7
    584          	if(i == 0) printf("clock disabled! ");
   \   00000210   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000212   002C               CMP      R4,#+0
   \   00000214   04D1               BNE.N    ??list_bc_config_33
   \   00000216   ........           LDR.W    R0,??DataTable17_1
   \   0000021A   ........           BL       printf
   \   0000021E   33E0               B.N      ??list_bc_config_34
    585          	else if(i == 1) printf("ext clock ");
   \                     ??list_bc_config_33:
   \   00000220   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000222   012C               CMP      R4,#+1
   \   00000224   04D1               BNE.N    ??list_bc_config_35
   \   00000226   ........           LDR.W    R0,??DataTable17_2
   \   0000022A   ........           BL       printf
   \   0000022E   2BE0               B.N      ??list_bc_config_34
    586          	else if(i == 2) printf("2us clock ");
   \                     ??list_bc_config_35:
   \   00000230   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000232   022C               CMP      R4,#+2
   \   00000234   04D1               BNE.N    ??list_bc_config_36
   \   00000236   ........           LDR.W    R0,??DataTable17_3
   \   0000023A   ........           BL       printf
   \   0000023E   23E0               B.N      ??list_bc_config_34
    587          	else if(i == 3) printf("4us clock ");
   \                     ??list_bc_config_36:
   \   00000240   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000242   032C               CMP      R4,#+3
   \   00000244   04D1               BNE.N    ??list_bc_config_37
   \   00000246   ........           LDR.W    R0,??DataTable17_4
   \   0000024A   ........           BL       printf
   \   0000024E   1BE0               B.N      ??list_bc_config_34
    588          	else if(i == 4) printf("8us clock ");
   \                     ??list_bc_config_37:
   \   00000250   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000252   042C               CMP      R4,#+4
   \   00000254   04D1               BNE.N    ??list_bc_config_38
   \   00000256   ........           LDR.W    R0,??DataTable17_5
   \   0000025A   ........           BL       printf
   \   0000025E   13E0               B.N      ??list_bc_config_34
    589          	else if(i == 5) printf("16us clock ");
   \                     ??list_bc_config_38:
   \   00000260   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000262   052C               CMP      R4,#+5
   \   00000264   04D1               BNE.N    ??list_bc_config_39
   \   00000266   ........           LDR.W    R0,??DataTable17_6
   \   0000026A   ........           BL       printf
   \   0000026E   0BE0               B.N      ??list_bc_config_34
    590          	else if(i == 6) printf("32us clock ");
   \                     ??list_bc_config_39:
   \   00000270   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000272   062C               CMP      R4,#+6
   \   00000274   04D1               BNE.N    ??list_bc_config_40
   \   00000276   ........           LDR.W    R0,??DataTable17_7
   \   0000027A   ........           BL       printf
   \   0000027E   03E0               B.N      ??list_bc_config_34
    591          	else printf("64us clock ");
   \                     ??list_bc_config_40:
   \   00000280   ........           LDR.W    R0,??DataTable17_8
   \   00000284   ........           BL       printf
    592          	printf("\n\n\r");
   \                     ??list_bc_config_34:
   \   00000288   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   0000028A   ........           BL       printf
    593          
    594          	print_line();
   \   0000028E   ........           BL       print_line
    595            	print_menuprompt();
   \   00000292   ........           BL       print_menuprompt
    596          
    597          }	// end list_bc_config()
   \   00000296   31BD               POP      {R0,R4,R5,PC}    ;; return
    598          #endif //(BC_ena) 
    599          
    600          
    601          #if (BC_ena) 
    602          //-------------------------------------------------------------------------
    603          //    brief	this function lists the BC's Cond Code / GP Flag reg
    604          //		to the console via UART
    605          //-------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    606          void list_bc_ccgpf_reg(void) {
   \                     list_bc_ccgpf_reg:
   \   00000000   10B5               PUSH     {R4,LR}
    607          
    608          	unsigned short int i;
    609          
    610          
    611          	i = pH6130->BC_CCODE_AND_GPF_REG;
   \   00000002   ........           LDR.W    R0,??DataTable6_2
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   B0F86E00           LDRH     R0,[R0, #+110]
   \   0000000C   0400               MOVS     R4,R0
    612          
    613          	// formfeed
    614          	putchar(12); 	
   \   0000000E   0C20               MOVS     R0,#+12
   \   00000010   ........           BL       putchar
    615          	printf("\n\rBC Condition Code & GP Flag Register: 0x%.2X%.2X\n\r", (char)(i>>8),(char)i);
   \   00000014   2200               MOVS     R2,R4
   \   00000016   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   210A               LSRS     R1,R4,#+8
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   ........           LDR.W    R0,??DataTable17_9
   \   00000022   ........           BL       printf
    616          	print_line();
   \   00000026   ........           BL       print_line
    617          
    618          	if(i==0x0000) printf("BC Stopped: No Condition Codes or Gen Purpose Flags Are Set.\n\r");
   \   0000002A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   002C               CMP      R4,#+0
   \   0000002E   04D1               BNE.N    ??list_bc_ccgpf_reg_0
   \   00000030   ........           LDR.W    R0,??DataTable17_10
   \   00000034   ........           BL       printf
   \   00000038   13E0               B.N      ??list_bc_ccgpf_reg_1
    619          	else if(i==0x8000) printf("BC Running: No Condition Codes or Gen Purpose Flags Are Set.\n\r");
   \                     ??list_bc_ccgpf_reg_0:
   \   0000003A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003C   B4F5004F           CMP      R4,#+32768
   \   00000040   04D1               BNE.N    ??list_bc_ccgpf_reg_2
   \   00000042   ........           LDR.W    R0,??DataTable17_11
   \   00000046   ........           BL       printf
   \   0000004A   0AE0               B.N      ??list_bc_ccgpf_reg_1
    620          	else if(i & (1<<15)) printf("BC Is Running.\n\n\r");
   \                     ??list_bc_ccgpf_reg_2:
   \   0000004C   2004               LSLS     R0,R4,#+16
   \   0000004E   04D5               BPL.N    ??list_bc_ccgpf_reg_3
   \   00000050   ........           LDR.W    R0,??DataTable17_12
   \   00000054   ........           BL       printf
   \   00000058   03E0               B.N      ??list_bc_ccgpf_reg_1
    621          	else printf("BC Not Running.\n\n\r");
   \                     ??list_bc_ccgpf_reg_3:
   \   0000005A   ........           LDR.W    R0,??DataTable17_13
   \   0000005E   ........           BL       printf
    622          	if(i & (1<<14)) printf("2Retries  ");
   \                     ??list_bc_ccgpf_reg_1:
   \   00000062   6004               LSLS     R0,R4,#+17
   \   00000064   03D5               BPL.N    ??list_bc_ccgpf_reg_4
   \   00000066   ........           LDR.W    R0,??DataTable5_2
   \   0000006A   ........           BL       printf
    623          	if(i & (1<<13)) printf("1Retry  ");
   \                     ??list_bc_ccgpf_reg_4:
   \   0000006E   A004               LSLS     R0,R4,#+18
   \   00000070   03D5               BPL.N    ??list_bc_ccgpf_reg_5
   \   00000072   ........           LDR.W    R0,??DataTable5_3
   \   00000076   ........           BL       printf
    624          	if(i & (1<<12)) printf("BadMsg  ");
   \                     ??list_bc_ccgpf_reg_5:
   \   0000007A   E004               LSLS     R0,R4,#+19
   \   0000007C   03D5               BPL.N    ??list_bc_ccgpf_reg_6
   \   0000007E   ........           LDR.W    R0,??DataTable5_4
   \   00000082   ........           BL       printf
    625          	if(i & (1<<10)) printf("GdDataBlk  ");
   \                     ??list_bc_ccgpf_reg_6:
   \   00000086   6005               LSLS     R0,R4,#+21
   \   00000088   03D5               BPL.N    ??list_bc_ccgpf_reg_7
   \   0000008A   ........           LDR.W    R0,??DataTable5_5
   \   0000008E   ........           BL       printf
    626          	if(i & (1<<9)) printf("FmtErr  ");
   \                     ??list_bc_ccgpf_reg_7:
   \   00000092   A005               LSLS     R0,R4,#+22
   \   00000094   02D5               BPL.N    ??list_bc_ccgpf_reg_8
   \   00000096   ....               LDR.N    R0,??DataTable4_39
   \   00000098   ........           BL       printf
    627          	if(i & (1<<8)) printf("NoResp  ");
   \                     ??list_bc_ccgpf_reg_8:
   \   0000009C   E005               LSLS     R0,R4,#+23
   \   0000009E   02D5               BPL.N    ??list_bc_ccgpf_reg_9
   \   000000A0   ....               LDR.N    R0,??DataTable4_30
   \   000000A2   ........           BL       printf
    628          	if(i & (1<<7)) printf("GPF7  ");
   \                     ??list_bc_ccgpf_reg_9:
   \   000000A6   2006               LSLS     R0,R4,#+24
   \   000000A8   03D5               BPL.N    ??list_bc_ccgpf_reg_10
   \   000000AA   ........           LDR.W    R0,??DataTable5_6
   \   000000AE   ........           BL       printf
    629          	if(i & (1<<6)) printf("GPF6  ");
   \                     ??list_bc_ccgpf_reg_10:
   \   000000B2   6006               LSLS     R0,R4,#+25
   \   000000B4   03D5               BPL.N    ??list_bc_ccgpf_reg_11
   \   000000B6   ........           LDR.W    R0,??DataTable5_7
   \   000000BA   ........           BL       printf
    630          	if(i & (1<<5)) printf("GPF5  ");
   \                     ??list_bc_ccgpf_reg_11:
   \   000000BE   A006               LSLS     R0,R4,#+26
   \   000000C0   03D5               BPL.N    ??list_bc_ccgpf_reg_12
   \   000000C2   ........           LDR.W    R0,??DataTable5_8
   \   000000C6   ........           BL       printf
    631          	if(i & (1<<4)) printf("GPF4  ");
   \                     ??list_bc_ccgpf_reg_12:
   \   000000CA   E006               LSLS     R0,R4,#+27
   \   000000CC   03D5               BPL.N    ??list_bc_ccgpf_reg_13
   \   000000CE   ........           LDR.W    R0,??DataTable5_9
   \   000000D2   ........           BL       printf
    632          	if(i & (1<<3)) printf("GPF3  ");
   \                     ??list_bc_ccgpf_reg_13:
   \   000000D6   2007               LSLS     R0,R4,#+28
   \   000000D8   03D5               BPL.N    ??list_bc_ccgpf_reg_14
   \   000000DA   ........           LDR.W    R0,??DataTable5_10
   \   000000DE   ........           BL       printf
    633          	if(i & (1<<2)) printf("GPF2  ");
   \                     ??list_bc_ccgpf_reg_14:
   \   000000E2   6007               LSLS     R0,R4,#+29
   \   000000E4   03D5               BPL.N    ??list_bc_ccgpf_reg_15
   \   000000E6   ........           LDR.W    R0,??DataTable5_11
   \   000000EA   ........           BL       printf
    634          	if(i & (1<<1)) printf("LT-GPF1  ");
   \                     ??list_bc_ccgpf_reg_15:
   \   000000EE   A007               LSLS     R0,R4,#+30
   \   000000F0   03D5               BPL.N    ??list_bc_ccgpf_reg_16
   \   000000F2   ........           LDR.W    R0,??DataTable5_12
   \   000000F6   ........           BL       printf
    635          	if(i & (1<<0)) printf("EQ-GPF0  ");
   \                     ??list_bc_ccgpf_reg_16:
   \   000000FA   E007               LSLS     R0,R4,#+31
   \   000000FC   03D5               BPL.N    ??list_bc_ccgpf_reg_17
   \   000000FE   ........           LDR.W    R0,??DataTable5_13
   \   00000102   ........           BL       printf
    636          	if(i & (1<<11)) printf("MSSet  ");
   \                     ??list_bc_ccgpf_reg_17:
   \   00000106   2005               LSLS     R0,R4,#+20
   \   00000108   02D5               BPL.N    ??list_bc_ccgpf_reg_18
   \   0000010A   ....               LDR.N    R0,??DataTable4_40
   \   0000010C   ........           BL       printf
    637          	printf("\n\r");
   \                     ??list_bc_ccgpf_reg_18:
   \   00000110   ....               ADR.N    R0,??DataTable4_27  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000112   ........           BL       printf
    638                  
    639          	print_line();
   \   00000116   ........           BL       print_line
    640             	print_menuprompt();
   \   0000011A   ........           BL       print_menuprompt
    641          
    642          }
   \   0000011E   10BD               POP      {R4,PC}          ;; return
    643          #endif //(BC_ena) 
    644          
    645          
    646          
    647          #if (BC_ena) 
    648          //-------------------------------------------------------------
    649          //      this function lists bus controller interrupt 
    650          //	configuration to the console via UART. if there
    651          //	are pending BC interrupts, these too are displayed.
    652          //	Function returns the value read from the BC pending
    653          //	interrupt register, since reading the reg clears it.
    654          //-------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    655          unsigned short int list_bc_ints_console (void) {
   \                     list_bc_ints_console:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    656          
    657          	unsigned short int i, j, k=0;
   \   00000002   0026               MOVS     R6,#+0
    658          
    659          	// formfeed 
    660          	putchar(12); 	
   \   00000004   0C20               MOVS     R0,#+12
   \   00000006   ........           BL       putchar
    661          
    662          	#if(!BC_ena) 
    663          	printf("Bus Controller Is Not Enabled!\n\n\r"); 
    664          	#endif
    665          
    666          
    667          		i = pH6130->BC_INT_ENABLE_REG;
   \   0000000A   ........           LDR.W    R0,??DataTable6_2
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   008C               LDRH     R0,[R0, #+32]
   \   00000012   0400               MOVS     R4,R0
    668          		j = pH6130->BC_INT_OUTPUT_ENABLE_REG;
   \   00000014   ........           LDR.W    R0,??DataTable6_2
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   008D               LDRH     R0,[R0, #+40]
   \   0000001C   0500               MOVS     R5,R0
    669          		k = pH6130->BC_PENDING_INT_REG;
   \   0000001E   ........           LDR.W    R0,??DataTable6_2
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   C089               LDRH     R0,[R0, #+14]
   \   00000026   0600               MOVS     R6,R0
    670          
    671                          
    672          	printf("\n\r Bus Controller Ints   Enabled?   Pin Output?   Pending?\n\r");
   \   00000028   ........           LDR.W    R0,??DataTable17_14
   \   0000002C   ........           BL       printf
    673          	print_line();
   \   00000030   ........           BL       print_line
    674          
    675          	printf("BC Frame Timer Expired");
   \   00000034   ........           LDR.W    R0,??DataTable17_15
   \   00000038   ........           BL       printf
    676          	if(!(i & (1<<15))) {	
   \   0000003C   2004               LSLS     R0,R4,#+16
   \   0000003E   02D4               BMI.N    ??list_bc_ints_console_0
    677          		// int disabled 
    678          		print_null();
   \   00000040   ........           BL       print_null
   \   00000044   11E0               B.N      ??list_bc_ints_console_1
    679          	}
    680          	else {
    681          		// int enabled 
    682          		print_sp1sp();
   \                     ??list_bc_ints_console_0:
   \   00000046   ........           BL       print_sp1sp
    683          		// pin output? 
    684          		if(j & (1<<15)) print_b1sp();
   \   0000004A   2804               LSLS     R0,R5,#+16
   \   0000004C   02D5               BPL.N    ??list_bc_ints_console_2
   \   0000004E   ........           BL       print_b1sp
   \   00000052   01E0               B.N      ??list_bc_ints_console_3
    685          		else print_b0sp(); 
   \                     ??list_bc_ints_console_2:
   \   00000054   ........           BL       print_b0sp
    686          		// pending? 
    687          		if(k & (1<<15)) printf("1\n\r");
   \                     ??list_bc_ints_console_3:
   \   00000058   3004               LSLS     R0,R6,#+16
   \   0000005A   03D5               BPL.N    ??list_bc_ints_console_4
   \   0000005C   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000005E   ........           BL       printf
   \   00000062   02E0               B.N      ??list_bc_ints_console_1
    688          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_4:
   \   00000064   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000066   ........           BL       printf
    689          	}
    690          
    691          	printf("Selected Msg Int,EOM=1");
   \                     ??list_bc_ints_console_1:
   \   0000006A   ........           LDR.W    R0,??DataTable17_16
   \   0000006E   ........           BL       printf
    692          	if(!(i & (1<<14))) {	
   \   00000072   6004               LSLS     R0,R4,#+17
   \   00000074   02D4               BMI.N    ??list_bc_ints_console_5
    693          		// int disabled 
    694          		print_null();
   \   00000076   ........           BL       print_null
   \   0000007A   11E0               B.N      ??list_bc_ints_console_6
    695          	}
    696          	else {
    697          		// int enabled 
    698          		print_sp1sp();
   \                     ??list_bc_ints_console_5:
   \   0000007C   ........           BL       print_sp1sp
    699          		// pin output? 
    700          		if(j & (1<<14)) print_b1sp();
   \   00000080   6804               LSLS     R0,R5,#+17
   \   00000082   02D5               BPL.N    ??list_bc_ints_console_7
   \   00000084   ........           BL       print_b1sp
   \   00000088   01E0               B.N      ??list_bc_ints_console_8
    701          		else print_b0sp(); 
   \                     ??list_bc_ints_console_7:
   \   0000008A   ........           BL       print_b0sp
    702          		// pending? 
    703          		if(k & (1<<14)) printf("1\n\r");
   \                     ??list_bc_ints_console_8:
   \   0000008E   7004               LSLS     R0,R6,#+17
   \   00000090   03D5               BPL.N    ??list_bc_ints_console_9
   \   00000092   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000094   ........           BL       printf
   \   00000098   02E0               B.N      ??list_bc_ints_console_6
    704          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_9:
   \   0000009A   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   0000009C   ........           BL       printf
    705          	}
    706          
    707          	printf("GenPurp Queue Rollover");
   \                     ??list_bc_ints_console_6:
   \   000000A0   ........           LDR.W    R0,??DataTable17_17
   \   000000A4   ........           BL       printf
    708          	if(!(i & (1<<13))) {	
   \   000000A8   A004               LSLS     R0,R4,#+18
   \   000000AA   02D4               BMI.N    ??list_bc_ints_console_10
    709          		// int disabled 
    710          		print_null();
   \   000000AC   ........           BL       print_null
   \   000000B0   11E0               B.N      ??list_bc_ints_console_11
    711          	}
    712          	else {
    713          		// int enabled 
    714          		print_sp1sp();
   \                     ??list_bc_ints_console_10:
   \   000000B2   ........           BL       print_sp1sp
    715          		// pin output? 
    716          		if(j & (1<<13)) print_b1sp();
   \   000000B6   A804               LSLS     R0,R5,#+18
   \   000000B8   02D5               BPL.N    ??list_bc_ints_console_12
   \   000000BA   ........           BL       print_b1sp
   \   000000BE   01E0               B.N      ??list_bc_ints_console_13
    717          		else print_b0sp(); 
   \                     ??list_bc_ints_console_12:
   \   000000C0   ........           BL       print_b0sp
    718          		// pending? 
    719          		if(k & (1<<13)) printf("1\n\r");
   \                     ??list_bc_ints_console_13:
   \   000000C4   B004               LSLS     R0,R6,#+18
   \   000000C6   03D5               BPL.N    ??list_bc_ints_console_14
   \   000000C8   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000000CA   ........           BL       printf
   \   000000CE   02E0               B.N      ??list_bc_ints_console_11
    720          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_14:
   \   000000D0   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000000D2   ........           BL       printf
    721          	}
    722          
    723          	printf("   Message Was Retried");
   \                     ??list_bc_ints_console_11:
   \   000000D6   ........           LDR.W    R0,??DataTable17_18
   \   000000DA   ........           BL       printf
    724          	if(!(i & (1<<12))) {	
   \   000000DE   E004               LSLS     R0,R4,#+19
   \   000000E0   02D4               BMI.N    ??list_bc_ints_console_15
    725          		// int disabled 
    726          		print_null();
   \   000000E2   ........           BL       print_null
   \   000000E6   11E0               B.N      ??list_bc_ints_console_16
    727          	}
    728          	else {
    729          		// int enabled 
    730          		print_sp1sp();
   \                     ??list_bc_ints_console_15:
   \   000000E8   ........           BL       print_sp1sp
    731          		// pin output? 
    732          		if(j & (1<<12)) print_b1sp();
   \   000000EC   E804               LSLS     R0,R5,#+19
   \   000000EE   02D5               BPL.N    ??list_bc_ints_console_17
   \   000000F0   ........           BL       print_b1sp
   \   000000F4   01E0               B.N      ??list_bc_ints_console_18
    733          		else print_b0sp(); 
   \                     ??list_bc_ints_console_17:
   \   000000F6   ........           BL       print_b0sp
    734          		// pending? 
    735          		if(k & (1<<12)) printf("1\n\r");
   \                     ??list_bc_ints_console_18:
   \   000000FA   F004               LSLS     R0,R6,#+19
   \   000000FC   03D5               BPL.N    ??list_bc_ints_console_19
   \   000000FE   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000100   ........           BL       printf
   \   00000104   02E0               B.N      ??list_bc_ints_console_16
    736          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_19:
   \   00000106   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000108   ........           BL       printf
    737          	}
    738          
    739          	printf("Call Stack Pointer Err");
   \                     ??list_bc_ints_console_16:
   \   0000010C   ........           LDR.W    R0,??DataTable17_19
   \   00000110   ........           BL       printf
    740          	if(!(i & (1<<11))) {	
   \   00000114   2005               LSLS     R0,R4,#+20
   \   00000116   02D4               BMI.N    ??list_bc_ints_console_20
    741          		// int disabled 
    742          		print_null();
   \   00000118   ........           BL       print_null
   \   0000011C   11E0               B.N      ??list_bc_ints_console_21
    743          	}
    744          	else {
    745          		// int enabled 
    746          		print_sp1sp();
   \                     ??list_bc_ints_console_20:
   \   0000011E   ........           BL       print_sp1sp
    747          		// pin output? 
    748          		if(j & (1<<11)) print_b1sp();
   \   00000122   2805               LSLS     R0,R5,#+20
   \   00000124   02D5               BPL.N    ??list_bc_ints_console_22
   \   00000126   ........           BL       print_b1sp
   \   0000012A   01E0               B.N      ??list_bc_ints_console_23
    749          		else print_b0sp(); 
   \                     ??list_bc_ints_console_22:
   \   0000012C   ........           BL       print_b0sp
    750          		// pending? 
    751          		if(k & (1<<11)) printf("1\n\r");
   \                     ??list_bc_ints_console_23:
   \   00000130   3005               LSLS     R0,R6,#+20
   \   00000132   03D5               BPL.N    ??list_bc_ints_console_24
   \   00000134   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000136   ........           BL       printf
   \   0000013A   02E0               B.N      ??list_bc_ints_console_21
    752          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_24:
   \   0000013C   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   0000013E   ........           BL       printf
    753          	}
    754          
    755          	printf("  Illegal Op Code Trap");
   \                     ??list_bc_ints_console_21:
   \   00000142   ........           LDR.W    R0,??DataTable17_20
   \   00000146   ........           BL       printf
    756          	if(!(i & (1<<10))) {	
   \   0000014A   6005               LSLS     R0,R4,#+21
   \   0000014C   02D4               BMI.N    ??list_bc_ints_console_25
    757          		// int disabled 
    758          		print_null();
   \   0000014E   ........           BL       print_null
   \   00000152   11E0               B.N      ??list_bc_ints_console_26
    759          	}
    760          	else {
    761          		// int enabled 
    762          		print_sp1sp();
   \                     ??list_bc_ints_console_25:
   \   00000154   ........           BL       print_sp1sp
    763          		// pin output? 
    764          		if(j & (1<<10)) print_b1sp();
   \   00000158   6805               LSLS     R0,R5,#+21
   \   0000015A   02D5               BPL.N    ??list_bc_ints_console_27
   \   0000015C   ........           BL       print_b1sp
   \   00000160   01E0               B.N      ??list_bc_ints_console_28
    765          		else print_b0sp(); 
   \                     ??list_bc_ints_console_27:
   \   00000162   ........           BL       print_b0sp
    766          		// pending? 
    767          		if(k & (1<<10)) printf("1\n\r");
   \                     ??list_bc_ints_console_28:
   \   00000166   7005               LSLS     R0,R6,#+21
   \   00000168   03D5               BPL.N    ??list_bc_ints_console_29
   \   0000016A   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000016C   ........           BL       printf
   \   00000170   02E0               B.N      ??list_bc_ints_console_26
    768          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_29:
   \   00000172   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000174   ........           BL       printf
    769          	}
    770          
    771          	printf("Unexpected RT Stat Bit");
   \                     ??list_bc_ints_console_26:
   \   00000178   ........           LDR.W    R0,??DataTable17_21
   \   0000017C   ........           BL       printf
    772          	if(!(i & (1<<9))) {	
   \   00000180   A005               LSLS     R0,R4,#+22
   \   00000182   02D4               BMI.N    ??list_bc_ints_console_30
    773          		// int disabled 
    774          		print_null();
   \   00000184   ........           BL       print_null
   \   00000188   11E0               B.N      ??list_bc_ints_console_31
    775          	}
    776          	else {
    777          		// int enabled 
    778          		print_sp1sp();
   \                     ??list_bc_ints_console_30:
   \   0000018A   ........           BL       print_sp1sp
    779          		// pin output? 
    780          		if(j & (1<<9)) print_b1sp();
   \   0000018E   A805               LSLS     R0,R5,#+22
   \   00000190   02D5               BPL.N    ??list_bc_ints_console_32
   \   00000192   ........           BL       print_b1sp
   \   00000196   01E0               B.N      ??list_bc_ints_console_33
    781          		else print_b0sp(); 
   \                     ??list_bc_ints_console_32:
   \   00000198   ........           BL       print_b0sp
    782          		// pending? 
    783          		if(k & (1<<9)) printf("1\n\r");
   \                     ??list_bc_ints_console_33:
   \   0000019C   B005               LSLS     R0,R6,#+22
   \   0000019E   03D5               BPL.N    ??list_bc_ints_console_34
   \   000001A0   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000001A2   ........           BL       printf
   \   000001A6   02E0               B.N      ??list_bc_ints_console_31
    784          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_34:
   \   000001A8   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000001AA   ........           BL       printf
    785          	}
    786          
    787          	printf("User-Def Int Req Bit 3");
   \                     ??list_bc_ints_console_31:
   \   000001AE   ........           LDR.W    R0,??DataTable17_22
   \   000001B2   ........           BL       printf
    788          	if(!(i & (1<<8))) {	
   \   000001B6   E005               LSLS     R0,R4,#+23
   \   000001B8   02D4               BMI.N    ??list_bc_ints_console_35
    789          		// int disabled 
    790          		print_null();
   \   000001BA   ........           BL       print_null
   \   000001BE   11E0               B.N      ??list_bc_ints_console_36
    791          	}
    792          	else {
    793          		// int enabled 
    794          		print_sp1sp();
   \                     ??list_bc_ints_console_35:
   \   000001C0   ........           BL       print_sp1sp
    795          		// pin output? 
    796          		if(j & (1<<8)) print_b1sp();
   \   000001C4   E805               LSLS     R0,R5,#+23
   \   000001C6   02D5               BPL.N    ??list_bc_ints_console_37
   \   000001C8   ........           BL       print_b1sp
   \   000001CC   01E0               B.N      ??list_bc_ints_console_38
    797          		else print_b0sp(); 
   \                     ??list_bc_ints_console_37:
   \   000001CE   ........           BL       print_b0sp
    798          		// pending? 
    799          		if(k & (1<<8)) printf("1\n\r");
   \                     ??list_bc_ints_console_38:
   \   000001D2   F005               LSLS     R0,R6,#+23
   \   000001D4   03D5               BPL.N    ??list_bc_ints_console_39
   \   000001D6   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000001D8   ........           BL       printf
   \   000001DC   02E0               B.N      ??list_bc_ints_console_36
    800          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_39:
   \   000001DE   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000001E0   ........           BL       printf
    801          	}
    802          
    803          	printf("User-Def Int Req Bit 2");
   \                     ??list_bc_ints_console_36:
   \   000001E4   ........           LDR.W    R0,??DataTable17_23
   \   000001E8   ........           BL       printf
    804          	if(!(i & (1<<7))) {	
   \   000001EC   2006               LSLS     R0,R4,#+24
   \   000001EE   02D4               BMI.N    ??list_bc_ints_console_40
    805          		// int disabled 
    806          		print_null();
   \   000001F0   ........           BL       print_null
   \   000001F4   11E0               B.N      ??list_bc_ints_console_41
    807          	}
    808          	else {
    809          		// int enabled 
    810          		print_sp1sp();
   \                     ??list_bc_ints_console_40:
   \   000001F6   ........           BL       print_sp1sp
    811          		// pin output? 
    812          		if(j & (1<<7)) print_b1sp();
   \   000001FA   2806               LSLS     R0,R5,#+24
   \   000001FC   02D5               BPL.N    ??list_bc_ints_console_42
   \   000001FE   ........           BL       print_b1sp
   \   00000202   01E0               B.N      ??list_bc_ints_console_43
    813          		else print_b0sp(); 
   \                     ??list_bc_ints_console_42:
   \   00000204   ........           BL       print_b0sp
    814          		// pending? 
    815          		if(k & (1<<7)) printf("1\n\r");
   \                     ??list_bc_ints_console_43:
   \   00000208   3006               LSLS     R0,R6,#+24
   \   0000020A   03D5               BPL.N    ??list_bc_ints_console_44
   \   0000020C   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000020E   ........           BL       printf
   \   00000212   02E0               B.N      ??list_bc_ints_console_41
    816          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_44:
   \   00000214   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000216   ........           BL       printf
    817          	}
    818          
    819          	printf("User-Def Int Req Bit 1");
   \                     ??list_bc_ints_console_41:
   \   0000021A   ........           LDR.W    R0,??DataTable17_24
   \   0000021E   ........           BL       printf
    820          	if(!(i & (1<<6))) {	
   \   00000222   6006               LSLS     R0,R4,#+25
   \   00000224   02D4               BMI.N    ??list_bc_ints_console_45
    821          		// int disabled 
    822          		print_null();
   \   00000226   ........           BL       print_null
   \   0000022A   11E0               B.N      ??list_bc_ints_console_46
    823          	}
    824          	else {
    825          		// int enabled 
    826          		print_sp1sp();
   \                     ??list_bc_ints_console_45:
   \   0000022C   ........           BL       print_sp1sp
    827          		// pin output? 
    828          		if(j & (1<<6)) print_b1sp();
   \   00000230   6806               LSLS     R0,R5,#+25
   \   00000232   02D5               BPL.N    ??list_bc_ints_console_47
   \   00000234   ........           BL       print_b1sp
   \   00000238   01E0               B.N      ??list_bc_ints_console_48
    829          		else print_b0sp(); 
   \                     ??list_bc_ints_console_47:
   \   0000023A   ........           BL       print_b0sp
    830          		// pending? 
    831          		if(k & (1<<6)) printf("1\n\r");
   \                     ??list_bc_ints_console_48:
   \   0000023E   7006               LSLS     R0,R6,#+25
   \   00000240   03D5               BPL.N    ??list_bc_ints_console_49
   \   00000242   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000244   ........           BL       printf
   \   00000248   02E0               B.N      ??list_bc_ints_console_46
    832          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_49:
   \   0000024A   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   0000024C   ........           BL       printf
    833          	}
    834          
    835          	printf("User-Def Int Req Bit 0");
   \                     ??list_bc_ints_console_46:
   \   00000250   ........           LDR.W    R0,??DataTable17_25
   \   00000254   ........           BL       printf
    836          	if(!(i & (1<<5))) {	
   \   00000258   A006               LSLS     R0,R4,#+26
   \   0000025A   02D4               BMI.N    ??list_bc_ints_console_50
    837          		// int disabled 
    838          		print_null();
   \   0000025C   ........           BL       print_null
   \   00000260   11E0               B.N      ??list_bc_ints_console_51
    839          	}
    840          	else {
    841          		// int enabled 
    842          		print_sp1sp();
   \                     ??list_bc_ints_console_50:
   \   00000262   ........           BL       print_sp1sp
    843          		// pin output? 
    844          		if(j & (1<<5)) print_b1sp();
   \   00000266   A806               LSLS     R0,R5,#+26
   \   00000268   02D5               BPL.N    ??list_bc_ints_console_52
   \   0000026A   ........           BL       print_b1sp
   \   0000026E   01E0               B.N      ??list_bc_ints_console_53
    845          		else print_b0sp(); 
   \                     ??list_bc_ints_console_52:
   \   00000270   ........           BL       print_b0sp
    846          		// pending? 
    847          		if(k & (1<<5)) printf("1\n\r");
   \                     ??list_bc_ints_console_53:
   \   00000274   B006               LSLS     R0,R6,#+26
   \   00000276   03D5               BPL.N    ??list_bc_ints_console_54
   \   00000278   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000027A   ........           BL       printf
   \   0000027E   02E0               B.N      ??list_bc_ints_console_51
    848          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_54:
   \   00000280   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000282   ........           BL       printf
    849          	}
    850          
    851          	printf("RT Status is Msg Error");
   \                     ??list_bc_ints_console_51:
   \   00000286   ........           LDR.W    R0,??DataTable17_26
   \   0000028A   ........           BL       printf
    852          	if(!(i & (1<<4))) {	
   \   0000028E   E006               LSLS     R0,R4,#+27
   \   00000290   02D4               BMI.N    ??list_bc_ints_console_55
    853          		// int disabled 
    854          		print_null();
   \   00000292   ........           BL       print_null
   \   00000296   11E0               B.N      ??list_bc_ints_console_56
    855          	}
    856          	else {
    857          		// int enabled 
    858          		print_sp1sp();
   \                     ??list_bc_ints_console_55:
   \   00000298   ........           BL       print_sp1sp
    859          		// pin output? 
    860          		if(j & (1<<4)) print_b1sp();
   \   0000029C   E806               LSLS     R0,R5,#+27
   \   0000029E   02D5               BPL.N    ??list_bc_ints_console_57
   \   000002A0   ........           BL       print_b1sp
   \   000002A4   01E0               B.N      ??list_bc_ints_console_58
    861          		else print_b0sp(); 
   \                     ??list_bc_ints_console_57:
   \   000002A6   ........           BL       print_b0sp
    862          		// pending? 
    863          		if(k & (1<<4)) printf("1\n\r");
   \                     ??list_bc_ints_console_58:
   \   000002AA   F006               LSLS     R0,R6,#+27
   \   000002AC   03D5               BPL.N    ??list_bc_ints_console_59
   \   000002AE   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000002B0   ........           BL       printf
   \   000002B4   02E0               B.N      ??list_bc_ints_console_56
    864          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_59:
   \   000002B6   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000002B8   ........           BL       printf
    865          	}
    866          
    867          	printf("     BC End-of-Message");
   \                     ??list_bc_ints_console_56:
   \   000002BC   ........           LDR.W    R0,??DataTable17_27
   \   000002C0   ........           BL       printf
    868          	if(!(i & (1<<3))) {	
   \   000002C4   2007               LSLS     R0,R4,#+28
   \   000002C6   02D4               BMI.N    ??list_bc_ints_console_60
    869          		// int disabled 
    870          		print_null();
   \   000002C8   ........           BL       print_null
   \   000002CC   11E0               B.N      ??list_bc_ints_console_61
    871          	}
    872          	else {
    873          		// int enabled 
    874          		print_sp1sp();
   \                     ??list_bc_ints_console_60:
   \   000002CE   ........           BL       print_sp1sp
    875          		// pin output? 
    876          		if(j & (1<<3)) print_b1sp();
   \   000002D2   2807               LSLS     R0,R5,#+28
   \   000002D4   02D5               BPL.N    ??list_bc_ints_console_62
   \   000002D6   ........           BL       print_b1sp
   \   000002DA   01E0               B.N      ??list_bc_ints_console_63
    877          		else print_b0sp(); 
   \                     ??list_bc_ints_console_62:
   \   000002DC   ........           BL       print_b0sp
    878          		// pending? 
    879          		if(k & (1<<3)) printf("1\n\r");
   \                     ??list_bc_ints_console_63:
   \   000002E0   3007               LSLS     R0,R6,#+28
   \   000002E2   03D5               BPL.N    ??list_bc_ints_console_64
   \   000002E4   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000002E6   ........           BL       printf
   \   000002EA   02E0               B.N      ??list_bc_ints_console_61
    880          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_64:
   \   000002EC   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000002EE   ........           BL       printf
    881          	}
    882          
    883          	printf("     Reserved Bits 2-0");
   \                     ??list_bc_ints_console_61:
   \   000002F2   ........           LDR.W    R0,??DataTable17_28
   \   000002F6   ........           BL       printf
    884          	print_dddn();
   \   000002FA   ........           BL       print_dddn
    885          	print_line();
   \   000002FE   ........           BL       print_line
    886          	printf("Note: Reading the BC Pending Interrupt Register clears it!\n\r");
   \   00000302   ........           LDR.W    R0,??DataTable17_29
   \   00000306   ........           BL       printf
    887          	print_menuprompt();
   \   0000030A   ........           BL       print_menuprompt
    888          
    889          	// return value read from the BCW Pending Interrupt Register, now cleared 
    890          	return k;
   \   0000030E   3000               MOVS     R0,R6
   \   00000310   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000312   70BD               POP      {R4-R6,PC}       ;; return
    891          
    892          }	// end list_bc_ints_console()
    893          
    894          
    895          #endif //(BC_ena) 
    896          
    897          #if(SMT_ena || IMT_ena)
    898          
    899          //-----------------------------------------------------------------------
    900          //    this function lists the MT Config reg 0x0029
    901          //    to the console via UART
    902          //-----------------------------------------------------------------------
    903          void list_mt_config (void) {
    904          
    905          	unsigned short int i, j;
    906          	char smt = 0;
    907          
    908          
    909          	i = pH6130->MT_CONFIG_REG;
    910                         
    911          	// IRIG monitor (imt) or Simple monitor (smt)? 
    912          	if(i & 1) smt = 1;
    913          
    914          	// formfeed 
    915          	putchar(12); 	
    916          	if(smt) printf("\n\rS");
    917          	else    printf("\n\rI");
    918          	printf("MT monitor mode selected.\n\n\r");
    919          
    920          	printf("MT Configuration Register: 0x%.2X%.2X\n\r", (char)(i>>8),(char)i);
    921          	print_line();
    922          
    923          	j = (i & 0xC000) >> 14;
    924          	if(j == 1) printf("  20us Timeout");
    925          	else if(j == 2) printf("  58us Timeout");
    926          	else if(j == 3) printf(" 138us Timeout");
    927          	else printf("  15us Timeout");
    928          	printf(" (bus dead time)   ");
    929          	
    930          	if(i & (1<<12)) printf("2us Gap Check ON");
    931          	else printf("2us Gap Check OFF");
    932          	printf("\n\n\r");
    933          
    934          	j = (i & 0x0300) >> 8;
    935          	if(j==0) printf("  Time Tag last word, last bit   "); 
    936          	else if(j==1) printf("Time Tag first word, first bit   "); 
    937          	else if(j==2) printf(" Time Tag first word, last bit   "); 
    938          	else printf("           Time Tagging is OFF   "); 
    939          
    940          	j = (i & 0x0060) >> 5;
    941          	printf("Start Rec: First Cmd ");
    942          	if(j==0) printf("Word");
    943          	else if(j==1) printf("or Data Word");
    944          	else if(j==2) printf("Sync + 2 bits");
    945          	else printf("or Data Sync + 2 bits");
    946          	printf("\n\n\r");
    947          
    948          	printf("   Invalid Data Word");	
    949          	if(i & (1<<4)) printf("s recorded   ");
    950          	else printf          (" ends mssg   ");
    951          
    952          	printf("Extended Status Flags ");
    953          	if(i & (1<<2)) printf("ON");
    954          	else printf("OFF");
    955          	printf("\n\n\r");
    956          
    957          	if(smt) {
    958          		printf(" SMT using ");
    959          		if(i & 2) printf("48");
    960          		else printf("16");
    961          		printf("-bit Time Tag ");
    962          	}
    963          	else {  // imt
    964          		printf("IMT Pkt Timer starts ");
    965          		if(i & (1<<7)) printf("at PktEnd   ");
    966          		else printf("at Cmd Wd   ");
    967          
    968          		j = (i & 0x0C00) >> 10;
    969          		printf("IMT Hdr Data Type IRIG-106-");
    970          		if(j==0) printf("09  "); 
    971          		else if(j==1) printf("04  "); 
    972          		else if(j==2) printf("05  "); 
    973          		else printf("07  "); 
    974          		printf("\n\n\r");
    975          						 
    976          		printf (" IMT Auto Header & Trailer ");
    977          		if(i & 8) printf ("OFF   ");
    978          		else printf      (" ON   ");
    979          	
    980          		printf ("IMT Data Packet Checksum ");
    981          		if(i & 2) printf ("ON");
    982          		else printf("OFF"); 
    983          	} 
    984          	printf("\n\n\r");
    985          	print_line();
    986          	print_menuprompt();
    987          
    988          }	// end list_mt_config()
    989          
    990          
    991          //-----------------------------------------------------------------------
    992          //    this function lists the MT msg results, last message
    993          //    to the console via UART
    994          //-----------------------------------------------------------------------
    995          
    996          void mt_last_msg_console(void) {
    997          
    998              
    999                  extern const H6130 pH6130; // HI-6130 register struct base address    
   1000          
   1001          	unsigned short int h,i,j,m,addr,dbp,ndw;
   1002          	char k,bswo=3,smt=0,xmf=0,ttag16=0,rtrt=1;
   1003          
   1004          	// formfeed 
   1005          	putchar(12); 	
   1006          
   1007          	if(SMT_ena||IMT_ena) {
   1008          
   1009          		printf("\n\rLast Message Recorded by ");
   1010          
   1011          		// fetch Bus Monitor config word 
   1012          
   1013          		i = pH6130->MT_CONFIG_REG;
   1014          
   1015                                  
   1016          		// extended message status flags enabled? 
   1017          		if(i & 2) xmf = 1;
   1018          		// Simple monitor (smt)? 
   1019          		if(i & 1) {
   1020          			printf("SMT:    ");
   1021          			smt = 1;
   1022          			//--------------------------------------------------------------
   1023          				// for smt, msg block start addr for last msg is in reg 0x31 
   1024          				addr = pH6130->MT_LAST_MSG_STACK_ADDR_REG;
   1025          				// j = address list offset 
   1026          				j = pH6130->MT_ADDR_LIST_POINTER;
   1027          
   1028          				if(!(i&2)) {
   1029          					// smt with 16-bit ttag 
   1030          					ttag16 = 1;
   1031          					// bswo = block status word offset in cmd-stack msg block 
   1032          					bswo = 0;
   1033          					// data block pointer 
   1034          					dbp = *((unsigned int *)(0x60000000 + ((addr+2)<<1)));
   1035          				}
   1036          				else {
   1037          					// smt with 48-bit ttag
   1038          					// bswo = block status word offset in cmd-stack msg block 
   1039          					bswo = 3;
   1040          					// data block pointer 
   1041          					dbp = *((unsigned int *)(0x60000000 + ((addr+6)<<1)));
   1042          				}
   1043          
   1044          				// first msg only, last block start addr = stack start addr 
   1045          				if(addr == *((unsigned int *)(0x60000000 + (j<<1)))) {
   1046          					// for first msg, the number of words stored in the
   1047          					// data stack = next data store addr - stack start addr 
   1048          					ndw = *((unsigned int *)(0x60000000 + ((j+5)<<1))) \
   1049          						- *((unsigned int *)(0x60000000 + ((j+4)<<1)));
   1050          				}
   1051          				else {
   1052          					h = *((unsigned int *)(0x60000000 + ((j+1)<<1)));
   1053          					// h = offset for next store addr in cmd stack block:
   1054          					// examine cmd word, detect both cases for broadcast mode codes 
   1055          					// w/o data, for these, no words are stored in the data stack
   1056          					m = *((unsigned int *)(0x60000000 + ((h-1)<<1)));
   1057          					if     (( m & 0xFFE0) >> 5 == 0x7E0) ndw = 0;
   1058          					else if(( m & 0xFFE0) >> 5 == 0x7FF) ndw = 0;
   1059          					else {
   1060          						// at least 1 word stored in data stack for last msg 
   1061          						// use next d-stack store address to determine number of d-stack words  
   1062          						h = *((unsigned int *)(0x60000000 + ((j+5)<<1)));
   1063          						ndw = h - dbp;
   1064          					}
   1065          				}
   1066          			//--------------------------------------------------------------
   1067          
   1068          			//--------------------------------------------------------------
   1069          		}	// end smt 
   1070          
   1071          
   1072          		else if(i & 8) {
   1073          			// IMT with auto header/trailer OFF 
   1074          			printf("IMT:   ");
   1075          			bswo = 4;
   1076          			// the last msg block addr is in register 0x31 
   1077          
   1078          				addr =pH6130->MT_LAST_MSG_STACK_ADDR_REG;
   1079          
   1080                                          
   1081          			// the stored data starts at the 8th word  
   1082          			dbp = addr+7;
   1083          			// # of msg bytes in word 6
   1084          
   1085          				ndw = *((unsigned int *)(0x60000000 + ((addr+6)<<1)));
   1086          
   1087          			// convert bytes to words
   1088          			ndw = ndw/2;
   1089          			
   1090          		}
   1091          		else  {  
   1092          			// IMT with auto header/trailer ON 
   1093          			printf("IMT:   ");
   1094          			bswo = 4;
   1095          			// last msg block addr is stored in 5th word of MT addr list 
   1096          
   1097          				i = 4 + pH6130->MT_ADDR_LIST_POINTER;
   1098          				addr = *((unsigned int *)(0x60000000 + (i<<1)));
   1099          				// the stored data starts at the 8th word  
   1100          				dbp = addr+7;
   1101          				// # of msg bytes in word 6, convert to words (div-by-2)
   1102          				ndw = (*((unsigned int *)(0x60000000 + (addr+6)<<1)))/2;
   1103          
   1104          		}
   1105          
   1106          		// read Block Status Word 
   1107          
   1108          		i = *((unsigned int *)(0x60000000 + ((addr+bswo)<<1)));
   1109          
   1110                          
   1111          		printf("Block Status Word = 0x%.2X%.2X...\n\n\r", (char)(i>>8),(char)i);
   1112          		if(!smt) printf("* means IMT BSW reserved bit:\n\n\r");
   1113          		printf("           * Start of Msg ");
   1114          		if(!xmf || !smt) printf("n/a    ");
   1115          		else if(i & (1<<14)) printf("= 1    ");
   1116          		else printf("= 0    ");
   1117          		printf("Bus Used = ");
   1118          		if(i & (1<<13)) printf("B\n\n\r");
   1119          		else printf("A\n\n\r");
   1120          
   1121          		printf("             * End of Msg ");
   1122          		if(!xmf || !smt) printf("n/a    ");
   1123          		else if(i & (1<<15)) printf("= 1    ");
   1124          		else printf("= 0    ");
   1125          		printf("Error Occurred = ");
   1126          		if(i & (1<<12)) printf("1\n\n\r");
   1127          		else printf("0\n\n\r");
   1128          
   1129          		printf("        * Good Data Block ");
   1130          		if(!xmf) printf("n/a    ");
   1131          		else if(i & (1<<8)) printf("= 1    ");
   1132          		else printf("= 0    ");
   1133          		printf("Response Timeout = ");
   1134          		if(i & (1<<9)) printf("1\n\n\r");
   1135          		else printf("0\n\n\r");
   1136          
   1137          		printf("* SMT Data Stack Rollover ");
   1138          		if(!xmf) printf("n/a    ");
   1139          		else if(i & (1<<7)) printf("= 1    ");
   1140          		else printf("= 0    ");
   1141          		printf("Illegal Gap Error = ");
   1142          		if(i & (1<<10)) printf("1\n\n\r");
   1143          		else printf("0\n\n\r");
   1144          
   1145          		printf(" * Cmd Word Content Error ");
   1146          		if(!xmf) printf("n/a    ");
   1147          		else if(i & 1) printf("= 1    ");
   1148          		else printf("= 0    ");
   1149          		printf("Word Count Error = ");
   1150          		if(i & (1<<5)) printf("1\n\n\r");
   1151          		else printf("0\n\n\r");
   1152          
   1153          		printf("* RT-RT Gap,Sync,Addr Err ");
   1154          		if(!xmf) printf("n/a    ");
   1155          		else if(i & 4) printf("= 1    ");
   1156          		else printf("= 0    ");
   1157          
   1158          		if(!(i & (1<<11))) {
   1159          			rtrt = 0;
   1160          			printf("Non-");
   1161          		}
   1162          		printf("RT-RT Cmd: ");
   1163          		// fetch & printf CW1 
   1164          		if(!smt)        m = 7; 
   1165          		else if(ttag16) m = 3; 
   1166          		else            m = 7;
   1167          
   1168          			j = *((unsigned int *)(0x60000000 + ((addr+m)<<1)));
   1169          
   1170          		printf("0x%.2X%.2X", (char)(j>>8),(char)j);
   1171          
   1172          		if(rtrt) {
   1173          			// fetch & printf CW2 
   1174          
   1175          				if(!smt) j = *((unsigned int *)(0x60000000 + ((addr+8)<<1)));
   1176          				else j = *((unsigned int *)(0x60000000 + (dbp<<1)));
   1177          
   1178                                          
   1179          			printf("0x%.2X%.2X", (char)(j>>8),(char)j);
   1180          		}
   1181          
   1182          		printf("\n\n\r * RT-RT Cmd Word 2 Error ");
   1183          		if(!xmf) printf("n/a    ");
   1184          		else if(i & 2) printf("= 1    ");
   1185          		else printf("= 0    ");
   1186          
   1187          		printf("Timetag = ");
   1188          		if(smt & ttag16) {	// 16-bit ttag
   1189          
   1190          			i = *((unsigned int *)(0x60000000 + ((addr+1)<<1)));
   1191          
   1192          			printf("0x%.2X%.2X\n\n\r", (char)(i>>8),(char)i);
   1193          		}
   1194          		else {			// 48-bit ttag
   1195          
   1196          				h = *((unsigned int *)(0x60000000 + ((addr+2)<<1)));
   1197          				i = *((unsigned int *)(0x60000000 + ((addr+1)<<1)));
   1198          				m = *((unsigned int *)(0x60000000 + (addr<<1)));
   1199          
   1200          			printf("0x%.2X%.2X", (char)(h>>8),(char)h);
   1201          			printf("%.2X%.2X", (char)(i>>8),(char)i);
   1202          			printf("%.2X%.2X\n\n\r", (char)(m>>8),(char)m);
   1203          		}
   1204          		
   1205          		if(smt) {
   1206          			if(!ndw) printf("No Words Stored in Data Stack    (Broadcast Mode Code w/o Data)\n\n\r");
   1207          			else {
   1208          				if(ndw<9) printf(" ");
   1209          				printf("Msg Words 2-%d at Addr 0x%.2X%.2X   ", ndw+1, (char)(dbp>>8),(char)dbp);
   1210          			}
   1211          		}
   1212          
   1213          		else {
   1214          			if(ndw<10) printf("  %d",ndw);
   1215          			else printf(" %d",ndw);
   1216          			printf(" Msg Words at Addr: ");
   1217          			printf("0x%.2X%.2X   ", (char)(dbp>>8),(char)dbp);
   1218          		}
   1219          		if(ndw) {
   1220          
   1221          				dbp = dbp<<1;
   1222          				printf("Bus Debug Addr: 0x6000%.2X%.2X", (char)(dbp>>8),(char)(dbp));
   1223          
   1224          			printf("\n\n\r");
   1225          		}
   1226          
   1227          		// only for imt, or smt using 48-bit ttag option
   1228          		// (smt using 16-bit ttag option does not store gap time word):
   1229          		// get gap time word, the upper and lower bytes 
   1230          		// express both TxRT and RxRT gap times for RT-RT messages... 
   1231          		if(!smt || (smt & !ttag16)) {
   1232          			if(!smt) m = 5;
   1233          			else if(!ttag16) m = 4;
   1234          
   1235          			j = *((unsigned int *)(0x60000000 + ((addr+m)<<1)));
   1236          
   1237                                          
   1238          			// lower byte gives gap time for non-RT-RT msgs,
   1239          			// and gives the TxRT gap for RT-RT msgs 
   1240          			k = 0;
   1241          			i = j&0xFF;
   1242          			// expressed in 0.1us increments, parse byte into 
   1243          			// whole number k and tenths digit i for display 
   1244          			while (i >= 10) {
   1245          				i -= 10;
   1246          				k += 1;
   1247          			}
   1248          			if(k<10) printf(" ");
   1249          			if(rtrt) printf("       Tx");
   1250          			//else printf("         ");
   1251          			printf("RT Response = %d.%dus    ", k,i);
   1252          			if(!k && !i) printf("(Broadcast?)");
   1253          			if(!rtrt) printf("\n\r");
   1254          
   1255          			// upper byte is non-zero for RT-RT only,
   1256          			// gives the RxRT gap if not broadcast msg 
   1257          			else {
   1258          				k = 0;
   1259          				i = (j>>8) & 0xFF;
   1260          				while (i >= 10) {
   1261          					i -= 10;
   1262          					k += 1;
   1263          				}
   1264          				printf("RxRT Response = %d.%dus ", k,i);
   1265          				if(!k && !i) printf("(Broadcast?)");
   1266          				printf("\n\r");
   1267          			}
   1268          		}
   1269          	}	
   1270          	print_line();
   1271          	print_menuprompt();
   1272          
   1273          }	// end mt_last_msg_console()
   1274          
   1275          
   1276          //-----------------------------------------------------------------------
   1277          //	this function lists bus monitor interrupt 
   1278          //	configuration to the console via UART. if there
   1279          //	are pending MT interrupts, these too are displayed.
   1280          //	Function returns the value read from the MT pending
   1281          //	interrupt register, since reading the reg clears it.
   1282          //-----------------------------------------------------------------------
   1283          unsigned short int list_mt_ints_console(void) {
   1284          
   1285             
   1286                  extern const H6130 pH6130; // HI-6130 register struct base address    
   1287          
   1288          	unsigned short i, j, k=0;
   1289          	char smt = 0;
   1290          
   1291          
   1292          		i = pH6130->MT_CONFIG_REG;
   1293          		if(i & 1) smt = 1;
   1294          		i = pH6130->MT_INT_ENABLE_REG;
   1295          		j = pH6130->MT_INT_OUTPUT_ENABLE_REG;
   1296          		k = pH6130->MT_PENDING_INT_REG;
   1297          
   1298                          
   1299          
   1300          	// formfeed 
   1301          	putchar(12); 	
   1302          	// IRIG monitor (imt) or Simple monitor (smt)? 
   1303                  printf("\n\r");
   1304          	if(smt) printf("SMT mode is selected by MT Config Register bit 0.\n\n\r");
   1305          	else    printf("IMT mode is selected by MT Config Register bit 0.\n\n\r");
   1306          	printf("   Bus Monitor Ints    Enabled?   Pin Output?   Pending?\n\r");
   1307          	print_line();
   1308          
   1309          	if(!smt) {
   1310          		// IRIG-106 mode, disregard bits 7,4,2,1,0 
   1311          		printf("End of Pkt,Buffer Full");
   1312          		if(!(i & FULL_EOP)) {	
   1313          			// int disabled 
   1314          			print_null();
   1315          		}
   1316          		else {
   1317          			// int enabled 
   1318          			print_sp1sp();
   1319          			// pin output? 
   1320          			if(j & FULL_EOP) print_b1sp();
   1321          			else print_b0sp(); 
   1322          			// pending? 
   1323          			if(k & FULL_EOP) printf("1\n\r");
   1324          			else printf("0\n\r"); 
   1325          		}
   1326          
   1327          		printf("Offset before FULL_EOP");
   1328          		if(!(i & FULL_OFS)) {	
   1329          			// int disabled 
   1330          			print_null();
   1331          		}
   1332          		else {
   1333          			// int enabled 
   1334          			print_sp1sp();
   1335          			// pin output? 
   1336          			if(j & FULL_OFS) print_b1sp();
   1337          			else print_b0sp(); 
   1338          			// pending? 
   1339          			if(k & FULL_OFS) printf("1\n\r");
   1340          			else printf("0\n\r"); 
   1341          		}
   1342          
   1343          		printf("Pkt Max 1553 Msg Words");
   1344          		if(!(i & MAXWORDS)) {	
   1345          			// int disabled 
   1346          			print_null();
   1347          		}
   1348          		else {
   1349          			// int enabled 
   1350          			print_sp1sp();
   1351          			// pin output? 
   1352          			if(j & MAXWORDS) print_b1sp();
   1353          			else print_b0sp(); 
   1354          			// pending? 
   1355          			if(k & MAXWORDS) printf("1\n\r");
   1356          			else printf("0\n\r"); 
   1357          		}
   1358          
   1359          		printf("Pkt Max 1553 Msg Count");
   1360          		if(!(i & MAXMSGS)) {	
   1361          			// int disabled 
   1362          			print_null();
   1363          		}
   1364          		else {
   1365          			// int enabled 
   1366          			print_sp1sp();
   1367          			// pin output? 
   1368          			if(j & MAXMSGS) print_b1sp();
   1369          			else print_b0sp(); 
   1370          			// pending? 
   1371          			if(k & MAXMSGS) printf("1\n\r");
   1372          			else printf("0\n\r"); 
   1373          		}
   1374          	
   1375          		printf(" Max Gap Time Exceeded");
   1376          		if(!(i & MAXGAP)) {	
   1377          			// int disabled 
   1378          			print_null();
   1379          		}
   1380          		else {
   1381          			// int enabled 
   1382          			print_sp1sp();
   1383          			// pin output? 
   1384          			if(j & MAXGAP) print_b1sp();
   1385          			else print_b0sp(); 
   1386          			// pending? 
   1387          			if(k & MAXGAP) printf("1\n\r");
   1388          			else printf("0\n\r"); 
   1389          		}
   1390          	
   1391          		printf("Max Pkt Recording Time");
   1392          		if(!(i & MAXTIME)) {	
   1393          			// int disabled 
   1394          			print_null();
   1395          		}
   1396          		else {
   1397          			// int enabled 
   1398          			print_sp1sp();
   1399          			// pin output? 
   1400          			if(j & MAXTIME) print_b1sp();
   1401          			else print_b0sp(); 
   1402          			// pending? 
   1403          			if(k & MAXTIME) printf("1\n\r");
   1404          			else printf("0\n\r"); 
   1405          		}
   1406          	
   1407          		printf("      Host Packet Stop");
   1408          		if(!(i & HPKTSTOP)) {	
   1409          			// int disabled 
   1410          			print_null();
   1411          		}
   1412          		else {
   1413          			// int enabled 
   1414          			print_sp1sp();
   1415          			// pin output? 
   1416          			if(j & HPKTSTOP) print_b1sp();
   1417          			else print_b0sp(); 
   1418          			// pending? 
   1419          			if(k & HPKTSTOP) printf("1\n\r");
   1420          			else printf("0\n\r"); 
   1421          		}
   1422          				 
   1423          		printf("Stack End Addr Written");
   1424          		if(!(i & STKROVR)) {	
   1425          			// int disabled 
   1426          			print_null();
   1427          		}
   1428          		else {
   1429          			// int enabled 
   1430          			print_sp1sp();
   1431          			// pin output? 
   1432          			if(j & STKROVR) print_b1sp();
   1433          			else print_b0sp(); 
   1434          			// pending? 
   1435          			if(k & STKROVR) printf("1\n\r");
   1436          			else printf("0\n\r"); 
   1437          		}
   1438          
   1439          		printf(" Hit Cmd Stack Address");
   1440          		if(!(i & STKADRSS)) {	
   1441          			// int disabled 
   1442          			print_null();
   1443          		}
   1444          		else {
   1445          			// int enabled 
   1446          			print_sp1sp();
   1447          			// pin output? 
   1448          			if(j & STKADRSS) print_b1sp();
   1449          			else print_b0sp(); 
   1450          			// pending? 
   1451          			if(k & STKADRSS) printf("1\n\r");
   1452          			else printf("0\n\r"); 
   1453          		}
   1454          
   1455          		printf(" IRIG-106 Packet Ready");
   1456          		if(!(i & PKTREADY)) {	
   1457          			// int disabled 
   1458          			print_null();
   1459          		}
   1460          		else {
   1461          			// int enabled 
   1462          			print_sp1sp();
   1463          			// pin output? 
   1464          			if(j & PKTREADY) print_b1sp();
   1465          			else print_b0sp(); 
   1466          			// pending? 
   1467          			if(k & PKTREADY) printf("1\n\r");
   1468          			else printf("0\n\r"); 
   1469          		}
   1470          
   1471          		printf("Monitor End-of-Message");
   1472          		if(!(i & (1<<3))) {	
   1473          			// int disabled 
   1474          			print_null();
   1475          		}
   1476          		else {
   1477          			// int enabled 
   1478          			print_sp1sp();
   1479          			// pin output? 
   1480          			if(j & (1<<3)) print_b1sp();
   1481          			else print_b0sp(); 
   1482          			// pending? 
   1483          			if(k & (1<<3)) printf("1\n\r");
   1484          			else printf("0\n\r"); 
   1485          		}
   1486          
   1487          		printf("\nIMT Skips Bits 4,2,1,0");
   1488          		print_dddn();
   1489          
   1490          	}		// end if(!smt)
   1491          
   1492          	else {
   1493          		// Simple Monitor mode, disregard bits 15-9 and 2-0 
   1494          
   1495          		printf("SMT Cmd Stack Rollover");
   1496          		if(!(i & STKROVR)) {	
   1497          			// int disabled 
   1498          			print_null();
   1499          		}
   1500          		else {
   1501          			// int enabled 
   1502          			print_sp1sp();
   1503          			// pin output? 
   1504          			if(j & STKROVR) print_b1sp();
   1505          			else print_b0sp(); 
   1506          			// pending? 
   1507          			if(k & STKROVR) printf("1\n\r");
   1508          			else printf("0\n\r"); 
   1509          		}
   1510          	
   1511          		printf("SMT DataStack Rollover");
   1512          		if(!(i & DSTKROVR)) {	
   1513          			// int disabled 
   1514          			print_null();
   1515          		}
   1516          		else {
   1517          			// int enabled 
   1518          			print_sp1sp();
   1519          			// pin output? 
   1520          			if(j & DSTKROVR) print_b1sp();
   1521          			else print_b0sp(); 
   1522          			// pending? 
   1523          			if(k & STKROVR) printf("1\n\r");
   1524          			else printf("0\n\r"); 
   1525          		}
   1526          
   1527          		printf("SMT  Cmd Stack Address");
   1528          		if(!(i & STKADRSS)) {	
   1529          			// int disabled 
   1530          			print_null();
   1531          		}
   1532          		else {
   1533          			// int enabled 
   1534          			print_sp1sp();
   1535          			// pin output? 
   1536          			if(j & STKADRSS) print_b1sp();
   1537          			else print_b0sp(); 
   1538          			// pending? 
   1539          			if(k & STKADRSS) printf("1\n\r");
   1540          			else printf("0\n\r"); 
   1541          		}
   1542          
   1543          		printf("SMT Data Stack Address");
   1544          		if(!(i & DSTKADRSS)) {	
   1545          			// int disabled 
   1546          			print_null();
   1547          		}
   1548          		else {
   1549          			// int enabled 
   1550          			print_sp1sp();
   1551          			// pin output? 
   1552          			if(j & DSTKADRSS) print_b1sp();
   1553          			else print_b0sp(); 
   1554          				// pending? 
   1555          			if(k & DSTKADRSS) printf("1\n\r");
   1556          			else printf("0\n\r"); 
   1557          		}
   1558          
   1559          		printf("RT Status is Msg Error");
   1560          		if(!(i & MSG_ERR)) {	
   1561          			// int disabled 
   1562          			print_null();
   1563          		}
   1564          		else {
   1565          			// int enabled 
   1566          			print_sp1sp();
   1567          			// pin output? 
   1568          			if(j & MSG_ERR) print_b1sp();
   1569          			else print_b0sp(); 
   1570          			// pending? 
   1571          			if(k & MSG_ERR) printf("1\n\r");
   1572          			else printf("0\n\r"); 
   1573          		}
   1574          
   1575          		printf("     MT End-of-Message");
   1576          		if(!(i & MT_EOM)) {	
   1577          			// int disabled 
   1578          			print_null();
   1579          		}
   1580          		else {
   1581          			// int enabled 
   1582          			print_sp1sp();
   1583          			// pin output? 
   1584          			if(j & MT_EOM) print_b1sp();
   1585          			else print_b0sp(); 
   1586          			// pending? 
   1587          			if(k & MT_EOM) printf("1\n\r");
   1588          			else printf("0\n\r"); 
   1589          		}
   1590          	}		// end else .... SMT mode
   1591                    
   1592          	print_line();
   1593          	printf("Note: Reading the MT Pending Interrupt Register clears it!\n\r");
   1594          
   1595          	print_menuprompt();
   1596          
   1597          	// return value read from the MT Pending Interrupt Register, now cleared 
   1598          	return k;
   1599           
   1600          }	// end list_mt_ints_console()
   1601          
   1602          
   1603          #endif  // (SMT_ena || IMT_ena)
   1604          
   1605          
   1606          //-------------------------------------------------------------------------
   1607          //  this function lists hardware interrupt configuration
   1608          //	to the console via UART. if there are pending
   1609          //	hardware interrupts, these too are displayed.
   1610          //	Function returns the value read from the HW pending
   1611          //	interrupt register, since reading the reg clears it.
   1612          //-------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1613          unsigned short int list_hw_ints_console (void) {
   \                     list_hw_ints_console:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1614          
   1615          	unsigned short i, j, k;
   1616                  
   1617          
   1618                  extern const H6130 pH6130; // HI-6130 register struct base address  
   1619          
   1620                  
   1621          	// formfeed 
   1622          	putchar(12); 	
   \   00000002   0C20               MOVS     R0,#+12
   \   00000004   ........           BL       putchar
   1623          	printf("\n\r Hardware Interrupts   Enabled?   Pin Output?   Pending?\n\r");
   \   00000008   ........           LDR.W    R0,??DataTable17_30
   \   0000000C   ........           BL       printf
   1624          	print_line();
   \   00000010   ........           BL       print_line
   1625          
   1626          		i = pH6130->HDW_INT_ENABLE_REG;
   \   00000014   ....               LDR.N    R0,??DataTable6_2
   \   00000016   0068               LDR      R0,[R0, #+0]
   \   00000018   C08B               LDRH     R0,[R0, #+30]
   \   0000001A   0400               MOVS     R4,R0
   1627          		j = pH6130->HDW_INT_OUTPUT_ENABLE_REG;
   \   0000001C   ....               LDR.N    R0,??DataTable6_2
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   C08C               LDRH     R0,[R0, #+38]
   \   00000022   0500               MOVS     R5,R0
   1628          		k = pH6130->HDW_PENDING_INT_REG;
   \   00000024   ....               LDR.N    R0,??DataTable6_2
   \   00000026   0068               LDR      R0,[R0, #+0]
   \   00000028   8089               LDRH     R0,[R0, #+12]
   \   0000002A   0600               MOVS     R6,R0
   1629          		printf("HI-6131 Host SPI Error    n/a         n/a         n/a\n\r");
   \   0000002C   ........           LDR.W    R0,??DataTable17_31
   \   00000030   ........           BL       printf
   1630          
   1631                          
   1632          	printf("EE Chksum/Corr RAM Err");
   \   00000034   ........           LDR.W    R0,??DataTable17_32
   \   00000038   ........           BL       printf
   1633          	if(!(i & (1<<14))) {	
   \   0000003C   6004               LSLS     R0,R4,#+17
   \   0000003E   02D4               BMI.N    ??list_hw_ints_console_0
   1634          		// int disabled 
   1635          		print_null();
   \   00000040   ........           BL       print_null
   \   00000044   11E0               B.N      ??list_hw_ints_console_1
   1636          	}
   1637          	else {
   1638          		// int enabled 
   1639          		print_sp1sp();
   \                     ??list_hw_ints_console_0:
   \   00000046   ........           BL       print_sp1sp
   1640          		// pin output? 
   1641          		if(j & (1<<14)) print_b1sp();
   \   0000004A   6804               LSLS     R0,R5,#+17
   \   0000004C   02D5               BPL.N    ??list_hw_ints_console_2
   \   0000004E   ........           BL       print_b1sp
   \   00000052   01E0               B.N      ??list_hw_ints_console_3
   1642          		else print_b0sp(); 
   \                     ??list_hw_ints_console_2:
   \   00000054   ........           BL       print_b0sp
   1643          		// pending? 
   1644          		if(k & (1<<14)) printf("1\n\r");
   \                     ??list_hw_ints_console_3:
   \   00000058   7004               LSLS     R0,R6,#+17
   \   0000005A   03D5               BPL.N    ??list_hw_ints_console_4
   \   0000005C   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   0000005E   ........           BL       printf
   \   00000062   02E0               B.N      ??list_hw_ints_console_1
   1645          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_4:
   \   00000064   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000066   ........           BL       printf
   1646          	}
   1647          
   1648          	printf("RAM Init/UncorrRAM Err");
   \                     ??list_hw_ints_console_1:
   \   0000006A   ........           LDR.W    R0,??DataTable17_33
   \   0000006E   ........           BL       printf
   1649          	if(!(i & (1<<13))) {	
   \   00000072   A004               LSLS     R0,R4,#+18
   \   00000074   02D4               BMI.N    ??list_hw_ints_console_5
   1650          		// int disabled 
   1651          		print_null();
   \   00000076   ........           BL       print_null
   \   0000007A   11E0               B.N      ??list_hw_ints_console_6
   1652          	}
   1653          	else {
   1654          		// int enabled 
   1655          		print_sp1sp();
   \                     ??list_hw_ints_console_5:
   \   0000007C   ........           BL       print_sp1sp
   1656          		// pin output? 
   1657          		if(j & (1<<13)) print_b1sp();
   \   00000080   A804               LSLS     R0,R5,#+18
   \   00000082   02D5               BPL.N    ??list_hw_ints_console_7
   \   00000084   ........           BL       print_b1sp
   \   00000088   01E0               B.N      ??list_hw_ints_console_8
   1658          		else print_b0sp(); 
   \                     ??list_hw_ints_console_7:
   \   0000008A   ........           BL       print_b0sp
   1659          		// pending? 
   1660          		if(k & (1<<13)) printf("1\n\r");
   \                     ??list_hw_ints_console_8:
   \   0000008E   B004               LSLS     R0,R6,#+18
   \   00000090   03D5               BPL.N    ??list_hw_ints_console_9
   \   00000092   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000094   ........           BL       printf
   \   00000098   02E0               B.N      ??list_hw_ints_console_6
   1661          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_9:
   \   0000009A   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   0000009C   ........           BL       printf
   1662          	}
   1663          
   1664          	printf("Loopback Fail on Bus A");
   \                     ??list_hw_ints_console_6:
   \   000000A0   ........           LDR.W    R0,??DataTable17_34
   \   000000A4   ........           BL       printf
   1665          	if(!(i & (1<<12))) {	
   \   000000A8   E004               LSLS     R0,R4,#+19
   \   000000AA   02D4               BMI.N    ??list_hw_ints_console_10
   1666          		// int disabled 
   1667          		print_null();
   \   000000AC   ........           BL       print_null
   \   000000B0   11E0               B.N      ??list_hw_ints_console_11
   1668          	}
   1669          	else {
   1670          		// int enabled 
   1671          		print_sp1sp();
   \                     ??list_hw_ints_console_10:
   \   000000B2   ........           BL       print_sp1sp
   1672          		// pin output? 
   1673          		if(j & (1<<12)) print_b1sp();
   \   000000B6   E804               LSLS     R0,R5,#+19
   \   000000B8   02D5               BPL.N    ??list_hw_ints_console_12
   \   000000BA   ........           BL       print_b1sp
   \   000000BE   01E0               B.N      ??list_hw_ints_console_13
   1674          		else print_b0sp(); 
   \                     ??list_hw_ints_console_12:
   \   000000C0   ........           BL       print_b0sp
   1675          		// pending? 
   1676          		if(k & (1<<12)) printf("1\n\r");
   \                     ??list_hw_ints_console_13:
   \   000000C4   F004               LSLS     R0,R6,#+19
   \   000000C6   03D5               BPL.N    ??list_hw_ints_console_14
   \   000000C8   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000000CA   ........           BL       printf
   \   000000CE   02E0               B.N      ??list_hw_ints_console_11
   1677          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_14:
   \   000000D0   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000000D2   ........           BL       printf
   1678          	}
   1679          
   1680          	printf("Loopback Fail on Bus B");
   \                     ??list_hw_ints_console_11:
   \   000000D6   ........           LDR.W    R0,??DataTable17_35
   \   000000DA   ........           BL       printf
   1681          	if(!(i & (1<<11))) {	
   \   000000DE   2005               LSLS     R0,R4,#+20
   \   000000E0   02D4               BMI.N    ??list_hw_ints_console_15
   1682          		// int disabled 
   1683          		print_null();
   \   000000E2   ........           BL       print_null
   \   000000E6   11E0               B.N      ??list_hw_ints_console_16
   1684          	}
   1685          	else {
   1686          		// int enabled 
   1687          		print_sp1sp();
   \                     ??list_hw_ints_console_15:
   \   000000E8   ........           BL       print_sp1sp
   1688          		// pin output? 
   1689          		if(j & (1<<11)) print_b1sp();
   \   000000EC   2805               LSLS     R0,R5,#+20
   \   000000EE   02D5               BPL.N    ??list_hw_ints_console_17
   \   000000F0   ........           BL       print_b1sp
   \   000000F4   01E0               B.N      ??list_hw_ints_console_18
   1690          		else print_b0sp(); 
   \                     ??list_hw_ints_console_17:
   \   000000F6   ........           BL       print_b0sp
   1691          		// pending? 
   1692          		if(k & (1<<11)) printf("1\n\r");
   \                     ??list_hw_ints_console_18:
   \   000000FA   3005               LSLS     R0,R6,#+20
   \   000000FC   03D5               BPL.N    ??list_hw_ints_console_19
   \   000000FE   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000100   ........           BL       printf
   \   00000104   02E0               B.N      ??list_hw_ints_console_16
   1693          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_19:
   \   00000106   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000108   ........           BL       printf
   1694          	}
   1695          
   1696          	printf("MT Timetag Ct Rollover");
   \                     ??list_hw_ints_console_16:
   \   0000010C   ........           LDR.W    R0,??DataTable17_36
   \   00000110   ........           BL       printf
   1697          	if(!(i & (1<<10))) {	
   \   00000114   6005               LSLS     R0,R4,#+21
   \   00000116   02D4               BMI.N    ??list_hw_ints_console_20
   1698          		// int disabled 
   1699          		print_null();
   \   00000118   ........           BL       print_null
   \   0000011C   11E0               B.N      ??list_hw_ints_console_21
   1700          	}
   1701          	else {
   1702          		// int enabled 
   1703          		print_sp1sp();
   \                     ??list_hw_ints_console_20:
   \   0000011E   ........           BL       print_sp1sp
   1704          		// pin output? 
   1705          		if(j & (1<<10)) print_b1sp();
   \   00000122   6805               LSLS     R0,R5,#+21
   \   00000124   02D5               BPL.N    ??list_hw_ints_console_22
   \   00000126   ........           BL       print_b1sp
   \   0000012A   01E0               B.N      ??list_hw_ints_console_23
   1706          		else print_b0sp(); 
   \                     ??list_hw_ints_console_22:
   \   0000012C   ........           BL       print_b0sp
   1707          		// pending? 
   1708          		if(k & (1<<10)) printf("1\n\r");
   \                     ??list_hw_ints_console_23:
   \   00000130   7005               LSLS     R0,R6,#+21
   \   00000132   03D5               BPL.N    ??list_hw_ints_console_24
   \   00000134   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000136   ........           BL       printf
   \   0000013A   02E0               B.N      ??list_hw_ints_console_21
   1709          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_24:
   \   0000013C   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   0000013E   ........           BL       printf
   1710          	}
   1711          
   1712          	printf("BC Timetag Ct Rollover");
   \                     ??list_hw_ints_console_21:
   \   00000142   ........           LDR.W    R0,??DataTable17_37
   \   00000146   ........           BL       printf
   1713          	if(!(i & (1<<9))) {	
   \   0000014A   A005               LSLS     R0,R4,#+22
   \   0000014C   02D4               BMI.N    ??list_hw_ints_console_25
   1714          		// int disabled 
   1715          		print_null();
   \   0000014E   ........           BL       print_null
   \   00000152   11E0               B.N      ??list_hw_ints_console_26
   1716          	}
   1717          	else {
   1718          		// int enabled 
   1719          		print_sp1sp();
   \                     ??list_hw_ints_console_25:
   \   00000154   ........           BL       print_sp1sp
   1720          		// pin output? 
   1721          		if(j & (1<<9)) print_b1sp();
   \   00000158   A805               LSLS     R0,R5,#+22
   \   0000015A   02D5               BPL.N    ??list_hw_ints_console_27
   \   0000015C   ........           BL       print_b1sp
   \   00000160   01E0               B.N      ??list_hw_ints_console_28
   1722          		else print_b0sp(); 
   \                     ??list_hw_ints_console_27:
   \   00000162   ........           BL       print_b0sp
   1723          		// pending? 
   1724          		if(k & (1<<9)) printf("1\n\r");
   \                     ??list_hw_ints_console_28:
   \   00000166   B005               LSLS     R0,R6,#+22
   \   00000168   03D5               BPL.N    ??list_hw_ints_console_29
   \   0000016A   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   0000016C   ........           BL       printf
   \   00000170   02E0               B.N      ??list_hw_ints_console_26
   1725          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_29:
   \   00000172   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000174   ........           BL       printf
   1726          	}
   1727          
   1728          	printf("RT2 Timetag Valu Match");
   \                     ??list_hw_ints_console_26:
   \   00000178   ........           LDR.W    R0,??DataTable17_38
   \   0000017C   ........           BL       printf
   1729          	if(!(i & (1<<8))) {	
   \   00000180   E005               LSLS     R0,R4,#+23
   \   00000182   02D4               BMI.N    ??list_hw_ints_console_30
   1730          		// int disabled 
   1731          		print_null();
   \   00000184   ........           BL       print_null
   \   00000188   11E0               B.N      ??list_hw_ints_console_31
   1732          	}
   1733          	else {
   1734          		// int enabled 
   1735          		print_sp1sp();
   \                     ??list_hw_ints_console_30:
   \   0000018A   ........           BL       print_sp1sp
   1736          		// pin output? 
   1737          		if(j & (1<<8)) print_b1sp();
   \   0000018E   E805               LSLS     R0,R5,#+23
   \   00000190   02D5               BPL.N    ??list_hw_ints_console_32
   \   00000192   ........           BL       print_b1sp
   \   00000196   01E0               B.N      ??list_hw_ints_console_33
   1738          		else print_b0sp(); 
   \                     ??list_hw_ints_console_32:
   \   00000198   ........           BL       print_b0sp
   1739          		// pending? 
   1740          		if(k & (1<<8)) printf("1\n\r");
   \                     ??list_hw_ints_console_33:
   \   0000019C   F005               LSLS     R0,R6,#+23
   \   0000019E   03D5               BPL.N    ??list_hw_ints_console_34
   \   000001A0   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000001A2   ........           BL       printf
   \   000001A6   02E0               B.N      ??list_hw_ints_console_31
   1741          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_34:
   \   000001A8   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000001AA   ........           BL       printf
   1742          	}
   1743          
   1744          	printf("RT1 Timetag Valu Match");
   \                     ??list_hw_ints_console_31:
   \   000001AE   ........           LDR.W    R0,??DataTable17_39
   \   000001B2   ........           BL       printf
   1745          	if(!(i & (1<<7))) {	
   \   000001B6   2006               LSLS     R0,R4,#+24
   \   000001B8   02D4               BMI.N    ??list_hw_ints_console_35
   1746          		// int disabled 
   1747          		print_null();
   \   000001BA   ........           BL       print_null
   \   000001BE   11E0               B.N      ??list_hw_ints_console_36
   1748          	}
   1749          	else {
   1750          		// int enabled 
   1751          		print_sp1sp();
   \                     ??list_hw_ints_console_35:
   \   000001C0   ........           BL       print_sp1sp
   1752          		// pin output? 
   1753          		if(j & (1<<7)) print_b1sp();
   \   000001C4   2806               LSLS     R0,R5,#+24
   \   000001C6   02D5               BPL.N    ??list_hw_ints_console_37
   \   000001C8   ........           BL       print_b1sp
   \   000001CC   01E0               B.N      ??list_hw_ints_console_38
   1754          		else print_b0sp(); 
   \                     ??list_hw_ints_console_37:
   \   000001CE   ........           BL       print_b0sp
   1755          		// pending? 
   1756          		if(k & (1<<7)) printf("1\n\r");
   \                     ??list_hw_ints_console_38:
   \   000001D2   3006               LSLS     R0,R6,#+24
   \   000001D4   03D5               BPL.N    ??list_hw_ints_console_39
   \   000001D6   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000001D8   ........           BL       printf
   \   000001DC   02E0               B.N      ??list_hw_ints_console_36
   1757          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_39:
   \   000001DE   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000001E0   ........           BL       printf
   1758          	}
   1759          
   1760          	printf("MT Timetag Value Match");
   \                     ??list_hw_ints_console_36:
   \   000001E4   ........           LDR.W    R0,??DataTable17_40
   \   000001E8   ........           BL       printf
   1761          	if(!(i & (1<<6))) {	
   \   000001EC   6006               LSLS     R0,R4,#+25
   \   000001EE   02D4               BMI.N    ??list_hw_ints_console_40
   1762          		// int disabled 
   1763          		print_null();
   \   000001F0   ........           BL       print_null
   \   000001F4   11E0               B.N      ??list_hw_ints_console_41
   1764          	}
   1765          	else {
   1766          		// int enabled 
   1767          		print_sp1sp();
   \                     ??list_hw_ints_console_40:
   \   000001F6   ........           BL       print_sp1sp
   1768          		// pin output? 
   1769          		if(j & (1<<6)) print_b1sp();
   \   000001FA   6806               LSLS     R0,R5,#+25
   \   000001FC   02D5               BPL.N    ??list_hw_ints_console_42
   \   000001FE   ........           BL       print_b1sp
   \   00000202   01E0               B.N      ??list_hw_ints_console_43
   1770          		else print_b0sp(); 
   \                     ??list_hw_ints_console_42:
   \   00000204   ........           BL       print_b0sp
   1771          		// pending? 
   1772          		if(k & (1<<6)) printf("1\n\r");
   \                     ??list_hw_ints_console_43:
   \   00000208   7006               LSLS     R0,R6,#+25
   \   0000020A   03D5               BPL.N    ??list_hw_ints_console_44
   \   0000020C   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   0000020E   ........           BL       printf
   \   00000212   02E0               B.N      ??list_hw_ints_console_41
   1773          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_44:
   \   00000214   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000216   ........           BL       printf
   1774          	}
   1775          
   1776          	printf("BC Timetag Value Match");
   \                     ??list_hw_ints_console_41:
   \   0000021A   ........           LDR.W    R0,??DataTable17_41
   \   0000021E   ........           BL       printf
   1777          	if(!(i & (1<<5))) {	
   \   00000222   A006               LSLS     R0,R4,#+26
   \   00000224   02D4               BMI.N    ??list_hw_ints_console_45
   1778          		// int disabled 
   1779          		print_null();
   \   00000226   ........           BL       print_null
   \   0000022A   11E0               B.N      ??list_hw_ints_console_46
   1780          	}
   1781          	else {
   1782          		// int enabled 
   1783          		print_sp1sp();
   \                     ??list_hw_ints_console_45:
   \   0000022C   ........           BL       print_sp1sp
   1784          		// pin output? 
   1785          		if(j & (1<<5)) print_b1sp();
   \   00000230   A806               LSLS     R0,R5,#+26
   \   00000232   02D5               BPL.N    ??list_hw_ints_console_47
   \   00000234   ........           BL       print_b1sp
   \   00000238   01E0               B.N      ??list_hw_ints_console_48
   1786          		else print_b0sp(); 
   \                     ??list_hw_ints_console_47:
   \   0000023A   ........           BL       print_b0sp
   1787          		// pending? 
   1788          		if(k & (1<<5)) printf("1\n\r");
   \                     ??list_hw_ints_console_48:
   \   0000023E   B006               LSLS     R0,R6,#+26
   \   00000240   03D5               BPL.N    ??list_hw_ints_console_49
   \   00000242   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000244   ........           BL       printf
   \   00000248   02E0               B.N      ??list_hw_ints_console_46
   1789          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_49:
   \   0000024A   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   0000024C   ........           BL       printf
   1790          	}
   1791          
   1792          	printf("  RT2 Addr Parity Fail");
   \                     ??list_hw_ints_console_46:
   \   00000250   ........           LDR.W    R0,??DataTable17_42
   \   00000254   ........           BL       printf
   1793          	if(!(i & (1<<4))) {	
   \   00000258   E006               LSLS     R0,R4,#+27
   \   0000025A   02D4               BMI.N    ??list_hw_ints_console_50
   1794          		// int disabled 
   1795          		print_null();
   \   0000025C   ........           BL       print_null
   \   00000260   11E0               B.N      ??list_hw_ints_console_51
   1796          	}
   1797          	else {
   1798          		// int enabled 
   1799          		print_sp1sp();
   \                     ??list_hw_ints_console_50:
   \   00000262   ........           BL       print_sp1sp
   1800          		// pin output? 
   1801          		if(j & (1<<4)) print_b1sp();
   \   00000266   E806               LSLS     R0,R5,#+27
   \   00000268   02D5               BPL.N    ??list_hw_ints_console_52
   \   0000026A   ........           BL       print_b1sp
   \   0000026E   01E0               B.N      ??list_hw_ints_console_53
   1802          		else print_b0sp(); 
   \                     ??list_hw_ints_console_52:
   \   00000270   ........           BL       print_b0sp
   1803          		// pending? 
   1804          		if(k & (1<<4)) printf("1\n\r");
   \                     ??list_hw_ints_console_53:
   \   00000274   F006               LSLS     R0,R6,#+27
   \   00000276   03D5               BPL.N    ??list_hw_ints_console_54
   \   00000278   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   0000027A   ........           BL       printf
   \   0000027E   02E0               B.N      ??list_hw_ints_console_51
   1805          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_54:
   \   00000280   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000282   ........           BL       printf
   1806          	}
   1807          
   1808          	printf("  RT1 Addr Parity Fail");
   \                     ??list_hw_ints_console_51:
   \   00000286   ....               LDR.N    R0,??DataTable17_43
   \   00000288   ........           BL       printf
   1809          	if(!(i & (1<<3))) {	
   \   0000028C   2007               LSLS     R0,R4,#+28
   \   0000028E   02D4               BMI.N    ??list_hw_ints_console_55
   1810          		// int disabled 
   1811          		print_null();
   \   00000290   ........           BL       print_null
   \   00000294   11E0               B.N      ??list_hw_ints_console_56
   1812          	}
   1813          	else {
   1814          		// int enabled 
   1815          		print_sp1sp();
   \                     ??list_hw_ints_console_55:
   \   00000296   ........           BL       print_sp1sp
   1816          		// pin output? 
   1817          		if(j & (1<<3)) print_b1sp();
   \   0000029A   2807               LSLS     R0,R5,#+28
   \   0000029C   02D5               BPL.N    ??list_hw_ints_console_57
   \   0000029E   ........           BL       print_b1sp
   \   000002A2   01E0               B.N      ??list_hw_ints_console_58
   1818          		else print_b0sp(); 
   \                     ??list_hw_ints_console_57:
   \   000002A4   ........           BL       print_b0sp
   1819          		// pending? 
   1820          		if(k & (1<<3)) printf("1\n\r");
   \                     ??list_hw_ints_console_58:
   \   000002A8   3007               LSLS     R0,R6,#+28
   \   000002AA   03D5               BPL.N    ??list_hw_ints_console_59
   \   000002AC   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000002AE   ........           BL       printf
   \   000002B2   02E0               B.N      ??list_hw_ints_console_56
   1821          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_59:
   \   000002B4   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000002B6   ........           BL       printf
   1822          	}
   1823          
   1824          	printf(" Check Pending RT Ints");
   \                     ??list_hw_ints_console_56:
   \   000002BA   ....               LDR.N    R0,??DataTable17_44
   \   000002BC   ........           BL       printf
   1825          	if(!(i & (1<<2))) print_dd0n(); // int disabled 
   \   000002C0   6007               LSLS     R0,R4,#+29
   \   000002C2   02D4               BMI.N    ??list_hw_ints_console_60
   \   000002C4   ........           BL       print_dd0n
   \   000002C8   01E0               B.N      ??list_hw_ints_console_61
   1826          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_60:
   \   000002CA   ........           BL       print_dd1n
   1827          
   1828          	printf(" Check Pending MT Ints");
   \                     ??list_hw_ints_console_61:
   \   000002CE   ....               LDR.N    R0,??DataTable17_45
   \   000002D0   ........           BL       printf
   1829          	if(!(i & (1<<1))) print_dd0n(); // int disabled 
   \   000002D4   A007               LSLS     R0,R4,#+30
   \   000002D6   02D4               BMI.N    ??list_hw_ints_console_62
   \   000002D8   ........           BL       print_dd0n
   \   000002DC   01E0               B.N      ??list_hw_ints_console_63
   1830          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_62:
   \   000002DE   ........           BL       print_dd1n
   1831          
   1832          	printf(" Check Pending BC Ints");
   \                     ??list_hw_ints_console_63:
   \   000002E2   ....               LDR.N    R0,??DataTable17_46
   \   000002E4   ........           BL       printf
   1833          	if(!(i & (1<<0))) print_dd0n(); // int disabled 
   \   000002E8   E007               LSLS     R0,R4,#+31
   \   000002EA   02D4               BMI.N    ??list_hw_ints_console_64
   \   000002EC   ........           BL       print_dd0n
   \   000002F0   01E0               B.N      ??list_hw_ints_console_65
   1834          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_64:
   \   000002F2   ........           BL       print_dd1n
   1835          
   1836          	print_line();
   \                     ??list_hw_ints_console_65:
   \   000002F6   ........           BL       print_line
   1837          	printf("Note: Reading the HW Pending Interrupt Register clears it!\n\r");
   \   000002FA   ....               LDR.N    R0,??DataTable17_47
   \   000002FC   ........           BL       printf
   1838          	printf("Press 'M' for menu, or press any valid menu key.   ");
   \   00000300   ....               LDR.N    R0,??DataTable17_48
   \   00000302   ........           BL       printf
   1839          
   1840          	// return value read from the HW Pending Interrupt Register, now cleared 
   1841          	return k;
   \   00000306   3000               MOVS     R0,R6
   \   00000308   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000030A   70BD               POP      {R4-R6,PC}       ;; return
   1842          
   1843          }	// end list_hw_ints_console()
   1844          
   1845          
   1846          //---------------------------------------------------------------
   1847          //  this function lists remote terminal interrupt 
   1848          //	configuration to the console via UART. if there
   1849          //	are pending RT interrupts, these too are displayed.
   1850          //	Function returns the value read from the RT pending
   1851          //	interrupt register, since reading the reg clears it.
   1852          //---------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1853          unsigned short int list_rt_ints_console (void) {
   \                     list_rt_ints_console:
   \   00000000   10B5               PUSH     {R4,LR}
   1854            
   1855                  unsigned short k=0;
   \   00000002   0024               MOVS     R4,#+0
   1856          
   1857          	#if(!(RT1_ena||RT2_ena)) 
   1858          	printf("\n\rNeither Remote Terminal Is Enabled!\n\n\r"); 
   \   00000004   ....               LDR.N    R0,??DataTable17_49
   \   00000006   ........           BL       printf
   1859          	#else // (RT1_ena||RT2_ena)
   1860                  
   1861                      unsigned short i,j;
   1862              
   1863          
   1864                      extern const H6130 pH6130; // HI-6130 register struct base address  
   1865          
   1866                      
   1867                      // formfeed 
   1868                      putchar(12); 	
   1869              
   1870          
   1871                              i = pH6130->RT_INT_ENABLE_REG;
   1872                              j = pH6130->RT_INT_OUTPUT_ENABLE_REG;
   1873                              k = pH6130->RT_PENDING_INT_REG;
   1874          
   1875                              
   1876                      printf("\n\r Remote Terminal Ints  Enabled?   Pin Output?   Pending?\n\r");
   1877                      print_line();
   1878              
   1879                      printf("RT2  Reset RT mode cmd");
   1880                      if(!(i & (1<<15))) {	
   1881                              // int disabled 
   1882                              print_null();
   1883                      }
   1884                      else {
   1885                              // int enabled 
   1886                              print_sp1sp();
   1887                              // pin output? 
   1888                              if(j & (1<<15)) print_b1sp();
   1889                              else print_b0sp(); 
   1890                              // pending? 
   1891                              if(k & (1<<15)) printf("1\n\r");
   1892                              else printf("0\n\r"); 
   1893                      }
   1894              
   1895                      printf("RT2  Index Equals Zero");
   1896                      if(!(i & (1<<14))) {	
   1897                              // int disabled 
   1898                              print_null();
   1899                      }
   1900                      else {
   1901                              // int enabled 
   1902                              print_sp1sp();
   1903                              // pin output? 
   1904                              if(j & (1<<14)) print_b1sp();
   1905                              else print_b0sp(); 
   1906                              // pending? 
   1907                              if(k & (1<<14)) printf("1\n\r");
   1908                              else printf("0\n\r"); 
   1909                      }
   1910              
   1911                      printf("RT2    Illegal Command");
   1912                      if(!(i & (1<<13))) {	
   1913                              // int disabled 
   1914                              print_null();
   1915                      }
   1916                      else {
   1917                              // int enabled 
   1918                              print_sp1sp();
   1919                              // pin output? 
   1920                              if(j & (1<<13)) print_b1sp();
   1921                              else print_b0sp(); 
   1922                              // pending? 
   1923                              if(k & (1<<13)) printf("1\n\r");
   1924                              else printf("0\n\r"); 
   1925                      }
   1926              
   1927                      printf("RT2 Broadcast Msg Rcvd");
   1928                      if(!(i & (1<<12))) {	
   1929                              // int disabled 
   1930                              print_null();
   1931                      }
   1932                      else {
   1933                              // int enabled 
   1934                              print_sp1sp();
   1935                              // pin output? 
   1936                              if(j & (1<<12)) print_b1sp();
   1937                              else print_b0sp(); 
   1938                              // pending? 
   1939                              if(k & (1<<12)) printf("1\n\r");
   1940                              else printf("0\n\r"); 
   1941                      }
   1942              
   1943                      printf("RT2 MessageErrorStatus");
   1944                      if(!(i & (1<<11))) {	
   1945                              // int disabled 
   1946                              print_null();
   1947                      }
   1948                      else {
   1949                              // int enabled 
   1950                              print_sp1sp();
   1951                              // pin output? 
   1952                              if(j & (1<<11)) print_b1sp();
   1953                              else print_b0sp(); 
   1954                              // pending? 
   1955                              if(k & (1<<11)) printf("1\n\r");
   1956                              else printf("0\n\r"); 
   1957                      }
   1958              
   1959                      printf("RT2  Int When Accessed");
   1960                      if(!(i & (1<<10))) {	
   1961                              // int disabled 
   1962                              print_null();
   1963                      }
   1964                      else {
   1965                              // int enabled 
   1966                              print_sp1sp();
   1967                              // pin output? 
   1968                              if(j & (1<<10)) print_b1sp();
   1969                              else print_b0sp(); 
   1970                              // pending? 
   1971                              if(k & (1<<10)) printf("1\n\r");
   1972                              else printf("0\n\r"); 
   1973                      }
   1974              
   1975                      printf("        Reserved Bit 9");
   1976                      print_dddn();
   1977              
   1978                      printf("RT1  Reset RT mode cmd");
   1979                      if(!(i & (1<<8))) {	
   1980                              // int disabled 
   1981                              print_null();
   1982                      }
   1983                      else {
   1984                              // int enabled 
   1985                              print_sp1sp();
   1986                              // pin output? 
   1987                              if(j & (1<<8)) print_b1sp();
   1988                              else print_b0sp(); 
   1989                              // pending? 
   1990                              if(k & (1<<8)) printf("1\n\r");
   1991                              else printf("0\n\r"); 
   1992                      }
   1993              
   1994                      printf("RT1  Index Equals Zero");
   1995                      if(!(i & (1<<7))) {	
   1996                              // int disabled 
   1997                              print_null();
   1998                      }
   1999                      else {
   2000                              // int enabled 
   2001                              print_sp1sp();
   2002                              // pin output? 
   2003                              if(j & (1<<7)) print_b1sp();
   2004                              else print_b0sp(); 
   2005                              // pending? 
   2006                              if(k & (1<<7)) printf("1\n\r");
   2007                              else printf("0\n\r"); 
   2008                      }
   2009              
   2010                      printf("RT1    Illegal Command");
   2011                      if(!(i & (1<<6))) {	
   2012                              // int disabled 
   2013                              print_null();
   2014                      }
   2015                      else {
   2016                              // int enabled 
   2017                              print_sp1sp();
   2018                              // pin output? 
   2019                              if(j & (1<<6)) print_b1sp();
   2020                              else print_b0sp(); 
   2021                              // pending? 
   2022                              if(k & (1<<6)) printf("1\n\r");
   2023                              else printf("0\n\r"); 
   2024                      }
   2025              
   2026                      printf("RT1 Broadcast Msg Rcvd");
   2027                      if(!(i & (1<<5))) {	
   2028                              // int disabled 
   2029                              print_null();
   2030                      }
   2031                      else {
   2032                              // int enabled 
   2033                              print_sp1sp();
   2034                              // pin output? 
   2035                              if(j & (1<<5)) print_b1sp();
   2036                              else print_b0sp(); 
   2037                              // pending? 
   2038                              if(k & (1<<5)) printf("1\n\r");
   2039                              else printf("0\n\r"); 
   2040                      }
   2041              
   2042                      printf("RT1 MessageErrorStatus");
   2043                      if(!(i & (1<<4))) {	
   2044                              // int disabled 
   2045                              print_null();
   2046                      }
   2047                      else {
   2048                              // int enabled 
   2049                              print_sp1sp();
   2050                              // pin output? 
   2051                              if(j & (1<<4)) print_b1sp();
   2052                              else print_b0sp(); 
   2053                              // pending? 
   2054                              if(k & (1<<4)) printf("1\n\r");
   2055                              else printf("0\n\r"); 
   2056                      }
   2057              
   2058                      printf("RT1  Int When Accessed");
   2059                      if(!(i & (1<<3))) {	
   2060                              // int disabled 
   2061                              print_null();
   2062                      }
   2063                      else {
   2064                              // int enabled 
   2065                              print_sp1sp();
   2066                              // pin output? 
   2067                              if(j & (1<<3)) print_b1sp();
   2068                              else print_b0sp(); 
   2069                              // pending? 
   2070                              if(k & (1<<3)) printf("1\n\r");
   2071                              else printf("0\n\r"); 
   2072                      }
   2073              
   2074                      printf("     Reserved Bits 2-0");
   2075                      print_dddn();
   2076                      print_line();
   2077                      printf("Note: Reading the RT Pending Interrupt Register clears it!\n\r");
   2078                      
   2079          	#endif // (RT1_ena||RT2_ena)
   2080          	print_menuprompt();
   \   0000000A   ........           BL       print_menuprompt
   2081          
   2082          	// return value read from the RT Pending Interrupt Register, now cleared 
   2083          	return k;
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   10BD               POP      {R4,PC}          ;; return
   2084          
   2085          }	// end list_rt_ints_console()
   2086          
   2087          
   2088          
   2089          
   2090          //---------------------------------------------------------------------------
   2091          //   brief	this function checks for keyboard input and
   2092          //		decodes it, acts on it, when it occurs
   2093          //---------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2094          void chk_key_input(void) {
   \                     chk_key_input:
   \   00000000   10B5               PUSH     {R4,LR}
   2095          
   2096              char key;
   2097          
   2098              
   2099              // poll USART Channel Status Reg for Rx Ready 
   2100              if(USART_IsRxReady(BOARD_USART_BASE)) {
   \   00000002   ....               LDR.N    R0,??DataTable17_50  ;; 0x40094000
   \   00000004   ........           BL       USART_IsRxReady
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   58D0               BEQ.N    ??chk_key_input_0
   2101                  // got key press at computer keyboard,
   2102                  // read USART Receive Holding register
   2103                  key = USART_GetChar(BOARD_USART_BASE);
   \   0000000C   ....               LDR.N    R0,??DataTable17_50  ;; 0x40094000
   \   0000000E   ........           BL       USART_GetChar
   \   00000012   0400               MOVS     R4,R0
   2104                
   2105                  //-----------------------------------
   2106                  
   2107                  if (watch) {
   \   00000014   ....               LDR.N    R0,??DataTable17_51
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   50D1               BNE.N    ??chk_key_input_0
   2108                      // Memory Watch mode enabled
   2109          
   2110                    
   2111                  } // end if(watch)
   2112                  
   2113                  else { // Memory Watch mode disabled, normal menu mode...
   2114                    
   2115                      switch(key) {
   \   0000001C   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   3128               CMP      R0,#+49
   \   00000022   2DD0               BEQ.N    ??chk_key_input_1
   \   00000024   3228               CMP      R0,#+50
   \   00000026   34D0               BEQ.N    ??chk_key_input_2
   \   00000028   3328               CMP      R0,#+51
   \   0000002A   35D0               BEQ.N    ??chk_key_input_3
   \   0000002C   3628               CMP      R0,#+54
   \   0000002E   39D0               BEQ.N    ??chk_key_input_4
   \   00000030   3728               CMP      R0,#+55
   \   00000032   34D0               BEQ.N    ??chk_key_input_5
   \   00000034   4128               CMP      R0,#+65
   \   00000036   1CD0               BEQ.N    ??chk_key_input_6
   \   00000038   4428               CMP      R0,#+68
   \   0000003A   1AD0               BEQ.N    ??chk_key_input_6
   \   0000003C   4D28               CMP      R0,#+77
   \   0000003E   12D0               BEQ.N    ??chk_key_input_7
   \   00000040   5228               CMP      R0,#+82
   \   00000042   16D0               BEQ.N    ??chk_key_input_6
   \   00000044   5528               CMP      R0,#+85
   \   00000046   14D0               BEQ.N    ??chk_key_input_6
   \   00000048   5728               CMP      R0,#+87
   \   0000004A   12D0               BEQ.N    ??chk_key_input_6
   \   0000004C   6128               CMP      R0,#+97
   \   0000004E   10D0               BEQ.N    ??chk_key_input_6
   \   00000050   6428               CMP      R0,#+100
   \   00000052   0ED0               BEQ.N    ??chk_key_input_6
   \   00000054   6D28               CMP      R0,#+109
   \   00000056   06D0               BEQ.N    ??chk_key_input_7
   \   00000058   7228               CMP      R0,#+114
   \   0000005A   0AD0               BEQ.N    ??chk_key_input_6
   \   0000005C   7528               CMP      R0,#+117
   \   0000005E   08D0               BEQ.N    ??chk_key_input_6
   \   00000060   7728               CMP      R0,#+119
   \   00000062   06D0               BEQ.N    ??chk_key_input_6
   \   00000064   21E0               B.N      ??chk_key_input_8
   2116                          
   2117                          case 'm':
   2118                          case 'M':
   2119                              watch = 0;
   \                     ??chk_key_input_7:
   \   00000066   ....               LDR.N    R0,??DataTable17_51
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   0170               STRB     R1,[R0, #+0]
   2120                              show_menu();
   \   0000006C   ........           BL       show_menu
   2121                          break;
   \   00000070   21E0               B.N      ??chk_key_input_9
   2122                          
   2123                          // the W keys are only recognized if HI-6131
   2124          
   2125                          case 'w':
   2126                          case 'W':
   2127                              
   2128                          // these keys are only recognized in Memory Watch mode
   2129                          case 'r':
   2130                          case 'R':
   2131                          case 'u':
   2132                          case 'U':
   2133                          case 'd':
   2134                          case 'D':
   2135                          case 'a':
   2136                          case 'A':
   2137                              // formfeed
   2138                              putchar(12); 	
   \                     ??chk_key_input_6:
   \   00000072   0C20               MOVS     R0,#+12
   \   00000074   ........           BL       putchar
   2139                              printf("\n\r Invalid Choice. Press 'M' for menu, or press any valid menu key. >> ");
   \   00000078   ....               LDR.N    R0,??DataTable17_52
   \   0000007A   ........           BL       printf
   2140                          break;
   \   0000007E   1AE0               B.N      ??chk_key_input_9
   2141                                
   2142                           #if(BC_ena) 
   2143                                case '1':	
   2144                                    // Generate a BC external trigger pulse for the HI-613x
   2145                                    bc_trigger();
   \                     ??chk_key_input_1:
   \   00000080   ........           BL       bc_trigger
   2146                                    // message completion delay, 1.5ms
   2147                                    Delay_us(1500);
   \   00000084   40F2DC50           MOVW     R0,#+1500
   \   00000088   ........           BL       Delay_us
   2148                                    // console output reg and RAM info for last completed msg
   2149                                    bc_last_msg_console();
   \   0000008C   ........           BL       bc_last_msg_console
   2150                                break;
   \   00000090   11E0               B.N      ??chk_key_input_9
   2151                        
   2152                                case '2': 		
   2153                                    list_bc_config();
   \                     ??chk_key_input_2:
   \   00000092   ........           BL       list_bc_config
   2154                                break;
   \   00000096   0EE0               B.N      ??chk_key_input_9
   2155                            
   2156                                case '3': 
   2157                                    // output Cond Code / GP Flag reg to console via UART
   2158                                    list_bc_ccgpf_reg();
   \                     ??chk_key_input_3:
   \   00000098   ........           BL       list_bc_ccgpf_reg
   2159                                break;
   \   0000009C   0BE0               B.N      ??chk_key_input_9
   2160                                
   2161                                case '7':
   2162                                    // display bc interrupt status
   2163                                    list_bc_ints_console();
   \                     ??chk_key_input_5:
   \   0000009E   ........           BL       list_bc_ints_console
   2164                                break;
   \   000000A2   08E0               B.N      ??chk_key_input_9
   2165                                
   2166                            #endif // (BC_ena) 
   2167                            
   2168                            #if(SMT_ena || IMT_ena)
   2169                                case '4': 		
   2170                                    list_mt_config();
   2171                                break;
   2172                
   2173                                case '5': 		
   2174                                    mt_last_msg_console();
   2175                                break;
   2176                            #endif // (SMT_ena || IMT_ena)
   2177                            
   2178                            case '6':
   2179                                // display hw interrupt status
   2180                                list_hw_ints_console();
   \                     ??chk_key_input_4:
   \   000000A4   ........           BL       list_hw_ints_console
   2181                            break;
   \   000000A8   05E0               B.N      ??chk_key_input_9
   2182                            
   2183                            #if(RT1_ena || RT2_ena)
   2184                                case '8':
   2185                                    // display rt interrupt status
   2186                                    list_rt_ints_console();
   2187                                break;
   2188                            #endif // (RT1_ena || RT2_ena)
   2189                            
   2190                            #if(SMT_ena || IMT_ena)
   2191                                case '9':
   2192                                    // display mt interrupt status
   2193                                    list_mt_ints_console();
   2194                                break;
   2195                            #endif // (SMT_ena || IMT_ena)
   2196                            
   2197                            
   2198                            default:
   2199                                // ignore unrecognized keys
   2200                                // formfeed
   2201                                putchar(12); 	
   \                     ??chk_key_input_8:
   \   000000AA   0C20               MOVS     R0,#+12
   \   000000AC   ........           BL       putchar
   2202                                printf("\n\r Invalid Choice. Press 'M' for menu, or press any valid menu key. >> ");
   \   000000B0   ....               LDR.N    R0,??DataTable17_52
   \   000000B2   ........           BL       printf
   2203                            break;
   2204                            
   2205                      } // end switch(key)
   2206                      
   2207                      // prevent warning: waddr as declared but never referenced
   2208                      waddr = waddr;
   \                     ??chk_key_input_9:
   \   000000B6   ....               LDR.N    R0,??DataTable17_53
   \   000000B8   ....               LDR.N    R1,??DataTable17_53
   \   000000BA   0988               LDRH     R1,[R1, #+0]
   \   000000BC   0180               STRH     R1,[R0, #+0]
   2209                                                    
   2210                  }  // end else !watch
   2211                  
   2212              }  // end if(USART_IsRxReady(BOARD_USART_BASE))
   2213                              
   2214          } // end chk_key_input()
   \                     ??chk_key_input_0:
   \   000000BE   10BD               POP      {R4,PC}          ;; return
   2215                              
   2216                                                                                                           
   2217                                                 
   2218          //----------------------------------------------------------------------------
   2219          //    used by above function, this function converts a char 0-15 into 0x0-0xF
   2220          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2221          unsigned char ascii2int(char ch) {
   \                     ascii2int:
   \   00000000   0100               MOVS     R1,R0
   2222              unsigned char hex;
   2223              if((ch >='0') && (ch<='9')) hex = ch - '0';
   \   00000002   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   3029               CMP      R1,#+48
   \   00000006   06D3               BCC.N    ??ascii2int_0
   \   00000008   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   3A29               CMP      R1,#+58
   \   0000000C   03D2               BCS.N    ??ascii2int_0
   \   0000000E   B1F13002           SUBS     R2,R1,#+48
   \   00000012   1000               MOVS     R0,R2
   \   00000014   15E0               B.N      ??ascii2int_1
   2224              else if ((ch >='A') && (ch<='F')) hex = ch - 'A' + 10;
   \                     ??ascii2int_0:
   \   00000016   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   4129               CMP      R1,#+65
   \   0000001A   06D3               BCC.N    ??ascii2int_2
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   4729               CMP      R1,#+71
   \   00000020   03D2               BCS.N    ??ascii2int_2
   \   00000022   B1F13702           SUBS     R2,R1,#+55
   \   00000026   1000               MOVS     R0,R2
   \   00000028   0BE0               B.N      ??ascii2int_1
   2225              else if ((ch >='a') && (ch<='f')) hex = ch - 'a' + 10;
   \                     ??ascii2int_2:
   \   0000002A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   6129               CMP      R1,#+97
   \   0000002E   06D3               BCC.N    ??ascii2int_3
   \   00000030   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   6729               CMP      R1,#+103
   \   00000034   03D2               BCS.N    ??ascii2int_3
   \   00000036   B1F15702           SUBS     R2,R1,#+87
   \   0000003A   1000               MOVS     R0,R2
   \   0000003C   01E0               B.N      ??ascii2int_1
   2226              else hex = 0;
   \                     ??ascii2int_3:
   \   0000003E   0022               MOVS     R2,#+0
   \   00000040   1000               MOVS     R0,R2
   2227              return hex;
   \                     ??ascii2int_1:
   \   00000042   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   7047               BX       LR               ;; return
   2228          }
   2229                                                 
   2230                                                 
   2231                                                 
   2232                                                 
   2233                                                 
   2234          //-----------------------------------------------------------------
   2235          //    these functions give printf for text strings used
   2236          //    many times. reduces ROM needed for text storage
   2237          //-----------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2238          void print_null(void) {
   \                     print_null:
   \   00000000   80B5               PUSH     {R7,LR}
   2239          	printf("    0           -           -\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable17_54
   \   00000004   ........           BL       printf
   2240          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2241          
   2242          

   \                                 In section .text, align 2, keep-with-next
   2243          void print_sp1sp(void) {
   \                     print_sp1sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2244          	printf("    1           ");
   \   00000002   ....               LDR.N    R0,??DataTable17_55
   \   00000004   ........           BL       printf
   2245          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2246          
   2247          

   \                                 In section .text, align 2, keep-with-next
   2248          void print_b1sp(void) {
   \                     print_b1sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2249          	printf("1           ");
   \   00000002   ....               LDR.N    R0,??DataTable17_56
   \   00000004   ........           BL       printf
   2250          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2251          
   2252          

   \                                 In section .text, align 2, keep-with-next
   2253          void print_b0sp(void) {
   \                     print_b0sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2254          	printf("0           ");
   \   00000002   ....               LDR.N    R0,??DataTable17_57
   \   00000004   ........           BL       printf
   2255          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2256          
   2257          

   \                                 In section .text, align 2, keep-with-next
   2258          void print_dddn(void) {
   \                     print_dddn:
   \   00000000   80B5               PUSH     {R7,LR}
   2259          	printf("    -           -           -\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable17_58
   \   00000004   ........           BL       printf
   2260          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2261          
   2262          

   \                                 In section .text, align 2, keep-with-next
   2263          void print_dd0n(void) {
   \                     print_dd0n:
   \   00000000   80B5               PUSH     {R7,LR}
   2264          	printf("    -           -           0\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable17_59
   \   00000004   ........           BL       printf
   2265          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2266          
   2267          

   \                                 In section .text, align 2, keep-with-next
   2268          void print_dd1n(void) {
   \                     print_dd1n:
   \   00000000   80B5               PUSH     {R7,LR}
   2269          	printf("    -           -           1\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable17_60
   \   00000004   ........           BL       printf
   2270          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2271          

   \                                 In section .text, align 2, keep-with-next
   2272          void print_menuprompt(void) {
   \                     print_menuprompt:
   \   00000000   80B5               PUSH     {R7,LR}
   2273          	printf("Press 'M' for menu, or press any valid menu key. >> ");
   \   00000002   ....               LDR.N    R0,??DataTable17_61
   \   00000004   ........           BL       printf
   2274          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2275          

   \                                 In section .text, align 2, keep-with-next
   2276          void print_line(void) {
   \                     print_line:
   \   00000000   80B5               PUSH     {R7,LR}
   2277          	printf("===========================================================\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable17_62
   \   00000004   ........           BL       printf
   2278          }
   \   00000008   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     `?<Constant {{2097152, (AT91S_PIO *)1074662400,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   006CDC02           DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   ........           DC32     `?<Constant "\\n\\r*******************...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   ........           DC32     `?<Constant "   Holt Integrated Ci...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   ........           DC32     `?<Constant "10:22:55">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   ........           DC32     `?<Constant "Jun 18 2012">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   ........           DC32     `?<Constant "        Compiled: %s ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   ........           DC32     `?<Constant "*********************...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   ........           DC32     `?<Constant "   BC On   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   ........           DC32     `?<Constant "MT Off   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   ........           DC32     `?<Constant "RT1 Off  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   ........           DC32     `?<Constant "RT2 Off">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   ........           DC32     `?<Constant " Press \\'1\\' to step BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   ........           DC32     `?<Constant " Press \\'2\\' to list BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   ........           DC32     `?<Constant " Press \\'3\\' to list BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   ........           DC32     `?<Constant " Press \\'6\\' to list HW...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   ........           DC32     `?<Constant " Press \\'7\\' to list BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   ........           DC32     `?<Constant " NOTE: Options 6-9 cl...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   00400940           DC32     0x40094000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     `?<Constant "\\n\\rResults From Last M...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     `?<Constant "Message Type: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     `?<Constant "Broadcast ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     `?<Constant "RT-RT Message, ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   ........           DC32     `?<Constant "Mode Code %02d With D...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   ........           DC32     `?<Constant "Mode Code %02d w/o Da...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   ........           DC32     `?<Constant "Mode Code %02d w/o Da...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   ........           DC32     `?<Constant "Subaddress Command, ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   ........           DC32     `?<Constant "%d data word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW m...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW i...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: TxCW i...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: TxCW m...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW &...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW &...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   ........           DC32     `?<Constant "CW1: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   ........           DC32     `?<Constant " = %02d-%1d-%02d-%02d...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   ........           DC32     `?<Constant "RSW not applicable\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   ........           DC32     `?<Constant "RxSW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   ........           DC32     `?<Constant " = RT%02d ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_24:
   \   00000000   ........           DC32     `?<Constant "CS\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_25:
   \   00000000   ........           DC32     `?<Constant "INST ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_26:
   \   00000000   ........           DC32     `?<Constant "SRQ ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_27:
   \   00000000   ........           DC32     `?<Constant "RSV ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_28:
   \   00000000   ........           DC32     `?<Constant "BCR ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_29:
   \   00000000   ........           DC32     `?<Constant "BSY ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_30:
   \   00000000   ........           DC32     `?<Constant "SSF ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_31:
   \   00000000   ........           DC32     `?<Constant "DBCA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_32:
   \   00000000   ........           DC32     `?<Constant "CW2: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_33:
   \   00000000   ........           DC32     `?<Constant "TxSW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_34:
   \   00000000   ........           DC32     `?<Constant "CS\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     `?<Constant "CW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     `?<Constant "SW not applicable\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     `?<Constant "SW not received\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     `?<Constant "SW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   ........           DC32     `?<Constant "BC Control Word: 0x%....">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     `?<Constant "MC17TTL ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     `?<Constant "MEmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     `?<Constant "SRQmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   ........           DC32     `?<Constant "BSYmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   ........           DC32     `?<Constant "SSFmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   ........           DC32     `?<Constant "TFmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   ........           DC32     `?<Constant "RSVmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   ........           DC32     `?<Constant "RetryEna ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   ........           DC32     `?<Constant "UseBusA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   ........           DC32     `?<Constant "UseBusB ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   ........           DC32     `?<Constant "SelfTest ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   ........           DC32     `?<Constant "maskBCR ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   ........           DC32     `?<Constant "EOMirq ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   ........           DC32     `?<Constant "NonBcstSA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   ........           DC32     `?<Constant "RTRT ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   ........           DC32     `?<Constant "BcstSA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   ........           DC32     `?<Constant "BcstRTRT ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   ........           DC32     `?<Constant "RTRT_MC?? ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   ........           DC32     `?<Constant "BcstMC ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   ........           DC32     `?<Constant "BcstRTRT_MC?? ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   ........           DC32     `?<Constant "The Cmd Word and Cont...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   ........           DC32     `?<Constant "The Cmd Word and Cont...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   ........           DC32     `?<Constant "Block Status Word: 0x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   ........           DC32     `?<Constant "SOM  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   ........           DC32     `?<Constant "EOM  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   ........           DC32     `?<Constant "BusB  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   ........           DC32     `?<Constant "Bus A  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   ........           DC32     `?<Constant "ErrOcc ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   ........           DC32     `?<Constant "SSet  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   ........           DC32     `?<Constant "NoResp  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   ........           DC32     `?<Constant "LpBk  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   ........           DC32     `?<Constant "2retry  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   ........           DC32     `?<Constant "1retry  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   ........           DC32     `?<Constant "GDB  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   ........           DC32     `?<Constant "WAG  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   ........           DC32     `?<Constant "WdCt  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   ........           DC32     `?<Constant "SyncErr  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   ........           DC32     `?<Constant "InvWd  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   ........           DC32     `?<Constant "FmtErr  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   ........           DC32     `?<Constant "MSSet  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   ........           DC32     `?<Constant "Condition Code Regist...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   ........           DC32     `?<Constant "BC Stopped: No Condit...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   ........           DC32     `?<Constant "BC Running: No Condit...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   ........           DC32     `?<Constant "BC Is Running.\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   ........           DC32     `?<Constant "BC Not Running.\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   ........           DC32     `?<Constant "2Retries  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   ........           DC32     `?<Constant "1Retry  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   ........           DC32     `?<Constant "BadMsg  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   ........           DC32     `?<Constant "GdDataBlk  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   ........           DC32     `?<Constant "GPF7  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   ........           DC32     `?<Constant "GPF6  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   ........           DC32     `?<Constant "GPF5  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   ........           DC32     `?<Constant "GPF4  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   ........           DC32     `?<Constant "GPF3  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   ........           DC32     `?<Constant "GPF2  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   ........           DC32     `?<Constant "LT-GPF1  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   ........           DC32     `?<Constant "EQ-GPF0  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   ........           DC32     `?<Constant "No RT response, no re...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   ........           DC32     `?<Constant "Data Addr: 0x%.2X%.2X...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   ........           DC32     `?<Constant "Bus Addr: 0x6000%.2X%...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   ........           DC32     `?<Constant "\\n\\rBC Configuration Re...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   ........           DC32     `?<Constant "  20">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   ........           DC32     `?<Constant "  58">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   ........           DC32     `?<Constant " 138">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   ........           DC32     `?<Constant "  15">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   ........           DC32     `?<Constant "us Timeout (bus dead ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     `?<Constant "Check Control Word Fo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     `?<Constant "Don\\'t Check Control W...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     `?<Constant " 2 Retries, Same Bus,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   ........           DC32     `?<Constant "  2 Retries, Alt Bus,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   ........           DC32     `?<Constant "  2 Retries, Same Bus...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   ........           DC32     `?<Constant "   2 Retries, Alt Bus...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   ........           DC32     `?<Constant "  1 Retry if Msg Fail...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   ........           DC32     `?<Constant " 1 Retry if Msg Fail,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   ........           DC32     `?<Constant "    No Retries for Ms...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   ........           DC32     `?<Constant "Retry if RT status bi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   ........           DC32     `?<Constant "No Retry if RT status...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   ........           DC32     `?<Constant " RT status ME w/o dat...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   ........           DC32     `?<Constant " RT status ME w/o dat...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   ........           DC32     `?<Constant "RT status BSY w/o dat...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   ........           DC32     `?<Constant "RT status BSY w/o dat...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   ........           DC32     `?<Constant "            Msg Gap T...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant "           Msg Gap Ti...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   ........           DC32     `?<Constant "Watchdog Frame Timer ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   ........           DC32     `?<Constant "Watchdog Frame Timer ...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   ........           DC32     `?<Constant "MC17 send Time Tag lo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   ........           DC32     `?<Constant "MC17 send data in msg...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   ........           DC32     `?<Constant "MC17 data word always...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     `?<Constant "MC17 data may be even...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     `?<Constant "  Enable 4us Minimum ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     `?<Constant "   No 4us Minimum Gap...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     `?<Constant "BCR Mask Enabled, BCR...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     `?<Constant "BCR Mask Disabled, BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     `?<Constant "Timetag Config Regist...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     `?<Constant "32-bit timebase with ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     `?<Constant "16-bit timebase with ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \   00000000   ........           DC32     `?<Constant "clock disabled! ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_2:
   \   00000000   ........           DC32     `?<Constant "ext clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_3:
   \   00000000   ........           DC32     `?<Constant "2us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_4:
   \   00000000   ........           DC32     `?<Constant "4us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_5:
   \   00000000   ........           DC32     `?<Constant "8us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_6:
   \   00000000   ........           DC32     `?<Constant "16us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_7:
   \   00000000   ........           DC32     `?<Constant "32us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_8:
   \   00000000   ........           DC32     `?<Constant "64us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_9:
   \   00000000   ........           DC32     `?<Constant "\\n\\rBC Condition Code &...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_10:
   \   00000000   ........           DC32     `?<Constant "BC Stopped: No Condit...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_11:
   \   00000000   ........           DC32     `?<Constant "BC Running: No Condit...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_12:
   \   00000000   ........           DC32     `?<Constant "BC Is Running.\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_13:
   \   00000000   ........           DC32     `?<Constant "BC Not Running.\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_14:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Bus Controller Int...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_15:
   \   00000000   ........           DC32     `?<Constant "BC Frame Timer Expired">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_16:
   \   00000000   ........           DC32     `?<Constant "Selected Msg Int,EOM=1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_17:
   \   00000000   ........           DC32     `?<Constant "GenPurp Queue Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_18:
   \   00000000   ........           DC32     `?<Constant "   Message Was Retried">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_19:
   \   00000000   ........           DC32     `?<Constant "Call Stack Pointer Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_20:
   \   00000000   ........           DC32     `?<Constant "  Illegal Op Code Trap">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_21:
   \   00000000   ........           DC32     `?<Constant "Unexpected RT Stat Bit">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_22:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 3">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_23:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_24:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_25:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_26:
   \   00000000   ........           DC32     `?<Constant "RT Status is Msg Error">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_27:
   \   00000000   ........           DC32     `?<Constant "     BC End-of-Message">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_28:
   \   00000000   ........           DC32     `?<Constant "     Reserved Bits 2-0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_29:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the BC ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_30:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Hardware Interrupt...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_31:
   \   00000000   ........           DC32     `?<Constant "HI-6131 Host SPI Erro...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_32:
   \   00000000   ........           DC32     `?<Constant "EE Chksum/Corr RAM Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_33:
   \   00000000   ........           DC32     `?<Constant "RAM Init/UncorrRAM Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_34:
   \   00000000   ........           DC32     `?<Constant "Loopback Fail on Bus A">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_35:
   \   00000000   ........           DC32     `?<Constant "Loopback Fail on Bus B">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_36:
   \   00000000   ........           DC32     `?<Constant "MT Timetag Ct Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_37:
   \   00000000   ........           DC32     `?<Constant "BC Timetag Ct Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_38:
   \   00000000   ........           DC32     `?<Constant "RT2 Timetag Valu Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_39:
   \   00000000   ........           DC32     `?<Constant "RT1 Timetag Valu Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_40:
   \   00000000   ........           DC32     `?<Constant "MT Timetag Value Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_41:
   \   00000000   ........           DC32     `?<Constant "BC Timetag Value Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_42:
   \   00000000   ........           DC32     `?<Constant "  RT2 Addr Parity Fail">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_43:
   \   00000000   ........           DC32     `?<Constant "  RT1 Addr Parity Fail">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_44:
   \   00000000   ........           DC32     `?<Constant " Check Pending RT Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_45:
   \   00000000   ........           DC32     `?<Constant " Check Pending MT Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_46:
   \   00000000   ........           DC32     `?<Constant " Check Pending BC Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_47:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the HW ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_48:
   \   00000000   ........           DC32     `?<Constant "Press \\'M\\' for menu, o...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_49:
   \   00000000   ........           DC32     `?<Constant "\\n\\rNeither Remote Term...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_50:
   \   00000000   00400940           DC32     0x40094000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_51:
   \   00000000   ........           DC32     watch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_52:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Invalid Choice. Pr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_53:
   \   00000000   ........           DC32     waddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_54:
   \   00000000   ........           DC32     `?<Constant "    0           -    ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_55:
   \   00000000   ........           DC32     `?<Constant "    1           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_56:
   \   00000000   ........           DC32     `?<Constant "1           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_57:
   \   00000000   ........           DC32     `?<Constant "0           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_58:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_59:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_60:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">_2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_61:
   \   00000000   ........           DC32     `?<Constant "Press \\'M\\' for menu, o...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_62:
   \   00000000   ........           DC32     `?<Constant "=====================...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant {{2097152, (AT91S_PIO *)1074662400,`:
   \   00000000   00002000000C       DC32 2097152, 400E0C00H
   \              0E40        
   \   00000008   0A0000000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000001B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000020   00001000000C       DC32 1048576, 400E0C00H
   \              0E40        
   \   00000028   0A0000000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000003B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000040   00008000000C       DC32 8388608, 400E0C00H
   \              0E40        
   \   00000048   0A0100000000       DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000005B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000060   00004000000C       DC32 4194304, 400E0C00H
   \              0E40        
   \   00000068   0A0100000000       DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000007B   0000000000         DC8 0, 0, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r*******************...">`:
   \   00000000   0A0D2A2A2A2A       DC8 0AH, 0DH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000008   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000010   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000018   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000020   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000028   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000030   2A2A2A0A0D00       DC8 2AH, 2AH, 2AH, 0AH, 0DH, 0
   \   00000036   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Holt Integrated Ci...">`:
   \   00000000   202020486F6C       DC8 20H, 20H, 20H, 48H, 6FH, 6CH, 74H, 20H
   \              7420        
   \   00000008   496E74656772       DC8 49H, 6EH, 74H, 65H, 67H, 72H, 61H, 74H
   \              6174        
   \   00000010   656420436972       DC8 65H, 64H, 20H, 43H, 69H, 72H, 63H, 75H
   \              6375        
   \   00000018   697473204849       DC8 69H, 74H, 73H, 20H, 48H, 49H, 2DH, 36H
   \              2D36        
   \   00000020   3133305F3430       DC8 31H, 33H, 30H, 5FH, 34H, 30H, 20H, 45H
   \              2045        
   \   00000028   42492050726F       DC8 42H, 49H, 20H, 50H, 72H, 6FH, 6AH, 65H
   \              6A65        
   \   00000030   63742020200A       DC8 63H, 74H, 20H, 20H, 20H, 0AH, 0DH, 0
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "        Compiled: %s ...">`:
   \   00000000   202020202020       DC8 "        Compiled: %s %s        \012\015"
   \              2020436F6D70
   \              696C65643A20
   \              257320257320
   \              202020202020
   \              200A0D00    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Jun 18 2012">`:
   \   00000000   4A756E203138       DC8 "Jun 18 2012"
   \              203230313200

   \                                 In section .rodata, align 4
   \                     `?<Constant "10:22:55">`:
   \   00000000   31303A32323A       DC8 "10:22:55"
   \              353500      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "*********************...">`:
   \   00000000   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000008   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000010   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000018   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000020   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000028   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000030   2A0A0A0D00         DC8 2AH, 0AH, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   BC On   ">`:
   \   00000000   202020424320       DC8 "   BC On   "
   \              4F6E20202000

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Off   ">`:
   \   00000000   4D54204F6666       DC8 "MT Off   "
   \              20202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 Off  ">`:
   \   00000000   525431204F66       DC8 "RT1 Off  "
   \              66202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 Off">`:
   \   00000000   525432204F66       DC8 "RT2 Off"
   \              6600        

   \                                 In section .rodata, align 4
   \   00000000   0A0A0D00           DC8 "\012\012\015"

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'1\\' to step BC...">`:
   \   00000000   205072657373       DC8 " Press '1' to step BC and list results...\012\015"
   \              202731272074
   \              6F2073746570
   \              20424320616E
   \              64206C697374
   \              20726573756C
   \              74732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'2\\' to list BC...">`:
   \   00000000   205072657373       DC8 " Press '2' to list BC configuration...\012\015"
   \              202732272074
   \              6F206C697374
   \              20424320636F
   \              6E6669677572
   \              6174696F6E2E
   \              2E2E0A0D00  
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'3\\' to list BC...">`:
   \   00000000   205072657373       DC8 20H, 50H, 72H, 65H, 73H, 73H, 20H, 27H
   \              2027        
   \   00000008   332720746F20       DC8 33H, 27H, 20H, 74H, 6FH, 20H, 6CH, 69H
   \              6C69        
   \   00000010   737420424320       DC8 73H, 74H, 20H, 42H, 43H, 20H, 63H, 6FH
   \              636F        
   \   00000018   6E646974696F       DC8 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH, 20H
   \              6E20        
   \   00000020   636F64657320       DC8 63H, 6FH, 64H, 65H, 73H, 20H, 26H, 20H
   \              2620        
   \   00000028   475020666C61       DC8 47H, 50H, 20H, 66H, 6CH, 61H, 67H, 73H
   \              6773        
   \   00000030   2E2E2E0A0D00       DC8 2EH, 2EH, 2EH, 0AH, 0DH, 0
   \   00000036   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'6\\' to list HW...">`:
   \   00000000   205072657373       DC8 " Press '6' to list HW interrupt status...\012\015"
   \              202736272074
   \              6F206C697374
   \              20485720696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'7\\' to list BC...">`:
   \   00000000   205072657373       DC8 " Press '7' to list BC interrupt status...\012\015"
   \              202737272074
   \              6F206C697374
   \              20424320696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " NOTE: Options 6-9 cl...">`:
   \   00000000   204E4F54453A       DC8 20H, 4EH, 4FH, 54H, 45H, 3AH, 20H, 4FH
   \              204F        
   \   00000008   7074696F6E73       DC8 70H, 74H, 69H, 6FH, 6EH, 73H, 20H, 36H
   \              2036        
   \   00000010   2D3920636C65       DC8 2DH, 39H, 20H, 63H, 6CH, 65H, 61H, 72H
   \              6172        
   \   00000018   207468652061       DC8 20H, 74H, 68H, 65H, 20H, 61H, 63H, 63H
   \              6363        
   \   00000020   657373656420       DC8 65H, 73H, 73H, 65H, 64H, 20H, 50H, 65H
   \              5065        
   \   00000028   6E64696E6720       DC8 6EH, 64H, 69H, 6EH, 67H, 20H, 49H, 6EH
   \              496E        
   \   00000030   746572727570       DC8 74H, 65H, 72H, 72H, 75H, 70H, 74H, 20H
   \              7420        
   \   00000038   526567697374       DC8 52H, 65H, 67H, 69H, 73H, 74H, 65H, 72H
   \              6572        
   \   00000040   210A0D00           DC8 21H, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \   00000000   0A0D00             DC8 "\012\015"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rResults From Last M...">`:
   \   00000000   0A0D52657375       DC8 "\012\015Results From Last Message Issued by BC\012\015"
   \              6C7473204672
   \              6F6D204C6173
   \              74204D657373
   \              616765204973
   \              737565642062
   \              792042430A0D
   \              00          
   \   0000002B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Message Type: ">`:
   \   00000000   4D6573736167       DC8 "Message Type: "
   \              652054797065
   \              3A2000      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Broadcast ">`:
   \   00000000   42726F616463       DC8 "Broadcast "
   \              6173742000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT Message, ">`:
   \   00000000   52542D525420       DC8 "RT-RT Message, "
   \              4D6573736167
   \              652C2000    

   \                                 In section .rodata, align 4
   \   00000000   54782000           DC8 "Tx "

   \                                 In section .rodata, align 4
   \   00000000   52782000           DC8 "Rx "

   \                                 In section .rodata, align 4
   \                     `?<Constant "Mode Code %02d With D...">`:
   \   00000000   4D6F64652043       DC8 "Mode Code %02d With Data 0x%.2X%.2X\012\012\015"
   \              6F6465202530
   \              326420576974
   \              682044617461
   \              203078252E32
   \              58252E32580A
   \              0A0D00      
   \   00000027   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Mode Code %02d w/o Da...">`:
   \   00000000   4D6F64652043       DC8 "Mode Code %02d w/o Data\012\012\015"
   \              6F6465202530
   \              326420772F6F
   \              20446174610A
   \              0A0D00      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Mode Code %02d w/o Da...">_1`:
   \   00000000   4D6F64652043       DC8 "Mode Code %02d w/o Data, Undefined\012\012\015"
   \              6F6465202530
   \              326420772F6F
   \              20446174612C
   \              20556E646566
   \              696E65640A0A
   \              0D00        
   \   00000026   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Subaddress Command, ">`:
   \   00000000   537562616464       DC8 "Subaddress Command, "
   \              726573732043
   \              6F6D6D616E64
   \              2C2000      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d data word">`:
   \   00000000   256420646174       DC8 "%d data word"
   \              6120776F7264
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 2
   \   00000000   7300               DC8 "s"

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW m...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW mode code.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              57206D6F6465
   \              20636F64652E
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW i...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW is transmit.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              572069732074
   \              72616E736D69
   \              742E0A0D00  
   \   00000023   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: TxCW i...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: TxCW is receive.\012\015"
   \              70726F626C65
   \              6D3A20547843
   \              572069732072
   \              656365697665
   \              2E0A0D00    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: TxCW m...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: TxCW mode code.\012\015"
   \              70726F626C65
   \              6D3A20547843
   \              57206D6F6465
   \              20636F64652E
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW &...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW & TxCW have same RT addr.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              572026205478
   \              435720686176
   \              652073616D65
   \              205254206164
   \              64722E0A0D00

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW &...">_1`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW & TxCW word counts differ.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              572026205478
   \              435720776F72
   \              6420636F756E
   \              747320646966
   \              6665722E0A0D
   \              00          
   \   00000031   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CW1: 0x%.2X%.2X">`:
   \   00000000   4357313A2030       DC8 "CW1: 0x%.2X%.2X"
   \              78252E325825
   \              2E325800    

   \                                 In section .rodata, align 4
   \                     `?<Constant " = %02d-%1d-%02d-%02d...">`:
   \   00000000   203D20253032       DC8 " = %02d-%1d-%02d-%02d     "
   \              642D2531642D
   \              253032642D25
   \              303264202020
   \              202000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RSW not applicable\\n\\r">`:
   \   00000000   525357206E6F       DC8 "RSW not applicable\012\015"
   \              74206170706C
   \              696361626C65
   \              0A0D00      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RxSW: 0x%.2X%.2X">`:
   \   00000000   527853573A20       DC8 "RxSW: 0x%.2X%.2X"
   \              3078252E3258
   \              252E325800  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " = RT%02d ">`:
   \   00000000   203D20525425       DC8 " = RT%02d "
   \              3032642000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CS\\n\\r">`:
   \   00000000   43530A0D00         DC8 "CS\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   4D452000           DC8 "ME "

   \                                 In section .rodata, align 4
   \                     `?<Constant "INST ">`:
   \   00000000   494E53542000       DC8 "INST "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SRQ ">`:
   \   00000000   5352512000         DC8 "SRQ "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RSV ">`:
   \   00000000   5253562000         DC8 "RSV "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BCR ">`:
   \   00000000   4243522000         DC8 "BCR "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BSY ">`:
   \   00000000   4253592000         DC8 "BSY "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SSF ">`:
   \   00000000   5353462000         DC8 "SSF "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "DBCA ">`:
   \   00000000   444243412000       DC8 "DBCA "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   54462000           DC8 "TF "

   \                                 In section .rodata, align 4
   \                     `?<Constant "CW2: 0x%.2X%.2X">`:
   \   00000000   4357323A2030       DC8 "CW2: 0x%.2X%.2X"
   \              78252E325825
   \              2E325800    

   \                                 In section .rodata, align 4
   \                     `?<Constant "TxSW: 0x%.2X%.2X">`:
   \   00000000   547853573A20       DC8 "TxSW: 0x%.2X%.2X"
   \              3078252E3258
   \              252E325800  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CS\\n\\n\\r">`:
   \   00000000   43530A0A0D00       DC8 "CS\012\012\015"
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CW: 0x%.2X%.2X">`:
   \   00000000   43573A203078       DC8 "CW: 0x%.2X%.2X"
   \              252E3258252E
   \              325800      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SW not applicable\\n\\n\\r">`:
   \   00000000   5357206E6F74       DC8 "SW not applicable\012\012\015"
   \              206170706C69
   \              6361626C650A
   \              0A0D00      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SW not received\\n\\n\\r">`:
   \   00000000   5357206E6F74       DC8 "SW not received\012\012\015"
   \              207265636569
   \              7665640A0A0D
   \              00          
   \   00000013   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SW: 0x%.2X%.2X">`:
   \   00000000   53573A203078       DC8 "SW: 0x%.2X%.2X"
   \              252E3258252E
   \              325800      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Control Word: 0x%....">`:
   \   00000000   424320436F6E       DC8 "BC Control Word: 0x%.2X%.2X  \012\015"
   \              74726F6C2057
   \              6F72643A2030
   \              78252E325825
   \              2E325820200A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17TTL ">`:
   \   00000000   4D4331375454       DC8 "MC17TTL "
   \              4C2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MEmask ">`:
   \   00000000   4D456D61736B       DC8 "MEmask "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "SRQmask ">`:
   \   00000000   5352516D6173       DC8 "SRQmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BSYmask ">`:
   \   00000000   4253596D6173       DC8 "BSYmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SSFmask ">`:
   \   00000000   5353466D6173       DC8 "SSFmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "TFmask ">`:
   \   00000000   54466D61736B       DC8 "TFmask "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "RSVmask ">`:
   \   00000000   5253566D6173       DC8 "RSVmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RetryEna ">`:
   \   00000000   526574727945       DC8 "RetryEna "
   \              6E612000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "UseBusA ">`:
   \   00000000   557365427573       DC8 "UseBusA "
   \              412000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "UseBusB ">`:
   \   00000000   557365427573       DC8 "UseBusB "
   \              422000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SelfTest ">`:
   \   00000000   53656C665465       DC8 "SelfTest "
   \              73742000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "maskBCR ">`:
   \   00000000   6D61736B4243       DC8 "maskBCR "
   \              522000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "EOMirq ">`:
   \   00000000   454F4D697271       DC8 "EOMirq "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "NonBcstSA ">`:
   \   00000000   4E6F6E426373       DC8 "NonBcstSA "
   \              7453412000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RTRT ">`:
   \   00000000   525452542000       DC8 "RTRT "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstSA ">`:
   \   00000000   426373745341       DC8 "BcstSA "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstRTRT ">`:
   \   00000000   426373745254       DC8 "BcstRTRT "
   \              52542000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   4D432000           DC8 "MC "

   \                                 In section .rodata, align 4
   \                     `?<Constant "RTRT_MC?? ">`:
   \   00000000   525452545F4D       DC8 "RTRT_MC?? "
   \              433F3F2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstMC ">`:
   \   00000000   426373744D43       DC8 "BcstMC "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstRTRT_MC?? ">`:
   \   00000000   426373745254       DC8 "BcstRTRT_MC?? "
   \              52545F4D433F
   \              3F2000      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "The Cmd Word and Cont...">`:
   \   00000000   54686520436D       DC8 54H, 68H, 65H, 20H, 43H, 6DH, 64H, 20H
   \              6420        
   \   00000008   576F72642061       DC8 57H, 6FH, 72H, 64H, 20H, 61H, 6EH, 64H
   \              6E64        
   \   00000010   20436F6E7472       DC8 20H, 43H, 6FH, 6EH, 74H, 72H, 6FH, 6CH
   \              6F6C        
   \   00000018   20576F726420       DC8 20H, 57H, 6FH, 72H, 64H, 20H, 62H, 69H
   \              6269        
   \   00000020   742031206469       DC8 74H, 20H, 31H, 20H, 64H, 69H, 73H, 61H
   \              7361        
   \   00000028   67726565206F       DC8 67H, 72H, 65H, 65H, 20H, 6FH, 6EH, 20H
   \              6E20        
   \   00000030   62726F616463       DC8 62H, 72H, 6FH, 61H, 64H, 63H, 61H, 73H
   \              6173        
   \   00000038   7420666F726D       DC8 74H, 20H, 66H, 6FH, 72H, 6DH, 61H, 74H
   \              6174        
   \   00000040   2E0A0D00           DC8 2EH, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "The Cmd Word and Cont...">_1`:
   \   00000000   54686520436D       DC8 54H, 68H, 65H, 20H, 43H, 6DH, 64H, 20H
   \              6420        
   \   00000008   576F72642061       DC8 57H, 6FH, 72H, 64H, 20H, 61H, 6EH, 64H
   \              6E64        
   \   00000010   20436F6E7472       DC8 20H, 43H, 6FH, 6EH, 74H, 72H, 6FH, 6CH
   \              6F6C        
   \   00000018   20576F726420       DC8 20H, 57H, 6FH, 72H, 64H, 20H, 62H, 69H
   \              6269        
   \   00000020   742032206469       DC8 74H, 20H, 32H, 20H, 64H, 69H, 73H, 61H
   \              7361        
   \   00000028   67726565206F       DC8 67H, 72H, 65H, 65H, 20H, 6FH, 6EH, 20H
   \              6E20        
   \   00000030   6D6F64652063       DC8 6DH, 6FH, 64H, 65H, 20H, 63H, 6FH, 64H
   \              6F64        
   \   00000038   6520666F726D       DC8 65H, 20H, 66H, 6FH, 72H, 6DH, 61H, 74H
   \              6174        
   \   00000040   2E0A0D00           DC8 2EH, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Block Status Word: 0x...">`:
   \   00000000   426C6F636B20       DC8 "Block Status Word: 0x%.2X%.2X \012\015"
   \              537461747573
   \              20576F72643A
   \              203078252E32
   \              58252E325820
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SOM  ">`:
   \   00000000   534F4D202000       DC8 "SOM  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "EOM  ">`:
   \   00000000   454F4D202000       DC8 "EOM  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BusB  ">`:
   \   00000000   427573422020       DC8 "BusB  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus A  ">`:
   \   00000000   427573204120       DC8 "Bus A  "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "ErrOcc ">`:
   \   00000000   4572724F6363       DC8 "ErrOcc "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "SSet  ">`:
   \   00000000   535365742020       DC8 "SSet  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "NoResp  ">`:
   \   00000000   4E6F52657370       DC8 "NoResp  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LpBk  ">`:
   \   00000000   4C70426B2020       DC8 "LpBk  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2retry  ">`:
   \   00000000   327265747279       DC8 "2retry  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1retry  ">`:
   \   00000000   317265747279       DC8 "1retry  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GDB  ">`:
   \   00000000   474442202000       DC8 "GDB  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WAG  ">`:
   \   00000000   574147202000       DC8 "WAG  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WdCt  ">`:
   \   00000000   576443742020       DC8 "WdCt  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SyncErr  ">`:
   \   00000000   53796E634572       DC8 "SyncErr  "
   \              72202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "InvWd  ">`:
   \   00000000   496E76576420       DC8 "InvWd  "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "FmtErr  ">`:
   \   00000000   466D74457272       DC8 "FmtErr  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MSSet  ">`:
   \   00000000   4D5353657420       DC8 "MSSet  "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Condition Code Regist...">`:
   \   00000000   436F6E646974       DC8 "Condition Code Register: 0x%.2X%.2X\012\015"
   \              696F6E20436F
   \              646520526567
   \              69737465723A
   \              203078252E32
   \              58252E32580A
   \              0D00        
   \   00000026   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Stopped: No Condit...">`:
   \   00000000   42432053746F       DC8 42H, 43H, 20H, 53H, 74H, 6FH, 70H, 70H
   \              7070        
   \   00000008   65643A204E6F       DC8 65H, 64H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E00         DC8 53H, 65H, 74H, 2EH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Running: No Condit...">`:
   \   00000000   42432052756E       DC8 42H, 43H, 20H, 52H, 75H, 6EH, 6EH, 69H
   \              6E69        
   \   00000008   6E673A204E6F       DC8 6EH, 67H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E00         DC8 53H, 65H, 74H, 2EH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Is Running.\\n\\r">`:
   \   00000000   424320497320       DC8 "BC Is Running.\012\015"
   \              52756E6E696E
   \              672E0A0D00  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Not Running.\\n\\r">`:
   \   00000000   4243204E6F74       DC8 "BC Not Running.\012\015"
   \              2052756E6E69
   \              6E672E0A0D00
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2Retries  ">`:
   \   00000000   325265747269       DC8 "2Retries  "
   \              6573202000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1Retry  ">`:
   \   00000000   315265747279       DC8 "1Retry  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BadMsg  ">`:
   \   00000000   4261644D7367       DC8 "BadMsg  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GdDataBlk  ">`:
   \   00000000   476444617461       DC8 "GdDataBlk  "
   \              426C6B202000

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF7  ">`:
   \   00000000   475046372020       DC8 "GPF7  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF6  ">`:
   \   00000000   475046362020       DC8 "GPF6  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF5  ">`:
   \   00000000   475046352020       DC8 "GPF5  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF4  ">`:
   \   00000000   475046342020       DC8 "GPF4  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF3  ">`:
   \   00000000   475046332020       DC8 "GPF3  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF2  ">`:
   \   00000000   475046322020       DC8 "GPF2  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LT-GPF1  ">`:
   \   00000000   4C542D475046       DC8 "LT-GPF1  "
   \              31202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "EQ-GPF0  ">`:
   \   00000000   45512D475046       DC8 "EQ-GPF0  "
   \              30202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "No RT response, no re...">`:
   \   00000000   4E6F20525420       DC8 "No RT response, no received data\012\012\015"
   \              726573706F6E
   \              73652C206E6F
   \              207265636569
   \              766564206461
   \              74610A0A0D00

   \                                 In section .rodata, align 4
   \                     `?<Constant "Data Addr: 0x%.2X%.2X...">`:
   \   00000000   446174612041       DC8 "Data Addr: 0x%.2X%.2X,      "
   \              6464723A2030
   \              78252E325825
   \              2E32582C2020
   \              2020202000  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus Addr: 0x6000%.2X%...">`:
   \   00000000   427573204164       DC8 "Bus Addr: 0x6000%.2X%.2X\012\015Data:"
   \              64723A203078
   \              36303030252E
   \              3258252E3258
   \              0A0D44617461
   \              3A00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X ">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X "
   \              252E32582000

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rBC Configuration Re...">`:
   \   00000000   0A0D42432043       DC8 "\012\015BC Configuration Register: 0x%.2X%.2X\012\015"
   \              6F6E66696775
   \              726174696F6E
   \              205265676973
   \              7465723A2030
   \              78252E325825
   \              2E32580A0D00
   \   0000002A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  20">`:
   \   00000000   2020323000         DC8 "  20"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  58">`:
   \   00000000   2020353800         DC8 "  58"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 138">`:
   \   00000000   2031333800         DC8 " 138"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  15">`:
   \   00000000   2020313500         DC8 "  15"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "us Timeout (bus dead ...">`:
   \   00000000   75732054696D       DC8 "us Timeout (bus dead time)   "
   \              656F75742028
   \              627573206465
   \              61642074696D
   \              652920202000
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Check Control Word Fo...">`:
   \   00000000   436865636B20       DC8 "Check Control Word Format Bits"
   \              436F6E74726F
   \              6C20576F7264
   \              20466F726D61
   \              742042697473
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Don\\'t Check Control W...">`:
   \   00000000   446F6E277420       DC8 "Don't Check Control Word Format Bits"
   \              436865636B20
   \              436F6E74726F
   \              6C20576F7264
   \              20466F726D61
   \              742042697473
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 2 Retries, Same Bus,...">`:
   \   00000000   203220526574       DC8 " 2 Retries, Same Bus, Same Bus   "
   \              726965732C20
   \              53616D652042
   \              75732C205361
   \              6D6520427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  2 Retries, Alt Bus,...">`:
   \   00000000   202032205265       DC8 "  2 Retries, Alt Bus, Same Bus   "
   \              74726965732C
   \              20416C742042
   \              75732C205361
   \              6D6520427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  2 Retries, Same Bus...">`:
   \   00000000   202032205265       DC8 "  2 Retries, Same Bus, Alt Bus   "
   \              74726965732C
   \              2053616D6520
   \              4275732C2041
   \              6C7420427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   2 Retries, Alt Bus...">`:
   \   00000000   202020322052       DC8 "   2 Retries, Alt Bus, Alt Bus   "
   \              657472696573
   \              2C20416C7420
   \              4275732C2041
   \              6C7420427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  1 Retry if Msg Fail...">`:
   \   00000000   202031205265       DC8 "  1 Retry if Msg Fail, Alt Bus   "
   \              747279206966
   \              204D73672046
   \              61696C2C2041
   \              6C7420427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 1 Retry if Msg Fail,...">`:
   \   00000000   203120526574       DC8 " 1 Retry if Msg Fail, Same Bus   "
   \              727920696620
   \              4D7367204661
   \              696C2C205361
   \              6D6520427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "    No Retries for Ms...">`:
   \   00000000   202020204E6F       DC8 "    No Retries for Msg Failure   "
   \              205265747269
   \              657320666F72
   \              204D73672046
   \              61696C757265
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Retry if RT status bi...">`:
   \   00000000   526574727920       DC8 "Retry if RT status bit high"
   \              696620525420
   \              737461747573
   \              206269742068
   \              69676800    

   \                                 In section .rodata, align 4
   \                     `?<Constant "No Retry if RT status...">`:
   \   00000000   4E6F20526574       DC8 "No Retry if RT status bit high"
   \              727920696620
   \              525420737461
   \              747573206269
   \              742068696768
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " RT status ME w/o dat...">`:
   \   00000000   205254207374       DC8 " RT status ME w/o data = Valid   "
   \              61747573204D
   \              4520772F6F20
   \              64617461203D
   \              2056616C6964
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " RT status ME w/o dat...">_1`:
   \   00000000   205254207374       DC8 " RT status ME w/o data = Inval   "
   \              61747573204D
   \              4520772F6F20
   \              64617461203D
   \              20496E76616C
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT status BSY w/o dat...">`:
   \   00000000   525420737461       DC8 "RT status BSY w/o data = Valid"
   \              747573204253
   \              5920772F6F20
   \              64617461203D
   \              2056616C6964
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT status BSY w/o dat...">_1`:
   \   00000000   525420737461       DC8 "RT status BSY w/o data = Inval"
   \              747573204253
   \              5920772F6F20
   \              64617461203D
   \              20496E76616C
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "            Msg Gap T...">`:
   \   00000000   202020202020       DC8 "            Msg Gap Timer = On   "
   \              202020202020
   \              4D7367204761
   \              702054696D65
   \              72203D204F6E
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "           Msg Gap Ti...">`:
   \   00000000   202020202020       DC8 "           Msg Gap Timer = Off   "
   \              20202020204D
   \              736720476170
   \              2054696D6572
   \              203D204F6666
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Watchdog Frame Timer ...">`:
   \   00000000   576174636864       DC8 "Watchdog Frame Timer = On"
   \              6F6720467261
   \              6D652054696D
   \              6572203D204F
   \              6E00        
   \   0000001A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Watchdog Frame Timer ...">_1`:
   \   00000000   576174636864       DC8 "Watchdog Frame Timer = Off"
   \              6F6720467261
   \              6D652054696D
   \              6572203D204F
   \              666600      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 send Time Tag lo...">`:
   \   00000000   4D4331372073       DC8 "MC17 send Time Tag low 16 bits   "
   \              656E64205469
   \              6D6520546167
   \              206C6F772031
   \              362062697473
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 send data in msg...">`:
   \   00000000   4D4331372073       DC8 "MC17 send data in msg data blk   "
   \              656E64206461
   \              746120696E20
   \              6D7367206461
   \              746120626C6B
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 data word always...">`:
   \   00000000   4D4331372064       DC8 "MC17 data word always even"
   \              61746120776F
   \              726420616C77
   \              617973206576
   \              656E00      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 data may be even...">`:
   \   00000000   4D4331372064       DC8 "MC17 data may be even or odd"
   \              617461206D61
   \              792062652065
   \              76656E206F72
   \              206F646400  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  Enable 4us Minimum ...">`:
   \   00000000   2020456E6162       DC8 "  Enable 4us Minimum Gap Check   "
   \              6C6520347573
   \              204D696E696D
   \              756D20476170
   \              20436865636B
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   No 4us Minimum Gap...">`:
   \   00000000   2020204E6F20       DC8 "   No 4us Minimum Gap Checking   "
   \              347573204D69
   \              6E696D756D20
   \              476170204368
   \              65636B696E67
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BCR Mask Enabled, BCR...">`:
   \   00000000   424352204D61       DC8 "BCR Mask Enabled, BCRME = 1"
   \              736B20456E61
   \              626C65642C20
   \              4243524D4520
   \              3D203100    

   \                                 In section .rodata, align 4
   \                     `?<Constant "BCR Mask Disabled, BC...">`:
   \   00000000   424352204D61       DC8 "BCR Mask Disabled, BCRME = 0"
   \              736B20446973
   \              61626C65642C
   \              204243524D45
   \              203D203000  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Timetag Config Regist...">`:
   \   00000000   54696D657461       DC8 "Timetag Config Register 0x%.2X%.2X  "
   \              6720436F6E66
   \              696720526567
   \              697374657220
   \              3078252E3258
   \              252E32582020
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "32-bit timebase with ">`:
   \   00000000   33322D626974       DC8 "32-bit timebase with "
   \              2074696D6562
   \              617365207769
   \              74682000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "16-bit timebase with ">`:
   \   00000000   31362D626974       DC8 "16-bit timebase with "
   \              2074696D6562
   \              617365207769
   \              74682000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "clock disabled! ">`:
   \   00000000   636C6F636B20       DC8 "clock disabled! "
   \              64697361626C
   \              6564212000  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ext clock ">`:
   \   00000000   65787420636C       DC8 "ext clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2us clock ">`:
   \   00000000   32757320636C       DC8 "2us clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "4us clock ">`:
   \   00000000   34757320636C       DC8 "4us clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "8us clock ">`:
   \   00000000   38757320636C       DC8 "8us clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "16us clock ">`:
   \   00000000   313675732063       DC8 "16us clock "
   \              6C6F636B2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "32us clock ">`:
   \   00000000   333275732063       DC8 "32us clock "
   \              6C6F636B2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "64us clock ">`:
   \   00000000   363475732063       DC8 "64us clock "
   \              6C6F636B2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rBC Condition Code &...">`:
   \   00000000   0A0D42432043       DC8 0AH, 0DH, 42H, 43H, 20H, 43H, 6FH, 6EH
   \              6F6E        
   \   00000008   646974696F6E       DC8 64H, 69H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              2043        
   \   00000010   6F6465202620       DC8 6FH, 64H, 65H, 20H, 26H, 20H, 47H, 50H
   \              4750        
   \   00000018   20466C616720       DC8 20H, 46H, 6CH, 61H, 67H, 20H, 52H, 65H
   \              5265        
   \   00000020   676973746572       DC8 67H, 69H, 73H, 74H, 65H, 72H, 3AH, 20H
   \              3A20        
   \   00000028   3078252E3258       DC8 30H, 78H, 25H, 2EH, 32H, 58H, 25H, 2EH
   \              252E        
   \   00000030   32580A0D00         DC8 32H, 58H, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Stopped: No Condit...">_1`:
   \   00000000   42432053746F       DC8 42H, 43H, 20H, 53H, 74H, 6FH, 70H, 70H
   \              7070        
   \   00000008   65643A204E6F       DC8 65H, 64H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E0A0D       DC8 53H, 65H, 74H, 2EH, 0AH, 0DH, 0
   \              00          
   \   0000003F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Running: No Condit...">_1`:
   \   00000000   42432052756E       DC8 42H, 43H, 20H, 52H, 75H, 6EH, 6EH, 69H
   \              6E69        
   \   00000008   6E673A204E6F       DC8 6EH, 67H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E0A0D       DC8 53H, 65H, 74H, 2EH, 0AH, 0DH, 0
   \              00          
   \   0000003F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Is Running.\\n\\n\\r">`:
   \   00000000   424320497320       DC8 "BC Is Running.\012\012\015"
   \              52756E6E696E
   \              672E0A0A0D00
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Not Running.\\n\\n\\r">`:
   \   00000000   4243204E6F74       DC8 "BC Not Running.\012\012\015"
   \              2052756E6E69
   \              6E672E0A0A0D
   \              00          
   \   00000013   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Bus Controller Int...">`:
   \   00000000   0A0D20427573       DC8 0AH, 0DH, 20H, 42H, 75H, 73H, 20H, 43H
   \              2043        
   \   00000008   6F6E74726F6C       DC8 6FH, 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H
   \              6C65        
   \   00000010   7220496E7473       DC8 72H, 20H, 49H, 6EH, 74H, 73H, 20H, 20H
   \              2020        
   \   00000018   20456E61626C       DC8 20H, 45H, 6EH, 61H, 62H, 6CH, 65H, 64H
   \              6564        
   \   00000020   3F2020205069       DC8 3FH, 20H, 20H, 20H, 50H, 69H, 6EH, 20H
   \              6E20        
   \   00000028   4F7574707574       DC8 4FH, 75H, 74H, 70H, 75H, 74H, 3FH, 20H
   \              3F20        
   \   00000030   202050656E64       DC8 20H, 20H, 50H, 65H, 6EH, 64H, 69H, 6EH
   \              696E        
   \   00000038   673F0A0D00         DC8 67H, 3FH, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Frame Timer Expired">`:
   \   00000000   424320467261       DC8 "BC Frame Timer Expired"
   \              6D652054696D
   \              657220457870
   \              6972656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   310A0D00           DC8 "1\012\015"

   \                                 In section .rodata, align 4
   \   00000000   300A0D00           DC8 "0\012\015"

   \                                 In section .rodata, align 4
   \                     `?<Constant "Selected Msg Int,EOM=1">`:
   \   00000000   53656C656374       DC8 "Selected Msg Int,EOM=1"
   \              6564204D7367
   \              20496E742C45
   \              4F4D3D3100  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GenPurp Queue Rollover">`:
   \   00000000   47656E507572       DC8 "GenPurp Queue Rollover"
   \              702051756575
   \              6520526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Message Was Retried">`:
   \   00000000   2020204D6573       DC8 "   Message Was Retried"
   \              736167652057
   \              617320526574
   \              7269656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Call Stack Pointer Err">`:
   \   00000000   43616C6C2053       DC8 "Call Stack Pointer Err"
   \              7461636B2050
   \              6F696E746572
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  Illegal Op Code Trap">`:
   \   00000000   2020496C6C65       DC8 "  Illegal Op Code Trap"
   \              67616C204F70
   \              20436F646520
   \              5472617000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Unexpected RT Stat Bit">`:
   \   00000000   556E65787065       DC8 "Unexpected RT Stat Bit"
   \              637465642052
   \              542053746174
   \              2042697400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 3">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 3"
   \              656620496E74
   \              205265712042
   \              6974203300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 2">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 2"
   \              656620496E74
   \              205265712042
   \              6974203200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 1">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 1"
   \              656620496E74
   \              205265712042
   \              6974203100  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 0">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 0"
   \              656620496E74
   \              205265712042
   \              6974203000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT Status is Msg Error">`:
   \   00000000   525420537461       DC8 "RT Status is Msg Error"
   \              747573206973
   \              204D73672045
   \              72726F7200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "     BC End-of-Message">`:
   \   00000000   202020202042       DC8 "     BC End-of-Message"
   \              4320456E642D
   \              6F662D4D6573
   \              7361676500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "     Reserved Bits 2-0">`:
   \   00000000   202020202052       DC8 "     Reserved Bits 2-0"
   \              657365727665
   \              642042697473
   \              20322D3000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the BC ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   652042432050       DC8 65H, 20H, 42H, 43H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Hardware Interrupt...">`:
   \   00000000   0A0D20486172       DC8 0AH, 0DH, 20H, 48H, 61H, 72H, 64H, 77H
   \              6477        
   \   00000008   61726520496E       DC8 61H, 72H, 65H, 20H, 49H, 6EH, 74H, 65H
   \              7465        
   \   00000010   727275707473       DC8 72H, 72H, 75H, 70H, 74H, 73H, 20H, 20H
   \              2020        
   \   00000018   20456E61626C       DC8 20H, 45H, 6EH, 61H, 62H, 6CH, 65H, 64H
   \              6564        
   \   00000020   3F2020205069       DC8 3FH, 20H, 20H, 20H, 50H, 69H, 6EH, 20H
   \              6E20        
   \   00000028   4F7574707574       DC8 4FH, 75H, 74H, 70H, 75H, 74H, 3FH, 20H
   \              3F20        
   \   00000030   202050656E64       DC8 20H, 20H, 50H, 65H, 6EH, 64H, 69H, 6EH
   \              696E        
   \   00000038   673F0A0D00         DC8 67H, 3FH, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "HI-6131 Host SPI Erro...">`:
   \   00000000   48492D363133       DC8 48H, 49H, 2DH, 36H, 31H, 33H, 31H, 20H
   \              3120        
   \   00000008   486F73742053       DC8 48H, 6FH, 73H, 74H, 20H, 53H, 50H, 49H
   \              5049        
   \   00000010   204572726F72       DC8 20H, 45H, 72H, 72H, 6FH, 72H, 20H, 20H
   \              2020        
   \   00000018   20206E2F6120       DC8 20H, 20H, 6EH, 2FH, 61H, 20H, 20H, 20H
   \              2020        
   \   00000020   202020202020       DC8 20H, 20H, 20H, 20H, 20H, 20H, 6EH, 2FH
   \              6E2F        
   \   00000028   612020202020       DC8 61H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              2020        
   \   00000030   20206E2F610A       DC8 20H, 20H, 6EH, 2FH, 61H, 0AH, 0DH, 0
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "EE Chksum/Corr RAM Err">`:
   \   00000000   45452043686B       DC8 "EE Chksum/Corr RAM Err"
   \              73756D2F436F
   \              72722052414D
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RAM Init/UncorrRAM Err">`:
   \   00000000   52414D20496E       DC8 "RAM Init/UncorrRAM Err"
   \              69742F556E63
   \              6F727252414D
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Loopback Fail on Bus A">`:
   \   00000000   4C6F6F706261       DC8 "Loopback Fail on Bus A"
   \              636B20466169
   \              6C206F6E2042
   \              7573204100  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Loopback Fail on Bus B">`:
   \   00000000   4C6F6F706261       DC8 "Loopback Fail on Bus B"
   \              636B20466169
   \              6C206F6E2042
   \              7573204200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Timetag Ct Rollover">`:
   \   00000000   4D542054696D       DC8 "MT Timetag Ct Rollover"
   \              657461672043
   \              7420526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Timetag Ct Rollover">`:
   \   00000000   42432054696D       DC8 "BC Timetag Ct Rollover"
   \              657461672043
   \              7420526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 Timetag Valu Match">`:
   \   00000000   525432205469       DC8 "RT2 Timetag Valu Match"
   \              6D6574616720
   \              56616C75204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 Timetag Valu Match">`:
   \   00000000   525431205469       DC8 "RT1 Timetag Valu Match"
   \              6D6574616720
   \              56616C75204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Timetag Value Match">`:
   \   00000000   4D542054696D       DC8 "MT Timetag Value Match"
   \              657461672056
   \              616C7565204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Timetag Value Match">`:
   \   00000000   42432054696D       DC8 "BC Timetag Value Match"
   \              657461672056
   \              616C7565204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  RT2 Addr Parity Fail">`:
   \   00000000   202052543220       DC8 "  RT2 Addr Parity Fail"
   \              416464722050
   \              617269747920
   \              4661696C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  RT1 Addr Parity Fail">`:
   \   00000000   202052543120       DC8 "  RT1 Addr Parity Fail"
   \              416464722050
   \              617269747920
   \              4661696C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending RT Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending RT Ints"
   \              2050656E6469
   \              6E6720525420
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending MT Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending MT Ints"
   \              2050656E6469
   \              6E67204D5420
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending BC Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending BC Ints"
   \              2050656E6469
   \              6E6720424320
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the HW ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   652048572050       DC8 65H, 20H, 48H, 57H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Press \\'M\\' for menu, o...">`:
   \   00000000   507265737320       DC8 50H, 72H, 65H, 73H, 73H, 20H, 27H, 4DH
   \              274D        
   \   00000008   2720666F7220       DC8 27H, 20H, 66H, 6FH, 72H, 20H, 6DH, 65H
   \              6D65        
   \   00000010   6E752C206F72       DC8 6EH, 75H, 2CH, 20H, 6FH, 72H, 20H, 70H
   \              2070        
   \   00000018   726573732061       DC8 72H, 65H, 73H, 73H, 20H, 61H, 6EH, 79H
   \              6E79        
   \   00000020   2076616C6964       DC8 20H, 76H, 61H, 6CH, 69H, 64H, 20H, 6DH
   \              206D        
   \   00000028   656E75206B65       DC8 65H, 6EH, 75H, 20H, 6BH, 65H, 79H, 2EH
   \              792E        
   \   00000030   20202000           DC8 20H, 20H, 20H, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rNeither Remote Term...">`:
   \   00000000   0A0D4E656974       DC8 "\012\015Neither Remote Terminal Is Enabled!\012\012\015"
   \              686572205265
   \              6D6F74652054
   \              65726D696E61
   \              6C2049732045
   \              6E61626C6564
   \              210A0A0D00  
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Invalid Choice. Pr...">`:
   \   00000000   0A0D20496E76       DC8 0AH, 0DH, 20H, 49H, 6EH, 76H, 61H, 6CH
   \              616C        
   \   00000008   69642043686F       DC8 69H, 64H, 20H, 43H, 68H, 6FH, 69H, 63H
   \              6963        
   \   00000010   652E20507265       DC8 65H, 2EH, 20H, 50H, 72H, 65H, 73H, 73H
   \              7373        
   \   00000018   20274D272066       DC8 20H, 27H, 4DH, 27H, 20H, 66H, 6FH, 72H
   \              6F72        
   \   00000020   206D656E752C       DC8 20H, 6DH, 65H, 6EH, 75H, 2CH, 20H, 6FH
   \              206F        
   \   00000028   722070726573       DC8 72H, 20H, 70H, 72H, 65H, 73H, 73H, 20H
   \              7320        
   \   00000030   616E79207661       DC8 61H, 6EH, 79H, 20H, 76H, 61H, 6CH, 69H
   \              6C69        
   \   00000038   64206D656E75       DC8 64H, 20H, 6DH, 65H, 6EH, 75H, 20H, 6BH
   \              206B        
   \   00000040   65792E203E3E       DC8 65H, 79H, 2EH, 20H, 3EH, 3EH, 20H, 0
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    0           -    ...">`:
   \   00000000   202020203020       DC8 "    0           -           -\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              202020202D0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    1           ">`:
   \   00000000   202020203120       DC8 "    1           "
   \              202020202020
   \              2020202000  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1           ">`:
   \   00000000   312020202020       DC8 "1           "
   \              202020202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0           ">`:
   \   00000000   302020202020       DC8 "0           "
   \              202020202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">`:
   \   00000000   202020202D20       DC8 "    -           -           -\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              202020202D0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">_1`:
   \   00000000   202020202D20       DC8 "    -           -           0\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              20202020300A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">_2`:
   \   00000000   202020202D20       DC8 "    -           -           1\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              20202020310A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Press \\'M\\' for menu, o...">_1`:
   \   00000000   507265737320       DC8 50H, 72H, 65H, 73H, 73H, 20H, 27H, 4DH
   \              274D        
   \   00000008   2720666F7220       DC8 27H, 20H, 66H, 6FH, 72H, 20H, 6DH, 65H
   \              6D65        
   \   00000010   6E752C206F72       DC8 6EH, 75H, 2CH, 20H, 6FH, 72H, 20H, 70H
   \              2070        
   \   00000018   726573732061       DC8 72H, 65H, 73H, 73H, 20H, 61H, 6EH, 79H
   \              6E79        
   \   00000020   2076616C6964       DC8 20H, 76H, 61H, 6CH, 69H, 64H, 20H, 6DH
   \              206D        
   \   00000028   656E75206B65       DC8 65H, 6EH, 75H, 20H, 6BH, 65H, 79H, 2EH
   \              792E        
   \   00000030   203E3E2000         DC8 20H, 3EH, 3EH, 20H, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "=====================...">`:
   \   00000000   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000008   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000010   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000018   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000020   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000028   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000030   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000038   3D3D3D0A0D00       DC8 3DH, 3DH, 3DH, 0AH, 0DH, 0
   \   0000003E   0000               DC8 0, 0
   2279          
   2280          

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     ConfigureUsart1         136
     ascii2int                 0
     bc_last_msg_console     128
     chk_key_input             8
     list_bc_ccgpf_reg         8
     list_bc_config           16
     list_bc_ints_console     16
     list_hw_ints_console     16
     list_rt_ints_console      8
     print_b0sp                8
     print_b1sp                8
     print_dd0n                8
     print_dd1n                8
     print_dddn                8
     print_line                8
     print_menuprompt          8
     print_null                8
     print_sp1sp               8
     show_menu                 8


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     waddr                                             2
     watch                                             1
     ConfigureUsart1                                  72
     show_menu                                       118
     bc_last_msg_console                            3002
     list_bc_config                                  664
     list_bc_ccgpf_reg                               288
     list_bc_ints_console                            788
     list_hw_ints_console                            780
     list_rt_ints_console                             20
     chk_key_input                                   192
     ascii2int                                        70
     print_null                                       10
     print_sp1sp                                      10
     print_b1sp                                       10
     print_b0sp                                       10
     print_dddn                                       10
     print_dd0n                                       10
     print_dd1n                                       10
     print_menuprompt                                 10
     print_line                                       10
     ??DataTable1                                      4
     ??DataTable1_1                                    4
     ??DataTable1_2                                    4
     ??DataTable1_3                                    4
     ??DataTable1_4                                    4
     ??DataTable1_5                                    4
     ??DataTable1_6                                    4
     ??DataTable1_7                                    4
     ??DataTable1_8                                    4
     ??DataTable1_9                                    4
     ??DataTable1_10                                   4
     ??DataTable1_11                                   4
     ??DataTable1_12                                   4
     ??DataTable1_13                                   4
     ??DataTable1_14                                   4
     ??DataTable1_15                                   4
     ??DataTable1_16                                   4
     ??DataTable1_17                                   4
     ??DataTable1_18                                   4
     ??DataTable1_19                                   4
     ??DataTable2                                      4
     ??DataTable2_1                                    4
     ??DataTable2_2                                    4
     ??DataTable2_3                                    4
     ??DataTable2_4                                    4
     ??DataTable2_5                                    4
     ??DataTable2_6                                    4
     ??DataTable2_7                                    4
     ??DataTable2_8                                    4
     ??DataTable2_9                                    4
     ??DataTable2_10                                   4
     ??DataTable2_11                                   4
     ??DataTable2_12                                   4
     ??DataTable2_13                                   4
     ??DataTable2_14                                   4
     ??DataTable2_15                                   4
     ??DataTable2_16                                   4
     ??DataTable2_17                                   4
     ??DataTable2_18                                   4
     ??DataTable2_19                                   4
     ??DataTable2_20                                   4
     ??DataTable2_21                                   4
     ??DataTable2_22                                   4
     ??DataTable2_23                                   4
     ??DataTable2_24                                   4
     ??DataTable2_25                                   4
     ??DataTable2_26                                   4
     ??DataTable2_27                                   4
     ??DataTable2_28                                   4
     ??DataTable2_29                                   4
     ??DataTable2_30                                   4
     ??DataTable2_31                                   4
     ??DataTable2_32                                   4
     ??DataTable2_33                                   4
     ??DataTable2_34                                   4
     ??DataTable3                                      4
     ??DataTable3_1                                    4
     ??DataTable3_2                                    4
     ??DataTable3_3                                    4
     ??DataTable3_4                                    4
     ??DataTable3_5                                    4
     ??DataTable4                                      4
     ??DataTable4_1                                    4
     ??DataTable4_2                                    4
     ??DataTable4_3                                    4
     ??DataTable4_4                                    4
     ??DataTable4_5                                    4
     ??DataTable4_6                                    4
     ??DataTable4_7                                    4
     ??DataTable4_8                                    4
     ??DataTable4_9                                    4
     ??DataTable4_10                                   4
     ??DataTable4_11                                   4
     ??DataTable4_12                                   4
     ??DataTable4_13                                   4
     ??DataTable4_14                                   4
     ??DataTable4_15                                   4
     ??DataTable4_16                                   4
     ??DataTable4_17                                   4
     ??DataTable4_18                                   4
     ??DataTable4_19                                   4
     ??DataTable4_20                                   4
     ??DataTable4_21                                   4
     ??DataTable4_22                                   4
     ??DataTable4_23                                   4
     ??DataTable4_24                                   4
     ??DataTable4_25                                   4
     ??DataTable4_26                                   4
     ??DataTable4_27                                   4
     ??DataTable4_28                                   4
     ??DataTable4_29                                   4
     ??DataTable4_30                                   4
     ??DataTable4_31                                   4
     ??DataTable4_32                                   4
     ??DataTable4_33                                   4
     ??DataTable4_34                                   4
     ??DataTable4_35                                   4
     ??DataTable4_36                                   4
     ??DataTable4_37                                   4
     ??DataTable4_38                                   4
     ??DataTable4_39                                   4
     ??DataTable4_40                                   4
     ??DataTable4_41                                   4
     ??DataTable4_42                                   4
     ??DataTable4_43                                   4
     ??DataTable4_44                                   4
     ??DataTable4_45                                   4
     ??DataTable5                                      4
     ??DataTable5_1                                    4
     ??DataTable5_2                                    4
     ??DataTable5_3                                    4
     ??DataTable5_4                                    4
     ??DataTable5_5                                    4
     ??DataTable5_6                                    4
     ??DataTable5_7                                    4
     ??DataTable5_8                                    4
     ??DataTable5_9                                    4
     ??DataTable5_10                                   4
     ??DataTable5_11                                   4
     ??DataTable5_12                                   4
     ??DataTable5_13                                   4
     ??DataTable5_14                                   4
     ??DataTable5_15                                   4
     ??DataTable5_16                                   4
     ??DataTable5_17                                   4
     ??DataTable5_18                                   4
     ??DataTable5_19                                   4
     ??DataTable5_20                                   4
     ??DataTable5_21                                   4
     ??DataTable5_22                                   4
     ??DataTable6                                      4
     ??DataTable6_1                                    4
     ??DataTable6_2                                    4
     ??DataTable6_3                                    4
     ??DataTable6_4                                    4
     ??DataTable7                                      4
     ??DataTable7_1                                    4
     ??DataTable7_2                                    4
     ??DataTable7_3                                    4
     ??DataTable7_4                                    4
     ??DataTable7_5                                    4
     ??DataTable7_6                                    4
     ??DataTable7_7                                    4
     ??DataTable7_8                                    4
     ??DataTable7_9                                    4
     ??DataTable7_10                                   4
     ??DataTable7_11                                   4
     ??DataTable7_12                                   4
     ??DataTable7_13                                   4
     ??DataTable7_14                                   4
     ??DataTable8                                      4
     ??DataTable8_1                                    4
     ??DataTable8_2                                    4
     ??DataTable8_3                                    4
     ??DataTable8_4                                    4
     ??DataTable8_5                                    4
     ??DataTable9                                      4
     ??DataTable10                                     4
     ??DataTable11                                     4
     ??DataTable12                                     4
     ??DataTable13                                     4
     ??DataTable15                                     4
     ??DataTable16                                     4
     ??DataTable17                                     4
     ??DataTable17_1                                   4
     ??DataTable17_2                                   4
     ??DataTable17_3                                   4
     ??DataTable17_4                                   4
     ??DataTable17_5                                   4
     ??DataTable17_6                                   4
     ??DataTable17_7                                   4
     ??DataTable17_8                                   4
     ??DataTable17_9                                   4
     ??DataTable17_10                                  4
     ??DataTable17_11                                  4
     ??DataTable17_12                                  4
     ??DataTable17_13                                  4
     ??DataTable17_14                                  4
     ??DataTable17_15                                  4
     ??DataTable17_16                                  4
     ??DataTable17_17                                  4
     ??DataTable17_18                                  4
     ??DataTable17_19                                  4
     ??DataTable17_20                                  4
     ??DataTable17_21                                  4
     ??DataTable17_22                                  4
     ??DataTable17_23                                  4
     ??DataTable17_24                                  4
     ??DataTable17_25                                  4
     ??DataTable17_26                                  4
     ??DataTable17_27                                  4
     ??DataTable17_28                                  4
     ??DataTable17_29                                  4
     ??DataTable17_30                                  4
     ??DataTable17_31                                  4
     ??DataTable17_32                                  4
     ??DataTable17_33                                  4
     ??DataTable17_34                                  4
     ??DataTable17_35                                  4
     ??DataTable17_36                                  4
     ??DataTable17_37                                  4
     ??DataTable17_38                                  4
     ??DataTable17_39                                  4
     ??DataTable17_40                                  4
     ??DataTable17_41                                  4
     ??DataTable17_42                                  4
     ??DataTable17_43                                  4
     ??DataTable17_44                                  4
     ??DataTable17_45                                  4
     ??DataTable17_46                                  4
     ??DataTable17_47                                  4
     ??DataTable17_48                                  4
     ??DataTable17_49                                  4
     ??DataTable17_50                                  4
     ??DataTable17_51                                  4
     ??DataTable17_52                                  4
     ??DataTable17_53                                  4
     ??DataTable17_54                                  4
     ??DataTable17_55                                  4
     ??DataTable17_56                                  4
     ??DataTable17_57                                  4
     ??DataTable17_58                                  4
     ??DataTable17_59                                  4
     ??DataTable17_60                                  4
     ??DataTable17_61                                  4
     ??DataTable17_62                                  4
     ?<Constant {{2097152, (AT91S_PIO *)1074662400,  128
     ?<Constant "\n\r*******************...">         56
     ?<Constant "   Holt Integrated Ci...">           56
     ?<Constant "        Compiled: %s ...">           36
     ?<Constant "Jun 18 2012">                        12
     ?<Constant "10:22:55">                           12
     ?<Constant "*********************...">           56
     ?<Constant "   BC On   ">                        12
     ?<Constant "MT Off   ">                          12
     ?<Constant "RT1 Off  ">                          12
     ?<Constant "RT2 Off">                             8
     ?<Constant "\n\n\r">                              4
     ?<Constant " Press \'1\' to step BC...">         44
     ?<Constant " Press \'2\' to list BC...">         44
     ?<Constant " Press \'3\' to list BC...">         56
     ?<Constant " Press \'6\' to list HW...">         44
     ?<Constant " Press \'7\' to list BC...">         44
     ?<Constant " NOTE: Options 6-9 cl...">           68
     ?<Constant "\n\r">                                4
     ?<Constant "\n\rResults From Last M...">         44
     ?<Constant "Message Type: ">                     16
     ?<Constant "Broadcast ">                         12
     ?<Constant "RT-RT Message, ">                    16
     ?<Constant "Tx ">                                 4
     ?<Constant "Rx ">                                 4
     ?<Constant "Mode Code %02d With D...">           40
     ?<Constant "Mode Code %02d w/o Da...">           28
     ?<Constant "Mode Code %02d w/o Da...">_1         40
     ?<Constant "Subaddress Command, ">               24
     ?<Constant "%d data word">                       16
     ?<Constant "s">                                   2
     ?<Constant "RT-RT problem: RxCW m...">           36
     ?<Constant "RT-RT problem: RxCW i...">           36
     ?<Constant "RT-RT problem: TxCW i...">           36
     ?<Constant "RT-RT problem: TxCW m...">           36
     ?<Constant "RT-RT problem: RxCW &...">           48
     ?<Constant "RT-RT problem: RxCW &...">_1         52
     ?<Constant "CW1: 0x%.2X%.2X">                    16
     ?<Constant " = %02d-%1d-%02d-%02d...">           28
     ?<Constant "RSW not applicable\n\r">             24
     ?<Constant "RxSW: 0x%.2X%.2X">                   20
     ?<Constant " = RT%02d ">                         12
     ?<Constant "CS\n\r">                              8
     ?<Constant "ME ">                                 4
     ?<Constant "INST ">                               8
     ?<Constant "SRQ ">                                8
     ?<Constant "RSV ">                                8
     ?<Constant "BCR ">                                8
     ?<Constant "BSY ">                                8
     ?<Constant "SSF ">                                8
     ?<Constant "DBCA ">                               8
     ?<Constant "TF ">                                 4
     ?<Constant "CW2: 0x%.2X%.2X">                    16
     ?<Constant "TxSW: 0x%.2X%.2X">                   20
     ?<Constant "CS\n\n\r">                            8
     ?<Constant "CW: 0x%.2X%.2X">                     16
     ?<Constant "SW not applicable\n\n\r">            24
     ?<Constant "SW not received\n\n\r">              20
     ?<Constant "SW: 0x%.2X%.2X">                     16
     ?<Constant "BC Control Word: 0x%....">           32
     ?<Constant "MC17TTL ">                           12
     ?<Constant "MEmask ">                             8
     ?<Constant "SRQmask ">                           12
     ?<Constant "BSYmask ">                           12
     ?<Constant "SSFmask ">                           12
     ?<Constant "TFmask ">                             8
     ?<Constant "RSVmask ">                           12
     ?<Constant "RetryEna ">                          12
     ?<Constant "UseBusA ">                           12
     ?<Constant "UseBusB ">                           12
     ?<Constant "SelfTest ">                          12
     ?<Constant "maskBCR ">                           12
     ?<Constant "EOMirq ">                             8
     ?<Constant "NonBcstSA ">                         12
     ?<Constant "RTRT ">                               8
     ?<Constant "BcstSA ">                             8
     ?<Constant "BcstRTRT ">                          12
     ?<Constant "MC ">                                 4
     ?<Constant "RTRT_MC?? ">                         12
     ?<Constant "BcstMC ">                             8
     ?<Constant "BcstRTRT_MC?? ">                     16
     ?<Constant "The Cmd Word and Cont...">           68
     ?<Constant "The Cmd Word and Cont...">_1         68
     ?<Constant "Block Status Word: 0x...">           36
     ?<Constant "SOM  ">                               8
     ?<Constant "EOM  ">                               8
     ?<Constant "BusB  ">                              8
     ?<Constant "Bus A  ">                             8
     ?<Constant "ErrOcc ">                             8
     ?<Constant "SSet  ">                              8
     ?<Constant "NoResp  ">                           12
     ?<Constant "LpBk  ">                              8
     ?<Constant "2retry  ">                           12
     ?<Constant "1retry  ">                           12
     ?<Constant "GDB  ">                               8
     ?<Constant "WAG  ">                               8
     ?<Constant "WdCt  ">                              8
     ?<Constant "SyncErr  ">                          12
     ?<Constant "InvWd  ">                             8
     ?<Constant "FmtErr  ">                           12
     ?<Constant "MSSet  ">                             8
     ?<Constant "Condition Code Regist...">           40
     ?<Constant "BC Stopped: No Condit...">           64
     ?<Constant "BC Running: No Condit...">           64
     ?<Constant "BC Is Running.\n\r">                 20
     ?<Constant "BC Not Running.\n\r">                20
     ?<Constant "2Retries  ">                         12
     ?<Constant "1Retry  ">                           12
     ?<Constant "BadMsg  ">                           12
     ?<Constant "GdDataBlk  ">                        12
     ?<Constant "GPF7  ">                              8
     ?<Constant "GPF6  ">                              8
     ?<Constant "GPF5  ">                              8
     ?<Constant "GPF4  ">                              8
     ?<Constant "GPF3  ">                              8
     ?<Constant "GPF2  ">                              8
     ?<Constant "LT-GPF1  ">                          12
     ?<Constant "EQ-GPF0  ">                          12
     ?<Constant "No RT response, no re...">           36
     ?<Constant "Data Addr: 0x%.2X%.2X...">           32
     ?<Constant "Bus Addr: 0x6000%.2X%...">           32
     ?<Constant "0x%.2X%.2X ">                        12
     ?<Constant "\n\rBC Configuration Re...">         44
     ?<Constant "  20">                                8
     ?<Constant "  58">                                8
     ?<Constant " 138">                                8
     ?<Constant "  15">                                8
     ?<Constant "us Timeout (bus dead ...">           32
     ?<Constant "Check Control Word Fo...">           32
     ?<Constant "Don\'t Check Control W...">          40
     ?<Constant " 2 Retries, Same Bus,...">           36
     ?<Constant "  2 Retries, Alt Bus,...">           36
     ?<Constant "  2 Retries, Same Bus...">           36
     ?<Constant "   2 Retries, Alt Bus...">           36
     ?<Constant "  1 Retry if Msg Fail...">           36
     ?<Constant " 1 Retry if Msg Fail,...">           36
     ?<Constant "    No Retries for Ms...">           36
     ?<Constant "Retry if RT status bi...">           28
     ?<Constant "No Retry if RT status...">           32
     ?<Constant " RT status ME w/o dat...">           36
     ?<Constant " RT status ME w/o dat...">_1         36
     ?<Constant "RT status BSY w/o dat...">           32
     ?<Constant "RT status BSY w/o dat...">_1         32
     ?<Constant "            Msg Gap T...">           36
     ?<Constant "           Msg Gap Ti...">           36
     ?<Constant "Watchdog Frame Timer ...">           28
     ?<Constant "Watchdog Frame Timer ...">_1         28
     ?<Constant "MC17 send Time Tag lo...">           36
     ?<Constant "MC17 send data in msg...">           36
     ?<Constant "MC17 data word always...">           28
     ?<Constant "MC17 data may be even...">           32
     ?<Constant "  Enable 4us Minimum ...">           36
     ?<Constant "   No 4us Minimum Gap...">           36
     ?<Constant "BCR Mask Enabled, BCR...">           28
     ?<Constant "BCR Mask Disabled, BC...">           32
     ?<Constant "Timetag Config Regist...">           40
     ?<Constant "32-bit timebase with ">              24
     ?<Constant "16-bit timebase with ">              24
     ?<Constant "clock disabled! ">                   20
     ?<Constant "ext clock ">                         12
     ?<Constant "2us clock ">                         12
     ?<Constant "4us clock ">                         12
     ?<Constant "8us clock ">                         12
     ?<Constant "16us clock ">                        12
     ?<Constant "32us clock ">                        12
     ?<Constant "64us clock ">                        12
     ?<Constant "\n\rBC Condition Code &...">         56
     ?<Constant "BC Stopped: No Condit...">_1         64
     ?<Constant "BC Running: No Condit...">_1         64
     ?<Constant "BC Is Running.\n\n\r">               20
     ?<Constant "BC Not Running.\n\n\r">              20
     ?<Constant "\n\r Bus Controller Int...">         64
     ?<Constant "BC Frame Timer Expired">             24
     ?<Constant "1\n\r">                               4
     ?<Constant "0\n\r">                               4
     ?<Constant "Selected Msg Int,EOM=1">             24
     ?<Constant "GenPurp Queue Rollover">             24
     ?<Constant "   Message Was Retried">             24
     ?<Constant "Call Stack Pointer Err">             24
     ?<Constant "  Illegal Op Code Trap">             24
     ?<Constant "Unexpected RT Stat Bit">             24
     ?<Constant "User-Def Int Req Bit 3">             24
     ?<Constant "User-Def Int Req Bit 2">             24
     ?<Constant "User-Def Int Req Bit 1">             24
     ?<Constant "User-Def Int Req Bit 0">             24
     ?<Constant "RT Status is Msg Error">             24
     ?<Constant "     BC End-of-Message">             24
     ?<Constant "     Reserved Bits 2-0">             24
     ?<Constant "Note: Reading the BC ...">           64
     ?<Constant "\n\r Hardware Interrupt...">         64
     ?<Constant "HI-6131 Host SPI Erro...">           56
     ?<Constant "EE Chksum/Corr RAM Err">             24
     ?<Constant "RAM Init/UncorrRAM Err">             24
     ?<Constant "Loopback Fail on Bus A">             24
     ?<Constant "Loopback Fail on Bus B">             24
     ?<Constant "MT Timetag Ct Rollover">             24
     ?<Constant "BC Timetag Ct Rollover">             24
     ?<Constant "RT2 Timetag Valu Match">             24
     ?<Constant "RT1 Timetag Valu Match">             24
     ?<Constant "MT Timetag Value Match">             24
     ?<Constant "BC Timetag Value Match">             24
     ?<Constant "  RT2 Addr Parity Fail">             24
     ?<Constant "  RT1 Addr Parity Fail">             24
     ?<Constant " Check Pending RT Ints">             24
     ?<Constant " Check Pending MT Ints">             24
     ?<Constant " Check Pending BC Ints">             24
     ?<Constant "Note: Reading the HW ...">           64
     ?<Constant "Press \'M\' for menu, o...">         52
     ?<Constant "\n\rNeither Remote Term...">         44
     ?<Constant "\n\r Invalid Choice. Pr...">         72
     ?<Constant "    0           -    ...">           32
     ?<Constant "    1           ">                   20
     ?<Constant "1           ">                       16
     ?<Constant "0           ">                       16
     ?<Constant "    -           -    ...">           32
     ?<Constant "    -           -    ...">_1         32
     ?<Constant "    -           -    ...">_2         32
     ?<Constant "Press \'M\' for menu, o...">_1       56
     ?<Constant "=====================...">           64

 
     3 bytes in section .bss
 5 434 bytes in section .rodata
 6 988 bytes in section .text
 
 6 988 bytes of CODE  memory
 5 434 bytes of CONST memory
     3 bytes of DATA  memory

Errors: none
Warnings: none

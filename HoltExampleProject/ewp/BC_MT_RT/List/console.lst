###############################################################################
#                                                                             #
#                                                       17/May/2012  09:55:11 #
# IAR ANSI C/C++ Compiler V6.21.1.32794/W32 KICKSTART for ARM                 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\console.c                      #
#    Command line =  "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\console.c" -D at91sam3u4 -D    #
#                    flash -D TRACE_LEVEL=4 -D HOST_BUS_INTERFACE=1 -D        #
#                    BC_ena=1 -D RT2_ena=1 -D RT1_ena=1 -D SMT_ena=1 -D       #
#                    IMT_ena=0 -lC "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-e #
#                    k\_Holt HI-6130-31 Demo 1_3 Combo\ewp\BC_MT_RT\List\"    #
#                    --remarks --diag_suppress Pe826,Pe1375,Pe068 -o          #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\ewp\BC_MT_RT\Obj\" --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\ewp\..\..\..\at91lib/periphera #
#                    ls\" -I "C:\Program Files\IAR Systems\Embedded           #
#                    Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-e #
#                    k\_Holt HI-6130-31 Demo 1_3                              #
#                    Combo\ewp\..\..\..\at91lib/components\" -I "C:\Program   #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\ewp\..\..\..\at91lib\" -I      #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\ewp\..\..\..\external_libs\"   #
#                    -I "C:\Program Files\IAR Systems\Embedded Workbench 6.0  #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\ewp\..\..\..\at91lib/boards/at #
#                    91sam3u-ek\" --cpu_mode thumb -On --use_c++_inline       #
#    List file    =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\ewp\BC_MT_RT\List\console.lst  #
#    Object file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-31 Demo 1_3 Combo\ewp\BC_MT_RT\Obj\console.o     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Program Files\IAR Systems\Embedded Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt HI-6130-31 Demo 1_3 Combo\console.c
      1          /* ----------------------------------------------------------------------------
      2           *                            HOLT Integrated Circuits 
      3           * ----------------------------------------------------------------------------
      4           *
      5           *    file	console.c
      6           *    object    HyperTerminal-style console I/O for reference design, Holt
      7                          HI-6130 or HI-6131 Evaluation Board based on the Atmel Cortex M-3
      8           
      9           *    brief     This file contains functions for UART initialization, console
     10           *              screen text display and keyboard input when using a program 
     11           *              like HyperTerminal. As a debug aid, this function is optional
     12           *              and is enabled or disabled in file 613x_initialization.h :
     13           *
     14           *		     CONSOLE_IO  YES  enables console I/O for debug.
     15           *                               NO   disables it, reducing program size
     16           *
     17           *              Settings: 115200 baud, 8 data bits, 1 stop bit, no parity, 
     18           *              hardware flow control OFF
     19           *
     20           *	   	HOLT DISCLAIMER
     21           *      	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
     22           *      	KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
     23           *      	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
     24           *      	PURPOSE AND NONINFRINGEMENT. 
     25           *      	IN NO EVENT SHALL HOLT, INC BE LIABLE FOR ANY CLAIM, DAMAGES
     26           *      	OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
     27           *      	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
     28           *      	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
     29           *
     30           *              Copyright (C) 2009-2011 by  HOLT, Inc.
     31           *              All Rights Reserved
     32           */
     33          
     34          // standard Atmel/IAR headers
     35          #include <usart/usart.h>
     36          #include <stdio.h>
     37          #include <pio/pio.h>
     38          #include <pmc/pmc.h>
     39          
     40          // Holt project headers
     41          #include "613x_regs.h"
     42          #include "board_613x.h"
     43          #include "613x_bc.h"
     44          #include "613x_mt.h"
     45          #include "613x_initialization.h"
     46          #include "console.h"
     47          
     48          #if (!HOST_BUS_INTERFACE) // spi
     49          #include "device_6131.h"
     50          #include "board_6131.h"
     51          
     52          #else // (HOST_BUS_INTERFACE)
     53          #include "device_6130.h"
     54          #include "board_6130.h"
     55          extern const H6130 pH6130;
     56          #endif
     57          
     58          //------------------------------------------------------------------------------
     59          //         Global variables
     60          //------------------------------------------------------------------------------
     61          
     62          //#if (!HOST_BUS_INTERFACE) // spi

   \                                 In section .bss, align 2
     63          static unsigned short waddr = 0;
   \                     waddr:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     64          static unsigned char watch = 0;
   \                     watch:
   \   00000000                      DS8 1
     65          //#endif
     66          
     67          
     68          //------------------------------------------------------------------------------
     69          //         Functions
     70          //------------------------------------------------------------------------------
     71          
     72          
     73          //------------------------------------------------------------------------------
     74          /// Configures USART: hardware flow control OFF, asynchronous, 8 bits, 1 stop
     75          /// bit, no parity, 115200 baud, then enables USART transmitter and receiver.
     76          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     77          void ConfigureUsart1(void)
     78          {
   \                     ConfigureUsart1:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   A0B0               SUB      SP,SP,#+128
     79            const Pin pins[] = {PINS_USART};
   \   00000004   00A8               ADD      R0,SP,#+0
   \   00000006   ....               LDR.N    R1,??DataTable1_2
   \   00000008   8022               MOVS     R2,#+128
   \   0000000A   ........           BL       __aeabi_memcpy4
     80            
     81            unsigned int mode = AT91C_US_USMODE_NORMAL // USMODE_HWHSH enables RTS/CTS handshaking
     82                                  | AT91C_US_CLKS_CLOCK
     83                                  | AT91C_US_CHRL_8_BITS
     84                                  | AT91C_US_PAR_NONE
     85                                  | AT91C_US_NBSTOP_1_BIT
     86                                  | AT91C_US_CHMODE_NORMAL;
   \   0000000E   4FF40C64           MOV      R4,#+2240
     87          
     88              // configure PIO pins used by USART1
     89              PIO_Configure(pins, PIO_LISTSIZE(pins));  
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   00A8               ADD      R0,SP,#+0
   \   00000016   ........           BL       PIO_Configure
     90            
     91              // Enable the peripheral clock in the PMC
     92              PMC_EnablePeripheral(BOARD_ID_USART);
   \   0000001A   0E20               MOVS     R0,#+14
   \   0000001C   ........           BL       PMC_EnablePeripheral
     93          
     94              // Configure the USART in the desired mode @ 115200 baud
     95              USART_Configure(BOARD_USART_BASE, mode, 115200, BOARD_MCK);
   \   00000020   ....               LDR.N    R3,??DataTable1_3  ;; 0x2dc6c00
   \   00000022   5FF4E132           MOVS     R2,#+115200
   \   00000026   2100               MOVS     R1,R4
   \   00000028   ........           LDR.W    R0,??DataTable2  ;; 0x40094000
   \   0000002C   ........           BL       USART_Configure
     96          
     97             // Enable USART receiver & transmitter
     98              USART_SetTransmitterEnabled(BOARD_USART_BASE, 1);
   \   00000030   0121               MOVS     R1,#+1
   \   00000032   ........           LDR.W    R0,??DataTable2  ;; 0x40094000
   \   00000036   ........           BL       USART_SetTransmitterEnabled
     99              USART_SetReceiverEnabled(BOARD_USART_BASE, 1);
   \   0000003A   0121               MOVS     R1,#+1
   \   0000003C   ........           LDR.W    R0,??DataTable2  ;; 0x40094000
   \   00000040   ........           BL       USART_SetReceiverEnabled
    100          }
   \   00000044   20B0               ADD      SP,SP,#+128
   \   00000046   10BD               POP      {R4,PC}          ;; return
    101          
    102          
    103          //------------------------------------------------------------------------------
    104          //     function sends ASCII text header to screen
    105          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    106          void show_menu(void) {
   \                     show_menu:
   \   00000000   80B5               PUSH     {R7,LR}
    107            
    108            // Console Output via USART to user HyperTerminal
    109            
    110            putchar(12); // clear screen
   \   00000002   0C20               MOVS     R0,#+12
   \   00000004   ........           BL       putchar
    111          
    112            printf("\n\r*************************************************\n\r");
   \   00000008   ....               LDR.N    R0,??DataTable1_4
   \   0000000A   ........           BL       printf
    113            printf("   Holt Integrated Circuits HI-6130/31 Project   \n\r");
   \   0000000E   ....               LDR.N    R0,??DataTable1_5
   \   00000010   ........           BL       printf
    114            printf("        Compiled: %s %s        \n\r", __DATE__, __TIME__);
   \   00000014   ....               LDR.N    R2,??DataTable1_6
   \   00000016   ....               LDR.N    R1,??DataTable1_7
   \   00000018   ....               LDR.N    R0,??DataTable1_8
   \   0000001A   ........           BL       printf
    115            printf("*************************************************\n\n\r");
   \   0000001E   ....               LDR.N    R0,??DataTable1_9
   \   00000020   ........           BL       printf
    116            #if(BC_ena) 
    117              printf("   BC On   "); 
   \   00000024   ....               LDR.N    R0,??DataTable1_10
   \   00000026   ........           BL       printf
    118            #else 
    119              printf("   BC Off  ");
    120            #endif
    121            #if(SMT_ena) 
    122              printf("SMT On    ");
   \   0000002A   ....               LDR.N    R0,??DataTable1_11
   \   0000002C   ........           BL       printf
    123            #elif(IMT_ena) 
    124              printf("IMT On    ");
    125            #else 
    126              printf("MT Off   ");
    127            #endif
    128            #if(RT1_ena) 
    129              printf("RT1 On   ");
   \   00000030   ....               LDR.N    R0,??DataTable1_12
   \   00000032   ........           BL       printf
    130            #else 
    131              printf("RT1 Off  ");
    132            #endif
    133            #if(RT2_ena) 
    134              printf("RT2 On");
   \   00000036   ....               LDR.N    R0,??DataTable1_13
   \   00000038   ........           BL       printf
    135            #else 
    136              printf("RT2 Off");
    137            #endif
    138              printf("\n\n\r");
   \   0000003C   ....               ADR.N    R0,??DataTable1  ;; "\n\n\r"
   \   0000003E   ........           BL       printf
    139            #if(BC_ena) 
    140              printf(" Press '1' to step BC and list results...\n\r");
   \   00000042   ....               LDR.N    R0,??DataTable1_14
   \   00000044   ........           BL       printf
    141              printf(" Press '2' to list BC configuration...\n\r");
   \   00000048   ....               LDR.N    R0,??DataTable1_15
   \   0000004A   ........           BL       printf
    142              printf(" Press '3' to list BC condition codes & GP flags...\n\r");
   \   0000004E   ....               LDR.N    R0,??DataTable1_16
   \   00000050   ........           BL       printf
    143            #endif
    144            #if(SMT_ena || IMT_ena)
    145              printf(" Press '4' to list MT configuration...\n\r");
   \   00000054   ....               LDR.N    R0,??DataTable1_17
   \   00000056   ........           BL       printf
    146              printf(" Press '5' to list MT results, last msg...\n\r");
   \   0000005A   ....               LDR.N    R0,??DataTable1_18
   \   0000005C   ........           BL       printf
    147            #endif
    148              printf(" Press '6' to list HW interrupt status...\n\r");
   \   00000060   ....               LDR.N    R0,??DataTable1_19
   \   00000062   ........           BL       printf
    149            #if(BC_ena) 
    150              printf(" Press '7' to list BC interrupt status...\n\r");
   \   00000066   ....               LDR.N    R0,??DataTable1_20
   \   00000068   ........           BL       printf
    151            #endif
    152            #if(RT1_ena || RT2_ena)
    153              printf(" Press '8' to list RT interrupt status...\n\r");
   \   0000006C   ....               LDR.N    R0,??DataTable1_21
   \   0000006E   ........           BL       printf
    154            #endif
    155            #if(SMT_ena || IMT_ena)
    156              printf(" Press '9' to list MT interrupt status...\n\r");
   \   00000072   ....               LDR.N    R0,??DataTable1_22
   \   00000074   ........           BL       printf
    157            #endif
    158            #if (!HOST_BUS_INTERFACE) // spi
    159              printf(" Press 'W' for HI-6131 Memory Watch window...\n\r");
    160            #endif
    161              printf(" NOTE: Options 6-9 clear the accessed Pending Interrupt Register!\n\r"); 
   \   00000078   ....               LDR.N    R0,??DataTable1_23
   \   0000007A   ........           BL       printf
    162              print_line();
   \   0000007E   ........           BL       print_line
    163              printf("\n\r");
   \   00000082   ....               ADR.N    R0,??DataTable1_1  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000084   ........           BL       printf
    164              print_menuprompt();
   \   00000088   ........           BL       print_menuprompt
    165          
    166          } // end of show_menu()
   \   0000008C   01BD               POP      {R0,PC}          ;; return
    167          
    168          
    169          #if(BC_ena) 
    170          //------------------------------------------------------------------------------
    171          //	This function generates a BC external trigger pulse for the HI-613x. 
    172          //	The pin has a pull-down with a push button pulling high. This function
    173          //	provides an alternate, software-generated trigger. To avoid contention
    174          //	with the button, the PA0 GPIO rests in high-z input mode. The PAOUT
    175          //	register sets PA0 high, so this function simply pulses the pin in 
    176          //	output mode to generate trigger.
    177          //
    178          //	After triggering, an in-line delay provides adequate time for 
    179          //	worst case message completion, then console output displays 
    180          //	formatted message results
    181          //------------------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
    182          void bc_last_msg_console(void) {
   \                     bc_last_msg_console:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   97B0               SUB      SP,SP,#+92
    183          
    184            unsigned short int i, j, k, addr, wordcount=8, mcsb[10], data[32];
   \   00000006   0825               MOVS     R5,#+8
    185            char rtrt=0,bcast=0,mcode=0,tx=0,nr=0,mtype=0; //,mcd=0;
   \   00000008   0026               MOVS     R6,#+0
   \   0000000A   0027               MOVS     R7,#+0
   \   0000000C   5FF0000B           MOVS     R11,#+0
   \   00000010   5FF00008           MOVS     R8,#+0
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   8DF80400           STRB     R0,[SP, #+4]
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   8DF80500           STRB     R0,[SP, #+5]
    186          
    187            // formfeed 
    188            putchar(12); 	
   \   00000020   0C20               MOVS     R0,#+12
   \   00000022   ........           BL       putchar
    189            printf("\n\rResults From Last Message Issued by BC\n\r");
   \   00000026   ........           LDR.W    R0,??DataTable2_1
   \   0000002A   ........           BL       printf
    190            print_line();
   \   0000002E   ........           BL       print_line
    191            printf("Message Type: ");
   \   00000032   ........           LDR.W    R0,??DataTable2_2
   \   00000036   ........           BL       printf
    192          
    193            #if (HOST_BUS_INTERFACE)
    194          	// read block address for the last message 
    195          	addr = pH6130->BC_LAST_MSG_BLOCK_ADDR_REG;
   \   0000003A   ........           LDR.W    R0,??DataTable2_3
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   B0F89E00           LDRH     R0,[R0, #+158]
   \   00000044   8146               MOV      R9,R0
    196          	// read BC Control Word 
    197          	mcsb[0] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   00000046   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000004A   5FEA4900           LSLS     R0,R9,#+1
   \   0000004E   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000052   0068               LDR      R0,[R0, #+0]
   \   00000054   ADF80800           STRH     R0,[SP, #+8]
    198          	// read Command Word 
    199          	addr++;
   \   00000058   19F10109           ADDS     R9,R9,#+1
    200          	mcsb[1] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   0000005C   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000060   5FEA4900           LSLS     R0,R9,#+1
   \   00000064   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000068   0068               LDR      R0,[R0, #+0]
   \   0000006A   ADF80A00           STRH     R0,[SP, #+10]
    201          	
    202            #else // (HOST_SPI_INTERFACE)
    203              // enable Memory Address Pointer 1
    204              enaMAP(1);
    205          	// read block address for the last message, indirectly using MAP
    206          	Write_6131LowReg(MAP_1, BC_LAST_MSG_BLOCK_ADDR_REG, 1);
    207          	addr = Read_6131_1word(1);
    208          	// write block addr to MAP then read block's first 2 words
    209          	Write_6131LowReg(MAP_1, addr, 1);	
    210          	// read BC Control Word, MAP auto incrementts 
    211          	mcsb[0] = Read_6131_1word(1);
    212          	// read Command Word 
    213          	mcsb[1] = Read_6131_1word(1);
    214            #endif // (HOST_SPI_INTERFACE)
    215          
    216            if((mcsb[1] & 0xF800) == 0xF800) {
   \   0000006E   BDF80A00           LDRH     R0,[SP, #+10]
   \   00000072   10F47840           ANDS     R0,R0,#0xF800
   \   00000076   B0F5784F           CMP      R0,#+63488
   \   0000007A   05D1               BNE.N    ??bc_last_msg_console_0
    217          	printf("Broadcast ");
   \   0000007C   ........           LDR.W    R0,??DataTable2_4
   \   00000080   ........           BL       printf
    218          	bcast = 1;
   \   00000084   0120               MOVS     R0,#+1
   \   00000086   0700               MOVS     R7,R0
    219            }
    220          
    221            // RT-RT message? 
    222            if(mcsb[0] & 1) {
   \                     ??bc_last_msg_console_0:
   \   00000088   BDF80800           LDRH     R0,[SP, #+8]
   \   0000008C   C007               LSLS     R0,R0,#+31
   \   0000008E   07D5               BPL.N    ??bc_last_msg_console_1
    223          	rtrt=1;
   \   00000090   0120               MOVS     R0,#+1
   \   00000092   0600               MOVS     R6,R0
    224          	printf("RT-RT Message, ");
   \   00000094   ........           LDR.W    R0,??DataTable2_5
   \   00000098   ........           BL       printf
    225          	wordcount = 10;
   \   0000009C   0A20               MOVS     R0,#+10
   \   0000009E   0500               MOVS     R5,R0
    226            }
    227          
    228            // read rest of control-status block 
    229            #if (HOST_BUS_INTERFACE)
    230          	for (i=2,addr++; i<wordcount; i++,addr++) {
   \                     ??bc_last_msg_console_1:
   \   000000A0   0220               MOVS     R0,#+2
   \   000000A2   8246               MOV      R10,R0
   \   000000A4   19F10109           ADDS     R9,R9,#+1
   \                     ??bc_last_msg_console_2:
   \   000000A8   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000AC   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AE   AA45               CMP      R10,R5
   \   000000B0   10D2               BCS.N    ??bc_last_msg_console_3
    231          		mcsb[i] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   000000B2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000000B6   02A8               ADD      R0,SP,#+8
   \   000000B8   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000000BC   5FEA4901           LSLS     R1,R9,#+1
   \   000000C0   11F1C041           ADDS     R1,R1,#+1610612736
   \   000000C4   0968               LDR      R1,[R1, #+0]
   \   000000C6   20F81A10           STRH     R1,[R0, R10, LSL #+1]
    232          	}
   \   000000CA   1AF1010A           ADDS     R10,R10,#+1
   \   000000CE   19F10109           ADDS     R9,R9,#+1
   \   000000D2   E9E7               B.N      ??bc_last_msg_console_2
    233            #else // (HOST_SPI_INTERFACE)
    234          	for (i=2; i<wordcount; i++) {
    235          		mcsb[i] = Read_6131_1word(1);
    236          	}
    237            #endif // (HOST_SPI_INTERFACE)
    238            
    239            if(!rtrt) {
   \                     ??bc_last_msg_console_3:
   \   000000D4   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D6   002E               CMP      R6,#+0
   \   000000D8   0CD1               BNE.N    ??bc_last_msg_console_4
    240          	if(mcsb[1] & (1<<10)) {
   \   000000DA   BDF80A00           LDRH     R0,[SP, #+10]
   \   000000DE   4005               LSLS     R0,R0,#+21
   \   000000E0   05D5               BPL.N    ??bc_last_msg_console_5
    241          	    printf("Tx ");
   \   000000E2   8BA0               ADR.N    R0,??bc_last_msg_console_6  ;; "Tx "
   \   000000E4   ........           BL       printf
    242                      tx = 1;
   \   000000E8   0120               MOVS     R0,#+1
   \   000000EA   8046               MOV      R8,R0
   \   000000EC   02E0               B.N      ??bc_last_msg_console_4
    243                  }
    244          	else printf("Rx ");
   \                     ??bc_last_msg_console_5:
   \   000000EE   89A0               ADR.N    R0,??bc_last_msg_console_6+0x4  ;; "Rx "
   \   000000F0   ........           BL       printf
    245            }
    246          
    247          //mtype = mcsb[0] & 7;
    248            // check CW subaddress field to detect mode code 
    249            j = mcsb[1] & 0x03E0;
   \                     ??bc_last_msg_console_4:
   \   000000F4   BDF80A00           LDRH     R0,[SP, #+10]
   \   000000F8   4FF47871           MOV      R1,#+992
   \   000000FC   0840               ANDS     R0,R1,R0
   \   000000FE   0400               MOVS     R4,R0
    250            if((j == 0) || (j == 0x03E0)) {
   \   00000100   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000102   002C               CMP      R4,#+0
   \   00000104   04D0               BEQ.N    ??bc_last_msg_console_7
   \   00000106   4FF47870           MOV      R0,#+992
   \   0000010A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000010C   8442               CMP      R4,R0
   \   0000010E   3FD1               BNE.N    ??bc_last_msg_console_8
    251                // mode code 
    252                mcode = 1;
   \                     ??bc_last_msg_console_7:
   \   00000110   0120               MOVS     R0,#+1
   \   00000112   8346               MOV      R11,R0
    253                i = 0x1F & mcsb[1];
   \   00000114   9DF80A00           LDRB     R0,[SP, #+10]
   \   00000118   10F01F00           ANDS     R0,R0,#0x1F
   \   0000011C   8246               MOV      R10,R0
    254                if(i > 15) {
   \   0000011E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000122   BAF1100F           CMP      R10,#+16
   \   00000126   1DD3               BCC.N    ??bc_last_msg_console_9
    255                    wordcount = 1;
   \   00000128   0120               MOVS     R0,#+1
   \   0000012A   0500               MOVS     R5,R0
    256                    addr = mcsb[2];
   \   0000012C   BDF80C00           LDRH     R0,[SP, #+12]
   \   00000130   8146               MOV      R9,R0
    257          		  #if (HOST_BUS_INTERFACE)
    258          			data[0] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   00000132   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000136   5FEA4900           LSLS     R0,R9,#+1
   \   0000013A   10F1C040           ADDS     R0,R0,#+1610612736
   \   0000013E   0068               LDR      R0,[R0, #+0]
   \   00000140   ADF81C00           STRH     R0,[SP, #+28]
    259          		  #else // (HOST_SPI_INTERFACE)
    260          			Write_6131LowReg(MAP_1, addr, 1);
    261          			data[0] = Read_6131_1word(1);
    262          		  #endif // (HOST_SPI_INTERFACE)	
    263              //    mcd=1;
    264                    printf("Mode Code %02d With Data 0x%.2X%.2X\n\n\r", i, (char)(data[0]>>8), (char)data[0]);
   \   00000144   BDF81C30           LDRH     R3,[SP, #+28]
   \   00000148   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000014A   BDF81C00           LDRH     R0,[SP, #+28]
   \   0000014E   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000150   020A               LSRS     R2,R0,#+8
   \   00000152   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000154   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000158   5146               MOV      R1,R10
   \   0000015A   ........           LDR.W    R0,??DataTable2_6
   \   0000015E   ........           BL       printf
   \   00000162   32E0               B.N      ??bc_last_msg_console_10
    265                }
    266                else {
    267                    wordcount = 0;
   \                     ??bc_last_msg_console_9:
   \   00000164   0020               MOVS     R0,#+0
   \   00000166   0500               MOVS     R5,R0
    268                    if(mcsb[1] & (1<<10)) printf("Mode Code %02d w/o Data\n\n\r", i);
   \   00000168   BDF80A00           LDRH     R0,[SP, #+10]
   \   0000016C   4005               LSLS     R0,R0,#+21
   \   0000016E   07D5               BPL.N    ??bc_last_msg_console_11
   \   00000170   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000174   5146               MOV      R1,R10
   \   00000176   ........           LDR.W    R0,??DataTable2_7
   \   0000017A   ........           BL       printf
   \   0000017E   24E0               B.N      ??bc_last_msg_console_10
    269                    // undef Rx MC0-15 
    270                    else printf("Mode Code %02d w/o Data, Undefined\n\n\r", i);
   \                     ??bc_last_msg_console_11:
   \   00000180   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000184   5146               MOV      R1,R10
   \   00000186   ........           LDR.W    R0,??DataTable2_8
   \   0000018A   ........           BL       printf
   \   0000018E   1CE0               B.N      ??bc_last_msg_console_10
    271                }
    272            }
    273            
    274            else {
    275                printf("Subaddress Command, ");
   \                     ??bc_last_msg_console_8:
   \   00000190   ........           LDR.W    R0,??DataTable2_9
   \   00000194   ........           BL       printf
    276                wordcount = mcsb[1] & 0x1F;
   \   00000198   9DF80A00           LDRB     R0,[SP, #+10]
   \   0000019C   10F01F00           ANDS     R0,R0,#0x1F
   \   000001A0   0500               MOVS     R5,R0
    277                if (!wordcount) wordcount = 32;
   \   000001A2   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001A4   002D               CMP      R5,#+0
   \   000001A6   01D1               BNE.N    ??bc_last_msg_console_12
   \   000001A8   2020               MOVS     R0,#+32
   \   000001AA   0500               MOVS     R5,R0
    278                printf("%d data word",wordcount);
   \                     ??bc_last_msg_console_12:
   \   000001AC   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001AE   2900               MOVS     R1,R5
   \   000001B0   ........           LDR.W    R0,??DataTable2_10
   \   000001B4   ........           BL       printf
    279                if(wordcount!=1) printf("s");
   \   000001B8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001BA   012D               CMP      R5,#+1
   \   000001BC   02D0               BEQ.N    ??bc_last_msg_console_13
   \   000001BE   DFA0               ADR.N    R0,??bc_last_msg_console_14  ;; "s"
   \   000001C0   ........           BL       printf
    280                printf("\n\n\r"); 
   \                     ??bc_last_msg_console_13:
   \   000001C4   DEA0               ADR.N    R0,??bc_last_msg_console_14+0x4  ;; "\n\n\r"
   \   000001C6   ........           BL       printf
    281            }                                     
    282          
    283            if (rtrt) {
   \                     ??bc_last_msg_console_10:
   \   000001CA   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000001CC   002E               CMP      R6,#+0
   \   000001CE   00F07781           BEQ.W    ??bc_last_msg_console_15
    284              // validity check RT-RT 
    285              if(mcode) printf("RT-RT problem: RxCW mode code.\n\r");
   \   000001D2   5FFA8BFB           UXTB     R11,R11          ;; ZeroExt  R11,R11,#+24,#+24
   \   000001D6   BBF1000F           CMP      R11,#+0
   \   000001DA   03D0               BEQ.N    ??bc_last_msg_console_16
   \   000001DC   ........           LDR.W    R0,??DataTable2_11
   \   000001E0   ........           BL       printf
    286              // CW1 = Rx? 
    287              if (tx) printf("RT-RT problem: RxCW is transmit.\n\r");
   \                     ??bc_last_msg_console_16:
   \   000001E4   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001E8   B8F1000F           CMP      R8,#+0
   \   000001EC   03D0               BEQ.N    ??bc_last_msg_console_17
   \   000001EE   ........           LDR.W    R0,??DataTable2_12
   \   000001F2   ........           BL       printf
    288              // CW2 = Tx? 
    289              if(!(mcsb[8] & (1<<10))) printf("RT-RT problem: TxCW is receive.\n\r");
   \                     ??bc_last_msg_console_17:
   \   000001F6   BDF81800           LDRH     R0,[SP, #+24]
   \   000001FA   4005               LSLS     R0,R0,#+21
   \   000001FC   03D4               BMI.N    ??bc_last_msg_console_18
   \   000001FE   ........           LDR.W    R0,??DataTable2_13
   \   00000202   ........           BL       printf
    290              // check CW2 mode code 
    291              j = mcsb[8] & 0x03E0;
   \                     ??bc_last_msg_console_18:
   \   00000206   BDF81800           LDRH     R0,[SP, #+24]
   \   0000020A   4FF47871           MOV      R1,#+992
   \   0000020E   0840               ANDS     R0,R1,R0
   \   00000210   0400               MOVS     R4,R0
    292              if((j == 0) || (j == 0x03E0)) printf("RT-RT problem: TxCW mode code.\n\r");
   \   00000212   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000214   002C               CMP      R4,#+0
   \   00000216   04D0               BEQ.N    ??bc_last_msg_console_19
   \   00000218   4FF47870           MOV      R0,#+992
   \   0000021C   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000021E   8442               CMP      R4,R0
   \   00000220   03D1               BNE.N    ??bc_last_msg_console_20
   \                     ??bc_last_msg_console_19:
   \   00000222   ........           LDR.W    R0,??DataTable2_14
   \   00000226   ........           BL       printf
    293              // rule-out CW1 address = CW2 address 
    294              i = mcsb[1] & 0xF800;
   \                     ??bc_last_msg_console_20:
   \   0000022A   BDF80A00           LDRH     R0,[SP, #+10]
   \   0000022E   10F47840           ANDS     R0,R0,#0xF800
   \   00000232   8246               MOV      R10,R0
    295              j = mcsb[8] & 0xF800;
   \   00000234   BDF81800           LDRH     R0,[SP, #+24]
   \   00000238   10F47840           ANDS     R0,R0,#0xF800
   \   0000023C   0400               MOVS     R4,R0
    296              if(i == j) printf("RT-RT problem: RxCW & TxCW have same RT addr.\n\r");
   \   0000023E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000242   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000244   A245               CMP      R10,R4
   \   00000246   03D1               BNE.N    ??bc_last_msg_console_21
   \   00000248   ........           LDR.W    R0,??DataTable2_16
   \   0000024C   ........           BL       printf
    297              // rule-out different word counts 
    298              i = mcsb[8] & 0x001F;
   \                     ??bc_last_msg_console_21:
   \   00000250   9DF81800           LDRB     R0,[SP, #+24]
   \   00000254   10F01F00           ANDS     R0,R0,#0x1F
   \   00000258   8246               MOV      R10,R0
    299              if(i != wordcount) printf("RT-RT problem: RxCW & TxCW word counts differ.\n\r");
   \   0000025A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000025E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000260   AA45               CMP      R10,R5
   \   00000262   03D0               BEQ.N    ??bc_last_msg_console_22
   \   00000264   ........           LDR.W    R0,??DataTable2_17
   \   00000268   ........           BL       printf
    300              printf("\n\r");
   \                     ??bc_last_msg_console_22:
   \   0000026C   C8A0               ADR.N    R0,??bc_last_msg_console_23  ;; 0x0A, 0x0D, 0x00, 0x00
   \   0000026E   ........           BL       printf
    301          
    302              i = mcsb[1];
   \   00000272   BDF80A00           LDRH     R0,[SP, #+10]
   \   00000276   8246               MOV      R10,R0
    303              printf("CW1: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   00000278   5246               MOV      R2,R10
   \   0000027A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000027C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000280   5FEA1A21           LSRS     R1,R10,#+8
   \   00000284   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000286   ........           LDR.W    R0,??DataTable2_18
   \   0000028A   ........           BL       printf
    304              printf(" = %02d-%1d-%02d-%02d     ", i>>11, (0x0400 & i)>>10, (0x03E0 & i)>>5, (0x001F & i));
   \   0000028E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000292   1AF01F00           ANDS     R0,R10,#0x1F
   \   00000296   0090               STR      R0,[SP, #+0]
   \   00000298   CAF34413           UBFX     R3,R10,#+5,#+5
   \   0000029C   9BB2               UXTH     R3,R3            ;; ZeroExt  R3,R3,#+16,#+16
   \   0000029E   CAF38022           UBFX     R2,R10,#+10,#+1
   \   000002A2   92B2               UXTH     R2,R2            ;; ZeroExt  R2,R2,#+16,#+16
   \   000002A4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000002A8   5FEADA21           LSRS     R1,R10,#+11
   \   000002AC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002AE   ........           LDR.W    R0,??DataTable2_19
   \   000002B2   ........           BL       printf
    305              if(bcast) printf("RSW not applicable\n\r");
   \   000002B6   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000002B8   002F               CMP      R7,#+0
   \   000002BA   04D0               BEQ.N    ??bc_last_msg_console_24
   \   000002BC   ........           LDR.W    R0,??DataTable2_20
   \   000002C0   ........           BL       printf
   \   000002C4   69E0               B.N      ??bc_last_msg_console_25
    306              else {
    307                  i = mcsb[9];
   \                     ??bc_last_msg_console_24:
   \   000002C6   BDF81A00           LDRH     R0,[SP, #+26]
   \   000002CA   8246               MOV      R10,R0
    308                  printf("RxSW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000002CC   5246               MOV      R2,R10
   \   000002CE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000002D0   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000002D4   5FEA1A21           LSRS     R1,R10,#+8
   \   000002D8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000002DA   ........           LDR.W    R0,??DataTable2_22
   \   000002DE   ........           BL       printf
    309                  printf(" = RT%02d ", (char)(i>>11));
   \   000002E2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000002E6   5FEADA21           LSRS     R1,R10,#+11
   \   000002EA   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000002EC   ........           LDR.W    R0,??DataTable2_23
   \   000002F0   ........           BL       printf
    310                  i &= 0x7FF;
   \   000002F4   5FEA4A5A           LSLS     R10,R10,#+21     ;; ZeroExtS R10,R10,#+21,#+21
   \   000002F8   5FEA5A5A           LSRS     R10,R10,#+21
    311                  if(!i) printf("CS\n\r");
   \   000002FC   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000300   BAF1000F           CMP      R10,#+0
   \   00000304   08D1               BNE.N    ??bc_last_msg_console_26
   \   00000306   ........           LDR.W    R0,??DataTable2_24
   \   0000030A   ........           BL       printf
   \   0000030E   44E0               B.N      ??bc_last_msg_console_25
   \                     ??bc_last_msg_console_6:
   \   00000310   54782000           DC8      "Tx "
   \   00000314   52782000           DC8      "Rx "
    312                  else {
    313                      if(i & (1<<10)) printf("ME ");
   \                     ??bc_last_msg_console_26:
   \   00000318   5FEA4A50           LSLS     R0,R10,#+21
   \   0000031C   02D5               BPL.N    ??bc_last_msg_console_27
   \   0000031E   D9A0               ADR.N    R0,??bc_last_msg_console_28  ;; "ME "
   \   00000320   ........           BL       printf
    314                      if(i & (1<<9)) printf("INST ");
   \                     ??bc_last_msg_console_27:
   \   00000324   5FEA8A50           LSLS     R0,R10,#+22
   \   00000328   03D5               BPL.N    ??bc_last_msg_console_29
   \   0000032A   ........           LDR.W    R0,??DataTable2_25
   \   0000032E   ........           BL       printf
    315                      if(i & (1<<8)) printf("SRQ ");
   \                     ??bc_last_msg_console_29:
   \   00000332   5FEACA50           LSLS     R0,R10,#+23
   \   00000336   03D5               BPL.N    ??bc_last_msg_console_30
   \   00000338   ........           LDR.W    R0,??DataTable2_26
   \   0000033C   ........           BL       printf
    316                      if(i & (7<<5)) printf("RSV ");
   \                     ??bc_last_msg_console_30:
   \   00000340   E021               MOVS     R1,#+224
   \   00000342   1AEA010F           TST      R10,R1
   \   00000346   03D0               BEQ.N    ??bc_last_msg_console_31
   \   00000348   ........           LDR.W    R0,??DataTable2_27
   \   0000034C   ........           BL       printf
    317                      if(i & 16) printf("BCR ");
   \                     ??bc_last_msg_console_31:
   \   00000350   5FEACA60           LSLS     R0,R10,#+27
   \   00000354   03D5               BPL.N    ??bc_last_msg_console_32
   \   00000356   ........           LDR.W    R0,??DataTable2_28
   \   0000035A   ........           BL       printf
    318                      if(i & 8) printf("BSY ");
   \                     ??bc_last_msg_console_32:
   \   0000035E   5FEA0A70           LSLS     R0,R10,#+28
   \   00000362   03D5               BPL.N    ??bc_last_msg_console_33
   \   00000364   ........           LDR.W    R0,??DataTable2_29
   \   00000368   ........           BL       printf
    319                      if(i & 4) printf("SSF ");
   \                     ??bc_last_msg_console_33:
   \   0000036C   5FEA4A70           LSLS     R0,R10,#+29
   \   00000370   03D5               BPL.N    ??bc_last_msg_console_34
   \   00000372   ........           LDR.W    R0,??DataTable2_30
   \   00000376   ........           BL       printf
    320                      if(i & 2) printf("DBCA ");
   \                     ??bc_last_msg_console_34:
   \   0000037A   5FEA8A70           LSLS     R0,R10,#+30
   \   0000037E   03D5               BPL.N    ??bc_last_msg_console_35
   \   00000380   ........           LDR.W    R0,??DataTable2_31
   \   00000384   ........           BL       printf
    321                      if(i & 1) printf("TF ");
   \                     ??bc_last_msg_console_35:
   \   00000388   5FEACA70           LSLS     R0,R10,#+31
   \   0000038C   02D5               BPL.N    ??bc_last_msg_console_36
   \   0000038E   CAA0               ADR.N    R0,??bc_last_msg_console_37  ;; "TF "
   \   00000390   ........           BL       printf
    322                      printf("\n\r");
   \                     ??bc_last_msg_console_36:
   \   00000394   7EA0               ADR.N    R0,??bc_last_msg_console_23  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000396   ........           BL       printf
    323                  }
    324              }
    325              i = mcsb[8];
   \                     ??bc_last_msg_console_25:
   \   0000039A   BDF81800           LDRH     R0,[SP, #+24]
   \   0000039E   8246               MOV      R10,R0
    326              printf("CW2: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000003A0   5246               MOV      R2,R10
   \   000003A2   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003A4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003A8   5FEA1A21           LSRS     R1,R10,#+8
   \   000003AC   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003AE   ........           LDR.W    R0,??DataTable2_32
   \   000003B2   ........           BL       printf
    327              printf(" = %02d-%1d-%02d-%02d     ", (char)(i>>11), (char)((0x0400 & i)>>10), (char)((0x03E0 & i)>>5), (char)((0x001F & i)));
   \   000003B6   1AF01F00           ANDS     R0,R10,#0x1F
   \   000003BA   0090               STR      R0,[SP, #+0]
   \   000003BC   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003C0   5FEA6A10           ASRS     R0,R10,#+5
   \   000003C4   10F01F03           ANDS     R3,R0,#0x1F
   \   000003C8   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003CC   5FEA9A20           LSRS     R0,R10,#+10
   \   000003D0   10F00102           ANDS     R2,R0,#0x1
   \   000003D4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003D8   5FEADA21           LSRS     R1,R10,#+11
   \   000003DC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000003DE   ........           LDR.W    R0,??DataTable2_19
   \   000003E2   ........           BL       printf
    328              i = mcsb[7];
   \   000003E6   BDF81600           LDRH     R0,[SP, #+22]
   \   000003EA   8246               MOV      R10,R0
    329              printf("TxSW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000003EC   5246               MOV      R2,R10
   \   000003EE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003F0   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000003F4   5FEA1A21           LSRS     R1,R10,#+8
   \   000003F8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003FA   ........           LDR.W    R0,??DataTable2_33
   \   000003FE   ........           BL       printf
    330              printf(" = RT%02d ", (char)(i>>11));
   \   00000402   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000406   5FEADA21           LSRS     R1,R10,#+11
   \   0000040A   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000040C   ........           LDR.W    R0,??DataTable2_23
   \   00000410   ........           BL       printf
    331              i &= 0x7FF;
   \   00000414   5FEA4A5A           LSLS     R10,R10,#+21     ;; ZeroExtS R10,R10,#+21,#+21
   \   00000418   5FEA5A5A           LSRS     R10,R10,#+21
    332              if(!i) printf("CS\n\n\r");
   \   0000041C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000420   BAF1000F           CMP      R10,#+0
   \   00000424   04D1               BNE.N    ??bc_last_msg_console_38
   \   00000426   ........           LDR.W    R0,??DataTable2_34
   \   0000042A   ........           BL       printf
   \   0000042E   40E0               B.N      ??bc_last_msg_console_39
    333              else {
    334                  if(i & (1<<10)) printf("ME ");
   \                     ??bc_last_msg_console_38:
   \   00000430   5FEA4A50           LSLS     R0,R10,#+21
   \   00000434   02D5               BPL.N    ??bc_last_msg_console_40
   \   00000436   93A0               ADR.N    R0,??bc_last_msg_console_28  ;; "ME "
   \   00000438   ........           BL       printf
    335                  if(i & (1<<9)) printf("INST ");
   \                     ??bc_last_msg_console_40:
   \   0000043C   5FEA8A50           LSLS     R0,R10,#+22
   \   00000440   03D5               BPL.N    ??bc_last_msg_console_41
   \   00000442   ........           LDR.W    R0,??DataTable2_25
   \   00000446   ........           BL       printf
    336                  if(i & (1<<8)) printf("SRQ ");
   \                     ??bc_last_msg_console_41:
   \   0000044A   5FEACA50           LSLS     R0,R10,#+23
   \   0000044E   03D5               BPL.N    ??bc_last_msg_console_42
   \   00000450   ........           LDR.W    R0,??DataTable2_26
   \   00000454   ........           BL       printf
    337                  if(i & (7<<5)) printf("RSV ");
   \                     ??bc_last_msg_console_42:
   \   00000458   E021               MOVS     R1,#+224
   \   0000045A   1AEA010F           TST      R10,R1
   \   0000045E   03D0               BEQ.N    ??bc_last_msg_console_43
   \   00000460   ........           LDR.W    R0,??DataTable2_27
   \   00000464   ........           BL       printf
    338                  if(i & 16) printf("BCR ");
   \                     ??bc_last_msg_console_43:
   \   00000468   5FEACA60           LSLS     R0,R10,#+27
   \   0000046C   03D5               BPL.N    ??bc_last_msg_console_44
   \   0000046E   ........           LDR.W    R0,??DataTable2_28
   \   00000472   ........           BL       printf
    339                  if(i & 8) printf("BSY ");
   \                     ??bc_last_msg_console_44:
   \   00000476   5FEA0A70           LSLS     R0,R10,#+28
   \   0000047A   03D5               BPL.N    ??bc_last_msg_console_45
   \   0000047C   ........           LDR.W    R0,??DataTable2_29
   \   00000480   ........           BL       printf
    340                  if(i & 4) printf("SSF ");
   \                     ??bc_last_msg_console_45:
   \   00000484   5FEA4A70           LSLS     R0,R10,#+29
   \   00000488   03D5               BPL.N    ??bc_last_msg_console_46
   \   0000048A   ........           LDR.W    R0,??DataTable2_30
   \   0000048E   ........           BL       printf
    341                  if(i & 2) printf("DBCA ");
   \                     ??bc_last_msg_console_46:
   \   00000492   5FEA8A70           LSLS     R0,R10,#+30
   \   00000496   03D5               BPL.N    ??bc_last_msg_console_47
   \   00000498   ........           LDR.W    R0,??DataTable2_31
   \   0000049C   ........           BL       printf
    342                  if(i & 1) printf("TF ");
   \                     ??bc_last_msg_console_47:
   \   000004A0   5FEACA70           LSLS     R0,R10,#+31
   \   000004A4   02D5               BPL.N    ??bc_last_msg_console_48
   \   000004A6   84A0               ADR.N    R0,??bc_last_msg_console_37  ;; "TF "
   \   000004A8   ........           BL       printf
    343                  printf("\n\n\r");
   \                     ??bc_last_msg_console_48:
   \   000004AC   24A0               ADR.N    R0,??bc_last_msg_console_14+0x4  ;; "\n\n\r"
   \   000004AE   ........           BL       printf
    344              }
    345              
    346              // read Condition Code & General Purpose Flag register
    347              #if (HOST_BUS_INTERFACE)
    348          	j = pH6130->BC_CCODE_AND_GPF_REG;
   \                     ??bc_last_msg_console_39:
   \   000004B2   ........           LDR.W    R0,??DataTable2_3
   \   000004B6   0068               LDR      R0,[R0, #+0]
   \   000004B8   B0F86E00           LDRH     R0,[R0, #+110]
   \   000004BC   0400               MOVS     R4,R0
   \   000004BE   AAE0               B.N      ??bc_last_msg_console_49
    349              #else // (HOST_SPI_INTERFACE)
    350          	Write_6131LowReg(MAP_1, BC_CCODE_AND_GPF_REG, 1);
    351          	j = Read_6131_1word(1);
    352              #endif
    353              
    354            }       // end rtrt
    355                  
    356                  else { 	// not rtrt
    357          
    358          	    // display Command Word  
    359          	    i = mcsb[1];
   \                     ??bc_last_msg_console_15:
   \   000004C0   BDF80A00           LDRH     R0,[SP, #+10]
   \   000004C4   8246               MOV      R10,R0
    360          	    printf("CW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   000004C6   5246               MOV      R2,R10
   \   000004C8   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004CA   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004CE   5FEA1A21           LSRS     R1,R10,#+8
   \   000004D2   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000004D4   ........           LDR.W    R0,??DataTable3_1
   \   000004D8   ........           BL       printf
    361          	    printf(" = %02d-%1d-%02d-%02d     ", (char)(i>>11), (char)((0x0400 & i)>>10), (char)((0x03E0 & i)>>5), (char)((0x001F & i)));
   \   000004DC   1AF01F00           ANDS     R0,R10,#0x1F
   \   000004E0   0090               STR      R0,[SP, #+0]
   \   000004E2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004E6   5FEA6A10           ASRS     R0,R10,#+5
   \   000004EA   10F01F03           ANDS     R3,R0,#0x1F
   \   000004EE   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004F2   5FEA9A20           LSRS     R0,R10,#+10
   \   000004F6   10F00102           ANDS     R2,R0,#0x1
   \   000004FA   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000004FE   5FEADA21           LSRS     R1,R10,#+11
   \   00000502   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000504   ........           LDR.W    R0,??DataTable2_19
   \   00000508   ........           BL       printf
    362                      
    363                      // read Condition Code & General Purpose Flag register
    364          	    #if (HOST_BUS_INTERFACE)
    365          		j = pH6130->BC_CCODE_AND_GPF_REG;
   \   0000050C   ........           LDR.W    R0,??DataTable2_3
   \   00000510   0068               LDR      R0,[R0, #+0]
   \   00000512   B0F86E00           LDRH     R0,[R0, #+110]
   \   00000516   0400               MOVS     R4,R0
    366          	    #else // (HOST_SPI_INTERFACE)
    367          		Write_6131LowReg(MAP_1, BC_CCODE_AND_GPF_REG, 1);
    368          		j = Read_6131_1word(1);
    369          	    #endif
    370          
    371          	    // check broadcast 
    372          	    if (bcast) printf("SW not applicable\n\n\r");
   \   00000518   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000051A   002F               CMP      R7,#+0
   \   0000051C   04D0               BEQ.N    ??bc_last_msg_console_50
   \   0000051E   ........           LDR.W    R0,??DataTable3_2
   \   00000522   ........           BL       printf
   \   00000526   76E0               B.N      ??bc_last_msg_console_49
    373          
    374          	    else {
    375          		// not broadcast, check if No Response timeout 
    376          		if(j & (1<<8)) {
   \                     ??bc_last_msg_console_50:
   \   00000528   E005               LSLS     R0,R4,#+23
   \   0000052A   0BD5               BPL.N    ??bc_last_msg_console_51
    377          		    // normal subaddress msg without RT response, excl rt-rt                   
    378          		    printf("SW not received\n\n\r");
   \   0000052C   ........           LDR.W    R0,??DataTable3_3
   \   00000530   ........           BL       printf
    379          		    nr = 1;
   \   00000534   0120               MOVS     R0,#+1
   \   00000536   8DF80400           STRB     R0,[SP, #+4]
   \   0000053A   6CE0               B.N      ??bc_last_msg_console_49
   \                     ??bc_last_msg_console_14:
   \   0000053C   73000000           DC8      "s",0x0,0x0
   \   00000540   0A0A0D00           DC8      "\n\n\r"
    380          		}
    381          		else {
    382          		    // normal subaddress msg with RT response, excl rt-rt 
    383          		    i = mcsb[7];
   \                     ??bc_last_msg_console_51:
   \   00000544   BDF81600           LDRH     R0,[SP, #+22]
   \   00000548   8246               MOV      R10,R0
    384          		    // decode received RT status 
    385          		    printf("SW: 0x%.2X%.2X", (char)(i>>8), (char)i);
   \   0000054A   5246               MOV      R2,R10
   \   0000054C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000054E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000552   5FEA1A21           LSRS     R1,R10,#+8
   \   00000556   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000558   ........           LDR.W    R0,??DataTable3_4
   \   0000055C   ........           BL       printf
    386          		    printf(" = RT%02d ",i>>11);
   \   00000560   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000564   5FEADA21           LSRS     R1,R10,#+11
   \   00000568   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000056A   ........           LDR.W    R0,??DataTable2_23
   \   0000056E   ........           BL       printf
    387          		    i &= 0x7FF;
   \   00000572   5FEA4A5A           LSLS     R10,R10,#+21     ;; ZeroExtS R10,R10,#+21,#+21
   \   00000576   5FEA5A5A           LSRS     R10,R10,#+21
    388          		    if(!i) printf("CS\n\n\r");
   \   0000057A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000057E   BAF1000F           CMP      R10,#+0
   \   00000582   07D1               BNE.N    ??bc_last_msg_console_52
   \   00000584   ........           LDR.W    R0,??DataTable2_34
   \   00000588   ........           BL       printf
   \   0000058C   43E0               B.N      ??bc_last_msg_console_49
   \   0000058E   00BF               Nop      
   \                     ??bc_last_msg_console_23:
   \   00000590   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00
    389          		    else {
    390          			if(i & (1<<10)) printf("ME ");
   \                     ??bc_last_msg_console_52:
   \   00000594   5FEA4A50           LSLS     R0,R10,#+21
   \   00000598   02D5               BPL.N    ??bc_last_msg_console_53
   \   0000059A   3AA0               ADR.N    R0,??bc_last_msg_console_28  ;; "ME "
   \   0000059C   ........           BL       printf
    391          			if(i & (1<<9)) printf("INST ");
   \                     ??bc_last_msg_console_53:
   \   000005A0   5FEA8A50           LSLS     R0,R10,#+22
   \   000005A4   03D5               BPL.N    ??bc_last_msg_console_54
   \   000005A6   ........           LDR.W    R0,??DataTable2_25
   \   000005AA   ........           BL       printf
    392          			if(i & (1<<8)) printf("SRQ ");
   \                     ??bc_last_msg_console_54:
   \   000005AE   5FEACA50           LSLS     R0,R10,#+23
   \   000005B2   03D5               BPL.N    ??bc_last_msg_console_55
   \   000005B4   ........           LDR.W    R0,??DataTable2_26
   \   000005B8   ........           BL       printf
    393          			if(i & (7<<5)) printf("RSV ");
   \                     ??bc_last_msg_console_55:
   \   000005BC   E021               MOVS     R1,#+224
   \   000005BE   1AEA010F           TST      R10,R1
   \   000005C2   03D0               BEQ.N    ??bc_last_msg_console_56
   \   000005C4   ........           LDR.W    R0,??DataTable2_27
   \   000005C8   ........           BL       printf
    394          			if(i & 16) printf("BCR ");
   \                     ??bc_last_msg_console_56:
   \   000005CC   5FEACA60           LSLS     R0,R10,#+27
   \   000005D0   03D5               BPL.N    ??bc_last_msg_console_57
   \   000005D2   ........           LDR.W    R0,??DataTable2_28
   \   000005D6   ........           BL       printf
    395          			if(i & 8) printf("BSY ");
   \                     ??bc_last_msg_console_57:
   \   000005DA   5FEA0A70           LSLS     R0,R10,#+28
   \   000005DE   03D5               BPL.N    ??bc_last_msg_console_58
   \   000005E0   ........           LDR.W    R0,??DataTable2_29
   \   000005E4   ........           BL       printf
    396          			if(i & 4) printf("SSF ");
   \                     ??bc_last_msg_console_58:
   \   000005E8   5FEA4A70           LSLS     R0,R10,#+29
   \   000005EC   03D5               BPL.N    ??bc_last_msg_console_59
   \   000005EE   ........           LDR.W    R0,??DataTable2_30
   \   000005F2   ........           BL       printf
    397          			if(i & 2) printf("DBCA ");
   \                     ??bc_last_msg_console_59:
   \   000005F6   5FEA8A70           LSLS     R0,R10,#+30
   \   000005FA   03D5               BPL.N    ??bc_last_msg_console_60
   \   000005FC   ........           LDR.W    R0,??DataTable2_31
   \   00000600   ........           BL       printf
    398          			if(i & 1) printf("TF ");
   \                     ??bc_last_msg_console_60:
   \   00000604   5FEACA70           LSLS     R0,R10,#+31
   \   00000608   02D5               BPL.N    ??bc_last_msg_console_61
   \   0000060A   2BA0               ADR.N    R0,??bc_last_msg_console_37  ;; "TF "
   \   0000060C   ........           BL       printf
    399          		        printf("\n\n\r");	
   \                     ??bc_last_msg_console_61:
   \   00000610   C3A0               ADR.N    R0,??bc_last_msg_console_62  ;; "\n\n\r"
   \   00000612   ........           BL       printf
    400                              }
    401                          }
    402                      }
    403          	}	// end "not rtrt"
    404          
    405          	// BC Control Word for message 
    406          	i = mcsb[0];
   \                     ??bc_last_msg_console_49:
   \   00000616   BDF80800           LDRH     R0,[SP, #+8]
   \   0000061A   8246               MOV      R10,R0
    407          	printf("BC Control Word: 0x%.2X%.2X  \n\r", (char)(i>>8), (char)i);
   \   0000061C   5246               MOV      R2,R10
   \   0000061E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000620   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000624   5FEA1A21           LSRS     R1,R10,#+8
   \   00000628   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000062A   ........           LDR.W    R0,??DataTable3_5
   \   0000062E   ........           BL       printf
    408          	if(i & (1<<15)) printf("MC17TTL ");
   \   00000632   5FEA0A40           LSLS     R0,R10,#+16
   \   00000636   03D5               BPL.N    ??bc_last_msg_console_63
   \   00000638   ........           LDR.W    R0,??DataTable4
   \   0000063C   ........           BL       printf
    409          	if(i & (1<<14)) printf("MEmask ");
   \                     ??bc_last_msg_console_63:
   \   00000640   5FEA4A40           LSLS     R0,R10,#+17
   \   00000644   03D5               BPL.N    ??bc_last_msg_console_64
   \   00000646   ........           LDR.W    R0,??DataTable4_1
   \   0000064A   ........           BL       printf
    410          	if(i & (1<<13)) printf("SRQmask ");
   \                     ??bc_last_msg_console_64:
   \   0000064E   5FEA8A40           LSLS     R0,R10,#+18
   \   00000652   03D5               BPL.N    ??bc_last_msg_console_65
   \   00000654   ........           LDR.W    R0,??DataTable4_2
   \   00000658   ........           BL       printf
    411          	if(i & (1<<12)) printf("BSYmask ");
   \                     ??bc_last_msg_console_65:
   \   0000065C   5FEACA40           LSLS     R0,R10,#+19
   \   00000660   03D5               BPL.N    ??bc_last_msg_console_66
   \   00000662   ........           LDR.W    R0,??DataTable4_3
   \   00000666   ........           BL       printf
    412          	if(i & (1<<11)) printf("SSFmask ");
   \                     ??bc_last_msg_console_66:
   \   0000066A   5FEA0A50           LSLS     R0,R10,#+20
   \   0000066E   03D5               BPL.N    ??bc_last_msg_console_67
   \   00000670   ........           LDR.W    R0,??DataTable4_4
   \   00000674   ........           BL       printf
    413          	if(i & (1<<10)) printf("TFmask ");
   \                     ??bc_last_msg_console_67:
   \   00000678   5FEA4A50           LSLS     R0,R10,#+21
   \   0000067C   06D5               BPL.N    ??bc_last_msg_console_68
   \   0000067E   ........           LDR.W    R0,??DataTable4_5
   \   00000682   01E0               B.N      ??bc_last_msg_console_69
   \                     ??bc_last_msg_console_28:
   \   00000684   4D452000           DC8      "ME "
   \                     ??bc_last_msg_console_69:
   \   00000688   ........           BL       printf
    414          	if(i & (1<<9)) printf("RSVmask ");
   \                     ??bc_last_msg_console_68:
   \   0000068C   5FEA8A50           LSLS     R0,R10,#+22
   \   00000690   03D5               BPL.N    ??bc_last_msg_console_70
   \   00000692   ........           LDR.W    R0,??DataTable4_6
   \   00000696   ........           BL       printf
    415          	if(i & (1<<8)) printf("RetryEna ");
   \                     ??bc_last_msg_console_70:
   \   0000069A   5FEACA50           LSLS     R0,R10,#+23
   \   0000069E   03D5               BPL.N    ??bc_last_msg_console_71
   \   000006A0   ........           LDR.W    R0,??DataTable4_7
   \   000006A4   ........           BL       printf
    416          	if(i & (1<<7)) printf("UseBusA ");
   \                     ??bc_last_msg_console_71:
   \   000006A8   5FEA0A60           LSLS     R0,R10,#+24
   \   000006AC   06D5               BPL.N    ??bc_last_msg_console_72
   \   000006AE   ........           LDR.W    R0,??DataTable4_8
   \   000006B2   ........           BL       printf
   \   000006B6   05E0               B.N      ??bc_last_msg_console_73
   \                     ??bc_last_msg_console_37:
   \   000006B8   54462000           DC8      "TF "
    417          	else           printf("UseBusB ");
   \                     ??bc_last_msg_console_72:
   \   000006BC   ........           LDR.W    R0,??DataTable4_9
   \   000006C0   ........           BL       printf
    418          	if(i & (1<<6)) printf("SelfTest ");
   \                     ??bc_last_msg_console_73:
   \   000006C4   5FEA4A60           LSLS     R0,R10,#+25
   \   000006C8   03D5               BPL.N    ??bc_last_msg_console_74
   \   000006CA   ........           LDR.W    R0,??DataTable4_10
   \   000006CE   ........           BL       printf
    419          	if(i & (1<<5)) printf("maskBCR ");
   \                     ??bc_last_msg_console_74:
   \   000006D2   5FEA8A60           LSLS     R0,R10,#+26
   \   000006D6   03D5               BPL.N    ??bc_last_msg_console_75
   \   000006D8   ........           LDR.W    R0,??DataTable4_11
   \   000006DC   ........           BL       printf
    420          	if(i & (1<<4)) printf("EOMirq ");
   \                     ??bc_last_msg_console_75:
   \   000006E0   5FEACA60           LSLS     R0,R10,#+27
   \   000006E4   03D5               BPL.N    ??bc_last_msg_console_76
   \   000006E6   ........           LDR.W    R0,??DataTable4_12
   \   000006EA   ........           BL       printf
    421          	if((i & 7) == 0) printf("NonBcstSA ");
   \                     ??bc_last_msg_console_76:
   \   000006EE   0721               MOVS     R1,#+7
   \   000006F0   1AEA010F           TST      R10,R1
   \   000006F4   03D1               BNE.N    ??bc_last_msg_console_77
   \   000006F6   ........           LDR.W    R0,??DataTable4_13
   \   000006FA   ........           BL       printf
    422          	if((i & 7) == 1) printf("RTRT ");
   \                     ??bc_last_msg_console_77:
   \   000006FE   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000702   1AF00700           ANDS     R0,R10,#0x7
   \   00000706   0128               CMP      R0,#+1
   \   00000708   03D1               BNE.N    ??bc_last_msg_console_78
   \   0000070A   ........           LDR.W    R0,??DataTable4_14
   \   0000070E   ........           BL       printf
    423          	if((i & 7) == 2) printf("BcstSA ");
   \                     ??bc_last_msg_console_78:
   \   00000712   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000716   1AF00700           ANDS     R0,R10,#0x7
   \   0000071A   0228               CMP      R0,#+2
   \   0000071C   03D1               BNE.N    ??bc_last_msg_console_79
   \   0000071E   ........           LDR.W    R0,??DataTable4_15
   \   00000722   ........           BL       printf
    424          	if((i & 7) == 3) printf("BcstRTRT ");
   \                     ??bc_last_msg_console_79:
   \   00000726   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000072A   1AF00700           ANDS     R0,R10,#0x7
   \   0000072E   0328               CMP      R0,#+3
   \   00000730   03D1               BNE.N    ??bc_last_msg_console_80
   \   00000732   ........           LDR.W    R0,??DataTable4_16
   \   00000736   ........           BL       printf
    425          	if((i & 7) == 4) printf("MC ");
   \                     ??bc_last_msg_console_80:
   \   0000073A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000073E   1AF00700           ANDS     R0,R10,#0x7
   \   00000742   0428               CMP      R0,#+4
   \   00000744   02D1               BNE.N    ??bc_last_msg_console_81
   \   00000746   B5A0               ADR.N    R0,??bc_last_msg_console_82  ;; "MC "
   \   00000748   ........           BL       printf
    426          	if((i & 7) == 5) printf("RTRT_MC?? ");
   \                     ??bc_last_msg_console_81:
   \   0000074C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000750   1AF00700           ANDS     R0,R10,#0x7
   \   00000754   0528               CMP      R0,#+5
   \   00000756   03D1               BNE.N    ??bc_last_msg_console_83
   \   00000758   ........           LDR.W    R0,??DataTable4_17
   \   0000075C   ........           BL       printf
    427          	if((i & 7) == 6) printf("BcstMC ");
   \                     ??bc_last_msg_console_83:
   \   00000760   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000764   1AF00700           ANDS     R0,R10,#0x7
   \   00000768   0628               CMP      R0,#+6
   \   0000076A   03D1               BNE.N    ??bc_last_msg_console_84
   \   0000076C   ........           LDR.W    R0,??DataTable4_18
   \   00000770   ........           BL       printf
    428          	if((i & 7) == 7) printf("BcstRTRT_MC?? ");
   \                     ??bc_last_msg_console_84:
   \   00000774   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000778   1AF00700           ANDS     R0,R10,#0x7
   \   0000077C   0728               CMP      R0,#+7
   \   0000077E   03D1               BNE.N    ??bc_last_msg_console_85
   \   00000780   ........           LDR.W    R0,??DataTable4_19
   \   00000784   ........           BL       printf
    429          	printf("\n\r");
   \                     ??bc_last_msg_console_85:
   \   00000788   A5A0               ADR.N    R0,??bc_last_msg_console_82+0x4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   0000078A   ........           BL       printf
    430          
    431          	k = (i & 2) >> 1;
   \   0000078E   CAF34000           UBFX     R0,R10,#+1,#+1
   \   00000792   ADF80600           STRH     R0,[SP, #+6]
    432          	// Block Control broadcast format bit 1 should agree w/ CW1 
    433          	if(k != bcast) printf("The Cmd Word and Control Word bit 1 disagree on broadcast format.\n\r");
   \   00000796   BDF80600           LDRH     R0,[SP, #+6]
   \   0000079A   3900               MOVS     R1,R7
   \   0000079C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000079E   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000007A0   8842               CMP      R0,R1
   \   000007A2   03D0               BEQ.N    ??bc_last_msg_console_86
   \   000007A4   ........           LDR.W    R0,??DataTable4_20
   \   000007A8   ........           BL       printf
    434          	k = (i & 4) >> 2;
   \                     ??bc_last_msg_console_86:
   \   000007AC   CAF38000           UBFX     R0,R10,#+2,#+1
   \   000007B0   ADF80600           STRH     R0,[SP, #+6]
    435          	// Block Control mode code format bit 2 should agree w/ CW1 
    436          	if(k != mcode) printf("The Cmd Word and Control Word bit 2 disagree on mode code format.\n\r");
   \   000007B4   BDF80600           LDRH     R0,[SP, #+6]
   \   000007B8   5946               MOV      R1,R11
   \   000007BA   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000007BC   89B2               UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   000007BE   8842               CMP      R0,R1
   \   000007C0   03D0               BEQ.N    ??bc_last_msg_console_87
   \   000007C2   ........           LDR.W    R0,??DataTable4_21
   \   000007C6   ........           BL       printf
    437          	printf("\n\r");
   \                     ??bc_last_msg_console_87:
   \   000007CA   95A0               ADR.N    R0,??bc_last_msg_console_82+0x4  ;; 0x0A, 0x0D, 0x00, 0x00
   \   000007CC   ........           BL       printf
    438          
    439          
    440          	// Block Status Word 
    441          	i = mcsb[5];
   \   000007D0   BDF81200           LDRH     R0,[SP, #+18]
   \   000007D4   8246               MOV      R10,R0
    442          	printf("Block Status Word: 0x%.2X%.2X \n\r", (char)(i>>8), (char)i);
   \   000007D6   5246               MOV      R2,R10
   \   000007D8   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000007DA   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000007DE   5FEA1A21           LSRS     R1,R10,#+8
   \   000007E2   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000007E4   ........           LDR.W    R0,??DataTable4_22
   \   000007E8   ........           BL       printf
    443          	if(i & (1<<14)) printf("SOM  ");
   \   000007EC   5FEA4A40           LSLS     R0,R10,#+17
   \   000007F0   03D5               BPL.N    ??bc_last_msg_console_88
   \   000007F2   ........           LDR.W    R0,??DataTable4_23
   \   000007F6   ........           BL       printf
    444          	if(i & (1<<15)) printf("EOM  ");
   \                     ??bc_last_msg_console_88:
   \   000007FA   5FEA0A40           LSLS     R0,R10,#+16
   \   000007FE   03D5               BPL.N    ??bc_last_msg_console_89
   \   00000800   ........           LDR.W    R0,??DataTable4_24
   \   00000804   ........           BL       printf
    445          	if(i & (1<<13)) printf("BusB  ");
   \                     ??bc_last_msg_console_89:
   \   00000808   5FEA8A40           LSLS     R0,R10,#+18
   \   0000080C   04D5               BPL.N    ??bc_last_msg_console_90
   \   0000080E   ........           LDR.W    R0,??DataTable4_25
   \   00000812   ........           BL       printf
   \   00000816   03E0               B.N      ??bc_last_msg_console_91
    446          	else printf("Bus A  ");
   \                     ??bc_last_msg_console_90:
   \   00000818   ........           LDR.W    R0,??DataTable4_26
   \   0000081C   ........           BL       printf
    447          	if(i & (1<<12)) printf("ErrOcc ");
   \                     ??bc_last_msg_console_91:
   \   00000820   5FEACA40           LSLS     R0,R10,#+19
   \   00000824   03D5               BPL.N    ??bc_last_msg_console_92
   \   00000826   ........           LDR.W    R0,??DataTable4_28
   \   0000082A   ........           BL       printf
    448          	if(i & (1<<11)) printf("SSet  ");
   \                     ??bc_last_msg_console_92:
   \   0000082E   5FEA0A50           LSLS     R0,R10,#+20
   \   00000832   03D5               BPL.N    ??bc_last_msg_console_93
   \   00000834   ........           LDR.W    R0,??DataTable4_29
   \   00000838   ........           BL       printf
    449          	if(i & (1<<9)) printf("NoResp  ");
   \                     ??bc_last_msg_console_93:
   \   0000083C   5FEA8A50           LSLS     R0,R10,#+22
   \   00000840   03D5               BPL.N    ??bc_last_msg_console_94
   \   00000842   ........           LDR.W    R0,??DataTable4_30
   \   00000846   ........           BL       printf
    450          	if(i & (1<<8)) printf("LpBk  ");
   \                     ??bc_last_msg_console_94:
   \   0000084A   5FEACA50           LSLS     R0,R10,#+23
   \   0000084E   03D5               BPL.N    ??bc_last_msg_console_95
   \   00000850   ........           LDR.W    R0,??DataTable4_31
   \   00000854   ........           BL       printf
    451          	if(i & (1<<6)) printf("2retry  ");
   \                     ??bc_last_msg_console_95:
   \   00000858   5FEA4A60           LSLS     R0,R10,#+25
   \   0000085C   04D5               BPL.N    ??bc_last_msg_console_96
   \   0000085E   ........           LDR.W    R0,??DataTable4_32
   \   00000862   ........           BL       printf
   \   00000866   06E0               B.N      ??bc_last_msg_console_97
    452          	else if(i & (1<<5)) printf("1retry  ");
   \                     ??bc_last_msg_console_96:
   \   00000868   5FEA8A60           LSLS     R0,R10,#+26
   \   0000086C   03D5               BPL.N    ??bc_last_msg_console_97
   \   0000086E   ........           LDR.W    R0,??DataTable4_33
   \   00000872   ........           BL       printf
    453          	if(i & (1<<4)) printf("GDB  ");
   \                     ??bc_last_msg_console_97:
   \   00000876   5FEACA60           LSLS     R0,R10,#+27
   \   0000087A   03D5               BPL.N    ??bc_last_msg_console_98
   \   0000087C   ........           LDR.W    R0,??DataTable4_34
   \   00000880   ........           BL       printf
    454          	if(i & (1<<3)) printf("WAG  ");
   \                     ??bc_last_msg_console_98:
   \   00000884   5FEA0A70           LSLS     R0,R10,#+28
   \   00000888   03D5               BPL.N    ??bc_last_msg_console_99
   \   0000088A   ........           LDR.W    R0,??DataTable4_35
   \   0000088E   ........           BL       printf
    455          	if(i & (1<<2)) printf("WdCt  ");
   \                     ??bc_last_msg_console_99:
   \   00000892   5FEA4A70           LSLS     R0,R10,#+29
   \   00000896   03D5               BPL.N    ??bc_last_msg_console_100
   \   00000898   ........           LDR.W    R0,??DataTable4_36
   \   0000089C   ........           BL       printf
    456          	if(i & (1<<1)) printf("SyncErr  ");
   \                     ??bc_last_msg_console_100:
   \   000008A0   5FEA8A70           LSLS     R0,R10,#+30
   \   000008A4   03D5               BPL.N    ??bc_last_msg_console_101
   \   000008A6   ........           LDR.W    R0,??DataTable4_37
   \   000008AA   ........           BL       printf
    457          	if(i & (1<<0)) printf("InvWd  ");
   \                     ??bc_last_msg_console_101:
   \   000008AE   5FEACA70           LSLS     R0,R10,#+31
   \   000008B2   03D5               BPL.N    ??bc_last_msg_console_102
   \   000008B4   ........           LDR.W    R0,??DataTable4_38
   \   000008B8   ........           BL       printf
    458          	if(i & (1<<10)) printf("FmtErr  ");
   \                     ??bc_last_msg_console_102:
   \   000008BC   5FEA4A50           LSLS     R0,R10,#+21
   \   000008C0   03D5               BPL.N    ??bc_last_msg_console_103
   \   000008C2   ........           LDR.W    R0,??DataTable4_39
   \   000008C6   ........           BL       printf
    459          	if(i & (1<<7)) printf("MSSet  ");
   \                     ??bc_last_msg_console_103:
   \   000008CA   5FEA0A60           LSLS     R0,R10,#+24
   \   000008CE   03D5               BPL.N    ??bc_last_msg_console_104
   \   000008D0   ........           LDR.W    R0,??DataTable4_40
   \   000008D4   ........           BL       printf
    460          	printf("\n\n\r");
   \                     ??bc_last_msg_console_104:
   \   000008D8   11A0               ADR.N    R0,??bc_last_msg_console_62  ;; "\n\n\r"
   \   000008DA   ........           BL       printf
    461          
    462          	// j = Condition Code Register value
    463          	printf("Condition Code Register: 0x%.2X%.2X\n\r", (char)(j>>8), (char)j);
   \   000008DE   2200               MOVS     R2,R4
   \   000008E0   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000008E2   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000008E4   210A               LSRS     R1,R4,#+8
   \   000008E6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000008E8   ........           LDR.W    R0,??DataTable4_41
   \   000008EC   ........           BL       printf
    464          	if(j==0x0000) printf("BC Stopped: No Condition Codes or Gen Purpose Flags Are Set.");
   \   000008F0   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000008F2   002C               CMP      R4,#+0
   \   000008F4   04D1               BNE.N    ??bc_last_msg_console_105
   \   000008F6   ........           LDR.W    R0,??DataTable4_42
   \   000008FA   ........           BL       printf
   \   000008FE   15E0               B.N      ??bc_last_msg_console_106
    465          	else if(j==0x8000) printf("BC Running: No Condition Codes or Gen Purpose Flags Are Set.");
   \                     ??bc_last_msg_console_105:
   \   00000900   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000902   B4F5004F           CMP      R4,#+32768
   \   00000906   04D1               BNE.N    ??bc_last_msg_console_107
   \   00000908   ........           LDR.W    R0,??DataTable4_43
   \   0000090C   ........           BL       printf
   \   00000910   0CE0               B.N      ??bc_last_msg_console_106
    466          	else if(j & (1<<15)) printf("BC Is Running.\n\r");
   \                     ??bc_last_msg_console_107:
   \   00000912   2004               LSLS     R0,R4,#+16
   \   00000914   06D5               BPL.N    ??bc_last_msg_console_108
   \   00000916   ........           LDR.W    R0,??DataTable4_44
   \   0000091A   ........           BL       printf
   \   0000091E   05E0               B.N      ??bc_last_msg_console_106
   \                     ??bc_last_msg_console_62:
   \   00000920   0A0A0D00           DC8      "\n\n\r"
    467          	else printf("BC Not Running.\n\r");
   \                     ??bc_last_msg_console_108:
   \   00000924   ........           LDR.W    R0,??DataTable4_45
   \   00000928   ........           BL       printf
    468          	if(j & (1<<14)) printf("2Retries  ");
   \                     ??bc_last_msg_console_106:
   \   0000092C   6004               LSLS     R0,R4,#+17
   \   0000092E   03D5               BPL.N    ??bc_last_msg_console_109
   \   00000930   ........           LDR.W    R0,??DataTable5_2
   \   00000934   ........           BL       printf
    469          	if(j & (1<<13)) printf("1Retry  ");
   \                     ??bc_last_msg_console_109:
   \   00000938   A004               LSLS     R0,R4,#+18
   \   0000093A   03D5               BPL.N    ??bc_last_msg_console_110
   \   0000093C   ........           LDR.W    R0,??DataTable5_3
   \   00000940   ........           BL       printf
    470          	if(j & (1<<12)) printf("BadMsg  ");
   \                     ??bc_last_msg_console_110:
   \   00000944   E004               LSLS     R0,R4,#+19
   \   00000946   03D5               BPL.N    ??bc_last_msg_console_111
   \   00000948   ........           LDR.W    R0,??DataTable5_4
   \   0000094C   ........           BL       printf
    471          	if(j & (1<<10)) printf("GdDataBlk  ");
   \                     ??bc_last_msg_console_111:
   \   00000950   6005               LSLS     R0,R4,#+21
   \   00000952   03D5               BPL.N    ??bc_last_msg_console_112
   \   00000954   ........           LDR.W    R0,??DataTable5_5
   \   00000958   ........           BL       printf
    472          	if(j & (1<<9)) printf("FmtErr  ");
   \                     ??bc_last_msg_console_112:
   \   0000095C   A005               LSLS     R0,R4,#+22
   \   0000095E   03D5               BPL.N    ??bc_last_msg_console_113
   \   00000960   ........           LDR.W    R0,??DataTable4_39
   \   00000964   ........           BL       printf
    473          	if(j & (1<<8)) printf("NoResp  ");
   \                     ??bc_last_msg_console_113:
   \   00000968   E005               LSLS     R0,R4,#+23
   \   0000096A   03D5               BPL.N    ??bc_last_msg_console_114
   \   0000096C   ........           LDR.W    R0,??DataTable4_30
   \   00000970   ........           BL       printf
    474          	if(j & (1<<7)) printf("GPF7  ");
   \                     ??bc_last_msg_console_114:
   \   00000974   2006               LSLS     R0,R4,#+24
   \   00000976   03D5               BPL.N    ??bc_last_msg_console_115
   \   00000978   ........           LDR.W    R0,??DataTable5_6
   \   0000097C   ........           BL       printf
    475          	if(j & (1<<6)) printf("GPF6  ");
   \                     ??bc_last_msg_console_115:
   \   00000980   6006               LSLS     R0,R4,#+25
   \   00000982   03D5               BPL.N    ??bc_last_msg_console_116
   \   00000984   ........           LDR.W    R0,??DataTable5_7
   \   00000988   ........           BL       printf
    476          	if(j & (1<<5)) printf("GPF5  ");
   \                     ??bc_last_msg_console_116:
   \   0000098C   A006               LSLS     R0,R4,#+26
   \   0000098E   03D5               BPL.N    ??bc_last_msg_console_117
   \   00000990   ........           LDR.W    R0,??DataTable5_8
   \   00000994   ........           BL       printf
    477          	if(j & (1<<4)) printf("GPF4  ");
   \                     ??bc_last_msg_console_117:
   \   00000998   E006               LSLS     R0,R4,#+27
   \   0000099A   03D5               BPL.N    ??bc_last_msg_console_118
   \   0000099C   ........           LDR.W    R0,??DataTable5_9
   \   000009A0   ........           BL       printf
    478          	if(j & (1<<3)) printf("GPF3  ");
   \                     ??bc_last_msg_console_118:
   \   000009A4   2007               LSLS     R0,R4,#+28
   \   000009A6   03D5               BPL.N    ??bc_last_msg_console_119
   \   000009A8   ........           LDR.W    R0,??DataTable5_10
   \   000009AC   ........           BL       printf
    479          	if(j & (1<<2)) printf("GPF2  ");
   \                     ??bc_last_msg_console_119:
   \   000009B0   6007               LSLS     R0,R4,#+29
   \   000009B2   03D5               BPL.N    ??bc_last_msg_console_120
   \   000009B4   ........           LDR.W    R0,??DataTable5_11
   \   000009B8   ........           BL       printf
    480          	if(j & (1<<1)) printf("LT-GPF1  ");
   \                     ??bc_last_msg_console_120:
   \   000009BC   A007               LSLS     R0,R4,#+30
   \   000009BE   03D5               BPL.N    ??bc_last_msg_console_121
   \   000009C0   ........           LDR.W    R0,??DataTable5_12
   \   000009C4   ........           BL       printf
    481          	if(j & (1<<0)) printf("EQ-GPF0  ");
   \                     ??bc_last_msg_console_121:
   \   000009C8   E007               LSLS     R0,R4,#+31
   \   000009CA   03D5               BPL.N    ??bc_last_msg_console_122
   \   000009CC   ........           LDR.W    R0,??DataTable5_13
   \   000009D0   ........           BL       printf
    482          	if(j & (1<<11)) printf("MSSet  ");
   \                     ??bc_last_msg_console_122:
   \   000009D4   2005               LSLS     R0,R4,#+20
   \   000009D6   03D5               BPL.N    ??bc_last_msg_console_123
   \   000009D8   ........           LDR.W    R0,??DataTable4_40
   \   000009DC   ........           BL       printf
    483          	printf("\n\n\r");
   \                     ??bc_last_msg_console_123:
   \   000009E0   ....               ADR.N    R0,??DataTable2_15  ;; "\n\n\r"
   \   000009E2   ........           BL       printf
    484          
    485          	// if not a mode command, read data block then display it
    486          	if(!(mtype & 4)) {
   \   000009E6   9DF80500           LDRB     R0,[SP, #+5]
   \   000009EA   4007               LSLS     R0,R0,#+29
   \   000009EC   00F1DB80           BMI.W    ??bc_last_msg_console_124
    487          
    488          	    // rule out tx command with no response 
    489          	    if(tx & nr & !rtrt) printf("No RT response, no received data\n\n\r");
   \   000009F0   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000009F2   002E               CMP      R6,#+0
   \   000009F4   01D1               BNE.N    ??bc_last_msg_console_125
   \   000009F6   0121               MOVS     R1,#+1
   \   000009F8   00E0               B.N      ??bc_last_msg_console_126
   \                     ??bc_last_msg_console_125:
   \   000009FA   0021               MOVS     R1,#+0
   \                     ??bc_last_msg_console_126:
   \   000009FC   18F00100           ANDS     R0,R8,#0x1
   \   00000A00   9DF80420           LDRB     R2,[SP, #+4]
   \   00000A04   12F00102           ANDS     R2,R2,#0x1
   \   00000A08   1040               ANDS     R0,R2,R0
   \   00000A0A   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000A0C   0842               TST      R0,R1
   \   00000A0E   09D0               BEQ.N    ??bc_last_msg_console_127
   \   00000A10   ........           LDR.W    R0,??DataTable5_14
   \   00000A14   ........           BL       printf
   \   00000A18   C5E0               B.N      ??bc_last_msg_console_124
   \   00000A1A   00BF               Nop      
   \                     ??bc_last_msg_console_82:
   \   00000A1C   4D432000           DC8      "MC "
   \   00000A20   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00
    490          
    491          	    else {
    492          	        // store data words as array 
    493          	        addr = mcsb[2];
   \                     ??bc_last_msg_console_127:
   \   00000A24   BDF80C00           LDRH     R0,[SP, #+12]
   \   00000A28   8146               MOV      R9,R0
    494          			#if (HOST_BUS_INTERFACE)
    495          			for (i=0; i<wordcount; i++,addr++) {
   \   00000A2A   0020               MOVS     R0,#+0
   \   00000A2C   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_128:
   \   00000A2E   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A32   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000A34   AA45               CMP      R10,R5
   \   00000A36   10D2               BCS.N    ??bc_last_msg_console_129
    496          				data[i] = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   00000A38   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A3C   07A8               ADD      R0,SP,#+28
   \   00000A3E   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000A42   5FEA4901           LSLS     R1,R9,#+1
   \   00000A46   11F1C041           ADDS     R1,R1,#+1610612736
   \   00000A4A   0968               LDR      R1,[R1, #+0]
   \   00000A4C   20F81A10           STRH     R1,[R0, R10, LSL #+1]
    497                                  }
   \   00000A50   1AF1010A           ADDS     R10,R10,#+1
   \   00000A54   19F10109           ADDS     R9,R9,#+1
   \   00000A58   E9E7               B.N      ??bc_last_msg_console_128
    498                                  
    499          			#else // (HOST_SPI_INTERFACE)
    500          			Write_6131LowReg(MAP_1, addr, 1);
    501          			for (i=0; i<wordcount; i++) {
    502          				data[i] = Read_6131_1word(1);
    503          			}
    504          			#endif
    505          			
    506          	        // print the Data Buffer start address 
    507          	        printf("Data Addr: 0x%.2X%.2X,      ",(char)(j>>8),(char)j);
   \                     ??bc_last_msg_console_129:
   \   00000A5A   2200               MOVS     R2,R4
   \   00000A5C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A5E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000A60   210A               LSRS     R1,R4,#+8
   \   00000A62   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000A64   ........           LDR.W    R0,??DataTable5_15
   \   00000A68   ........           BL       printf
    508          			#if (HOST_BUS_INTERFACE)
    509          			j = mcsb[2] << 1;
   \   00000A6C   BDF80C00           LDRH     R0,[SP, #+12]
   \   00000A70   4000               LSLS     R0,R0,#+1
   \   00000A72   0400               MOVS     R4,R0
    510          			printf("Bus Addr: 0x6000%.2X%.2X\n\rData:",(char)(j>>8),(char)j);
   \   00000A74   2200               MOVS     R2,R4
   \   00000A76   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000A78   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000A7A   210A               LSRS     R1,R4,#+8
   \   00000A7C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000A7E   ........           LDR.W    R0,??DataTable5_16
   \   00000A82   ........           BL       printf
    511          			#endif
    512          			printf("\n\r");
   \   00000A86   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000A88   ........           BL       printf
    513          
    514          	        // print data words, 8 words per line 
    515          	        for(i=0; (i<8)&&(i<wordcount); i++) {
   \   00000A8C   0020               MOVS     R0,#+0
   \   00000A8E   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_130:
   \   00000A90   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A94   BAF1080F           CMP      R10,#+8
   \   00000A98   16D2               BCS.N    ??bc_last_msg_console_131
   \   00000A9A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000A9E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000AA0   AA45               CMP      R10,R5
   \   00000AA2   11D2               BCS.N    ??bc_last_msg_console_131
    516          			j = data[i];
   \   00000AA4   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000AA8   07A8               ADD      R0,SP,#+28
   \   00000AAA   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000AAE   0400               MOVS     R4,R0
    517          			printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000AB0   2200               MOVS     R2,R4
   \   00000AB2   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000AB4   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000AB6   210A               LSRS     R1,R4,#+8
   \   00000AB8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000ABA   ........           LDR.W    R0,??DataTable5_17
   \   00000ABE   ........           BL       printf
    518                          }
   \   00000AC2   1AF1010A           ADDS     R10,R10,#+1
   \   00000AC6   E3E7               B.N      ??bc_last_msg_console_130
    519          	        printf("\n\r");
   \                     ??bc_last_msg_console_131:
   \   00000AC8   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000ACA   ........           BL       printf
    520          	        if(wordcount>7) {
   \   00000ACE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000AD0   082D               CMP      R5,#+8
   \   00000AD2   20D3               BCC.N    ??bc_last_msg_console_132
    521          	    	    for(i=8; (i<16)&&(i<wordcount); i++) {
   \   00000AD4   0820               MOVS     R0,#+8
   \   00000AD6   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_133:
   \   00000AD8   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000ADC   BAF1100F           CMP      R10,#+16
   \   00000AE0   16D2               BCS.N    ??bc_last_msg_console_134
   \   00000AE2   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000AE6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000AE8   AA45               CMP      R10,R5
   \   00000AEA   11D2               BCS.N    ??bc_last_msg_console_134
    522          					j = data[i];
   \   00000AEC   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000AF0   07A8               ADD      R0,SP,#+28
   \   00000AF2   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000AF6   0400               MOVS     R4,R0
    523          					printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000AF8   2200               MOVS     R2,R4
   \   00000AFA   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000AFC   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000AFE   210A               LSRS     R1,R4,#+8
   \   00000B00   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000B02   ........           LDR.W    R0,??DataTable5_17
   \   00000B06   ........           BL       printf
    524                          }
   \   00000B0A   1AF1010A           ADDS     R10,R10,#+1
   \   00000B0E   E3E7               B.N      ??bc_last_msg_console_133
    525          				printf("\n\r");
   \                     ??bc_last_msg_console_134:
   \   00000B10   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000B12   ........           BL       printf
    526                      }
    527          	        if(wordcount>15) {
   \                     ??bc_last_msg_console_132:
   \   00000B16   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B18   102D               CMP      R5,#+16
   \   00000B1A   20D3               BCC.N    ??bc_last_msg_console_135
    528          	    	    for(i=16; (i<24)&&(i<wordcount); i++) {
   \   00000B1C   1020               MOVS     R0,#+16
   \   00000B1E   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_136:
   \   00000B20   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B24   BAF1180F           CMP      R10,#+24
   \   00000B28   16D2               BCS.N    ??bc_last_msg_console_137
   \   00000B2A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B2E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B30   AA45               CMP      R10,R5
   \   00000B32   11D2               BCS.N    ??bc_last_msg_console_137
    529          					j = data[i];
   \   00000B34   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B38   07A8               ADD      R0,SP,#+28
   \   00000B3A   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000B3E   0400               MOVS     R4,R0
    530          					printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000B40   2200               MOVS     R2,R4
   \   00000B42   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000B44   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000B46   210A               LSRS     R1,R4,#+8
   \   00000B48   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000B4A   ........           LDR.W    R0,??DataTable5_17
   \   00000B4E   ........           BL       printf
    531                          }
   \   00000B52   1AF1010A           ADDS     R10,R10,#+1
   \   00000B56   E3E7               B.N      ??bc_last_msg_console_136
    532          				printf("\n\r");
   \                     ??bc_last_msg_console_137:
   \   00000B58   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000B5A   ........           BL       printf
    533                      }
    534          	        if(wordcount>23) {
   \                     ??bc_last_msg_console_135:
   \   00000B5E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B60   182D               CMP      R5,#+24
   \   00000B62   20D3               BCC.N    ??bc_last_msg_console_124
    535          				for(i=24; (i<32)&&(i<wordcount); i++) {
   \   00000B64   1820               MOVS     R0,#+24
   \   00000B66   8246               MOV      R10,R0
   \                     ??bc_last_msg_console_138:
   \   00000B68   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B6C   BAF1200F           CMP      R10,#+32
   \   00000B70   16D2               BCS.N    ??bc_last_msg_console_139
   \   00000B72   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B76   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000B78   AA45               CMP      R10,R5
   \   00000B7A   11D2               BCS.N    ??bc_last_msg_console_139
    536          					j = data[i];
   \   00000B7C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000B80   07A8               ADD      R0,SP,#+28
   \   00000B82   30F81A00           LDRH     R0,[R0, R10, LSL #+1]
   \   00000B86   0400               MOVS     R4,R0
    537          	                printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
   \   00000B88   2200               MOVS     R2,R4
   \   00000B8A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000B8C   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000B8E   210A               LSRS     R1,R4,#+8
   \   00000B90   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000B92   ........           LDR.W    R0,??DataTable5_17
   \   00000B96   ........           BL       printf
    538                          }
   \   00000B9A   1AF1010A           ADDS     R10,R10,#+1
   \   00000B9E   E3E7               B.N      ??bc_last_msg_console_138
    539          				printf("\n\r");
   \                     ??bc_last_msg_console_139:
   \   00000BA0   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000BA2   ........           BL       printf
    540                      }
    541                  }	// end else "store data words"
    542              }	// end "not a mode command"
    543          
    544          	printf("\n\r");
   \                     ??bc_last_msg_console_124:
   \   00000BA6   ....               ADR.N    R0,??DataTable2_21  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000BA8   ........           BL       printf
    545          	print_line();
   \   00000BAC   ........           BL       print_line
    546          	print_menuprompt();
   \   00000BB0   ........           BL       print_menuprompt
    547          
    548          }	// end bc_last_msg_console()
   \   00000BB4   17B0               ADD      SP,SP,#+92
   \   00000BB6   BDE8F08F           POP      {R4-R11,PC}      ;; return
    549          #endif //(BC_ena) 
    550          
    551          
    552          
    553          #if (BC_ena) 
    554          //--------------------------------------------------------------
    555          //  this function lists the BC Config reg 0x0032
    556          //	to the console via UART
    557          //--------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    558          void list_bc_config (void) {
   \                     list_bc_config:
   \   00000000   38B5               PUSH     {R3-R5,LR}
    559          
    560          	unsigned short int i, j;
    561          
    562          	#if (HOST_BUS_INTERFACE)
    563          		i = pH6130->BC_CONFIG_REG;
   \   00000002   ........           LDR.W    R0,??DataTable6_2
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   B0F86400           LDRH     R0,[R0, #+100]
   \   0000000C   0400               MOVS     R4,R0
    564          	#else // (HOST_SPI_INTERFACE)
    565          		Write_6131LowReg(MAP_1, BC_CONFIG_REG, 1);
    566          		i = Read_6131_1word(1);
    567          	#endif
    568          	
    569          	// formfeed 
    570          	putchar(12); 	
   \   0000000E   0C20               MOVS     R0,#+12
   \   00000010   ........           BL       putchar
    571          	printf("\n\rBC Configuration Register: 0x%.2X%.2X\n\r",(char)(i>>8),(char)i);
   \   00000014   2200               MOVS     R2,R4
   \   00000016   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   210A               LSRS     R1,R4,#+8
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   ........           LDR.W    R0,??DataTable5_18
   \   00000022   ........           BL       printf
    572          	print_line();
   \   00000026   ........           BL       print_line
    573          	
    574          	j = (i & 0xC000) >> 14;
   \   0000002A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   A00B               LSRS     R0,R4,#+14
   \   0000002E   0500               MOVS     R5,R0
    575          	if(j == 1) printf("  20");
   \   00000030   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000032   012D               CMP      R5,#+1
   \   00000034   04D1               BNE.N    ??list_bc_config_0
   \   00000036   ........           LDR.W    R0,??DataTable6_4
   \   0000003A   ........           BL       printf
   \   0000003E   13E0               B.N      ??list_bc_config_1
    576          	else if(j == 2) printf("  58");
   \                     ??list_bc_config_0:
   \   00000040   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000042   022D               CMP      R5,#+2
   \   00000044   04D1               BNE.N    ??list_bc_config_2
   \   00000046   ........           LDR.W    R0,??DataTable6_5
   \   0000004A   ........           BL       printf
   \   0000004E   0BE0               B.N      ??list_bc_config_1
    577          	else if(j == 3) printf(" 138");
   \                     ??list_bc_config_2:
   \   00000050   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   032D               CMP      R5,#+3
   \   00000054   04D1               BNE.N    ??list_bc_config_3
   \   00000056   ........           LDR.W    R0,??DataTable6_6
   \   0000005A   ........           BL       printf
   \   0000005E   03E0               B.N      ??list_bc_config_1
    578          	else printf("  15");
   \                     ??list_bc_config_3:
   \   00000060   ........           LDR.W    R0,??DataTable6_7
   \   00000064   ........           BL       printf
    579          	printf("us Timeout (bus dead time)   ");
   \                     ??list_bc_config_1:
   \   00000068   ........           LDR.W    R0,??DataTable6_8
   \   0000006C   ........           BL       printf
    580          
    581          	if(i & (1<<13)) printf("Check Control Word Format Bits");
   \   00000070   A004               LSLS     R0,R4,#+18
   \   00000072   04D5               BPL.N    ??list_bc_config_4
   \   00000074   ........           LDR.W    R0,??DataTable6_9
   \   00000078   ........           BL       printf
   \   0000007C   03E0               B.N      ??list_bc_config_5
    582          	else printf("Don't Check Control Word Format Bits");
   \                     ??list_bc_config_4:
   \   0000007E   ........           LDR.W    R0,??DataTable6_10
   \   00000082   ........           BL       printf
    583          	printf("\n\n\r");
   \                     ??list_bc_config_5:
   \   00000086   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   00000088   ........           BL       printf
    584          
    585          	if(i & (1<<11)) {
   \   0000008C   2005               LSLS     R0,R4,#+20
   \   0000008E   1FD5               BPL.N    ??list_bc_config_6
    586          		j = (i & (3<<9)) >> 9;
   \   00000090   C4F34120           UBFX     R0,R4,#+9,#+2
   \   00000094   0500               MOVS     R5,R0
    587          		if(j==0) printf(" 2 Retries, Same Bus, Same Bus   "); 
   \   00000096   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000098   002D               CMP      R5,#+0
   \   0000009A   04D1               BNE.N    ??list_bc_config_7
   \   0000009C   ........           LDR.W    R0,??DataTable6_11
   \   000000A0   ........           BL       printf
   \   000000A4   26E0               B.N      ??list_bc_config_8
    588          		else if(j==2) printf("  2 Retries, Alt Bus, Same Bus   "); 
   \                     ??list_bc_config_7:
   \   000000A6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A8   022D               CMP      R5,#+2
   \   000000AA   04D1               BNE.N    ??list_bc_config_9
   \   000000AC   ........           LDR.W    R0,??DataTable6_12
   \   000000B0   ........           BL       printf
   \   000000B4   1EE0               B.N      ??list_bc_config_8
    589          		else if(j==1) printf("  2 Retries, Same Bus, Alt Bus   "); 
   \                     ??list_bc_config_9:
   \   000000B6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B8   012D               CMP      R5,#+1
   \   000000BA   04D1               BNE.N    ??list_bc_config_10
   \   000000BC   ........           LDR.W    R0,??DataTable6_13
   \   000000C0   ........           BL       printf
   \   000000C4   16E0               B.N      ??list_bc_config_8
    590          		else printf("   2 Retries, Alt Bus, Alt Bus   "); 
   \                     ??list_bc_config_10:
   \   000000C6   ........           LDR.W    R0,??DataTable6_14
   \   000000CA   ........           BL       printf
   \   000000CE   11E0               B.N      ??list_bc_config_8
    591          	}
    592          	else if(i & (1<<12)) {
   \                     ??list_bc_config_6:
   \   000000D0   E004               LSLS     R0,R4,#+19
   \   000000D2   0BD5               BPL.N    ??list_bc_config_11
    593          		if(i & (1<<10)) printf("  1 Retry if Msg Fail, Alt Bus   ");
   \   000000D4   6005               LSLS     R0,R4,#+21
   \   000000D6   04D5               BPL.N    ??list_bc_config_12
   \   000000D8   ........           LDR.W    R0,??DataTable6_15
   \   000000DC   ........           BL       printf
   \   000000E0   08E0               B.N      ??list_bc_config_8
    594          		else printf(" 1 Retry if Msg Fail, Same Bus   ");
   \                     ??list_bc_config_12:
   \   000000E2   ........           LDR.W    R0,??DataTable6_16
   \   000000E6   ........           BL       printf
   \   000000EA   03E0               B.N      ??list_bc_config_8
    595          	}
    596          	else printf("    No Retries for Msg Failure   ");
   \                     ??list_bc_config_11:
   \   000000EC   ........           LDR.W    R0,??DataTable6_19
   \   000000F0   ........           BL       printf
    597          
    598          	if(i & (1<<8)) printf("Retry if RT status bit high");
   \                     ??list_bc_config_8:
   \   000000F4   E005               LSLS     R0,R4,#+23
   \   000000F6   04D5               BPL.N    ??list_bc_config_13
   \   000000F8   ........           LDR.W    R0,??DataTable6_20
   \   000000FC   ........           BL       printf
   \   00000100   03E0               B.N      ??list_bc_config_14
    599          	else printf("No Retry if RT status bit high");
   \                     ??list_bc_config_13:
   \   00000102   ........           LDR.W    R0,??DataTable6_21
   \   00000106   ........           BL       printf
    600          	printf("\n\n\r");
   \                     ??list_bc_config_14:
   \   0000010A   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   0000010C   ........           BL       printf
    601          
    602          	if(i & (1<<7)) printf(    " RT status ME w/o data = Valid   ");
   \   00000110   2006               LSLS     R0,R4,#+24
   \   00000112   04D5               BPL.N    ??list_bc_config_15
   \   00000114   ........           LDR.W    R0,??DataTable6_24
   \   00000118   ........           BL       printf
   \   0000011C   03E0               B.N      ??list_bc_config_16
    603          	else printf(" RT status ME w/o data = Inval   ");
   \                     ??list_bc_config_15:
   \   0000011E   ........           LDR.W    R0,??DataTable6_25
   \   00000122   ........           BL       printf
    604          	if(i & (1<<6)) printf("RT status BSY w/o data = Valid");
   \                     ??list_bc_config_16:
   \   00000126   6006               LSLS     R0,R4,#+25
   \   00000128   04D5               BPL.N    ??list_bc_config_17
   \   0000012A   ........           LDR.W    R0,??DataTable6_26
   \   0000012E   ........           BL       printf
   \   00000132   03E0               B.N      ??list_bc_config_18
    605          	else printf("RT status BSY w/o data = Inval");
   \                     ??list_bc_config_17:
   \   00000134   ........           LDR.W    R0,??DataTable6_27
   \   00000138   ........           BL       printf
    606          	printf("\n\n\r");
   \                     ??list_bc_config_18:
   \   0000013C   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   0000013E   ........           BL       printf
    607          
    608          	if(i & (1<<5)) printf("            Msg Gap Timer = On   ");
   \   00000142   A006               LSLS     R0,R4,#+26
   \   00000144   04D5               BPL.N    ??list_bc_config_19
   \   00000146   ........           LDR.W    R0,??DataTable6_28
   \   0000014A   ........           BL       printf
   \   0000014E   03E0               B.N      ??list_bc_config_20
    609          	else printf("           Msg Gap Timer = Off   ");
   \                     ??list_bc_config_19:
   \   00000150   ........           LDR.W    R0,??DataTable6_29
   \   00000154   ........           BL       printf
    610          	if(i & (1<<4)) printf("Watchdog Frame Timer = On");
   \                     ??list_bc_config_20:
   \   00000158   E006               LSLS     R0,R4,#+27
   \   0000015A   04D5               BPL.N    ??list_bc_config_21
   \   0000015C   ........           LDR.W    R0,??DataTable6_30
   \   00000160   ........           BL       printf
   \   00000164   03E0               B.N      ??list_bc_config_22
    611          	else printf("Watchdog Frame Timer = Off");
   \                     ??list_bc_config_21:
   \   00000166   ........           LDR.W    R0,??DataTable6_31
   \   0000016A   ........           BL       printf
    612          	printf("\n\n\r");
   \                     ??list_bc_config_22:
   \   0000016E   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   00000170   ........           BL       printf
    613          
    614          	if(i & (1<<3)) printf("MC17 send Time Tag low 16 bits   ");
   \   00000174   2007               LSLS     R0,R4,#+28
   \   00000176   04D5               BPL.N    ??list_bc_config_23
   \   00000178   ........           LDR.W    R0,??DataTable6_32
   \   0000017C   ........           BL       printf
   \   00000180   03E0               B.N      ??list_bc_config_24
    615          	else printf("MC17 send data in msg data blk   ");
   \                     ??list_bc_config_23:
   \   00000182   ........           LDR.W    R0,??DataTable6_33
   \   00000186   ........           BL       printf
    616          	if(i & (1<<2)) printf("MC17 data word always even");
   \                     ??list_bc_config_24:
   \   0000018A   6007               LSLS     R0,R4,#+29
   \   0000018C   04D5               BPL.N    ??list_bc_config_25
   \   0000018E   ........           LDR.W    R0,??DataTable6_34
   \   00000192   ........           BL       printf
   \   00000196   03E0               B.N      ??list_bc_config_26
    617          	else printf("MC17 data may be even or odd");
   \                     ??list_bc_config_25:
   \   00000198   ........           LDR.W    R0,??DataTable6_35
   \   0000019C   ........           BL       printf
    618          	printf("\n\n\r");
   \                     ??list_bc_config_26:
   \   000001A0   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   000001A2   ........           BL       printf
    619          
    620          	if(i & (1<<1)) printf("  Enable 4us Minimum Gap Check   ");
   \   000001A6   A007               LSLS     R0,R4,#+30
   \   000001A8   04D5               BPL.N    ??list_bc_config_27
   \   000001AA   ........           LDR.W    R0,??DataTable6_36
   \   000001AE   ........           BL       printf
   \   000001B2   03E0               B.N      ??list_bc_config_28
    621          	else printf("   No 4us Minimum Gap Checking   ");
   \                     ??list_bc_config_27:
   \   000001B4   ........           LDR.W    R0,??DataTable6_37
   \   000001B8   ........           BL       printf
    622          	if(i & (1<<0)) printf("BCR Mask Enabled, BCRME = 1");
   \                     ??list_bc_config_28:
   \   000001BC   E007               LSLS     R0,R4,#+31
   \   000001BE   04D5               BPL.N    ??list_bc_config_29
   \   000001C0   ........           LDR.W    R0,??DataTable6_38
   \   000001C4   ........           BL       printf
   \   000001C8   03E0               B.N      ??list_bc_config_30
    623          	else printf("BCR Mask Disabled, BCRME = 0");
   \                     ??list_bc_config_29:
   \   000001CA   ........           LDR.W    R0,??DataTable6_39
   \   000001CE   ........           BL       printf
    624          	printf("\n\n\r");
   \                     ??list_bc_config_30:
   \   000001D2   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   000001D4   ........           BL       printf
    625          
    626          	#if (HOST_BUS_INTERFACE)
    627          		i = pH6130->TTAG_CONFIG_REG;
   \   000001D8   ........           LDR.W    R0,??DataTable6_2
   \   000001DC   0068               LDR      R0,[R0, #+0]
   \   000001DE   B0F87200           LDRH     R0,[R0, #+114]
   \   000001E2   0400               MOVS     R4,R0
    628          	#else // (HOST_SPI_INTERFACE)
    629          		Write_6131LowReg(MAP_1, TTAG_CONFIG_REG, 1);
    630          		i = Read_6131_1word(1);
    631          	#endif
    632          
    633          	printf("Timetag Config Register 0x%.2X%.2X  ",(char)(i>>8),(char)i);
   \   000001E4   2200               MOVS     R2,R4
   \   000001E6   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001E8   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000001EA   210A               LSRS     R1,R4,#+8
   \   000001EC   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001EE   ........           LDR.W    R0,??DataTable6_40
   \   000001F2   ........           BL       printf
    634          
    635          	if(i & (1<<3)) printf("32-bit timebase with ");
   \   000001F6   2007               LSLS     R0,R4,#+28
   \   000001F8   04D5               BPL.N    ??list_bc_config_31
   \   000001FA   ........           LDR.W    R0,??DataTable6_41
   \   000001FE   ........           BL       printf
   \   00000202   03E0               B.N      ??list_bc_config_32
    636          	else printf("16-bit timebase with ");
   \                     ??list_bc_config_31:
   \   00000204   ........           LDR.W    R0,??DataTable6_42
   \   00000208   ........           BL       printf
    637          
    638          	i &= 7;
   \                     ??list_bc_config_32:
   \   0000020C   14F00704           ANDS     R4,R4,#0x7
    639          	if(i == 0) printf("clock disabled! ");
   \   00000210   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000212   002C               CMP      R4,#+0
   \   00000214   04D1               BNE.N    ??list_bc_config_33
   \   00000216   ........           LDR.W    R0,??DataTable6_43
   \   0000021A   ........           BL       printf
   \   0000021E   33E0               B.N      ??list_bc_config_34
    640          	else if(i == 1) printf("ext clock ");
   \                     ??list_bc_config_33:
   \   00000220   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000222   012C               CMP      R4,#+1
   \   00000224   04D1               BNE.N    ??list_bc_config_35
   \   00000226   ........           LDR.W    R0,??DataTable6_44
   \   0000022A   ........           BL       printf
   \   0000022E   2BE0               B.N      ??list_bc_config_34
    641          	else if(i == 2) printf("2us clock ");
   \                     ??list_bc_config_35:
   \   00000230   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000232   022C               CMP      R4,#+2
   \   00000234   04D1               BNE.N    ??list_bc_config_36
   \   00000236   ........           LDR.W    R0,??DataTable6_45
   \   0000023A   ........           BL       printf
   \   0000023E   23E0               B.N      ??list_bc_config_34
    642          	else if(i == 3) printf("4us clock ");
   \                     ??list_bc_config_36:
   \   00000240   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000242   032C               CMP      R4,#+3
   \   00000244   04D1               BNE.N    ??list_bc_config_37
   \   00000246   ........           LDR.W    R0,??DataTable6_46
   \   0000024A   ........           BL       printf
   \   0000024E   1BE0               B.N      ??list_bc_config_34
    643          	else if(i == 4) printf("8us clock ");
   \                     ??list_bc_config_37:
   \   00000250   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000252   042C               CMP      R4,#+4
   \   00000254   04D1               BNE.N    ??list_bc_config_38
   \   00000256   ........           LDR.W    R0,??DataTable6_47
   \   0000025A   ........           BL       printf
   \   0000025E   13E0               B.N      ??list_bc_config_34
    644          	else if(i == 5) printf("16us clock ");
   \                     ??list_bc_config_38:
   \   00000260   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000262   052C               CMP      R4,#+5
   \   00000264   04D1               BNE.N    ??list_bc_config_39
   \   00000266   ........           LDR.W    R0,??DataTable6_48
   \   0000026A   ........           BL       printf
   \   0000026E   0BE0               B.N      ??list_bc_config_34
    645          	else if(i == 6) printf("32us clock ");
   \                     ??list_bc_config_39:
   \   00000270   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000272   062C               CMP      R4,#+6
   \   00000274   04D1               BNE.N    ??list_bc_config_40
   \   00000276   ........           LDR.W    R0,??DataTable6_49
   \   0000027A   ........           BL       printf
   \   0000027E   03E0               B.N      ??list_bc_config_34
    646          	else printf("64us clock ");
   \                     ??list_bc_config_40:
   \   00000280   ........           LDR.W    R0,??DataTable6_50
   \   00000284   ........           BL       printf
    647          	printf("\n\n\r");
   \                     ??list_bc_config_34:
   \   00000288   ....               ADR.N    R0,??DataTable3  ;; "\n\n\r"
   \   0000028A   ........           BL       printf
    648          
    649          	print_line();
   \   0000028E   ........           BL       print_line
    650            	print_menuprompt();
   \   00000292   ........           BL       print_menuprompt
    651          
    652          }	// end list_bc_config()
   \   00000296   31BD               POP      {R0,R4,R5,PC}    ;; return
    653          #endif //(BC_ena) 
    654          
    655          
    656          #if (BC_ena) 
    657          //-------------------------------------------------------------------------
    658          //    brief	this function lists the BC's Cond Code / GP Flag reg
    659          //		to the console via UART
    660          //-------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    661          void list_bc_ccgpf_reg(void) {
   \                     list_bc_ccgpf_reg:
   \   00000000   10B5               PUSH     {R4,LR}
    662          
    663          	unsigned short int i;
    664          
    665          	#if (HOST_BUS_INTERFACE)
    666          		i = pH6130->BC_CCODE_AND_GPF_REG;
   \   00000002   ........           LDR.W    R0,??DataTable6_2
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   B0F86E00           LDRH     R0,[R0, #+110]
   \   0000000C   0400               MOVS     R4,R0
    667          	#else // (HOST_SPI_INTERFACE)
    668          		Write_6131LowReg(MAP_1, BC_CCODE_AND_GPF_REG, 1);
    669          		i = Read_6131_1word(1);
    670          	#endif
    671          
    672          	// formfeed
    673          	putchar(12); 	
   \   0000000E   0C20               MOVS     R0,#+12
   \   00000010   ........           BL       putchar
    674          	printf("\n\rBC Condition Code & GP Flag Register: 0x%.2X%.2X\n\r", (char)(i>>8),(char)i);
   \   00000014   2200               MOVS     R2,R4
   \   00000016   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000018   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   210A               LSRS     R1,R4,#+8
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   ........           LDR.W    R0,??DataTable6_51
   \   00000022   ........           BL       printf
    675          	print_line();
   \   00000026   ........           BL       print_line
    676          
    677          	if(i==0x0000) printf("BC Stopped: No Condition Codes or Gen Purpose Flags Are Set.\n\r");
   \   0000002A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000002C   002C               CMP      R4,#+0
   \   0000002E   04D1               BNE.N    ??list_bc_ccgpf_reg_0
   \   00000030   ........           LDR.W    R0,??DataTable6_52
   \   00000034   ........           BL       printf
   \   00000038   13E0               B.N      ??list_bc_ccgpf_reg_1
    678          	else if(i==0x8000) printf("BC Running: No Condition Codes or Gen Purpose Flags Are Set.\n\r");
   \                     ??list_bc_ccgpf_reg_0:
   \   0000003A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003C   B4F5004F           CMP      R4,#+32768
   \   00000040   04D1               BNE.N    ??list_bc_ccgpf_reg_2
   \   00000042   ........           LDR.W    R0,??DataTable6_53
   \   00000046   ........           BL       printf
   \   0000004A   0AE0               B.N      ??list_bc_ccgpf_reg_1
    679          	else if(i & (1<<15)) printf("BC Is Running.\n\n\r");
   \                     ??list_bc_ccgpf_reg_2:
   \   0000004C   2004               LSLS     R0,R4,#+16
   \   0000004E   04D5               BPL.N    ??list_bc_ccgpf_reg_3
   \   00000050   ........           LDR.W    R0,??DataTable6_54
   \   00000054   ........           BL       printf
   \   00000058   03E0               B.N      ??list_bc_ccgpf_reg_1
    680          	else printf("BC Not Running.\n\n\r");
   \                     ??list_bc_ccgpf_reg_3:
   \   0000005A   ........           LDR.W    R0,??DataTable6_55
   \   0000005E   ........           BL       printf
    681          	if(i & (1<<14)) printf("2Retries  ");
   \                     ??list_bc_ccgpf_reg_1:
   \   00000062   6004               LSLS     R0,R4,#+17
   \   00000064   03D5               BPL.N    ??list_bc_ccgpf_reg_4
   \   00000066   ........           LDR.W    R0,??DataTable5_2
   \   0000006A   ........           BL       printf
    682          	if(i & (1<<13)) printf("1Retry  ");
   \                     ??list_bc_ccgpf_reg_4:
   \   0000006E   A004               LSLS     R0,R4,#+18
   \   00000070   03D5               BPL.N    ??list_bc_ccgpf_reg_5
   \   00000072   ........           LDR.W    R0,??DataTable5_3
   \   00000076   ........           BL       printf
    683          	if(i & (1<<12)) printf("BadMsg  ");
   \                     ??list_bc_ccgpf_reg_5:
   \   0000007A   E004               LSLS     R0,R4,#+19
   \   0000007C   03D5               BPL.N    ??list_bc_ccgpf_reg_6
   \   0000007E   ........           LDR.W    R0,??DataTable5_4
   \   00000082   ........           BL       printf
    684          	if(i & (1<<10)) printf("GdDataBlk  ");
   \                     ??list_bc_ccgpf_reg_6:
   \   00000086   6005               LSLS     R0,R4,#+21
   \   00000088   03D5               BPL.N    ??list_bc_ccgpf_reg_7
   \   0000008A   ........           LDR.W    R0,??DataTable5_5
   \   0000008E   ........           BL       printf
    685          	if(i & (1<<9)) printf("FmtErr  ");
   \                     ??list_bc_ccgpf_reg_7:
   \   00000092   A005               LSLS     R0,R4,#+22
   \   00000094   02D5               BPL.N    ??list_bc_ccgpf_reg_8
   \   00000096   ....               LDR.N    R0,??DataTable4_39
   \   00000098   ........           BL       printf
    686          	if(i & (1<<8)) printf("NoResp  ");
   \                     ??list_bc_ccgpf_reg_8:
   \   0000009C   E005               LSLS     R0,R4,#+23
   \   0000009E   02D5               BPL.N    ??list_bc_ccgpf_reg_9
   \   000000A0   ....               LDR.N    R0,??DataTable4_30
   \   000000A2   ........           BL       printf
    687          	if(i & (1<<7)) printf("GPF7  ");
   \                     ??list_bc_ccgpf_reg_9:
   \   000000A6   2006               LSLS     R0,R4,#+24
   \   000000A8   03D5               BPL.N    ??list_bc_ccgpf_reg_10
   \   000000AA   ........           LDR.W    R0,??DataTable5_6
   \   000000AE   ........           BL       printf
    688          	if(i & (1<<6)) printf("GPF6  ");
   \                     ??list_bc_ccgpf_reg_10:
   \   000000B2   6006               LSLS     R0,R4,#+25
   \   000000B4   03D5               BPL.N    ??list_bc_ccgpf_reg_11
   \   000000B6   ........           LDR.W    R0,??DataTable5_7
   \   000000BA   ........           BL       printf
    689          	if(i & (1<<5)) printf("GPF5  ");
   \                     ??list_bc_ccgpf_reg_11:
   \   000000BE   A006               LSLS     R0,R4,#+26
   \   000000C0   03D5               BPL.N    ??list_bc_ccgpf_reg_12
   \   000000C2   ........           LDR.W    R0,??DataTable5_8
   \   000000C6   ........           BL       printf
    690          	if(i & (1<<4)) printf("GPF4  ");
   \                     ??list_bc_ccgpf_reg_12:
   \   000000CA   E006               LSLS     R0,R4,#+27
   \   000000CC   03D5               BPL.N    ??list_bc_ccgpf_reg_13
   \   000000CE   ........           LDR.W    R0,??DataTable5_9
   \   000000D2   ........           BL       printf
    691          	if(i & (1<<3)) printf("GPF3  ");
   \                     ??list_bc_ccgpf_reg_13:
   \   000000D6   2007               LSLS     R0,R4,#+28
   \   000000D8   03D5               BPL.N    ??list_bc_ccgpf_reg_14
   \   000000DA   ........           LDR.W    R0,??DataTable5_10
   \   000000DE   ........           BL       printf
    692          	if(i & (1<<2)) printf("GPF2  ");
   \                     ??list_bc_ccgpf_reg_14:
   \   000000E2   6007               LSLS     R0,R4,#+29
   \   000000E4   03D5               BPL.N    ??list_bc_ccgpf_reg_15
   \   000000E6   ........           LDR.W    R0,??DataTable5_11
   \   000000EA   ........           BL       printf
    693          	if(i & (1<<1)) printf("LT-GPF1  ");
   \                     ??list_bc_ccgpf_reg_15:
   \   000000EE   A007               LSLS     R0,R4,#+30
   \   000000F0   03D5               BPL.N    ??list_bc_ccgpf_reg_16
   \   000000F2   ........           LDR.W    R0,??DataTable5_12
   \   000000F6   ........           BL       printf
    694          	if(i & (1<<0)) printf("EQ-GPF0  ");
   \                     ??list_bc_ccgpf_reg_16:
   \   000000FA   E007               LSLS     R0,R4,#+31
   \   000000FC   03D5               BPL.N    ??list_bc_ccgpf_reg_17
   \   000000FE   ........           LDR.W    R0,??DataTable5_13
   \   00000102   ........           BL       printf
    695          	if(i & (1<<11)) printf("MSSet  ");
   \                     ??list_bc_ccgpf_reg_17:
   \   00000106   2005               LSLS     R0,R4,#+20
   \   00000108   02D5               BPL.N    ??list_bc_ccgpf_reg_18
   \   0000010A   ....               LDR.N    R0,??DataTable4_40
   \   0000010C   ........           BL       printf
    696          	printf("\n\r");
   \                     ??list_bc_ccgpf_reg_18:
   \   00000110   ....               ADR.N    R0,??DataTable4_27  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000112   ........           BL       printf
    697                  
    698          	print_line();
   \   00000116   ........           BL       print_line
    699             	print_menuprompt();
   \   0000011A   ........           BL       print_menuprompt
    700          
    701          }
   \   0000011E   10BD               POP      {R4,PC}          ;; return
    702          #endif //(BC_ena) 
    703          
    704          
    705          
    706          
    707          #if (BC_ena) 
    708          //-------------------------------------------------------------
    709          //      this function lists bus controller interrupt 
    710          //	configuration to the console via UART. if there
    711          //	are pending BC interrupts, these too are displayed.
    712          //	Function returns the value read from the BC pending
    713          //	interrupt register, since reading the reg clears it.
    714          //-------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    715          unsigned short int list_bc_ints_console (void) {
   \                     list_bc_ints_console:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    716          
    717          	unsigned short int i, j, k=0;
   \   00000002   0026               MOVS     R6,#+0
    718          
    719          	// formfeed 
    720          	putchar(12); 	
   \   00000004   0C20               MOVS     R0,#+12
   \   00000006   ........           BL       putchar
    721          
    722          	#if(!BC_ena) 
    723          	printf("Bus Controller Is Not Enabled!\n\n\r"); 
    724          	#endif
    725          
    726          	#if (HOST_BUS_INTERFACE)
    727          		i = pH6130->BC_INT_ENABLE_REG;
   \   0000000A   ........           LDR.W    R0,??DataTable6_2
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   008C               LDRH     R0,[R0, #+32]
   \   00000012   0400               MOVS     R4,R0
    728          		j = pH6130->BC_INT_OUTPUT_ENABLE_REG;
   \   00000014   ........           LDR.W    R0,??DataTable6_2
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   008D               LDRH     R0,[R0, #+40]
   \   0000001C   0500               MOVS     R5,R0
    729          		k = pH6130->BC_PENDING_INT_REG;
   \   0000001E   ........           LDR.W    R0,??DataTable6_2
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   C089               LDRH     R0,[R0, #+14]
   \   00000026   0600               MOVS     R6,R0
    730          	#else // (HOST_SPI_INTERFACE)
    731          		Write_6131LowReg(MAP_1, BC_INT_ENABLE_REG, 1);
    732          		i = Read_6131_1word(1);
    733          		Write_6131LowReg(MAP_1, BC_INT_OUTPUT_ENABLE_REG, 1);
    734          		j = Read_6131_1word(1);
    735          		Write_6131LowReg(MAP_1, BC_PENDING_INT_REG, 1);
    736          		k = Read_6131_1word(1);
    737          	#endif
    738          		
    739          	printf("\n\r Bus Controller Ints   Enabled?   Pin Output?   Pending?\n\r");
   \   00000028   ........           LDR.W    R0,??DataTable6_56
   \   0000002C   ........           BL       printf
    740          	print_line();
   \   00000030   ........           BL       print_line
    741          
    742          	printf("BC Frame Timer Expired");
   \   00000034   ........           LDR.W    R0,??DataTable6_57
   \   00000038   ........           BL       printf
    743          	if(!(i & (1<<15))) {	
   \   0000003C   2004               LSLS     R0,R4,#+16
   \   0000003E   02D4               BMI.N    ??list_bc_ints_console_0
    744          		// int disabled 
    745          		print_null();
   \   00000040   ........           BL       print_null
   \   00000044   11E0               B.N      ??list_bc_ints_console_1
    746          	}
    747          	else {
    748          		// int enabled 
    749          		print_sp1sp();
   \                     ??list_bc_ints_console_0:
   \   00000046   ........           BL       print_sp1sp
    750          		// pin output? 
    751          		if(j & (1<<15)) print_b1sp();
   \   0000004A   2804               LSLS     R0,R5,#+16
   \   0000004C   02D5               BPL.N    ??list_bc_ints_console_2
   \   0000004E   ........           BL       print_b1sp
   \   00000052   01E0               B.N      ??list_bc_ints_console_3
    752          		else print_b0sp(); 
   \                     ??list_bc_ints_console_2:
   \   00000054   ........           BL       print_b0sp
    753          		// pending? 
    754          		if(k & (1<<15)) printf("1\n\r");
   \                     ??list_bc_ints_console_3:
   \   00000058   3004               LSLS     R0,R6,#+16
   \   0000005A   03D5               BPL.N    ??list_bc_ints_console_4
   \   0000005C   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000005E   ........           BL       printf
   \   00000062   02E0               B.N      ??list_bc_ints_console_1
    755          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_4:
   \   00000064   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000066   ........           BL       printf
    756          	}
    757          
    758          	printf("Selected Msg Int,EOM=1");
   \                     ??list_bc_ints_console_1:
   \   0000006A   ........           LDR.W    R0,??DataTable6_58
   \   0000006E   ........           BL       printf
    759          	if(!(i & (1<<14))) {	
   \   00000072   6004               LSLS     R0,R4,#+17
   \   00000074   02D4               BMI.N    ??list_bc_ints_console_5
    760          		// int disabled 
    761          		print_null();
   \   00000076   ........           BL       print_null
   \   0000007A   11E0               B.N      ??list_bc_ints_console_6
    762          	}
    763          	else {
    764          		// int enabled 
    765          		print_sp1sp();
   \                     ??list_bc_ints_console_5:
   \   0000007C   ........           BL       print_sp1sp
    766          		// pin output? 
    767          		if(j & (1<<14)) print_b1sp();
   \   00000080   6804               LSLS     R0,R5,#+17
   \   00000082   02D5               BPL.N    ??list_bc_ints_console_7
   \   00000084   ........           BL       print_b1sp
   \   00000088   01E0               B.N      ??list_bc_ints_console_8
    768          		else print_b0sp(); 
   \                     ??list_bc_ints_console_7:
   \   0000008A   ........           BL       print_b0sp
    769          		// pending? 
    770          		if(k & (1<<14)) printf("1\n\r");
   \                     ??list_bc_ints_console_8:
   \   0000008E   7004               LSLS     R0,R6,#+17
   \   00000090   03D5               BPL.N    ??list_bc_ints_console_9
   \   00000092   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000094   ........           BL       printf
   \   00000098   02E0               B.N      ??list_bc_ints_console_6
    771          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_9:
   \   0000009A   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   0000009C   ........           BL       printf
    772          	}
    773          
    774          	printf("GenPurp Queue Rollover");
   \                     ??list_bc_ints_console_6:
   \   000000A0   ........           LDR.W    R0,??DataTable6_59
   \   000000A4   ........           BL       printf
    775          	if(!(i & (1<<13))) {	
   \   000000A8   A004               LSLS     R0,R4,#+18
   \   000000AA   02D4               BMI.N    ??list_bc_ints_console_10
    776          		// int disabled 
    777          		print_null();
   \   000000AC   ........           BL       print_null
   \   000000B0   11E0               B.N      ??list_bc_ints_console_11
    778          	}
    779          	else {
    780          		// int enabled 
    781          		print_sp1sp();
   \                     ??list_bc_ints_console_10:
   \   000000B2   ........           BL       print_sp1sp
    782          		// pin output? 
    783          		if(j & (1<<13)) print_b1sp();
   \   000000B6   A804               LSLS     R0,R5,#+18
   \   000000B8   02D5               BPL.N    ??list_bc_ints_console_12
   \   000000BA   ........           BL       print_b1sp
   \   000000BE   01E0               B.N      ??list_bc_ints_console_13
    784          		else print_b0sp(); 
   \                     ??list_bc_ints_console_12:
   \   000000C0   ........           BL       print_b0sp
    785          		// pending? 
    786          		if(k & (1<<13)) printf("1\n\r");
   \                     ??list_bc_ints_console_13:
   \   000000C4   B004               LSLS     R0,R6,#+18
   \   000000C6   03D5               BPL.N    ??list_bc_ints_console_14
   \   000000C8   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000000CA   ........           BL       printf
   \   000000CE   02E0               B.N      ??list_bc_ints_console_11
    787          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_14:
   \   000000D0   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000000D2   ........           BL       printf
    788          	}
    789          
    790          	printf("   Message Was Retried");
   \                     ??list_bc_ints_console_11:
   \   000000D6   ........           LDR.W    R0,??DataTable6_60
   \   000000DA   ........           BL       printf
    791          	if(!(i & (1<<12))) {	
   \   000000DE   E004               LSLS     R0,R4,#+19
   \   000000E0   02D4               BMI.N    ??list_bc_ints_console_15
    792          		// int disabled 
    793          		print_null();
   \   000000E2   ........           BL       print_null
   \   000000E6   11E0               B.N      ??list_bc_ints_console_16
    794          	}
    795          	else {
    796          		// int enabled 
    797          		print_sp1sp();
   \                     ??list_bc_ints_console_15:
   \   000000E8   ........           BL       print_sp1sp
    798          		// pin output? 
    799          		if(j & (1<<12)) print_b1sp();
   \   000000EC   E804               LSLS     R0,R5,#+19
   \   000000EE   02D5               BPL.N    ??list_bc_ints_console_17
   \   000000F0   ........           BL       print_b1sp
   \   000000F4   01E0               B.N      ??list_bc_ints_console_18
    800          		else print_b0sp(); 
   \                     ??list_bc_ints_console_17:
   \   000000F6   ........           BL       print_b0sp
    801          		// pending? 
    802          		if(k & (1<<12)) printf("1\n\r");
   \                     ??list_bc_ints_console_18:
   \   000000FA   F004               LSLS     R0,R6,#+19
   \   000000FC   03D5               BPL.N    ??list_bc_ints_console_19
   \   000000FE   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000100   ........           BL       printf
   \   00000104   02E0               B.N      ??list_bc_ints_console_16
    803          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_19:
   \   00000106   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000108   ........           BL       printf
    804          	}
    805          
    806          	printf("Call Stack Pointer Err");
   \                     ??list_bc_ints_console_16:
   \   0000010C   ........           LDR.W    R0,??DataTable6_61
   \   00000110   ........           BL       printf
    807          	if(!(i & (1<<11))) {	
   \   00000114   2005               LSLS     R0,R4,#+20
   \   00000116   02D4               BMI.N    ??list_bc_ints_console_20
    808          		// int disabled 
    809          		print_null();
   \   00000118   ........           BL       print_null
   \   0000011C   11E0               B.N      ??list_bc_ints_console_21
    810          	}
    811          	else {
    812          		// int enabled 
    813          		print_sp1sp();
   \                     ??list_bc_ints_console_20:
   \   0000011E   ........           BL       print_sp1sp
    814          		// pin output? 
    815          		if(j & (1<<11)) print_b1sp();
   \   00000122   2805               LSLS     R0,R5,#+20
   \   00000124   02D5               BPL.N    ??list_bc_ints_console_22
   \   00000126   ........           BL       print_b1sp
   \   0000012A   01E0               B.N      ??list_bc_ints_console_23
    816          		else print_b0sp(); 
   \                     ??list_bc_ints_console_22:
   \   0000012C   ........           BL       print_b0sp
    817          		// pending? 
    818          		if(k & (1<<11)) printf("1\n\r");
   \                     ??list_bc_ints_console_23:
   \   00000130   3005               LSLS     R0,R6,#+20
   \   00000132   03D5               BPL.N    ??list_bc_ints_console_24
   \   00000134   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000136   ........           BL       printf
   \   0000013A   02E0               B.N      ??list_bc_ints_console_21
    819          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_24:
   \   0000013C   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   0000013E   ........           BL       printf
    820          	}
    821          
    822          	printf("  Illegal Op Code Trap");
   \                     ??list_bc_ints_console_21:
   \   00000142   ........           LDR.W    R0,??DataTable6_62
   \   00000146   ........           BL       printf
    823          	if(!(i & (1<<10))) {	
   \   0000014A   6005               LSLS     R0,R4,#+21
   \   0000014C   02D4               BMI.N    ??list_bc_ints_console_25
    824          		// int disabled 
    825          		print_null();
   \   0000014E   ........           BL       print_null
   \   00000152   11E0               B.N      ??list_bc_ints_console_26
    826          	}
    827          	else {
    828          		// int enabled 
    829          		print_sp1sp();
   \                     ??list_bc_ints_console_25:
   \   00000154   ........           BL       print_sp1sp
    830          		// pin output? 
    831          		if(j & (1<<10)) print_b1sp();
   \   00000158   6805               LSLS     R0,R5,#+21
   \   0000015A   02D5               BPL.N    ??list_bc_ints_console_27
   \   0000015C   ........           BL       print_b1sp
   \   00000160   01E0               B.N      ??list_bc_ints_console_28
    832          		else print_b0sp(); 
   \                     ??list_bc_ints_console_27:
   \   00000162   ........           BL       print_b0sp
    833          		// pending? 
    834          		if(k & (1<<10)) printf("1\n\r");
   \                     ??list_bc_ints_console_28:
   \   00000166   7005               LSLS     R0,R6,#+21
   \   00000168   03D5               BPL.N    ??list_bc_ints_console_29
   \   0000016A   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000016C   ........           BL       printf
   \   00000170   02E0               B.N      ??list_bc_ints_console_26
    835          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_29:
   \   00000172   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000174   ........           BL       printf
    836          	}
    837          
    838          	printf("Unexpected RT Stat Bit");
   \                     ??list_bc_ints_console_26:
   \   00000178   ........           LDR.W    R0,??DataTable6_63
   \   0000017C   ........           BL       printf
    839          	if(!(i & (1<<9))) {	
   \   00000180   A005               LSLS     R0,R4,#+22
   \   00000182   02D4               BMI.N    ??list_bc_ints_console_30
    840          		// int disabled 
    841          		print_null();
   \   00000184   ........           BL       print_null
   \   00000188   11E0               B.N      ??list_bc_ints_console_31
    842          	}
    843          	else {
    844          		// int enabled 
    845          		print_sp1sp();
   \                     ??list_bc_ints_console_30:
   \   0000018A   ........           BL       print_sp1sp
    846          		// pin output? 
    847          		if(j & (1<<9)) print_b1sp();
   \   0000018E   A805               LSLS     R0,R5,#+22
   \   00000190   02D5               BPL.N    ??list_bc_ints_console_32
   \   00000192   ........           BL       print_b1sp
   \   00000196   01E0               B.N      ??list_bc_ints_console_33
    848          		else print_b0sp(); 
   \                     ??list_bc_ints_console_32:
   \   00000198   ........           BL       print_b0sp
    849          		// pending? 
    850          		if(k & (1<<9)) printf("1\n\r");
   \                     ??list_bc_ints_console_33:
   \   0000019C   B005               LSLS     R0,R6,#+22
   \   0000019E   03D5               BPL.N    ??list_bc_ints_console_34
   \   000001A0   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000001A2   ........           BL       printf
   \   000001A6   02E0               B.N      ??list_bc_ints_console_31
    851          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_34:
   \   000001A8   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000001AA   ........           BL       printf
    852          	}
    853          
    854          	printf("User-Def Int Req Bit 3");
   \                     ??list_bc_ints_console_31:
   \   000001AE   ........           LDR.W    R0,??DataTable6_64
   \   000001B2   ........           BL       printf
    855          	if(!(i & (1<<8))) {	
   \   000001B6   E005               LSLS     R0,R4,#+23
   \   000001B8   02D4               BMI.N    ??list_bc_ints_console_35
    856          		// int disabled 
    857          		print_null();
   \   000001BA   ........           BL       print_null
   \   000001BE   11E0               B.N      ??list_bc_ints_console_36
    858          	}
    859          	else {
    860          		// int enabled 
    861          		print_sp1sp();
   \                     ??list_bc_ints_console_35:
   \   000001C0   ........           BL       print_sp1sp
    862          		// pin output? 
    863          		if(j & (1<<8)) print_b1sp();
   \   000001C4   E805               LSLS     R0,R5,#+23
   \   000001C6   02D5               BPL.N    ??list_bc_ints_console_37
   \   000001C8   ........           BL       print_b1sp
   \   000001CC   01E0               B.N      ??list_bc_ints_console_38
    864          		else print_b0sp(); 
   \                     ??list_bc_ints_console_37:
   \   000001CE   ........           BL       print_b0sp
    865          		// pending? 
    866          		if(k & (1<<8)) printf("1\n\r");
   \                     ??list_bc_ints_console_38:
   \   000001D2   F005               LSLS     R0,R6,#+23
   \   000001D4   03D5               BPL.N    ??list_bc_ints_console_39
   \   000001D6   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000001D8   ........           BL       printf
   \   000001DC   02E0               B.N      ??list_bc_ints_console_36
    867          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_39:
   \   000001DE   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000001E0   ........           BL       printf
    868          	}
    869          
    870          	printf("User-Def Int Req Bit 2");
   \                     ??list_bc_ints_console_36:
   \   000001E4   ........           LDR.W    R0,??DataTable6_65
   \   000001E8   ........           BL       printf
    871          	if(!(i & (1<<7))) {	
   \   000001EC   2006               LSLS     R0,R4,#+24
   \   000001EE   02D4               BMI.N    ??list_bc_ints_console_40
    872          		// int disabled 
    873          		print_null();
   \   000001F0   ........           BL       print_null
   \   000001F4   11E0               B.N      ??list_bc_ints_console_41
    874          	}
    875          	else {
    876          		// int enabled 
    877          		print_sp1sp();
   \                     ??list_bc_ints_console_40:
   \   000001F6   ........           BL       print_sp1sp
    878          		// pin output? 
    879          		if(j & (1<<7)) print_b1sp();
   \   000001FA   2806               LSLS     R0,R5,#+24
   \   000001FC   02D5               BPL.N    ??list_bc_ints_console_42
   \   000001FE   ........           BL       print_b1sp
   \   00000202   01E0               B.N      ??list_bc_ints_console_43
    880          		else print_b0sp(); 
   \                     ??list_bc_ints_console_42:
   \   00000204   ........           BL       print_b0sp
    881          		// pending? 
    882          		if(k & (1<<7)) printf("1\n\r");
   \                     ??list_bc_ints_console_43:
   \   00000208   3006               LSLS     R0,R6,#+24
   \   0000020A   03D5               BPL.N    ??list_bc_ints_console_44
   \   0000020C   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000020E   ........           BL       printf
   \   00000212   02E0               B.N      ??list_bc_ints_console_41
    883          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_44:
   \   00000214   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000216   ........           BL       printf
    884          	}
    885          
    886          	printf("User-Def Int Req Bit 1");
   \                     ??list_bc_ints_console_41:
   \   0000021A   ........           LDR.W    R0,??DataTable6_66
   \   0000021E   ........           BL       printf
    887          	if(!(i & (1<<6))) {	
   \   00000222   6006               LSLS     R0,R4,#+25
   \   00000224   02D4               BMI.N    ??list_bc_ints_console_45
    888          		// int disabled 
    889          		print_null();
   \   00000226   ........           BL       print_null
   \   0000022A   11E0               B.N      ??list_bc_ints_console_46
    890          	}
    891          	else {
    892          		// int enabled 
    893          		print_sp1sp();
   \                     ??list_bc_ints_console_45:
   \   0000022C   ........           BL       print_sp1sp
    894          		// pin output? 
    895          		if(j & (1<<6)) print_b1sp();
   \   00000230   6806               LSLS     R0,R5,#+25
   \   00000232   02D5               BPL.N    ??list_bc_ints_console_47
   \   00000234   ........           BL       print_b1sp
   \   00000238   01E0               B.N      ??list_bc_ints_console_48
    896          		else print_b0sp(); 
   \                     ??list_bc_ints_console_47:
   \   0000023A   ........           BL       print_b0sp
    897          		// pending? 
    898          		if(k & (1<<6)) printf("1\n\r");
   \                     ??list_bc_ints_console_48:
   \   0000023E   7006               LSLS     R0,R6,#+25
   \   00000240   03D5               BPL.N    ??list_bc_ints_console_49
   \   00000242   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   00000244   ........           BL       printf
   \   00000248   02E0               B.N      ??list_bc_ints_console_46
    899          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_49:
   \   0000024A   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   0000024C   ........           BL       printf
    900          	}
    901          
    902          	printf("User-Def Int Req Bit 0");
   \                     ??list_bc_ints_console_46:
   \   00000250   ........           LDR.W    R0,??DataTable6_67
   \   00000254   ........           BL       printf
    903          	if(!(i & (1<<5))) {	
   \   00000258   A006               LSLS     R0,R4,#+26
   \   0000025A   02D4               BMI.N    ??list_bc_ints_console_50
    904          		// int disabled 
    905          		print_null();
   \   0000025C   ........           BL       print_null
   \   00000260   11E0               B.N      ??list_bc_ints_console_51
    906          	}
    907          	else {
    908          		// int enabled 
    909          		print_sp1sp();
   \                     ??list_bc_ints_console_50:
   \   00000262   ........           BL       print_sp1sp
    910          		// pin output? 
    911          		if(j & (1<<5)) print_b1sp();
   \   00000266   A806               LSLS     R0,R5,#+26
   \   00000268   02D5               BPL.N    ??list_bc_ints_console_52
   \   0000026A   ........           BL       print_b1sp
   \   0000026E   01E0               B.N      ??list_bc_ints_console_53
    912          		else print_b0sp(); 
   \                     ??list_bc_ints_console_52:
   \   00000270   ........           BL       print_b0sp
    913          		// pending? 
    914          		if(k & (1<<5)) printf("1\n\r");
   \                     ??list_bc_ints_console_53:
   \   00000274   B006               LSLS     R0,R6,#+26
   \   00000276   03D5               BPL.N    ??list_bc_ints_console_54
   \   00000278   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   0000027A   ........           BL       printf
   \   0000027E   02E0               B.N      ??list_bc_ints_console_51
    915          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_54:
   \   00000280   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   00000282   ........           BL       printf
    916          	}
    917          
    918          	printf("RT Status is Msg Error");
   \                     ??list_bc_ints_console_51:
   \   00000286   ........           LDR.W    R0,??DataTable7
   \   0000028A   ........           BL       printf
    919          	if(!(i & (1<<4))) {	
   \   0000028E   E006               LSLS     R0,R4,#+27
   \   00000290   02D4               BMI.N    ??list_bc_ints_console_55
    920          		// int disabled 
    921          		print_null();
   \   00000292   ........           BL       print_null
   \   00000296   11E0               B.N      ??list_bc_ints_console_56
    922          	}
    923          	else {
    924          		// int enabled 
    925          		print_sp1sp();
   \                     ??list_bc_ints_console_55:
   \   00000298   ........           BL       print_sp1sp
    926          		// pin output? 
    927          		if(j & (1<<4)) print_b1sp();
   \   0000029C   E806               LSLS     R0,R5,#+27
   \   0000029E   02D5               BPL.N    ??list_bc_ints_console_57
   \   000002A0   ........           BL       print_b1sp
   \   000002A4   01E0               B.N      ??list_bc_ints_console_58
    928          		else print_b0sp(); 
   \                     ??list_bc_ints_console_57:
   \   000002A6   ........           BL       print_b0sp
    929          		// pending? 
    930          		if(k & (1<<4)) printf("1\n\r");
   \                     ??list_bc_ints_console_58:
   \   000002AA   F006               LSLS     R0,R6,#+27
   \   000002AC   03D5               BPL.N    ??list_bc_ints_console_59
   \   000002AE   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000002B0   ........           BL       printf
   \   000002B4   02E0               B.N      ??list_bc_ints_console_56
    931          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_59:
   \   000002B6   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000002B8   ........           BL       printf
    932          	}
    933          
    934          	printf("     BC End-of-Message");
   \                     ??list_bc_ints_console_56:
   \   000002BC   ........           LDR.W    R0,??DataTable7_1
   \   000002C0   ........           BL       printf
    935          	if(!(i & (1<<3))) {	
   \   000002C4   2007               LSLS     R0,R4,#+28
   \   000002C6   02D4               BMI.N    ??list_bc_ints_console_60
    936          		// int disabled 
    937          		print_null();
   \   000002C8   ........           BL       print_null
   \   000002CC   11E0               B.N      ??list_bc_ints_console_61
    938          	}
    939          	else {
    940          		// int enabled 
    941          		print_sp1sp();
   \                     ??list_bc_ints_console_60:
   \   000002CE   ........           BL       print_sp1sp
    942          		// pin output? 
    943          		if(j & (1<<3)) print_b1sp();
   \   000002D2   2807               LSLS     R0,R5,#+28
   \   000002D4   02D5               BPL.N    ??list_bc_ints_console_62
   \   000002D6   ........           BL       print_b1sp
   \   000002DA   01E0               B.N      ??list_bc_ints_console_63
    944          		else print_b0sp(); 
   \                     ??list_bc_ints_console_62:
   \   000002DC   ........           BL       print_b0sp
    945          		// pending? 
    946          		if(k & (1<<3)) printf("1\n\r");
   \                     ??list_bc_ints_console_63:
   \   000002E0   3007               LSLS     R0,R6,#+28
   \   000002E2   03D5               BPL.N    ??list_bc_ints_console_64
   \   000002E4   ....               ADR.N    R0,??DataTable5  ;; "1\n\r"
   \   000002E6   ........           BL       printf
   \   000002EA   02E0               B.N      ??list_bc_ints_console_61
    947          		else printf("0\n\r"); 
   \                     ??list_bc_ints_console_64:
   \   000002EC   ....               ADR.N    R0,??DataTable5_1  ;; "0\n\r"
   \   000002EE   ........           BL       printf
    948          	}
    949          
    950          	printf("     Reserved Bits 2-0");
   \                     ??list_bc_ints_console_61:
   \   000002F2   ........           LDR.W    R0,??DataTable7_3
   \   000002F6   ........           BL       printf
    951          	print_dddn();
   \   000002FA   ........           BL       print_dddn
    952          	print_line();
   \   000002FE   ........           BL       print_line
    953          	printf("Note: Reading the BC Pending Interrupt Register clears it!\n\r");
   \   00000302   ........           LDR.W    R0,??DataTable7_5
   \   00000306   ........           BL       printf
    954          	print_menuprompt();
   \   0000030A   ........           BL       print_menuprompt
    955          
    956          	// return value read from the BCW Pending Interrupt Register, now cleared 
    957          	return k;
   \   0000030E   3000               MOVS     R0,R6
   \   00000310   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000312   70BD               POP      {R4-R6,PC}       ;; return
    958          
    959          }	// end list_bc_ints_console()
    960          
    961          
    962          #endif //(BC_ena) 
    963          
    964          #if(SMT_ena || IMT_ena)
    965          
    966          //-----------------------------------------------------------------------
    967          //    this function lists the MT Config reg 0x0029
    968          //    to the console via UART
    969          //-----------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    970          void list_mt_config (void) {
   \                     list_mt_config:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    971          
    972          	unsigned short int i, j;
    973          	char smt = 0;
   \   00000002   0026               MOVS     R6,#+0
    974          
    975          	#if (HOST_BUS_INTERFACE)
    976          		i = pH6130->MT_CONFIG_REG;
   \   00000004   ....               LDR.N    R0,??DataTable6_2
   \   00000006   0068               LDR      R0,[R0, #+0]
   \   00000008   B0F85200           LDRH     R0,[R0, #+82]
   \   0000000C   0400               MOVS     R4,R0
    977          	#else // (HOST_SPI_INTERFACE)
    978          		Write_6131LowReg(MAP_1, MT_CONFIG_REG, 1);
    979          		i = Read_6131_1word(1);
    980          	#endif
    981          
    982          	// IRIG monitor (imt) or Simple monitor (smt)? 
    983          	if(i & 1) smt = 1;
   \   0000000E   E007               LSLS     R0,R4,#+31
   \   00000010   01D5               BPL.N    ??list_mt_config_0
   \   00000012   0120               MOVS     R0,#+1
   \   00000014   0600               MOVS     R6,R0
    984          
    985          	// formfeed 
    986          	putchar(12); 	
   \                     ??list_mt_config_0:
   \   00000016   0C20               MOVS     R0,#+12
   \   00000018   ........           BL       putchar
    987          	if(smt) printf("\n\rS");
   \   0000001C   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   002E               CMP      R6,#+0
   \   00000020   03D0               BEQ.N    ??list_mt_config_1
   \   00000022   ....               ADR.N    R0,??DataTable6  ;; "\n\rS"
   \   00000024   ........           BL       printf
   \   00000028   02E0               B.N      ??list_mt_config_2
    988          	else    printf("\n\rI");
   \                     ??list_mt_config_1:
   \   0000002A   ....               ADR.N    R0,??DataTable6_1  ;; "\n\rI"
   \   0000002C   ........           BL       printf
    989          	printf("MT monitor mode selected.\n\n\r");
   \                     ??list_mt_config_2:
   \   00000030   ........           LDR.W    R0,??DataTable7_7
   \   00000034   ........           BL       printf
    990          
    991          	printf("MT Configuration Register: 0x%.2X%.2X\n\r", (char)(i>>8),(char)i);
   \   00000038   2200               MOVS     R2,R4
   \   0000003A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003C   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000003E   210A               LSRS     R1,R4,#+8
   \   00000040   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000042   ........           LDR.W    R0,??DataTable7_8
   \   00000046   ........           BL       printf
    992          	print_line();
   \   0000004A   ........           BL       print_line
    993          
    994          	j = (i & 0xC000) >> 14;
   \   0000004E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000050   A00B               LSRS     R0,R4,#+14
   \   00000052   0500               MOVS     R5,R0
    995          	if(j == 1) printf("  20us Timeout");
   \   00000054   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000056   012D               CMP      R5,#+1
   \   00000058   04D1               BNE.N    ??list_mt_config_3
   \   0000005A   ........           LDR.W    R0,??DataTable7_9
   \   0000005E   ........           BL       printf
   \   00000062   13E0               B.N      ??list_mt_config_4
    996          	else if(j == 2) printf("  58us Timeout");
   \                     ??list_mt_config_3:
   \   00000064   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000066   022D               CMP      R5,#+2
   \   00000068   04D1               BNE.N    ??list_mt_config_5
   \   0000006A   ........           LDR.W    R0,??DataTable7_10
   \   0000006E   ........           BL       printf
   \   00000072   0BE0               B.N      ??list_mt_config_4
    997          	else if(j == 3) printf(" 138us Timeout");
   \                     ??list_mt_config_5:
   \   00000074   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000076   032D               CMP      R5,#+3
   \   00000078   04D1               BNE.N    ??list_mt_config_6
   \   0000007A   ........           LDR.W    R0,??DataTable7_11
   \   0000007E   ........           BL       printf
   \   00000082   03E0               B.N      ??list_mt_config_4
    998          	else printf("  15us Timeout");
   \                     ??list_mt_config_6:
   \   00000084   ........           LDR.W    R0,??DataTable7_12
   \   00000088   ........           BL       printf
    999          	printf(" (bus dead time)   ");
   \                     ??list_mt_config_4:
   \   0000008C   ........           LDR.W    R0,??DataTable7_13
   \   00000090   ........           BL       printf
   1000          	
   1001          	if(i & (1<<12)) printf("2us Gap Check ON");
   \   00000094   E004               LSLS     R0,R4,#+19
   \   00000096   04D5               BPL.N    ??list_mt_config_7
   \   00000098   ........           LDR.W    R0,??DataTable7_14
   \   0000009C   ........           BL       printf
   \   000000A0   03E0               B.N      ??list_mt_config_8
   1002          	else printf("2us Gap Check OFF");
   \                     ??list_mt_config_7:
   \   000000A2   ........           LDR.W    R0,??DataTable7_15
   \   000000A6   ........           BL       printf
   1003          	printf("\n\n\r");
   \                     ??list_mt_config_8:
   \   000000AA   ....               ADR.N    R0,??DataTable6_3  ;; "\n\n\r"
   \   000000AC   ........           BL       printf
   1004          
   1005          	j = (i & 0x0300) >> 8;
   \   000000B0   C4F30120           UBFX     R0,R4,#+8,#+2
   \   000000B4   0500               MOVS     R5,R0
   1006          	if(j==0) printf("  Time Tag last word, last bit   "); 
   \   000000B6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B8   002D               CMP      R5,#+0
   \   000000BA   04D1               BNE.N    ??list_mt_config_9
   \   000000BC   ........           LDR.W    R0,??DataTable7_17
   \   000000C0   ........           BL       printf
   \   000000C4   13E0               B.N      ??list_mt_config_10
   1007          	else if(j==1) printf("Time Tag first word, first bit   "); 
   \                     ??list_mt_config_9:
   \   000000C6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000C8   012D               CMP      R5,#+1
   \   000000CA   04D1               BNE.N    ??list_mt_config_11
   \   000000CC   ........           LDR.W    R0,??DataTable7_18
   \   000000D0   ........           BL       printf
   \   000000D4   0BE0               B.N      ??list_mt_config_10
   1008          	else if(j==2) printf(" Time Tag first word, last bit   "); 
   \                     ??list_mt_config_11:
   \   000000D6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000D8   022D               CMP      R5,#+2
   \   000000DA   04D1               BNE.N    ??list_mt_config_12
   \   000000DC   ........           LDR.W    R0,??DataTable7_19
   \   000000E0   ........           BL       printf
   \   000000E4   03E0               B.N      ??list_mt_config_10
   1009          	else printf("           Time Tagging is OFF   "); 
   \                     ??list_mt_config_12:
   \   000000E6   ........           LDR.W    R0,??DataTable7_20
   \   000000EA   ........           BL       printf
   1010          
   1011          	j = (i & 0x0060) >> 5;
   \                     ??list_mt_config_10:
   \   000000EE   C4F34110           UBFX     R0,R4,#+5,#+2
   \   000000F2   0500               MOVS     R5,R0
   1012          	printf("Start Rec: First Cmd ");
   \   000000F4   ........           LDR.W    R0,??DataTable7_21
   \   000000F8   ........           BL       printf
   1013          	if(j==0) printf("Word");
   \   000000FC   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000FE   002D               CMP      R5,#+0
   \   00000100   04D1               BNE.N    ??list_mt_config_13
   \   00000102   ........           LDR.W    R0,??DataTable7_22
   \   00000106   ........           BL       printf
   \   0000010A   13E0               B.N      ??list_mt_config_14
   1014          	else if(j==1) printf("or Data Word");
   \                     ??list_mt_config_13:
   \   0000010C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000010E   012D               CMP      R5,#+1
   \   00000110   04D1               BNE.N    ??list_mt_config_15
   \   00000112   ........           LDR.W    R0,??DataTable7_23
   \   00000116   ........           BL       printf
   \   0000011A   0BE0               B.N      ??list_mt_config_14
   1015          	else if(j==2) printf("Sync + 2 bits");
   \                     ??list_mt_config_15:
   \   0000011C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000011E   022D               CMP      R5,#+2
   \   00000120   04D1               BNE.N    ??list_mt_config_16
   \   00000122   ........           LDR.W    R0,??DataTable7_24
   \   00000126   ........           BL       printf
   \   0000012A   03E0               B.N      ??list_mt_config_14
   1016          	else printf("or Data Sync + 2 bits");
   \                     ??list_mt_config_16:
   \   0000012C   ........           LDR.W    R0,??DataTable7_25
   \   00000130   ........           BL       printf
   1017          	printf("\n\n\r");
   \                     ??list_mt_config_14:
   \   00000134   ....               ADR.N    R0,??DataTable6_3  ;; "\n\n\r"
   \   00000136   ........           BL       printf
   1018          
   1019          	printf("   Invalid Data Word");	
   \   0000013A   ........           LDR.W    R0,??DataTable7_26
   \   0000013E   ........           BL       printf
   1020          	if(i & (1<<4)) printf("s recorded   ");
   \   00000142   E006               LSLS     R0,R4,#+27
   \   00000144   04D5               BPL.N    ??list_mt_config_17
   \   00000146   ........           LDR.W    R0,??DataTable7_27
   \   0000014A   ........           BL       printf
   \   0000014E   03E0               B.N      ??list_mt_config_18
   1021          	else printf          (" ends mssg   ");
   \                     ??list_mt_config_17:
   \   00000150   ........           LDR.W    R0,??DataTable7_28
   \   00000154   ........           BL       printf
   1022          
   1023          	printf("Extended Status Flags ");
   \                     ??list_mt_config_18:
   \   00000158   ........           LDR.W    R0,??DataTable7_29
   \   0000015C   ........           BL       printf
   1024          	if(i & (1<<2)) printf("ON");
   \   00000160   6007               LSLS     R0,R4,#+29
   \   00000162   03D5               BPL.N    ??list_mt_config_19
   \   00000164   ....               ADR.N    R0,??DataTable6_17  ;; 0x4F, 0x4E, 0x00, 0x00
   \   00000166   ........           BL       printf
   \   0000016A   02E0               B.N      ??list_mt_config_20
   1025          	else printf("OFF");
   \                     ??list_mt_config_19:
   \   0000016C   ....               ADR.N    R0,??DataTable6_18  ;; "OFF"
   \   0000016E   ........           BL       printf
   1026          	printf("\n\n\r");
   \                     ??list_mt_config_20:
   \   00000172   ....               ADR.N    R0,??DataTable6_3  ;; "\n\n\r"
   \   00000174   ........           BL       printf
   1027          
   1028          	if(smt) {
   \   00000178   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000017A   002E               CMP      R6,#+0
   \   0000017C   11D0               BEQ.N    ??list_mt_config_21
   1029          		printf(" SMT using ");
   \   0000017E   ........           LDR.W    R0,??DataTable7_30
   \   00000182   ........           BL       printf
   1030          		if(i & 2) printf("48");
   \   00000186   A007               LSLS     R0,R4,#+30
   \   00000188   03D5               BPL.N    ??list_mt_config_22
   \   0000018A   ....               ADR.N    R0,??DataTable6_22  ;; 0x34, 0x38, 0x00, 0x00
   \   0000018C   ........           BL       printf
   \   00000190   02E0               B.N      ??list_mt_config_23
   1031          		else printf("16");
   \                     ??list_mt_config_22:
   \   00000192   ....               ADR.N    R0,??DataTable6_23  ;; 0x31, 0x36, 0x00, 0x00
   \   00000194   ........           BL       printf
   1032          		printf("-bit Time Tag ");
   \                     ??list_mt_config_23:
   \   00000198   ........           LDR.W    R0,??DataTable7_31
   \   0000019C   ........           BL       printf
   \   000001A0   50E0               B.N      ??list_mt_config_24
   1033          	}
   1034          	else {  // imt
   1035          		printf("IMT Pkt Timer starts ");
   \                     ??list_mt_config_21:
   \   000001A2   ........           LDR.W    R0,??DataTable7_32
   \   000001A6   ........           BL       printf
   1036          		if(i & (1<<7)) printf("at PktEnd   ");
   \   000001AA   2006               LSLS     R0,R4,#+24
   \   000001AC   04D5               BPL.N    ??list_mt_config_25
   \   000001AE   ........           LDR.W    R0,??DataTable7_33
   \   000001B2   ........           BL       printf
   \   000001B6   03E0               B.N      ??list_mt_config_26
   1037          		else printf("at Cmd Wd   ");
   \                     ??list_mt_config_25:
   \   000001B8   ........           LDR.W    R0,??DataTable7_34
   \   000001BC   ........           BL       printf
   1038          
   1039          		j = (i & 0x0C00) >> 10;
   \                     ??list_mt_config_26:
   \   000001C0   C4F38120           UBFX     R0,R4,#+10,#+2
   \   000001C4   0500               MOVS     R5,R0
   1040          		printf("IMT Hdr Data Type IRIG-106-");
   \   000001C6   ........           LDR.W    R0,??DataTable7_35
   \   000001CA   ........           BL       printf
   1041          		if(j==0) printf("09  "); 
   \   000001CE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001D0   002D               CMP      R5,#+0
   \   000001D2   04D1               BNE.N    ??list_mt_config_27
   \   000001D4   ........           LDR.W    R0,??DataTable7_36
   \   000001D8   ........           BL       printf
   \   000001DC   13E0               B.N      ??list_mt_config_28
   1042          		else if(j==1) printf("04  "); 
   \                     ??list_mt_config_27:
   \   000001DE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001E0   012D               CMP      R5,#+1
   \   000001E2   04D1               BNE.N    ??list_mt_config_29
   \   000001E4   ........           LDR.W    R0,??DataTable7_37
   \   000001E8   ........           BL       printf
   \   000001EC   0BE0               B.N      ??list_mt_config_28
   1043          		else if(j==2) printf("05  "); 
   \                     ??list_mt_config_29:
   \   000001EE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001F0   022D               CMP      R5,#+2
   \   000001F2   04D1               BNE.N    ??list_mt_config_30
   \   000001F4   ........           LDR.W    R0,??DataTable7_38
   \   000001F8   ........           BL       printf
   \   000001FC   03E0               B.N      ??list_mt_config_28
   1044          		else printf("07  "); 
   \                     ??list_mt_config_30:
   \   000001FE   ........           LDR.W    R0,??DataTable7_39
   \   00000202   ........           BL       printf
   1045          		printf("\n\n\r");
   \                     ??list_mt_config_28:
   \   00000206   ....               ADR.N    R0,??DataTable6_3  ;; "\n\n\r"
   \   00000208   ........           BL       printf
   1046          						 
   1047          		printf (" IMT Auto Header & Trailer ");
   \   0000020C   ........           LDR.W    R0,??DataTable7_40
   \   00000210   ........           BL       printf
   1048          		if(i & 8) printf ("OFF   ");
   \   00000214   2007               LSLS     R0,R4,#+28
   \   00000216   04D5               BPL.N    ??list_mt_config_31
   \   00000218   ........           LDR.W    R0,??DataTable7_41
   \   0000021C   ........           BL       printf
   \   00000220   03E0               B.N      ??list_mt_config_32
   1049          		else printf      (" ON   ");
   \                     ??list_mt_config_31:
   \   00000222   ........           LDR.W    R0,??DataTable7_42
   \   00000226   ........           BL       printf
   1050          	
   1051          		printf ("IMT Data Packet Checksum ");
   \                     ??list_mt_config_32:
   \   0000022A   ........           LDR.W    R0,??DataTable7_43
   \   0000022E   ........           BL       printf
   1052          		if(i & 2) printf ("ON");
   \   00000232   A007               LSLS     R0,R4,#+30
   \   00000234   03D5               BPL.N    ??list_mt_config_33
   \   00000236   ....               ADR.N    R0,??DataTable6_17  ;; 0x4F, 0x4E, 0x00, 0x00
   \   00000238   ........           BL       printf
   \   0000023C   02E0               B.N      ??list_mt_config_24
   1053          		else printf("OFF"); 
   \                     ??list_mt_config_33:
   \   0000023E   ....               ADR.N    R0,??DataTable6_18  ;; "OFF"
   \   00000240   ........           BL       printf
   1054          	} 
   1055          	printf("\n\n\r");
   \                     ??list_mt_config_24:
   \   00000244   ....               ADR.N    R0,??DataTable6_3  ;; "\n\n\r"
   \   00000246   ........           BL       printf
   1056          	print_line();
   \   0000024A   ........           BL       print_line
   1057          	print_menuprompt();
   \   0000024E   ........           BL       print_menuprompt
   1058          
   1059          }	// end list_mt_config()
   \   00000252   70BD               POP      {R4-R6,PC}       ;; return
   1060          
   1061          
   1062          //-----------------------------------------------------------------------
   1063          //    this function lists the MT msg results, last message
   1064          //    to the console via UART
   1065          //-----------------------------------------------------------------------
   1066          

   \                                 In section .text, align 2, keep-with-next
   1067          void mt_last_msg_console(void) {
   \                     mt_last_msg_console:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   83B0               SUB      SP,SP,#+12
   1068          
   1069                  #if (HOST_BUS_INTERFACE)    
   1070                  extern const H6130 pH6130; // HI-6130 register struct base address    
   1071                  #endif
   1072          	unsigned short int h,i,j,m,addr,dbp,ndw;
   1073          	char k,bswo=3,smt=0,xmf=0,ttag16=0,rtrt=1;
   \   00000006   0320               MOVS     R0,#+3
   \   00000008   8DF80200           STRB     R0,[SP, #+2]
   \   0000000C   5FF00008           MOVS     R8,#+0
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   8DF80000           STRB     R0,[SP, #+0]
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   8DF80100           STRB     R0,[SP, #+1]
   \   0000001C   0120               MOVS     R0,#+1
   \   0000001E   8DF80300           STRB     R0,[SP, #+3]
   1074          
   1075          	// formfeed 
   1076          	putchar(12); 	
   \   00000022   0C20               MOVS     R0,#+12
   \   00000024   ........           BL       putchar
   1077          
   1078          	if(SMT_ena||IMT_ena) {
   1079          
   1080          		printf("\n\rLast Message Recorded by ");
   \   00000028   ........           LDR.W    R0,??DataTable8
   \   0000002C   ........           BL       printf
   1081          
   1082          		// fetch Bus Monitor config word 
   1083          		#if (HOST_BUS_INTERFACE)
   1084          			i = pH6130->MT_CONFIG_REG;
   \   00000030   ........           LDR.W    R0,??DataTable8_1
   \   00000034   0068               LDR      R0,[R0, #+0]
   \   00000036   B0F85200           LDRH     R0,[R0, #+82]
   \   0000003A   0400               MOVS     R4,R0
   1085          		#else // (HOST_SPI_INTERFACE)
   1086          			Write_6131LowReg(MAP_1, MT_CONFIG_REG, 1);
   1087          			i = Read_6131_1word(1);
   1088          		#endif
   1089          		// extended message status flags enabled? 
   1090          		if(i & 2) xmf = 1;
   \   0000003C   A007               LSLS     R0,R4,#+30
   \   0000003E   02D5               BPL.N    ??mt_last_msg_console_0
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   8DF80000           STRB     R0,[SP, #+0]
   1091          		// Simple monitor (smt)? 
   1092          		if(i & 1) {
   \                     ??mt_last_msg_console_0:
   \   00000046   E007               LSLS     R0,R4,#+31
   \   00000048   6ED5               BPL.N    ??mt_last_msg_console_1
   1093          			printf("SMT:    ");
   \   0000004A   ........           LDR.W    R0,??DataTable8_2
   \   0000004E   ........           BL       printf
   1094          			smt = 1;
   \   00000052   0120               MOVS     R0,#+1
   \   00000054   8046               MOV      R8,R0
   1095          			//--------------------------------------------------------------
   1096          			#if (HOST_BUS_INTERFACE)
   1097          				// for smt, msg block start addr for last msg is in reg 0x31 
   1098          				addr = pH6130->MT_LAST_MSG_STACK_ADDR_REG;
   \   00000056   ........           LDR.W    R0,??DataTable8_1
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   B0F86200           LDRH     R0,[R0, #+98]
   \   00000060   0600               MOVS     R6,R0
   1099          				// j = address list offset 
   1100          				j = pH6130->MT_ADDR_LIST_POINTER;
   \   00000062   ........           LDR.W    R0,??DataTable8_1
   \   00000066   0068               LDR      R0,[R0, #+0]
   \   00000068   B0F85E00           LDRH     R0,[R0, #+94]
   \   0000006C   0500               MOVS     R5,R0
   1101          
   1102          				if(!(i&2)) {
   \   0000006E   A007               LSLS     R0,R4,#+30
   \   00000070   0CD4               BMI.N    ??mt_last_msg_console_2
   1103          					// smt with 16-bit ttag 
   1104          					ttag16 = 1;
   \   00000072   0120               MOVS     R0,#+1
   \   00000074   8DF80100           STRB     R0,[SP, #+1]
   1105          					// bswo = block status word offset in cmd-stack msg block 
   1106          					bswo = 0;
   \   00000078   0020               MOVS     R0,#+0
   \   0000007A   8DF80200           STRB     R0,[SP, #+2]
   1107          					// data block pointer 
   1108          					dbp = *((unsigned int *)(0x60000000 + ((addr+2)<<1)));
   \   0000007E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000080   ........           LDR.W    R0,??DataTable8_3  ;; 0x60000004
   \   00000084   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   00000088   8246               MOV      R10,R0
   \   0000008A   08E0               B.N      ??mt_last_msg_console_3
   1109          				}
   1110          				else {
   1111          					// smt with 48-bit ttag
   1112          					// bswo = block status word offset in cmd-stack msg block 
   1113          					bswo = 3;
   \                     ??mt_last_msg_console_2:
   \   0000008C   0320               MOVS     R0,#+3
   \   0000008E   8DF80200           STRB     R0,[SP, #+2]
   1114          					// data block pointer 
   1115          					dbp = *((unsigned int *)(0x60000000 + ((addr+6)<<1)));
   \   00000092   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000094   ........           LDR.W    R0,??DataTable8_4  ;; 0x6000000c
   \   00000098   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   0000009C   8246               MOV      R10,R0
   1116          				}
   1117          
   1118          				// first msg only, last block start addr = stack start addr 
   1119          				if(addr == *((unsigned int *)(0x60000000 + (j<<1)))) {
   \                     ??mt_last_msg_console_3:
   \   0000009E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A0   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A2   6800               LSLS     R0,R5,#+1
   \   000000A4   10F1C040           ADDS     R0,R0,#+1610612736
   \   000000A8   0068               LDR      R0,[R0, #+0]
   \   000000AA   8642               CMP      R6,R0
   \   000000AC   0CD1               BNE.N    ??mt_last_msg_console_4
   1120          					// for first msg, the number of words stored in the
   1121          					// data stack = next data store addr - stack start addr 
   1122          					ndw = *((unsigned int *)(0x60000000 + ((j+5)<<1))) \
   1123          						- *((unsigned int *)(0x60000000 + ((j+4)<<1)));
   \   000000AE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B0   ........           LDR.W    R0,??DataTable8_5  ;; 0x6000000a
   \   000000B4   50F81500           LDR      R0,[R0, R5, LSL #+1]
   \   000000B8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000BA   ........           LDR.W    R1,??DataTable8_6  ;; 0x60000008
   \   000000BE   51F81510           LDR      R1,[R1, R5, LSL #+1]
   \   000000C2   401A               SUBS     R0,R0,R1
   \   000000C4   8146               MOV      R9,R0
   \   000000C6   6AE0               B.N      ??mt_last_msg_console_5
   1124          				}
   1125          				else {
   1126          					h = *((unsigned int *)(0x60000000 + ((j+1)<<1)));
   \                     ??mt_last_msg_console_4:
   \   000000C8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000CA   ........           LDR.W    R0,??DataTable8_7  ;; 0x60000002
   \   000000CE   50F81500           LDR      R0,[R0, R5, LSL #+1]
   \   000000D2   ADF80400           STRH     R0,[SP, #+4]
   1127          					// h = offset for next store addr in cmd stack block:
   1128          					// examine cmd word, detect both cases for broadcast mode codes 
   1129          					// w/o data, for these, no words are stored in the data stack
   1130          					m = *((unsigned int *)(0x60000000 + ((h-1)<<1)));
   \   000000D6   BDF80400           LDRH     R0,[SP, #+4]
   \   000000DA   ........           LDR.W    R1,??DataTable8_8  ;; 0x5ffffffe
   \   000000DE   51F81000           LDR      R0,[R1, R0, LSL #+1]
   \   000000E2   8346               MOV      R11,R0
   1131          					if     (( m & 0xFFE0) >> 5 == 0x7E0) ndw = 0;
   \   000000E4   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000000E8   5FEA5B10           LSRS     R0,R11,#+5
   \   000000EC   B0F5FC6F           CMP      R0,#+2016
   \   000000F0   02D1               BNE.N    ??mt_last_msg_console_6
   \   000000F2   0020               MOVS     R0,#+0
   \   000000F4   8146               MOV      R9,R0
   \   000000F6   52E0               B.N      ??mt_last_msg_console_5
   1132          					else if(( m & 0xFFE0) >> 5 == 0x7FF) ndw = 0;
   \                     ??mt_last_msg_console_6:
   \   000000F8   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000000FC   5FEA5B10           LSRS     R0,R11,#+5
   \   00000100   40F2FF71           MOVW     R1,#+2047
   \   00000104   8842               CMP      R0,R1
   \   00000106   02D1               BNE.N    ??mt_last_msg_console_7
   \   00000108   0020               MOVS     R0,#+0
   \   0000010A   8146               MOV      R9,R0
   \   0000010C   47E0               B.N      ??mt_last_msg_console_5
   1133          					else {
   1134          						// at least 1 word stored in data stack for last msg 
   1135          						// use next d-stack store address to determine number of d-stack words  
   1136          						h = *((unsigned int *)(0x60000000 + ((j+5)<<1)));
   \                     ??mt_last_msg_console_7:
   \   0000010E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000110   ........           LDR.W    R0,??DataTable8_5  ;; 0x6000000a
   \   00000114   50F81500           LDR      R0,[R0, R5, LSL #+1]
   \   00000118   ADF80400           STRH     R0,[SP, #+4]
   1137          						ndw = h - dbp;
   \   0000011C   BDF80400           LDRH     R0,[SP, #+4]
   \   00000120   B0EB0A00           SUBS     R0,R0,R10
   \   00000124   8146               MOV      R9,R0
   \   00000126   3AE0               B.N      ??mt_last_msg_console_5
   1138          					}
   1139          				}
   1140          			//--------------------------------------------------------------
   1141          			#else // (HOST_SPI_INTERFACE)
   1142          				// for smt, msg block start addr for last msg is in reg 0x31 
   1143          				Write_6131LowReg(MAP_1, MT_LAST_MSG_STACK_ADDR_REG, 1);
   1144          				addr = Read_6131_1word(1);
   1145          				// j = address list offset 
   1146          				Write_6131LowReg(MAP_1, MT_ADDR_LIST_POINTER, 1);
   1147          				j = Read_6131_1word(1);
   1148          
   1149          				if(!(i&2)) {
   1150          					// smt with 16-bit ttag 
   1151          					ttag16 = 1;
   1152          					// bswo = block status word offset in cmd-stack msg block 
   1153          					bswo = 0;
   1154          					// data block pointer
   1155          					Write_6131LowReg(MAP_1, addr+2, 1);
   1156          					dbp = Read_6131_1word(1);
   1157          				}
   1158          				else {
   1159          					// smt with 48-bit ttag
   1160          					// bswo = block status word offset in cmd-stack msg block 
   1161          					bswo = 3;
   1162          					// data block pointer 
   1163          					Write_6131LowReg(MAP_1, addr+6, 1);
   1164          					dbp = Read_6131_1word(1);
   1165          				}
   1166          
   1167          				// first msg only, last block start addr "j" = stack start addr "addr"
   1168          				Write_6131LowReg(MAP_1, j, 1);
   1169          				if(addr == Read_6131_1word(1)) {
   1170          					// for first msg, the number of words stored in the
   1171          					// data stack = next data store addr - stack start addr 
   1172          					Write_6131LowReg(MAP_1, (j+4), 1);
   1173          					// read 
   1174          					h = Read_6131_1word(1);
   1175          					// read next word and subtract worg just read
   1176          					ndw = (Read_6131_1word(1)) - h;
   1177          				}
   1178          				else {
   1179          					Write_6131LowReg(MAP_1, (j+1), 1);
   1180          					h = Read_6131_1word(1);
   1181          					// h = offset for next store addr in cmd stack block:
   1182          					// examine cmd word, detect both cases for broadcast mode codes without data.
   1183          					// for these, no words are stored in the data stack 
   1184          					Write_6131LowReg(MAP_1, (h-1), 1);
   1185          					m = Read_6131_1word(1);
   1186          					if     (( m & 0xFFE0) >> 5 == 0x7E0) ndw = 0;
   1187          					else if(( m & 0xFFE0) >> 5 == 0x7FF) ndw = 0;
   1188          					else {
   1189          						// at least 1 word was stored in data stack for last msg 
   1190          						// use next data stack store address to determine number of d-stack words
   1191          						Write_6131LowReg(MAP_1, (j+5), 1);						
   1192          						h = Read_6131_1word(1);
   1193          						ndw = h - dbp;
   1194          					}
   1195          				}
   1196          			#endif // (HOST_SPI_INTERFACE)
   1197          			//--------------------------------------------------------------
   1198          		}	// end smt 
   1199          
   1200          
   1201          		else if(i & 8) {
   \                     ??mt_last_msg_console_1:
   \   00000128   2007               LSLS     R0,R4,#+28
   \   0000012A   1AD5               BPL.N    ??mt_last_msg_console_8
   1202          			// IMT with auto header/trailer OFF 
   1203          			printf("IMT:   ");
   \   0000012C   ........           LDR.W    R0,??DataTable8_9
   \   00000130   ........           BL       printf
   1204          			bswo = 4;
   \   00000134   0420               MOVS     R0,#+4
   \   00000136   8DF80200           STRB     R0,[SP, #+2]
   1205          			// the last msg block addr is in register 0x31 
   1206          			#if (HOST_BUS_INTERFACE)
   1207          				addr =pH6130->MT_LAST_MSG_STACK_ADDR_REG;
   \   0000013A   ........           LDR.W    R0,??DataTable8_1
   \   0000013E   0068               LDR      R0,[R0, #+0]
   \   00000140   B0F86200           LDRH     R0,[R0, #+98]
   \   00000144   0600               MOVS     R6,R0
   1208          			#else // (HOST_SPI_INTERFACE)
   1209          				Write_6131LowReg(MAP_1, MT_LAST_MSG_STACK_ADDR_REG, 1);
   1210          				addr = Read_6131_1word(1);
   1211          			#endif
   1212          			// the stored data starts at the 8th word  
   1213          			dbp = addr+7;
   \   00000146   F01D               ADDS     R0,R6,#+7
   \   00000148   8246               MOV      R10,R0
   1214          			// # of msg bytes in word 6
   1215          			#if (HOST_BUS_INTERFACE)
   1216          				ndw = *((unsigned int *)(0x60000000 + ((addr+6)<<1)));
   \   0000014A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000014C   ........           LDR.W    R0,??DataTable8_4  ;; 0x6000000c
   \   00000150   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   00000154   8146               MOV      R9,R0
   1217          			#else // (HOST_SPI_INTERFACE)
   1218          				Write_6131LowReg(MAP_1, addr+6, 1);
   1219          				ndw = Read_6131_1word(1);
   1220          			#endif
   1221          			// convert bytes to words
   1222          			ndw = ndw/2;
   \   00000156   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000015A   0220               MOVS     R0,#+2
   \   0000015C   99FBF0F9           SDIV     R9,R9,R0
   \   00000160   1DE0               B.N      ??mt_last_msg_console_5
   1223          			
   1224          		}
   1225          		else  {  
   1226          			// IMT with auto header/trailer ON 
   1227          			printf("IMT:   ");
   \                     ??mt_last_msg_console_8:
   \   00000162   ........           LDR.W    R0,??DataTable8_9
   \   00000166   ........           BL       printf
   1228          			bswo = 4;
   \   0000016A   0420               MOVS     R0,#+4
   \   0000016C   8DF80200           STRB     R0,[SP, #+2]
   1229          			// last msg block addr is stored in 5th word of MT addr list 
   1230          			#if (HOST_BUS_INTERFACE)
   1231          				i = 4 + pH6130->MT_ADDR_LIST_POINTER;
   \   00000170   ........           LDR.W    R0,??DataTable8_1
   \   00000174   0068               LDR      R0,[R0, #+0]
   \   00000176   B0F85E00           LDRH     R0,[R0, #+94]
   \   0000017A   001D               ADDS     R0,R0,#+4
   \   0000017C   0400               MOVS     R4,R0
   1232          				addr = *((unsigned int *)(0x60000000 + (i<<1)));
   \   0000017E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000180   6000               LSLS     R0,R4,#+1
   \   00000182   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000186   0068               LDR      R0,[R0, #+0]
   \   00000188   0600               MOVS     R6,R0
   1233          				// the stored data starts at the 8th word  
   1234          				dbp = addr+7;
   \   0000018A   F01D               ADDS     R0,R6,#+7
   \   0000018C   8246               MOV      R10,R0
   1235          				// # of msg bytes in word 6, convert to words (div-by-2)
   1236          				ndw = (*((unsigned int *)(0x60000000 + (addr+6)<<1)))/2;
   \   0000018E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000190   06F1C040           ADD      R0,R6,#+1610612736
   \   00000194   801D               ADDS     R0,R0,#+6
   \   00000196   4000               LSLS     R0,R0,#+1
   \   00000198   0068               LDR      R0,[R0, #+0]
   \   0000019A   4008               LSRS     R0,R0,#+1
   \   0000019C   8146               MOV      R9,R0
   1237          				
   1238          			#else // (HOST_SPI_INTERFACE)
   1239          				Write_6131LowReg(MAP_1, MT_ADDR_LIST_POINTER, 1);
   1240          				i = 4 + Read_6131_1word(1);
   1241          				Write_6131LowReg(MAP_1, i, 1);
   1242          				addr = Read_6131_1word(1);
   1243          				// the stored data starts at the 8th word  
   1244          				dbp = addr+7;
   1245          				// # of msg bytes in word 6, convert to words (div-by-2)
   1246          				Write_6131LowReg(MAP_1, addr+6, 1);
   1247          				ndw = (Read_6131_1word(1))/2;
   1248          			#endif
   1249          		}
   1250          
   1251          		// read Block Status Word 
   1252          		#if (HOST_BUS_INTERFACE)
   1253          			i = *((unsigned int *)(0x60000000 + ((addr+bswo)<<1)));
   \                     ??mt_last_msg_console_5:
   \   0000019E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000001A0   9DF80200           LDRB     R0,[SP, #+2]
   \   000001A4   8019               ADDS     R0,R0,R6
   \   000001A6   4000               LSLS     R0,R0,#+1
   \   000001A8   10F1C040           ADDS     R0,R0,#+1610612736
   \   000001AC   0068               LDR      R0,[R0, #+0]
   \   000001AE   0400               MOVS     R4,R0
   1254          		#else // (HOST_SPI_INTERFACE)
   1255          			Write_6131LowReg(MAP_1, (addr+bswo), 1);
   1256          			i = Read_6131_1word(1);
   1257          		#endif
   1258          
   1259          		printf("Block Status Word = 0x%.2X%.2X...\n\n\r", (char)(i>>8),(char)i);
   \   000001B0   2200               MOVS     R2,R4
   \   000001B2   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001B4   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000001B6   210A               LSRS     R1,R4,#+8
   \   000001B8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001BA   ........           LDR.W    R0,??DataTable8_10
   \   000001BE   ........           BL       printf
   1260          		if(!smt) printf("* means IMT BSW reserved bit:\n\n\r");
   \   000001C2   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001C6   B8F1000F           CMP      R8,#+0
   \   000001CA   03D1               BNE.N    ??mt_last_msg_console_9
   \   000001CC   ........           LDR.W    R0,??DataTable8_11
   \   000001D0   ........           BL       printf
   1261          		printf("           * Start of Msg ");
   \                     ??mt_last_msg_console_9:
   \   000001D4   ........           LDR.W    R0,??DataTable8_12
   \   000001D8   ........           BL       printf
   1262          		if(!xmf || !smt) printf("n/a    ");
   \   000001DC   9DF80000           LDRB     R0,[SP, #+0]
   \   000001E0   0028               CMP      R0,#+0
   \   000001E2   04D0               BEQ.N    ??mt_last_msg_console_10
   \   000001E4   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001E8   B8F1000F           CMP      R8,#+0
   \   000001EC   04D1               BNE.N    ??mt_last_msg_console_11
   \                     ??mt_last_msg_console_10:
   \   000001EE   ........           LDR.W    R0,??DataTable8_13
   \   000001F2   ........           BL       printf
   \   000001F6   0AE0               B.N      ??mt_last_msg_console_12
   1263          		else if(i & (1<<14)) printf("= 1    ");
   \                     ??mt_last_msg_console_11:
   \   000001F8   6004               LSLS     R0,R4,#+17
   \   000001FA   04D5               BPL.N    ??mt_last_msg_console_13
   \   000001FC   ........           LDR.W    R0,??DataTable8_14
   \   00000200   ........           BL       printf
   \   00000204   03E0               B.N      ??mt_last_msg_console_12
   1264          		else printf("= 0    ");
   \                     ??mt_last_msg_console_13:
   \   00000206   ........           LDR.W    R0,??DataTable8_16
   \   0000020A   ........           BL       printf
   1265          		printf("Bus Used = ");
   \                     ??mt_last_msg_console_12:
   \   0000020E   ........           LDR.W    R0,??DataTable8_17
   \   00000212   ........           BL       printf
   1266          		if(i & (1<<13)) printf("B\n\n\r");
   \   00000216   A004               LSLS     R0,R4,#+18
   \   00000218   04D5               BPL.N    ??mt_last_msg_console_14
   \   0000021A   ........           LDR.W    R0,??DataTable8_19
   \   0000021E   ........           BL       printf
   \   00000222   03E0               B.N      ??mt_last_msg_console_15
   1267          		else printf("A\n\n\r");
   \                     ??mt_last_msg_console_14:
   \   00000224   ........           LDR.W    R0,??DataTable8_20
   \   00000228   ........           BL       printf
   1268          
   1269          		printf("             * End of Msg ");
   \                     ??mt_last_msg_console_15:
   \   0000022C   ........           LDR.W    R0,??DataTable8_21
   \   00000230   ........           BL       printf
   1270          		if(!xmf || !smt) printf("n/a    ");
   \   00000234   9DF80000           LDRB     R0,[SP, #+0]
   \   00000238   0028               CMP      R0,#+0
   \   0000023A   04D0               BEQ.N    ??mt_last_msg_console_16
   \   0000023C   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000240   B8F1000F           CMP      R8,#+0
   \   00000244   04D1               BNE.N    ??mt_last_msg_console_17
   \                     ??mt_last_msg_console_16:
   \   00000246   ........           LDR.W    R0,??DataTable8_13
   \   0000024A   ........           BL       printf
   \   0000024E   0AE0               B.N      ??mt_last_msg_console_18
   1271          		else if(i & (1<<15)) printf("= 1    ");
   \                     ??mt_last_msg_console_17:
   \   00000250   2004               LSLS     R0,R4,#+16
   \   00000252   04D5               BPL.N    ??mt_last_msg_console_19
   \   00000254   ........           LDR.W    R0,??DataTable8_14
   \   00000258   ........           BL       printf
   \   0000025C   03E0               B.N      ??mt_last_msg_console_18
   1272          		else printf("= 0    ");
   \                     ??mt_last_msg_console_19:
   \   0000025E   ........           LDR.W    R0,??DataTable8_16
   \   00000262   ........           BL       printf
   1273          		printf("Error Occurred = ");
   \                     ??mt_last_msg_console_18:
   \   00000266   ........           LDR.W    R0,??DataTable8_22
   \   0000026A   ........           BL       printf
   1274          		if(i & (1<<12)) printf("1\n\n\r");
   \   0000026E   E004               LSLS     R0,R4,#+19
   \   00000270   04D5               BPL.N    ??mt_last_msg_console_20
   \   00000272   ........           LDR.W    R0,??DataTable8_23
   \   00000276   ........           BL       printf
   \   0000027A   03E0               B.N      ??mt_last_msg_console_21
   1275          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_20:
   \   0000027C   ........           LDR.W    R0,??DataTable8_24
   \   00000280   ........           BL       printf
   1276          
   1277          		printf("        * Good Data Block ");
   \                     ??mt_last_msg_console_21:
   \   00000284   ........           LDR.W    R0,??DataTable8_25
   \   00000288   ........           BL       printf
   1278          		if(!xmf) printf("n/a    ");
   \   0000028C   9DF80000           LDRB     R0,[SP, #+0]
   \   00000290   0028               CMP      R0,#+0
   \   00000292   04D1               BNE.N    ??mt_last_msg_console_22
   \   00000294   ........           LDR.W    R0,??DataTable8_13
   \   00000298   ........           BL       printf
   \   0000029C   0AE0               B.N      ??mt_last_msg_console_23
   1279          		else if(i & (1<<8)) printf("= 1    ");
   \                     ??mt_last_msg_console_22:
   \   0000029E   E005               LSLS     R0,R4,#+23
   \   000002A0   04D5               BPL.N    ??mt_last_msg_console_24
   \   000002A2   ........           LDR.W    R0,??DataTable8_14
   \   000002A6   ........           BL       printf
   \   000002AA   03E0               B.N      ??mt_last_msg_console_23
   1280          		else printf("= 0    ");
   \                     ??mt_last_msg_console_24:
   \   000002AC   ........           LDR.W    R0,??DataTable8_16
   \   000002B0   ........           BL       printf
   1281          		printf("Response Timeout = ");
   \                     ??mt_last_msg_console_23:
   \   000002B4   ........           LDR.W    R0,??DataTable8_26
   \   000002B8   ........           BL       printf
   1282          		if(i & (1<<9)) printf("1\n\n\r");
   \   000002BC   A005               LSLS     R0,R4,#+22
   \   000002BE   04D5               BPL.N    ??mt_last_msg_console_25
   \   000002C0   ........           LDR.W    R0,??DataTable8_23
   \   000002C4   ........           BL       printf
   \   000002C8   03E0               B.N      ??mt_last_msg_console_26
   1283          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_25:
   \   000002CA   ........           LDR.W    R0,??DataTable8_24
   \   000002CE   ........           BL       printf
   1284          
   1285          		printf("* SMT Data Stack Rollover ");
   \                     ??mt_last_msg_console_26:
   \   000002D2   ........           LDR.W    R0,??DataTable8_27
   \   000002D6   ........           BL       printf
   1286          		if(!xmf) printf("n/a    ");
   \   000002DA   9DF80000           LDRB     R0,[SP, #+0]
   \   000002DE   0028               CMP      R0,#+0
   \   000002E0   04D1               BNE.N    ??mt_last_msg_console_27
   \   000002E2   ........           LDR.W    R0,??DataTable8_13
   \   000002E6   ........           BL       printf
   \   000002EA   0AE0               B.N      ??mt_last_msg_console_28
   1287          		else if(i & (1<<7)) printf("= 1    ");
   \                     ??mt_last_msg_console_27:
   \   000002EC   2006               LSLS     R0,R4,#+24
   \   000002EE   04D5               BPL.N    ??mt_last_msg_console_29
   \   000002F0   ........           LDR.W    R0,??DataTable8_14
   \   000002F4   ........           BL       printf
   \   000002F8   03E0               B.N      ??mt_last_msg_console_28
   1288          		else printf("= 0    ");
   \                     ??mt_last_msg_console_29:
   \   000002FA   ........           LDR.W    R0,??DataTable8_16
   \   000002FE   ........           BL       printf
   1289          		printf("Illegal Gap Error = ");
   \                     ??mt_last_msg_console_28:
   \   00000302   ........           LDR.W    R0,??DataTable8_28
   \   00000306   ........           BL       printf
   1290          		if(i & (1<<10)) printf("1\n\n\r");
   \   0000030A   6005               LSLS     R0,R4,#+21
   \   0000030C   04D5               BPL.N    ??mt_last_msg_console_30
   \   0000030E   ........           LDR.W    R0,??DataTable8_23
   \   00000312   ........           BL       printf
   \   00000316   03E0               B.N      ??mt_last_msg_console_31
   1291          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_30:
   \   00000318   ........           LDR.W    R0,??DataTable8_24
   \   0000031C   ........           BL       printf
   1292          
   1293          		printf(" * Cmd Word Content Error ");
   \                     ??mt_last_msg_console_31:
   \   00000320   ........           LDR.W    R0,??DataTable8_29
   \   00000324   ........           BL       printf
   1294          		if(!xmf) printf("n/a    ");
   \   00000328   9DF80000           LDRB     R0,[SP, #+0]
   \   0000032C   0028               CMP      R0,#+0
   \   0000032E   04D1               BNE.N    ??mt_last_msg_console_32
   \   00000330   ........           LDR.W    R0,??DataTable8_13
   \   00000334   ........           BL       printf
   \   00000338   0AE0               B.N      ??mt_last_msg_console_33
   1295          		else if(i & 1) printf("= 1    ");
   \                     ??mt_last_msg_console_32:
   \   0000033A   E007               LSLS     R0,R4,#+31
   \   0000033C   04D5               BPL.N    ??mt_last_msg_console_34
   \   0000033E   ........           LDR.W    R0,??DataTable8_14
   \   00000342   ........           BL       printf
   \   00000346   03E0               B.N      ??mt_last_msg_console_33
   1296          		else printf("= 0    ");
   \                     ??mt_last_msg_console_34:
   \   00000348   ........           LDR.W    R0,??DataTable8_16
   \   0000034C   ........           BL       printf
   1297          		printf("Word Count Error = ");
   \                     ??mt_last_msg_console_33:
   \   00000350   ........           LDR.W    R0,??DataTable8_30
   \   00000354   ........           BL       printf
   1298          		if(i & (1<<5)) printf("1\n\n\r");
   \   00000358   A006               LSLS     R0,R4,#+26
   \   0000035A   04D5               BPL.N    ??mt_last_msg_console_35
   \   0000035C   ........           LDR.W    R0,??DataTable8_23
   \   00000360   ........           BL       printf
   \   00000364   03E0               B.N      ??mt_last_msg_console_36
   1299          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_35:
   \   00000366   ........           LDR.W    R0,??DataTable8_24
   \   0000036A   ........           BL       printf
   1300          
   1301          		printf("* RT-RT Gap,Sync,Addr Err ");
   \                     ??mt_last_msg_console_36:
   \   0000036E   ........           LDR.W    R0,??DataTable8_31
   \   00000372   ........           BL       printf
   1302          		if(!xmf) printf("n/a    ");
   \   00000376   9DF80000           LDRB     R0,[SP, #+0]
   \   0000037A   0028               CMP      R0,#+0
   \   0000037C   04D1               BNE.N    ??mt_last_msg_console_37
   \   0000037E   ........           LDR.W    R0,??DataTable8_13
   \   00000382   ........           BL       printf
   \   00000386   0AE0               B.N      ??mt_last_msg_console_38
   1303          		else if(i & 4) printf("= 1    ");
   \                     ??mt_last_msg_console_37:
   \   00000388   6007               LSLS     R0,R4,#+29
   \   0000038A   04D5               BPL.N    ??mt_last_msg_console_39
   \   0000038C   ........           LDR.W    R0,??DataTable8_14
   \   00000390   ........           BL       printf
   \   00000394   03E0               B.N      ??mt_last_msg_console_38
   1304          		else printf("= 0    ");
   \                     ??mt_last_msg_console_39:
   \   00000396   ........           LDR.W    R0,??DataTable8_16
   \   0000039A   ........           BL       printf
   1305          
   1306          		if(!(i & (1<<11))) {
   \                     ??mt_last_msg_console_38:
   \   0000039E   2005               LSLS     R0,R4,#+20
   \   000003A0   06D4               BMI.N    ??mt_last_msg_console_40
   1307          			rtrt = 0;
   \   000003A2   0020               MOVS     R0,#+0
   \   000003A4   8DF80300           STRB     R0,[SP, #+3]
   1308          			printf("Non-");
   \   000003A8   ........           LDR.W    R0,??DataTable9_2
   \   000003AC   ........           BL       printf
   1309          		}
   1310          		printf("RT-RT Cmd: ");
   \                     ??mt_last_msg_console_40:
   \   000003B0   ........           LDR.W    R0,??DataTable9_3
   \   000003B4   ........           BL       printf
   1311          		// fetch & printf CW1 
   1312          		if(!smt)        m = 7; 
   \   000003B8   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000003BC   B8F1000F           CMP      R8,#+0
   \   000003C0   02D1               BNE.N    ??mt_last_msg_console_41
   \   000003C2   0720               MOVS     R0,#+7
   \   000003C4   8346               MOV      R11,R0
   \   000003C6   08E0               B.N      ??mt_last_msg_console_42
   1313          		else if(ttag16) m = 3; 
   \                     ??mt_last_msg_console_41:
   \   000003C8   9DF80100           LDRB     R0,[SP, #+1]
   \   000003CC   0028               CMP      R0,#+0
   \   000003CE   02D0               BEQ.N    ??mt_last_msg_console_43
   \   000003D0   0320               MOVS     R0,#+3
   \   000003D2   8346               MOV      R11,R0
   \   000003D4   01E0               B.N      ??mt_last_msg_console_42
   1314          		else            m = 7;
   \                     ??mt_last_msg_console_43:
   \   000003D6   0720               MOVS     R0,#+7
   \   000003D8   8346               MOV      R11,R0
   1315          		#if (HOST_BUS_INTERFACE)
   1316          			j = *((unsigned int *)(0x60000000 + ((addr+m)<<1)));
   \                     ??mt_last_msg_console_42:
   \   000003DA   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000003DC   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000003E0   1BEB0600           ADDS     R0,R11,R6
   \   000003E4   4000               LSLS     R0,R0,#+1
   \   000003E6   10F1C040           ADDS     R0,R0,#+1610612736
   \   000003EA   0068               LDR      R0,[R0, #+0]
   \   000003EC   0500               MOVS     R5,R0
   1317          		#else // (HOST_SPI_INTERFACE)
   1318          			Write_6131LowReg(MAP_1, addr+m, 1);
   1319          			j = Read_6131_1word(1);
   1320          		#endif
   1321          		printf("0x%.2X%.2X", (char)(j>>8),(char)j);
   \   000003EE   2A00               MOVS     R2,R5
   \   000003F0   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003F2   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000003F4   290A               LSRS     R1,R5,#+8
   \   000003F6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003F8   ........           LDR.W    R0,??DataTable9_4
   \   000003FC   ........           BL       printf
   1322          
   1323          		if(rtrt) {
   \   00000400   9DF80300           LDRB     R0,[SP, #+3]
   \   00000404   0028               CMP      R0,#+0
   \   00000406   1CD0               BEQ.N    ??mt_last_msg_console_44
   1324          			// fetch & printf CW2 
   1325          			#if (HOST_BUS_INTERFACE)
   1326          				if(!smt) j = *((unsigned int *)(0x60000000 + ((addr+8)<<1)));
   \   00000408   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000040C   B8F1000F           CMP      R8,#+0
   \   00000410   06D1               BNE.N    ??mt_last_msg_console_45
   \   00000412   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000414   ........           LDR.W    R0,??DataTable9_5  ;; 0x60000010
   \   00000418   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   0000041C   0500               MOVS     R5,R0
   \   0000041E   07E0               B.N      ??mt_last_msg_console_46
   1327          				else j = *((unsigned int *)(0x60000000 + (dbp<<1)));
   \                     ??mt_last_msg_console_45:
   \   00000420   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000424   5FEA4A00           LSLS     R0,R10,#+1
   \   00000428   10F1C040           ADDS     R0,R0,#+1610612736
   \   0000042C   0068               LDR      R0,[R0, #+0]
   \   0000042E   0500               MOVS     R5,R0
   1328          			#else // (HOST_SPI_INTERFACE)
   1329          				if(!smt) Write_6131LowReg(MAP_1, addr+8, 1);
   1330          				else     Write_6131LowReg(MAP_1, dbp,    1);
   1331          				j = Read_6131_1word(1);
   1332          			#endif
   1333          			printf("0x%.2X%.2X", (char)(j>>8),(char)j);
   \                     ??mt_last_msg_console_46:
   \   00000430   2A00               MOVS     R2,R5
   \   00000432   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000434   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000436   290A               LSRS     R1,R5,#+8
   \   00000438   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000043A   ........           LDR.W    R0,??DataTable9_4
   \   0000043E   ........           BL       printf
   1334          		}
   1335          
   1336          		printf("\n\n\r * RT-RT Cmd Word 2 Error ");
   \                     ??mt_last_msg_console_44:
   \   00000442   ........           LDR.W    R0,??DataTable9_6
   \   00000446   ........           BL       printf
   1337          		if(!xmf) printf("n/a    ");
   \   0000044A   9DF80000           LDRB     R0,[SP, #+0]
   \   0000044E   0028               CMP      R0,#+0
   \   00000450   04D1               BNE.N    ??mt_last_msg_console_47
   \   00000452   ........           LDR.W    R0,??DataTable8_13
   \   00000456   ........           BL       printf
   \   0000045A   0AE0               B.N      ??mt_last_msg_console_48
   1338          		else if(i & 2) printf("= 1    ");
   \                     ??mt_last_msg_console_47:
   \   0000045C   A007               LSLS     R0,R4,#+30
   \   0000045E   04D5               BPL.N    ??mt_last_msg_console_49
   \   00000460   ........           LDR.W    R0,??DataTable8_14
   \   00000464   ........           BL       printf
   \   00000468   03E0               B.N      ??mt_last_msg_console_48
   1339          		else printf("= 0    ");
   \                     ??mt_last_msg_console_49:
   \   0000046A   ........           LDR.W    R0,??DataTable8_16
   \   0000046E   ........           BL       printf
   1340          
   1341          		printf("Timetag = ");
   \                     ??mt_last_msg_console_48:
   \   00000472   ........           LDR.W    R0,??DataTable9_7
   \   00000476   ........           BL       printf
   1342          		if(smt & ttag16) {	// 16-bit ttag
   \   0000047A   9DF80110           LDRB     R1,[SP, #+1]
   \   0000047E   18EA010F           TST      R8,R1
   \   00000482   0FD0               BEQ.N    ??mt_last_msg_console_50
   1343          			#if (HOST_BUS_INTERFACE)
   1344          				i = *((unsigned int *)(0x60000000 + ((addr+1)<<1)));
   \   00000484   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000486   ........           LDR.W    R0,??DataTable8_7  ;; 0x60000002
   \   0000048A   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   0000048E   0400               MOVS     R4,R0
   1345          			#else // (HOST_SPI_INTERFACE)
   1346          				Write_6131LowReg(MAP_1, addr+1, 1);
   1347          				i = Read_6131_1word(1);
   1348          			#endif
   1349          			printf("0x%.2X%.2X\n\n\r", (char)(i>>8),(char)i);
   \   00000490   2200               MOVS     R2,R4
   \   00000492   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000494   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000496   210A               LSRS     R1,R4,#+8
   \   00000498   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000049A   ........           LDR.W    R0,??DataTable9_8
   \   0000049E   ........           BL       printf
   \   000004A2   32E0               B.N      ??mt_last_msg_console_51
   1350          		}
   1351          		else {			// 48-bit ttag
   1352          			#if (HOST_BUS_INTERFACE)
   1353          				h = *((unsigned int *)(0x60000000 + ((addr+2)<<1)));
   \                     ??mt_last_msg_console_50:
   \   000004A4   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004A6   ........           LDR.W    R0,??DataTable8_3  ;; 0x60000004
   \   000004AA   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   000004AE   ADF80400           STRH     R0,[SP, #+4]
   1354          				i = *((unsigned int *)(0x60000000 + ((addr+1)<<1)));
   \   000004B2   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004B4   ........           LDR.W    R0,??DataTable8_7  ;; 0x60000002
   \   000004B8   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   000004BC   0400               MOVS     R4,R0
   1355          				m = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   000004BE   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004C0   7000               LSLS     R0,R6,#+1
   \   000004C2   10F1C040           ADDS     R0,R0,#+1610612736
   \   000004C6   0068               LDR      R0,[R0, #+0]
   \   000004C8   8346               MOV      R11,R0
   1356          			#else // (HOST_SPI_INTERFACE)
   1357          				// using MAP auto-increment
   1358          				Write_6131LowReg(MAP_1, addr, 1);
   1359          				m = Read_6131_1word(1);
   1360          				i = Read_6131_1word(1);
   1361          				h = Read_6131_1word(1);
   1362          			#endif
   1363          			printf("0x%.2X%.2X", (char)(h>>8),(char)h);
   \   000004CA   BDF80420           LDRH     R2,[SP, #+4]
   \   000004CE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004D0   BDF80400           LDRH     R0,[SP, #+4]
   \   000004D4   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000004D6   010A               LSRS     R1,R0,#+8
   \   000004D8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000004DA   ........           LDR.W    R0,??DataTable9_4
   \   000004DE   ........           BL       printf
   1364          			printf("%.2X%.2X", (char)(i>>8),(char)i);
   \   000004E2   2200               MOVS     R2,R4
   \   000004E4   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004E6   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000004E8   210A               LSRS     R1,R4,#+8
   \   000004EA   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000004EC   ........           LDR.W    R0,??DataTable9_9
   \   000004F0   ........           BL       printf
   1365          			printf("%.2X%.2X\n\n\r", (char)(m>>8),(char)m);
   \   000004F4   5A46               MOV      R2,R11
   \   000004F6   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004F8   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000004FC   5FEA1B21           LSRS     R1,R11,#+8
   \   00000500   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000502   ........           LDR.W    R0,??DataTable9_10
   \   00000506   ........           BL       printf
   1366          		}
   1367          		
   1368          		if(smt) {
   \                     ??mt_last_msg_console_51:
   \   0000050A   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000050E   B8F1000F           CMP      R8,#+0
   \   00000512   21D0               BEQ.N    ??mt_last_msg_console_52
   1369          			if(!ndw) printf("No Words Stored in Data Stack    (Broadcast Mode Code w/o Data)\n\n\r");
   \   00000514   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000518   B9F1000F           CMP      R9,#+0
   \   0000051C   04D1               BNE.N    ??mt_last_msg_console_53
   \   0000051E   ........           LDR.W    R0,??DataTable9_11
   \   00000522   ........           BL       printf
   \   00000526   39E0               B.N      ??mt_last_msg_console_54
   1370          			else {
   1371          				if(ndw<9) printf(" ");
   \                     ??mt_last_msg_console_53:
   \   00000528   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000052C   B9F1090F           CMP      R9,#+9
   \   00000530   02D2               BCS.N    ??mt_last_msg_console_55
   \   00000532   ....               ADR.N    R0,??DataTable7_2  ;; " "
   \   00000534   ........           BL       printf
   1372          				printf("Msg Words 2-%d at Addr 0x%.2X%.2X   ", ndw+1, (char)(dbp>>8),(char)dbp);
   \                     ??mt_last_msg_console_55:
   \   00000538   5346               MOV      R3,R10
   \   0000053A   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000053C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000540   5FEA1A22           LSRS     R2,R10,#+8
   \   00000544   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000546   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000054A   19F10101           ADDS     R1,R9,#+1
   \   0000054E   ........           LDR.W    R0,??DataTable9_12
   \   00000552   ........           BL       printf
   \   00000556   21E0               B.N      ??mt_last_msg_console_54
   1373          			}
   1374          		}
   1375          
   1376          		else {
   1377          			if(ndw<10) printf("  %d",ndw);
   \                     ??mt_last_msg_console_52:
   \   00000558   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000055C   B9F10A0F           CMP      R9,#+10
   \   00000560   07D2               BCS.N    ??mt_last_msg_console_56
   \   00000562   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000566   4946               MOV      R1,R9
   \   00000568   ........           LDR.W    R0,??DataTable9_13
   \   0000056C   ........           BL       printf
   \   00000570   05E0               B.N      ??mt_last_msg_console_57
   1378          			else printf(" %d",ndw);
   \                     ??mt_last_msg_console_56:
   \   00000572   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000576   4946               MOV      R1,R9
   \   00000578   ....               ADR.N    R0,??DataTable7_4  ;; " %d"
   \   0000057A   ........           BL       printf
   1379          			printf(" Msg Words at Addr: ");
   \                     ??mt_last_msg_console_57:
   \   0000057E   ........           LDR.W    R0,??DataTable9_14
   \   00000582   ........           BL       printf
   1380          			printf("0x%.2X%.2X   ", (char)(dbp>>8),(char)dbp);
   \   00000586   5246               MOV      R2,R10
   \   00000588   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000058A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000058E   5FEA1A21           LSRS     R1,R10,#+8
   \   00000592   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000594   ........           LDR.W    R0,??DataTable9_15
   \   00000598   ........           BL       printf
   1381          		}
   1382          		if(ndw) {
   \                     ??mt_last_msg_console_54:
   \   0000059C   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000005A0   B9F1000F           CMP      R9,#+0
   \   000005A4   0FD0               BEQ.N    ??mt_last_msg_console_58
   1383          			#if (HOST_BUS_INTERFACE)
   1384          				dbp = dbp<<1;
   \   000005A6   5FEA4A0A           LSLS     R10,R10,#+1
   1385          				printf("Bus Debug Addr: 0x6000%.2X%.2X", (char)(dbp>>8),(char)(dbp));
   \   000005AA   5246               MOV      R2,R10
   \   000005AC   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005AE   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000005B2   5FEA1A21           LSRS     R1,R10,#+8
   \   000005B6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005B8   ........           LDR.W    R0,??DataTable9_16
   \   000005BC   ........           BL       printf
   1386          			#endif
   1387          			printf("\n\n\r");
   \   000005C0   ....               ADR.N    R0,??DataTable7_6  ;; "\n\n\r"
   \   000005C2   ........           BL       printf
   1388          		}
   1389          
   1390          		// only for imt, or smt using 48-bit ttag option
   1391          		// (smt using 16-bit ttag option does not store gap time word):
   1392          		// get gap time word, the upper and lower bytes 
   1393          		// express both TxRT and RxRT gap times for RT-RT messages... 
   1394          		if(!smt || (smt & !ttag16)) {
   \                     ??mt_last_msg_console_58:
   \   000005C6   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000005CA   B8F1000F           CMP      R8,#+0
   \   000005CE   0AD0               BEQ.N    ??mt_last_msg_console_59
   \   000005D0   9DF80100           LDRB     R0,[SP, #+1]
   \   000005D4   0028               CMP      R0,#+0
   \   000005D6   01D1               BNE.N    ??mt_last_msg_console_60
   \   000005D8   0121               MOVS     R1,#+1
   \   000005DA   00E0               B.N      ??mt_last_msg_console_61
   \                     ??mt_last_msg_console_60:
   \   000005DC   0021               MOVS     R1,#+0
   \                     ??mt_last_msg_console_61:
   \   000005DE   18F00100           ANDS     R0,R8,#0x1
   \   000005E2   0842               TST      R0,R1
   \   000005E4   69D0               BEQ.N    ??mt_last_msg_console_62
   1395          			if(!smt) m = 5;
   \                     ??mt_last_msg_console_59:
   \   000005E6   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000005EA   B8F1000F           CMP      R8,#+0
   \   000005EE   02D1               BNE.N    ??mt_last_msg_console_63
   \   000005F0   0520               MOVS     R0,#+5
   \   000005F2   8346               MOV      R11,R0
   \   000005F4   05E0               B.N      ??mt_last_msg_console_64
   1396          			else if(!ttag16) m = 4;
   \                     ??mt_last_msg_console_63:
   \   000005F6   9DF80100           LDRB     R0,[SP, #+1]
   \   000005FA   0028               CMP      R0,#+0
   \   000005FC   01D1               BNE.N    ??mt_last_msg_console_64
   \   000005FE   0420               MOVS     R0,#+4
   \   00000600   8346               MOV      R11,R0
   1397          			#if (HOST_BUS_INTERFACE)
   1398          				j = *((unsigned int *)(0x60000000 + ((addr+m)<<1)));
   \                     ??mt_last_msg_console_64:
   \   00000602   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000604   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000608   1BEB0600           ADDS     R0,R11,R6
   \   0000060C   4000               LSLS     R0,R0,#+1
   \   0000060E   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000612   0068               LDR      R0,[R0, #+0]
   \   00000614   0500               MOVS     R5,R0
   1399          			#else // (HOST_SPI_INTERFACE)
   1400          				Write_6131LowReg(MAP_1, addr+m, 1);
   1401          				j = Read_6131_1word(1);
   1402          			#endif
   1403          			
   1404          			// lower byte gives gap time for non-RT-RT msgs,
   1405          			// and gives the TxRT gap for RT-RT msgs 
   1406          			k = 0;
   \   00000616   0020               MOVS     R0,#+0
   \   00000618   0700               MOVS     R7,R0
   1407          			i = j&0xFF;
   \   0000061A   E8B2               UXTB     R0,R5            ;; ZeroExt  R0,R5,#+24,#+24
   \   0000061C   0400               MOVS     R4,R0
   1408          			// expressed in 0.1us increments, parse byte into 
   1409          			// whole number k and tenths digit i for display 
   1410          			while (i >= 10) {
   \                     ??mt_last_msg_console_65:
   \   0000061E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000620   0A2C               CMP      R4,#+10
   \   00000622   02D3               BCC.N    ??mt_last_msg_console_66
   1411          				i -= 10;
   \   00000624   0A3C               SUBS     R4,R4,#+10
   1412          				k += 1;
   \   00000626   7F1C               ADDS     R7,R7,#+1
   \   00000628   F9E7               B.N      ??mt_last_msg_console_65
   1413          			}
   1414          			if(k<10) printf(" ");
   \                     ??mt_last_msg_console_66:
   \   0000062A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000062C   0A2F               CMP      R7,#+10
   \   0000062E   02D2               BCS.N    ??mt_last_msg_console_67
   \   00000630   ....               ADR.N    R0,??DataTable7_2  ;; " "
   \   00000632   ........           BL       printf
   1415          			if(rtrt) printf("       Tx");
   \                     ??mt_last_msg_console_67:
   \   00000636   9DF80300           LDRB     R0,[SP, #+3]
   \   0000063A   0028               CMP      R0,#+0
   \   0000063C   03D0               BEQ.N    ??mt_last_msg_console_68
   \   0000063E   ........           LDR.W    R0,??DataTable9_17
   \   00000642   ........           BL       printf
   1416          			//else printf("         ");
   1417          			printf("RT Response = %d.%dus    ", k,i);
   \                     ??mt_last_msg_console_68:
   \   00000646   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000648   2200               MOVS     R2,R4
   \   0000064A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000064C   3900               MOVS     R1,R7
   \   0000064E   ........           LDR.W    R0,??DataTable9_18
   \   00000652   ........           BL       printf
   1418          			if(!k && !i) printf("(Broadcast?)");
   \   00000656   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000658   002F               CMP      R7,#+0
   \   0000065A   06D1               BNE.N    ??mt_last_msg_console_69
   \   0000065C   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000065E   002C               CMP      R4,#+0
   \   00000660   03D1               BNE.N    ??mt_last_msg_console_69
   \   00000662   ........           LDR.W    R0,??DataTable9_19
   \   00000666   ........           BL       printf
   1419          			if(!rtrt) printf("\n\r");
   \                     ??mt_last_msg_console_69:
   \   0000066A   9DF80300           LDRB     R0,[SP, #+3]
   \   0000066E   0028               CMP      R0,#+0
   \   00000670   03D1               BNE.N    ??mt_last_msg_console_70
   \   00000672   ....               ADR.N    R0,??DataTable7_16  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000674   ........           BL       printf
   \   00000678   1FE0               B.N      ??mt_last_msg_console_62
   1420          
   1421          			// upper byte is non-zero for RT-RT only,
   1422          			// gives the RxRT gap if not broadcast msg 
   1423          			else {
   1424          				k = 0;
   \                     ??mt_last_msg_console_70:
   \   0000067A   0020               MOVS     R0,#+0
   \   0000067C   0700               MOVS     R7,R0
   1425          				i = (j>>8) & 0xFF;
   \   0000067E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000680   280A               LSRS     R0,R5,#+8
   \   00000682   0400               MOVS     R4,R0
   1426          				while (i >= 10) {
   \                     ??mt_last_msg_console_71:
   \   00000684   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000686   0A2C               CMP      R4,#+10
   \   00000688   02D3               BCC.N    ??mt_last_msg_console_72
   1427          					i -= 10;
   \   0000068A   0A3C               SUBS     R4,R4,#+10
   1428          					k += 1;
   \   0000068C   7F1C               ADDS     R7,R7,#+1
   \   0000068E   F9E7               B.N      ??mt_last_msg_console_71
   1429          				}
   1430          				printf("RxRT Response = %d.%dus ", k,i);
   \                     ??mt_last_msg_console_72:
   \   00000690   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000692   2200               MOVS     R2,R4
   \   00000694   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000696   3900               MOVS     R1,R7
   \   00000698   ........           LDR.W    R0,??DataTable9_20
   \   0000069C   ........           BL       printf
   1431          				if(!k && !i) printf("(Broadcast?)");
   \   000006A0   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000006A2   002F               CMP      R7,#+0
   \   000006A4   06D1               BNE.N    ??mt_last_msg_console_73
   \   000006A6   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000006A8   002C               CMP      R4,#+0
   \   000006AA   03D1               BNE.N    ??mt_last_msg_console_73
   \   000006AC   ........           LDR.W    R0,??DataTable9_19
   \   000006B0   ........           BL       printf
   1432          				printf("\n\r");
   \                     ??mt_last_msg_console_73:
   \   000006B4   ....               ADR.N    R0,??DataTable7_16  ;; 0x0A, 0x0D, 0x00, 0x00
   \   000006B6   ........           BL       printf
   1433          			}
   1434          		}
   1435          	}	
   1436          	print_line();
   \                     ??mt_last_msg_console_62:
   \   000006BA   ........           BL       print_line
   1437          	print_menuprompt();
   \   000006BE   ........           BL       print_menuprompt
   1438          
   1439          }	// end mt_last_msg_console()
   \   000006C2   BDE8F78F           POP      {R0-R2,R4-R11,PC}  ;; return
   1440          
   1441          
   1442          //-----------------------------------------------------------------------
   1443          //	this function lists bus monitor interrupt 
   1444          //	configuration to the console via UART. if there
   1445          //	are pending MT interrupts, these too are displayed.
   1446          //	Function returns the value read from the MT pending
   1447          //	interrupt register, since reading the reg clears it.
   1448          //-----------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
   1449          unsigned short int list_mt_ints_console(void) {
   \                     list_mt_ints_console:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   1450          
   1451                  #if (HOST_BUS_INTERFACE)    
   1452                  extern const H6130 pH6130; // HI-6130 register struct base address    
   1453                  #endif
   1454          	unsigned short i, j, k=0;
   \   00000002   0026               MOVS     R6,#+0
   1455          	char smt = 0;
   \   00000004   0027               MOVS     R7,#+0
   1456          
   1457          	#if (HOST_BUS_INTERFACE)
   1458          		i = pH6130->MT_CONFIG_REG;
   \   00000006   ........           LDR.W    R0,??DataTable8_1
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   B0F85200           LDRH     R0,[R0, #+82]
   \   00000010   0400               MOVS     R4,R0
   1459          		if(i & 1) smt = 1;
   \   00000012   E007               LSLS     R0,R4,#+31
   \   00000014   01D5               BPL.N    ??list_mt_ints_console_0
   \   00000016   0120               MOVS     R0,#+1
   \   00000018   0700               MOVS     R7,R0
   1460          		i = pH6130->MT_INT_ENABLE_REG;
   \                     ??list_mt_ints_console_0:
   \   0000001A   ........           LDR.W    R0,??DataTable8_1
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   408C               LDRH     R0,[R0, #+34]
   \   00000022   0400               MOVS     R4,R0
   1461          		j = pH6130->MT_INT_OUTPUT_ENABLE_REG;
   \   00000024   ........           LDR.W    R0,??DataTable8_1
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   408D               LDRH     R0,[R0, #+42]
   \   0000002C   0500               MOVS     R5,R0
   1462          		k = pH6130->MT_PENDING_INT_REG;
   \   0000002E   ........           LDR.W    R0,??DataTable8_1
   \   00000032   0068               LDR      R0,[R0, #+0]
   \   00000034   008A               LDRH     R0,[R0, #+16]
   \   00000036   0600               MOVS     R6,R0
   1463          	#else // (HOST_SPI_INTERFACE)
   1464          		Write_6131LowReg(MAP_1, MT_CONFIG_REG, 1);
   1465          		i = Read_6131_1word(1);
   1466          		if(i & 1) smt = 1;
   1467          		Write_6131LowReg(MAP_1, MT_INT_ENABLE_REG, 1);
   1468          		i = Read_6131_1word(1);
   1469          		Write_6131LowReg(MAP_1, MT_INT_OUTPUT_ENABLE_REG, 1);
   1470          		j = Read_6131_1word(1);
   1471          		Write_6131LowReg(MAP_1, MT_PENDING_INT_REG, 1);
   1472          		k = Read_6131_1word(1);
   1473          	#endif
   1474          	
   1475          
   1476          	// formfeed 
   1477          	putchar(12); 	
   \   00000038   0C20               MOVS     R0,#+12
   \   0000003A   ........           BL       putchar
   1478          	// IRIG monitor (imt) or Simple monitor (smt)? 
   1479                  printf("\n\r");
   \   0000003E   B6A0               ADR.N    R0,??list_mt_ints_console_1  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000040   ........           BL       printf
   1480          	if(smt) printf("SMT mode is selected by MT Config Register bit 0.\n\n\r");
   \   00000044   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000046   002F               CMP      R7,#+0
   \   00000048   04D0               BEQ.N    ??list_mt_ints_console_2
   \   0000004A   ........           LDR.W    R0,??DataTable10_2
   \   0000004E   ........           BL       printf
   \   00000052   03E0               B.N      ??list_mt_ints_console_3
   1481          	else    printf("IMT mode is selected by MT Config Register bit 0.\n\n\r");
   \                     ??list_mt_ints_console_2:
   \   00000054   ........           LDR.W    R0,??DataTable10_3
   \   00000058   ........           BL       printf
   1482          	printf("   Bus Monitor Ints    Enabled?   Pin Output?   Pending?\n\r");
   \                     ??list_mt_ints_console_3:
   \   0000005C   ........           LDR.W    R0,??DataTable10_4
   \   00000060   ........           BL       printf
   1483          	print_line();
   \   00000064   ........           BL       print_line
   1484          
   1485          	if(!smt) {
   \   00000068   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006A   002F               CMP      R7,#+0
   \   0000006C   40F03081           BNE.W    ??list_mt_ints_console_4
   1486          		// IRIG-106 mode, disregard bits 7,4,2,1,0 
   1487          		printf("End of Pkt,Buffer Full");
   \   00000070   ........           LDR.W    R0,??DataTable10_5
   \   00000074   ........           BL       printf
   1488          		if(!(i & FULL_EOP)) {	
   \   00000078   2004               LSLS     R0,R4,#+16
   \   0000007A   02D4               BMI.N    ??list_mt_ints_console_5
   1489          			// int disabled 
   1490          			print_null();
   \   0000007C   ........           BL       print_null
   \   00000080   11E0               B.N      ??list_mt_ints_console_6
   1491          		}
   1492          		else {
   1493          			// int enabled 
   1494          			print_sp1sp();
   \                     ??list_mt_ints_console_5:
   \   00000082   ........           BL       print_sp1sp
   1495          			// pin output? 
   1496          			if(j & FULL_EOP) print_b1sp();
   \   00000086   2804               LSLS     R0,R5,#+16
   \   00000088   02D5               BPL.N    ??list_mt_ints_console_7
   \   0000008A   ........           BL       print_b1sp
   \   0000008E   01E0               B.N      ??list_mt_ints_console_8
   1497          			else print_b0sp(); 
   \                     ??list_mt_ints_console_7:
   \   00000090   ........           BL       print_b0sp
   1498          			// pending? 
   1499          			if(k & FULL_EOP) printf("1\n\r");
   \                     ??list_mt_ints_console_8:
   \   00000094   3004               LSLS     R0,R6,#+16
   \   00000096   03D5               BPL.N    ??list_mt_ints_console_9
   \   00000098   BBA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000009A   ........           BL       printf
   \   0000009E   02E0               B.N      ??list_mt_ints_console_6
   1500          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_9:
   \   000000A0   BAA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000000A2   ........           BL       printf
   1501          		}
   1502          
   1503          		printf("Offset before FULL_EOP");
   \                     ??list_mt_ints_console_6:
   \   000000A6   ........           LDR.W    R0,??DataTable11
   \   000000AA   ........           BL       printf
   1504          		if(!(i & FULL_OFS)) {	
   \   000000AE   A006               LSLS     R0,R4,#+26
   \   000000B0   02D4               BMI.N    ??list_mt_ints_console_11
   1505          			// int disabled 
   1506          			print_null();
   \   000000B2   ........           BL       print_null
   \   000000B6   11E0               B.N      ??list_mt_ints_console_12
   1507          		}
   1508          		else {
   1509          			// int enabled 
   1510          			print_sp1sp();
   \                     ??list_mt_ints_console_11:
   \   000000B8   ........           BL       print_sp1sp
   1511          			// pin output? 
   1512          			if(j & FULL_OFS) print_b1sp();
   \   000000BC   A806               LSLS     R0,R5,#+26
   \   000000BE   02D5               BPL.N    ??list_mt_ints_console_13
   \   000000C0   ........           BL       print_b1sp
   \   000000C4   01E0               B.N      ??list_mt_ints_console_14
   1513          			else print_b0sp(); 
   \                     ??list_mt_ints_console_13:
   \   000000C6   ........           BL       print_b0sp
   1514          			// pending? 
   1515          			if(k & FULL_OFS) printf("1\n\r");
   \                     ??list_mt_ints_console_14:
   \   000000CA   B006               LSLS     R0,R6,#+26
   \   000000CC   03D5               BPL.N    ??list_mt_ints_console_15
   \   000000CE   AEA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000000D0   ........           BL       printf
   \   000000D4   02E0               B.N      ??list_mt_ints_console_12
   1516          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_15:
   \   000000D6   ADA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000000D8   ........           BL       printf
   1517          		}
   1518          
   1519          		printf("Pkt Max 1553 Msg Words");
   \                     ??list_mt_ints_console_12:
   \   000000DC   ........           LDR.W    R0,??DataTable12
   \   000000E0   ........           BL       printf
   1520          		if(!(i & MAXWORDS)) {	
   \   000000E4   6004               LSLS     R0,R4,#+17
   \   000000E6   02D4               BMI.N    ??list_mt_ints_console_16
   1521          			// int disabled 
   1522          			print_null();
   \   000000E8   ........           BL       print_null
   \   000000EC   11E0               B.N      ??list_mt_ints_console_17
   1523          		}
   1524          		else {
   1525          			// int enabled 
   1526          			print_sp1sp();
   \                     ??list_mt_ints_console_16:
   \   000000EE   ........           BL       print_sp1sp
   1527          			// pin output? 
   1528          			if(j & MAXWORDS) print_b1sp();
   \   000000F2   6804               LSLS     R0,R5,#+17
   \   000000F4   02D5               BPL.N    ??list_mt_ints_console_18
   \   000000F6   ........           BL       print_b1sp
   \   000000FA   01E0               B.N      ??list_mt_ints_console_19
   1529          			else print_b0sp(); 
   \                     ??list_mt_ints_console_18:
   \   000000FC   ........           BL       print_b0sp
   1530          			// pending? 
   1531          			if(k & MAXWORDS) printf("1\n\r");
   \                     ??list_mt_ints_console_19:
   \   00000100   7004               LSLS     R0,R6,#+17
   \   00000102   03D5               BPL.N    ??list_mt_ints_console_20
   \   00000104   A0A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000106   ........           BL       printf
   \   0000010A   02E0               B.N      ??list_mt_ints_console_17
   1532          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_20:
   \   0000010C   9FA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000010E   ........           BL       printf
   1533          		}
   1534          
   1535          		printf("Pkt Max 1553 Msg Count");
   \                     ??list_mt_ints_console_17:
   \   00000112   ........           LDR.W    R0,??DataTable15
   \   00000116   ........           BL       printf
   1536          		if(!(i & MAXMSGS)) {	
   \   0000011A   A004               LSLS     R0,R4,#+18
   \   0000011C   02D4               BMI.N    ??list_mt_ints_console_21
   1537          			// int disabled 
   1538          			print_null();
   \   0000011E   ........           BL       print_null
   \   00000122   11E0               B.N      ??list_mt_ints_console_22
   1539          		}
   1540          		else {
   1541          			// int enabled 
   1542          			print_sp1sp();
   \                     ??list_mt_ints_console_21:
   \   00000124   ........           BL       print_sp1sp
   1543          			// pin output? 
   1544          			if(j & MAXMSGS) print_b1sp();
   \   00000128   A804               LSLS     R0,R5,#+18
   \   0000012A   02D5               BPL.N    ??list_mt_ints_console_23
   \   0000012C   ........           BL       print_b1sp
   \   00000130   01E0               B.N      ??list_mt_ints_console_24
   1545          			else print_b0sp(); 
   \                     ??list_mt_ints_console_23:
   \   00000132   ........           BL       print_b0sp
   1546          			// pending? 
   1547          			if(k & MAXMSGS) printf("1\n\r");
   \                     ??list_mt_ints_console_24:
   \   00000136   B004               LSLS     R0,R6,#+18
   \   00000138   03D5               BPL.N    ??list_mt_ints_console_25
   \   0000013A   93A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000013C   ........           BL       printf
   \   00000140   02E0               B.N      ??list_mt_ints_console_22
   1548          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_25:
   \   00000142   92A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000144   ........           BL       printf
   1549          		}
   1550          	
   1551          		printf(" Max Gap Time Exceeded");
   \                     ??list_mt_ints_console_22:
   \   00000148   ........           LDR.W    R0,??DataTable19
   \   0000014C   ........           BL       printf
   1552          		if(!(i & MAXGAP)) {	
   \   00000150   E004               LSLS     R0,R4,#+19
   \   00000152   02D4               BMI.N    ??list_mt_ints_console_26
   1553          			// int disabled 
   1554          			print_null();
   \   00000154   ........           BL       print_null
   \   00000158   11E0               B.N      ??list_mt_ints_console_27
   1555          		}
   1556          		else {
   1557          			// int enabled 
   1558          			print_sp1sp();
   \                     ??list_mt_ints_console_26:
   \   0000015A   ........           BL       print_sp1sp
   1559          			// pin output? 
   1560          			if(j & MAXGAP) print_b1sp();
   \   0000015E   E804               LSLS     R0,R5,#+19
   \   00000160   02D5               BPL.N    ??list_mt_ints_console_28
   \   00000162   ........           BL       print_b1sp
   \   00000166   01E0               B.N      ??list_mt_ints_console_29
   1561          			else print_b0sp(); 
   \                     ??list_mt_ints_console_28:
   \   00000168   ........           BL       print_b0sp
   1562          			// pending? 
   1563          			if(k & MAXGAP) printf("1\n\r");
   \                     ??list_mt_ints_console_29:
   \   0000016C   F004               LSLS     R0,R6,#+19
   \   0000016E   03D5               BPL.N    ??list_mt_ints_console_30
   \   00000170   85A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000172   ........           BL       printf
   \   00000176   02E0               B.N      ??list_mt_ints_console_27
   1564          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_30:
   \   00000178   84A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000017A   ........           BL       printf
   1565          		}
   1566          	
   1567          		printf("Max Pkt Recording Time");
   \                     ??list_mt_ints_console_27:
   \   0000017E   ........           LDR.W    R0,??DataTable20
   \   00000182   ........           BL       printf
   1568          		if(!(i & MAXTIME)) {	
   \   00000186   2005               LSLS     R0,R4,#+20
   \   00000188   02D4               BMI.N    ??list_mt_ints_console_31
   1569          			// int disabled 
   1570          			print_null();
   \   0000018A   ........           BL       print_null
   \   0000018E   11E0               B.N      ??list_mt_ints_console_32
   1571          		}
   1572          		else {
   1573          			// int enabled 
   1574          			print_sp1sp();
   \                     ??list_mt_ints_console_31:
   \   00000190   ........           BL       print_sp1sp
   1575          			// pin output? 
   1576          			if(j & MAXTIME) print_b1sp();
   \   00000194   2805               LSLS     R0,R5,#+20
   \   00000196   02D5               BPL.N    ??list_mt_ints_console_33
   \   00000198   ........           BL       print_b1sp
   \   0000019C   01E0               B.N      ??list_mt_ints_console_34
   1577          			else print_b0sp(); 
   \                     ??list_mt_ints_console_33:
   \   0000019E   ........           BL       print_b0sp
   1578          			// pending? 
   1579          			if(k & MAXTIME) printf("1\n\r");
   \                     ??list_mt_ints_console_34:
   \   000001A2   3005               LSLS     R0,R6,#+20
   \   000001A4   03D5               BPL.N    ??list_mt_ints_console_35
   \   000001A6   78A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000001A8   ........           BL       printf
   \   000001AC   02E0               B.N      ??list_mt_ints_console_32
   1580          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_35:
   \   000001AE   77A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000001B0   ........           BL       printf
   1581          		}
   1582          	
   1583          		printf("      Host Packet Stop");
   \                     ??list_mt_ints_console_32:
   \   000001B4   ........           LDR.W    R0,??DataTable20_1
   \   000001B8   ........           BL       printf
   1584          		if(!(i & HPKTSTOP)) {	
   \   000001BC   6005               LSLS     R0,R4,#+21
   \   000001BE   02D4               BMI.N    ??list_mt_ints_console_36
   1585          			// int disabled 
   1586          			print_null();
   \   000001C0   ........           BL       print_null
   \   000001C4   11E0               B.N      ??list_mt_ints_console_37
   1587          		}
   1588          		else {
   1589          			// int enabled 
   1590          			print_sp1sp();
   \                     ??list_mt_ints_console_36:
   \   000001C6   ........           BL       print_sp1sp
   1591          			// pin output? 
   1592          			if(j & HPKTSTOP) print_b1sp();
   \   000001CA   6805               LSLS     R0,R5,#+21
   \   000001CC   02D5               BPL.N    ??list_mt_ints_console_38
   \   000001CE   ........           BL       print_b1sp
   \   000001D2   01E0               B.N      ??list_mt_ints_console_39
   1593          			else print_b0sp(); 
   \                     ??list_mt_ints_console_38:
   \   000001D4   ........           BL       print_b0sp
   1594          			// pending? 
   1595          			if(k & HPKTSTOP) printf("1\n\r");
   \                     ??list_mt_ints_console_39:
   \   000001D8   7005               LSLS     R0,R6,#+21
   \   000001DA   03D5               BPL.N    ??list_mt_ints_console_40
   \   000001DC   6AA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000001DE   ........           BL       printf
   \   000001E2   02E0               B.N      ??list_mt_ints_console_37
   1596          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_40:
   \   000001E4   69A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000001E6   ........           BL       printf
   1597          		}
   1598          				 
   1599          		printf("Stack End Addr Written");
   \                     ??list_mt_ints_console_37:
   \   000001EA   ........           LDR.W    R0,??DataTable20_2
   \   000001EE   ........           BL       printf
   1600          		if(!(i & STKROVR)) {	
   \   000001F2   E005               LSLS     R0,R4,#+23
   \   000001F4   02D4               BMI.N    ??list_mt_ints_console_41
   1601          			// int disabled 
   1602          			print_null();
   \   000001F6   ........           BL       print_null
   \   000001FA   11E0               B.N      ??list_mt_ints_console_42
   1603          		}
   1604          		else {
   1605          			// int enabled 
   1606          			print_sp1sp();
   \                     ??list_mt_ints_console_41:
   \   000001FC   ........           BL       print_sp1sp
   1607          			// pin output? 
   1608          			if(j & STKROVR) print_b1sp();
   \   00000200   E805               LSLS     R0,R5,#+23
   \   00000202   02D5               BPL.N    ??list_mt_ints_console_43
   \   00000204   ........           BL       print_b1sp
   \   00000208   01E0               B.N      ??list_mt_ints_console_44
   1609          			else print_b0sp(); 
   \                     ??list_mt_ints_console_43:
   \   0000020A   ........           BL       print_b0sp
   1610          			// pending? 
   1611          			if(k & STKROVR) printf("1\n\r");
   \                     ??list_mt_ints_console_44:
   \   0000020E   F005               LSLS     R0,R6,#+23
   \   00000210   03D5               BPL.N    ??list_mt_ints_console_45
   \   00000212   5DA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000214   ........           BL       printf
   \   00000218   02E0               B.N      ??list_mt_ints_console_42
   1612          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_45:
   \   0000021A   5CA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000021C   ........           BL       printf
   1613          		}
   1614          
   1615          		printf(" Hit Cmd Stack Address");
   \                     ??list_mt_ints_console_42:
   \   00000220   ........           LDR.W    R0,??DataTable20_3
   \   00000224   ........           BL       printf
   1616          		if(!(i & STKADRSS)) {	
   \   00000228   6006               LSLS     R0,R4,#+25
   \   0000022A   02D4               BMI.N    ??list_mt_ints_console_46
   1617          			// int disabled 
   1618          			print_null();
   \   0000022C   ........           BL       print_null
   \   00000230   11E0               B.N      ??list_mt_ints_console_47
   1619          		}
   1620          		else {
   1621          			// int enabled 
   1622          			print_sp1sp();
   \                     ??list_mt_ints_console_46:
   \   00000232   ........           BL       print_sp1sp
   1623          			// pin output? 
   1624          			if(j & STKADRSS) print_b1sp();
   \   00000236   6806               LSLS     R0,R5,#+25
   \   00000238   02D5               BPL.N    ??list_mt_ints_console_48
   \   0000023A   ........           BL       print_b1sp
   \   0000023E   01E0               B.N      ??list_mt_ints_console_49
   1625          			else print_b0sp(); 
   \                     ??list_mt_ints_console_48:
   \   00000240   ........           BL       print_b0sp
   1626          			// pending? 
   1627          			if(k & STKADRSS) printf("1\n\r");
   \                     ??list_mt_ints_console_49:
   \   00000244   7006               LSLS     R0,R6,#+25
   \   00000246   03D5               BPL.N    ??list_mt_ints_console_50
   \   00000248   4FA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000024A   ........           BL       printf
   \   0000024E   02E0               B.N      ??list_mt_ints_console_47
   1628          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_50:
   \   00000250   4EA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000252   ........           BL       printf
   1629          		}
   1630          
   1631          		printf(" IRIG-106 Packet Ready");
   \                     ??list_mt_ints_console_47:
   \   00000256   ........           LDR.W    R0,??DataTable20_4
   \   0000025A   ........           BL       printf
   1632          		if(!(i & PKTREADY)) {	
   \   0000025E   A005               LSLS     R0,R4,#+22
   \   00000260   02D4               BMI.N    ??list_mt_ints_console_51
   1633          			// int disabled 
   1634          			print_null();
   \   00000262   ........           BL       print_null
   \   00000266   11E0               B.N      ??list_mt_ints_console_52
   1635          		}
   1636          		else {
   1637          			// int enabled 
   1638          			print_sp1sp();
   \                     ??list_mt_ints_console_51:
   \   00000268   ........           BL       print_sp1sp
   1639          			// pin output? 
   1640          			if(j & PKTREADY) print_b1sp();
   \   0000026C   A805               LSLS     R0,R5,#+22
   \   0000026E   02D5               BPL.N    ??list_mt_ints_console_53
   \   00000270   ........           BL       print_b1sp
   \   00000274   01E0               B.N      ??list_mt_ints_console_54
   1641          			else print_b0sp(); 
   \                     ??list_mt_ints_console_53:
   \   00000276   ........           BL       print_b0sp
   1642          			// pending? 
   1643          			if(k & PKTREADY) printf("1\n\r");
   \                     ??list_mt_ints_console_54:
   \   0000027A   B005               LSLS     R0,R6,#+22
   \   0000027C   03D5               BPL.N    ??list_mt_ints_console_55
   \   0000027E   42A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000280   ........           BL       printf
   \   00000284   02E0               B.N      ??list_mt_ints_console_52
   1644          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_55:
   \   00000286   41A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000288   ........           BL       printf
   1645          		}
   1646          
   1647          		printf("Monitor End-of-Message");
   \                     ??list_mt_ints_console_52:
   \   0000028C   ........           LDR.W    R0,??DataTable20_5
   \   00000290   ........           BL       printf
   1648          		if(!(i & (1<<3))) {	
   \   00000294   2007               LSLS     R0,R4,#+28
   \   00000296   02D4               BMI.N    ??list_mt_ints_console_56
   1649          			// int disabled 
   1650          			print_null();
   \   00000298   ........           BL       print_null
   \   0000029C   11E0               B.N      ??list_mt_ints_console_57
   1651          		}
   1652          		else {
   1653          			// int enabled 
   1654          			print_sp1sp();
   \                     ??list_mt_ints_console_56:
   \   0000029E   ........           BL       print_sp1sp
   1655          			// pin output? 
   1656          			if(j & (1<<3)) print_b1sp();
   \   000002A2   2807               LSLS     R0,R5,#+28
   \   000002A4   02D5               BPL.N    ??list_mt_ints_console_58
   \   000002A6   ........           BL       print_b1sp
   \   000002AA   01E0               B.N      ??list_mt_ints_console_59
   1657          			else print_b0sp(); 
   \                     ??list_mt_ints_console_58:
   \   000002AC   ........           BL       print_b0sp
   1658          			// pending? 
   1659          			if(k & (1<<3)) printf("1\n\r");
   \                     ??list_mt_ints_console_59:
   \   000002B0   3007               LSLS     R0,R6,#+28
   \   000002B2   03D5               BPL.N    ??list_mt_ints_console_60
   \   000002B4   34A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000002B6   ........           BL       printf
   \   000002BA   02E0               B.N      ??list_mt_ints_console_57
   1660          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_60:
   \   000002BC   33A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000002BE   ........           BL       printf
   1661          		}
   1662          
   1663          		printf("\nIMT Skips Bits 4,2,1,0");
   \                     ??list_mt_ints_console_57:
   \   000002C2   ........           LDR.W    R0,??DataTable20_6
   \   000002C6   ........           BL       printf
   1664          		print_dddn();
   \   000002CA   ........           BL       print_dddn
   \   000002CE   A7E0               B.N      ??list_mt_ints_console_61
   1665          
   1666          	}		// end if(!smt)
   1667          
   1668          	else {
   1669          		// Simple Monitor mode, disregard bits 15-9 and 2-0 
   1670          
   1671          		printf("SMT Cmd Stack Rollover");
   \                     ??list_mt_ints_console_4:
   \   000002D0   ........           LDR.W    R0,??DataTable20_7
   \   000002D4   ........           BL       printf
   1672          		if(!(i & STKROVR)) {	
   \   000002D8   E005               LSLS     R0,R4,#+23
   \   000002DA   02D4               BMI.N    ??list_mt_ints_console_62
   1673          			// int disabled 
   1674          			print_null();
   \   000002DC   ........           BL       print_null
   \   000002E0   11E0               B.N      ??list_mt_ints_console_63
   1675          		}
   1676          		else {
   1677          			// int enabled 
   1678          			print_sp1sp();
   \                     ??list_mt_ints_console_62:
   \   000002E2   ........           BL       print_sp1sp
   1679          			// pin output? 
   1680          			if(j & STKROVR) print_b1sp();
   \   000002E6   E805               LSLS     R0,R5,#+23
   \   000002E8   02D5               BPL.N    ??list_mt_ints_console_64
   \   000002EA   ........           BL       print_b1sp
   \   000002EE   01E0               B.N      ??list_mt_ints_console_65
   1681          			else print_b0sp(); 
   \                     ??list_mt_ints_console_64:
   \   000002F0   ........           BL       print_b0sp
   1682          			// pending? 
   1683          			if(k & STKROVR) printf("1\n\r");
   \                     ??list_mt_ints_console_65:
   \   000002F4   F005               LSLS     R0,R6,#+23
   \   000002F6   03D5               BPL.N    ??list_mt_ints_console_66
   \   000002F8   23A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000002FA   ........           BL       printf
   \   000002FE   02E0               B.N      ??list_mt_ints_console_63
   1684          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_66:
   \   00000300   22A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000302   ........           BL       printf
   1685          		}
   1686          	
   1687          		printf("SMT DataStack Rollover");
   \                     ??list_mt_ints_console_63:
   \   00000306   ........           LDR.W    R0,??DataTable20_8
   \   0000030A   ........           BL       printf
   1688          		if(!(i & DSTKROVR)) {	
   \   0000030E   2006               LSLS     R0,R4,#+24
   \   00000310   04D4               BMI.N    ??list_mt_ints_console_67
   1689          			// int disabled 
   1690          			print_null();
   \   00000312   ........           BL       print_null
   \   00000316   13E0               B.N      ??list_mt_ints_console_68
   \                     ??list_mt_ints_console_1:
   \   00000318   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00
   1691          		}
   1692          		else {
   1693          			// int enabled 
   1694          			print_sp1sp();
   \                     ??list_mt_ints_console_67:
   \   0000031C   ........           BL       print_sp1sp
   1695          			// pin output? 
   1696          			if(j & DSTKROVR) print_b1sp();
   \   00000320   2806               LSLS     R0,R5,#+24
   \   00000322   02D5               BPL.N    ??list_mt_ints_console_69
   \   00000324   ........           BL       print_b1sp
   \   00000328   01E0               B.N      ??list_mt_ints_console_70
   1697          			else print_b0sp(); 
   \                     ??list_mt_ints_console_69:
   \   0000032A   ........           BL       print_b0sp
   1698          			// pending? 
   1699          			if(k & STKROVR) printf("1\n\r");
   \                     ??list_mt_ints_console_70:
   \   0000032E   F005               LSLS     R0,R6,#+23
   \   00000330   03D5               BPL.N    ??list_mt_ints_console_71
   \   00000332   15A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000334   ........           BL       printf
   \   00000338   02E0               B.N      ??list_mt_ints_console_68
   1700          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_71:
   \   0000033A   14A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000033C   ........           BL       printf
   1701          		}
   1702          
   1703          		printf("SMT  Cmd Stack Address");
   \                     ??list_mt_ints_console_68:
   \   00000340   ........           LDR.W    R0,??DataTable20_9
   \   00000344   ........           BL       printf
   1704          		if(!(i & STKADRSS)) {	
   \   00000348   6006               LSLS     R0,R4,#+25
   \   0000034A   02D4               BMI.N    ??list_mt_ints_console_72
   1705          			// int disabled 
   1706          			print_null();
   \   0000034C   ........           BL       print_null
   \   00000350   11E0               B.N      ??list_mt_ints_console_73
   1707          		}
   1708          		else {
   1709          			// int enabled 
   1710          			print_sp1sp();
   \                     ??list_mt_ints_console_72:
   \   00000352   ........           BL       print_sp1sp
   1711          			// pin output? 
   1712          			if(j & STKADRSS) print_b1sp();
   \   00000356   6806               LSLS     R0,R5,#+25
   \   00000358   02D5               BPL.N    ??list_mt_ints_console_74
   \   0000035A   ........           BL       print_b1sp
   \   0000035E   01E0               B.N      ??list_mt_ints_console_75
   1713          			else print_b0sp(); 
   \                     ??list_mt_ints_console_74:
   \   00000360   ........           BL       print_b0sp
   1714          			// pending? 
   1715          			if(k & STKADRSS) printf("1\n\r");
   \                     ??list_mt_ints_console_75:
   \   00000364   7006               LSLS     R0,R6,#+25
   \   00000366   03D5               BPL.N    ??list_mt_ints_console_76
   \   00000368   07A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000036A   ........           BL       printf
   \   0000036E   02E0               B.N      ??list_mt_ints_console_73
   1716          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_76:
   \   00000370   06A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000372   ........           BL       printf
   1717          		}
   1718          
   1719          		printf("SMT Data Stack Address");
   \                     ??list_mt_ints_console_73:
   \   00000376   ........           LDR.W    R0,??DataTable20_10
   \   0000037A   ........           BL       printf
   1720          		if(!(i & DSTKADRSS)) {	
   \   0000037E   A006               LSLS     R0,R4,#+26
   \   00000380   06D4               BMI.N    ??list_mt_ints_console_77
   1721          			// int disabled 
   1722          			print_null();
   \   00000382   ........           BL       print_null
   \   00000386   15E0               B.N      ??list_mt_ints_console_78
   \                     ??list_mt_ints_console_10:
   \   00000388   310A0D00           DC8      "1\n\r"
   \   0000038C   300A0D00           DC8      "0\n\r"
   1723          		}
   1724          		else {
   1725          			// int enabled 
   1726          			print_sp1sp();
   \                     ??list_mt_ints_console_77:
   \   00000390   ........           BL       print_sp1sp
   1727          			// pin output? 
   1728          			if(j & DSTKADRSS) print_b1sp();
   \   00000394   A806               LSLS     R0,R5,#+26
   \   00000396   02D5               BPL.N    ??list_mt_ints_console_79
   \   00000398   ........           BL       print_b1sp
   \   0000039C   01E0               B.N      ??list_mt_ints_console_80
   1729          			else print_b0sp(); 
   \                     ??list_mt_ints_console_79:
   \   0000039E   ........           BL       print_b0sp
   1730          				// pending? 
   1731          			if(k & DSTKADRSS) printf("1\n\r");
   \                     ??list_mt_ints_console_80:
   \   000003A2   B006               LSLS     R0,R6,#+26
   \   000003A4   03D5               BPL.N    ??list_mt_ints_console_81
   \   000003A6   ....               ADR.N    R0,??DataTable8_15  ;; "1\n\r"
   \   000003A8   ........           BL       printf
   \   000003AC   02E0               B.N      ??list_mt_ints_console_78
   1732          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_81:
   \   000003AE   ....               ADR.N    R0,??DataTable8_18  ;; "0\n\r"
   \   000003B0   ........           BL       printf
   1733          		}
   1734          
   1735          		printf("RT Status is Msg Error");
   \                     ??list_mt_ints_console_78:
   \   000003B4   ........           LDR.W    R0,??DataTable20_11
   \   000003B8   ........           BL       printf
   1736          		if(!(i & MSG_ERR)) {	
   \   000003BC   E006               LSLS     R0,R4,#+27
   \   000003BE   02D4               BMI.N    ??list_mt_ints_console_82
   1737          			// int disabled 
   1738          			print_null();
   \   000003C0   ........           BL       print_null
   \   000003C4   11E0               B.N      ??list_mt_ints_console_83
   1739          		}
   1740          		else {
   1741          			// int enabled 
   1742          			print_sp1sp();
   \                     ??list_mt_ints_console_82:
   \   000003C6   ........           BL       print_sp1sp
   1743          			// pin output? 
   1744          			if(j & MSG_ERR) print_b1sp();
   \   000003CA   E806               LSLS     R0,R5,#+27
   \   000003CC   02D5               BPL.N    ??list_mt_ints_console_84
   \   000003CE   ........           BL       print_b1sp
   \   000003D2   01E0               B.N      ??list_mt_ints_console_85
   1745          			else print_b0sp(); 
   \                     ??list_mt_ints_console_84:
   \   000003D4   ........           BL       print_b0sp
   1746          			// pending? 
   1747          			if(k & MSG_ERR) printf("1\n\r");
   \                     ??list_mt_ints_console_85:
   \   000003D8   F006               LSLS     R0,R6,#+27
   \   000003DA   03D5               BPL.N    ??list_mt_ints_console_86
   \   000003DC   ....               ADR.N    R0,??DataTable8_15  ;; "1\n\r"
   \   000003DE   ........           BL       printf
   \   000003E2   02E0               B.N      ??list_mt_ints_console_83
   1748          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_86:
   \   000003E4   ....               ADR.N    R0,??DataTable8_18  ;; "0\n\r"
   \   000003E6   ........           BL       printf
   1749          		}
   1750          
   1751          		printf("     MT End-of-Message");
   \                     ??list_mt_ints_console_83:
   \   000003EA   ........           LDR.W    R0,??DataTable20_12
   \   000003EE   ........           BL       printf
   1752          		if(!(i & MT_EOM)) {	
   \   000003F2   2007               LSLS     R0,R4,#+28
   \   000003F4   02D4               BMI.N    ??list_mt_ints_console_87
   1753          			// int disabled 
   1754          			print_null();
   \   000003F6   ........           BL       print_null
   \   000003FA   11E0               B.N      ??list_mt_ints_console_61
   1755          		}
   1756          		else {
   1757          			// int enabled 
   1758          			print_sp1sp();
   \                     ??list_mt_ints_console_87:
   \   000003FC   ........           BL       print_sp1sp
   1759          			// pin output? 
   1760          			if(j & MT_EOM) print_b1sp();
   \   00000400   2807               LSLS     R0,R5,#+28
   \   00000402   02D5               BPL.N    ??list_mt_ints_console_88
   \   00000404   ........           BL       print_b1sp
   \   00000408   01E0               B.N      ??list_mt_ints_console_89
   1761          			else print_b0sp(); 
   \                     ??list_mt_ints_console_88:
   \   0000040A   ........           BL       print_b0sp
   1762          			// pending? 
   1763          			if(k & MT_EOM) printf("1\n\r");
   \                     ??list_mt_ints_console_89:
   \   0000040E   3007               LSLS     R0,R6,#+28
   \   00000410   03D5               BPL.N    ??list_mt_ints_console_90
   \   00000412   ....               ADR.N    R0,??DataTable8_15  ;; "1\n\r"
   \   00000414   ........           BL       printf
   \   00000418   02E0               B.N      ??list_mt_ints_console_61
   1764          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_90:
   \   0000041A   ....               ADR.N    R0,??DataTable8_18  ;; "0\n\r"
   \   0000041C   ........           BL       printf
   1765          		}
   1766          	}		// end else .... SMT mode
   1767                    
   1768          	print_line();
   \                     ??list_mt_ints_console_61:
   \   00000420   ........           BL       print_line
   1769          	printf("Note: Reading the MT Pending Interrupt Register clears it!\n\r");
   \   00000424   ........           LDR.W    R0,??DataTable20_13
   \   00000428   ........           BL       printf
   1770          
   1771          	print_menuprompt();
   \   0000042C   ........           BL       print_menuprompt
   1772          
   1773          	// return value read from the MT Pending Interrupt Register, now cleared 
   1774          	return k;
   \   00000430   3000               MOVS     R0,R6
   \   00000432   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000434   F2BD               POP      {R1,R4-R7,PC}    ;; return
   1775           
   1776          }	// end list_mt_ints_console()
   1777          
   1778          
   1779          #endif  // (SMT_ena || IMT_ena)
   1780          
   1781          
   1782          //-------------------------------------------------------------------------
   1783          //  this function lists hardware interrupt configuration
   1784          //	to the console via UART. if there are pending
   1785          //	hardware interrupts, these too are displayed.
   1786          //	Function returns the value read from the HW pending
   1787          //	interrupt register, since reading the reg clears it.
   1788          //-------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1789          unsigned short int list_hw_ints_console (void) {
   \                     list_hw_ints_console:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1790          
   1791          	unsigned short i, j, k;
   1792                  
   1793                  #if (HOST_BUS_INTERFACE)
   1794                  extern const H6130 pH6130; // HI-6130 register struct base address  
   1795                  #endif
   1796                  
   1797          	// formfeed 
   1798          	putchar(12); 	
   \   00000002   0C20               MOVS     R0,#+12
   \   00000004   ........           BL       putchar
   1799          	printf("\n\r Hardware Interrupts   Enabled?   Pin Output?   Pending?\n\r");
   \   00000008   ........           LDR.W    R0,??DataTable20_14
   \   0000000C   ........           BL       printf
   1800          	print_line();
   \   00000010   ........           BL       print_line
   1801          
   1802          	#if (HOST_BUS_INTERFACE)
   1803          		i = pH6130->HDW_INT_ENABLE_REG;
   \   00000014   ........           LDR.W    R0,??DataTable20_15
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   C08B               LDRH     R0,[R0, #+30]
   \   0000001C   0400               MOVS     R4,R0
   1804          		j = pH6130->HDW_INT_OUTPUT_ENABLE_REG;
   \   0000001E   ........           LDR.W    R0,??DataTable20_15
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   C08C               LDRH     R0,[R0, #+38]
   \   00000026   0500               MOVS     R5,R0
   1805          		k = pH6130->HDW_PENDING_INT_REG;
   \   00000028   ........           LDR.W    R0,??DataTable20_15
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   8089               LDRH     R0,[R0, #+12]
   \   00000030   0600               MOVS     R6,R0
   1806          		printf("HI-6131 Host SPI Error    n/a         n/a         n/a\n\r");
   \   00000032   ........           LDR.W    R0,??DataTable20_16
   \   00000036   ........           BL       printf
   1807          		
   1808          	#else // (HOST_SPI_INTERFACE)
   1809          		Write_6131LowReg(MAP_1, HDW_INT_ENABLE_REG, 1);
   1810          		i = Read_6131_1word(1);
   1811          		Write_6131LowReg(MAP_1, HDW_INT_OUTPUT_ENABLE_REG, 1);
   1812          		j = Read_6131_1word(1);
   1813          		Write_6131LowReg(MAP_1, HDW_PENDING_INT_REG, 1);
   1814          		k = Read_6131_1word(1);
   1815          		printf("HI-6131 Host SPI Error");
   1816          		if(!(i & (1<<15))) {	
   1817          			// int disabled 
   1818          			print_null();
   1819          		}
   1820          		else {
   1821          			// int enabled 
   1822          			print_sp1sp();
   1823          			// pin output? 
   1824          			if(j & (1<<15)) print_b1sp();
   1825          			else print_b0sp(); 
   1826          			// pending? 
   1827          			if(k & (1<<15)) printf("1\n\r");
   1828          			else printf("0\n\r"); 
   1829          		}
   1830          	#endif
   1831          
   1832          	printf("EE Chksum/Corr RAM Err");
   \   0000003A   ........           LDR.W    R0,??DataTable20_17
   \   0000003E   ........           BL       printf
   1833          	if(!(i & (1<<14))) {	
   \   00000042   6004               LSLS     R0,R4,#+17
   \   00000044   02D4               BMI.N    ??list_hw_ints_console_0
   1834          		// int disabled 
   1835          		print_null();
   \   00000046   ........           BL       print_null
   \   0000004A   11E0               B.N      ??list_hw_ints_console_1
   1836          	}
   1837          	else {
   1838          		// int enabled 
   1839          		print_sp1sp();
   \                     ??list_hw_ints_console_0:
   \   0000004C   ........           BL       print_sp1sp
   1840          		// pin output? 
   1841          		if(j & (1<<14)) print_b1sp();
   \   00000050   6804               LSLS     R0,R5,#+17
   \   00000052   02D5               BPL.N    ??list_hw_ints_console_2
   \   00000054   ........           BL       print_b1sp
   \   00000058   01E0               B.N      ??list_hw_ints_console_3
   1842          		else print_b0sp(); 
   \                     ??list_hw_ints_console_2:
   \   0000005A   ........           BL       print_b0sp
   1843          		// pending? 
   1844          		if(k & (1<<14)) printf("1\n\r");
   \                     ??list_hw_ints_console_3:
   \   0000005E   7004               LSLS     R0,R6,#+17
   \   00000060   03D5               BPL.N    ??list_hw_ints_console_4
   \   00000062   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   00000064   ........           BL       printf
   \   00000068   02E0               B.N      ??list_hw_ints_console_1
   1845          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_4:
   \   0000006A   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   0000006C   ........           BL       printf
   1846          	}
   1847          
   1848          	printf("RAM Init/UncorrRAM Err");
   \                     ??list_hw_ints_console_1:
   \   00000070   ........           LDR.W    R0,??DataTable20_18
   \   00000074   ........           BL       printf
   1849          	if(!(i & (1<<13))) {	
   \   00000078   A004               LSLS     R0,R4,#+18
   \   0000007A   02D4               BMI.N    ??list_hw_ints_console_5
   1850          		// int disabled 
   1851          		print_null();
   \   0000007C   ........           BL       print_null
   \   00000080   11E0               B.N      ??list_hw_ints_console_6
   1852          	}
   1853          	else {
   1854          		// int enabled 
   1855          		print_sp1sp();
   \                     ??list_hw_ints_console_5:
   \   00000082   ........           BL       print_sp1sp
   1856          		// pin output? 
   1857          		if(j & (1<<13)) print_b1sp();
   \   00000086   A804               LSLS     R0,R5,#+18
   \   00000088   02D5               BPL.N    ??list_hw_ints_console_7
   \   0000008A   ........           BL       print_b1sp
   \   0000008E   01E0               B.N      ??list_hw_ints_console_8
   1858          		else print_b0sp(); 
   \                     ??list_hw_ints_console_7:
   \   00000090   ........           BL       print_b0sp
   1859          		// pending? 
   1860          		if(k & (1<<13)) printf("1\n\r");
   \                     ??list_hw_ints_console_8:
   \   00000094   B004               LSLS     R0,R6,#+18
   \   00000096   03D5               BPL.N    ??list_hw_ints_console_9
   \   00000098   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   0000009A   ........           BL       printf
   \   0000009E   02E0               B.N      ??list_hw_ints_console_6
   1861          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_9:
   \   000000A0   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   000000A2   ........           BL       printf
   1862          	}
   1863          
   1864          	printf("Loopback Fail on Bus A");
   \                     ??list_hw_ints_console_6:
   \   000000A6   ........           LDR.W    R0,??DataTable20_19
   \   000000AA   ........           BL       printf
   1865          	if(!(i & (1<<12))) {	
   \   000000AE   E004               LSLS     R0,R4,#+19
   \   000000B0   02D4               BMI.N    ??list_hw_ints_console_10
   1866          		// int disabled 
   1867          		print_null();
   \   000000B2   ........           BL       print_null
   \   000000B6   11E0               B.N      ??list_hw_ints_console_11
   1868          	}
   1869          	else {
   1870          		// int enabled 
   1871          		print_sp1sp();
   \                     ??list_hw_ints_console_10:
   \   000000B8   ........           BL       print_sp1sp
   1872          		// pin output? 
   1873          		if(j & (1<<12)) print_b1sp();
   \   000000BC   E804               LSLS     R0,R5,#+19
   \   000000BE   02D5               BPL.N    ??list_hw_ints_console_12
   \   000000C0   ........           BL       print_b1sp
   \   000000C4   01E0               B.N      ??list_hw_ints_console_13
   1874          		else print_b0sp(); 
   \                     ??list_hw_ints_console_12:
   \   000000C6   ........           BL       print_b0sp
   1875          		// pending? 
   1876          		if(k & (1<<12)) printf("1\n\r");
   \                     ??list_hw_ints_console_13:
   \   000000CA   F004               LSLS     R0,R6,#+19
   \   000000CC   03D5               BPL.N    ??list_hw_ints_console_14
   \   000000CE   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   000000D0   ........           BL       printf
   \   000000D4   02E0               B.N      ??list_hw_ints_console_11
   1877          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_14:
   \   000000D6   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   000000D8   ........           BL       printf
   1878          	}
   1879          
   1880          	printf("Loopback Fail on Bus B");
   \                     ??list_hw_ints_console_11:
   \   000000DC   ........           LDR.W    R0,??DataTable20_20
   \   000000E0   ........           BL       printf
   1881          	if(!(i & (1<<11))) {	
   \   000000E4   2005               LSLS     R0,R4,#+20
   \   000000E6   02D4               BMI.N    ??list_hw_ints_console_15
   1882          		// int disabled 
   1883          		print_null();
   \   000000E8   ........           BL       print_null
   \   000000EC   11E0               B.N      ??list_hw_ints_console_16
   1884          	}
   1885          	else {
   1886          		// int enabled 
   1887          		print_sp1sp();
   \                     ??list_hw_ints_console_15:
   \   000000EE   ........           BL       print_sp1sp
   1888          		// pin output? 
   1889          		if(j & (1<<11)) print_b1sp();
   \   000000F2   2805               LSLS     R0,R5,#+20
   \   000000F4   02D5               BPL.N    ??list_hw_ints_console_17
   \   000000F6   ........           BL       print_b1sp
   \   000000FA   01E0               B.N      ??list_hw_ints_console_18
   1890          		else print_b0sp(); 
   \                     ??list_hw_ints_console_17:
   \   000000FC   ........           BL       print_b0sp
   1891          		// pending? 
   1892          		if(k & (1<<11)) printf("1\n\r");
   \                     ??list_hw_ints_console_18:
   \   00000100   3005               LSLS     R0,R6,#+20
   \   00000102   03D5               BPL.N    ??list_hw_ints_console_19
   \   00000104   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   00000106   ........           BL       printf
   \   0000010A   02E0               B.N      ??list_hw_ints_console_16
   1893          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_19:
   \   0000010C   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   0000010E   ........           BL       printf
   1894          	}
   1895          
   1896          	printf("MT Timetag Ct Rollover");
   \                     ??list_hw_ints_console_16:
   \   00000112   ........           LDR.W    R0,??DataTable20_21
   \   00000116   ........           BL       printf
   1897          	if(!(i & (1<<10))) {	
   \   0000011A   6005               LSLS     R0,R4,#+21
   \   0000011C   02D4               BMI.N    ??list_hw_ints_console_20
   1898          		// int disabled 
   1899          		print_null();
   \   0000011E   ........           BL       print_null
   \   00000122   11E0               B.N      ??list_hw_ints_console_21
   1900          	}
   1901          	else {
   1902          		// int enabled 
   1903          		print_sp1sp();
   \                     ??list_hw_ints_console_20:
   \   00000124   ........           BL       print_sp1sp
   1904          		// pin output? 
   1905          		if(j & (1<<10)) print_b1sp();
   \   00000128   6805               LSLS     R0,R5,#+21
   \   0000012A   02D5               BPL.N    ??list_hw_ints_console_22
   \   0000012C   ........           BL       print_b1sp
   \   00000130   01E0               B.N      ??list_hw_ints_console_23
   1906          		else print_b0sp(); 
   \                     ??list_hw_ints_console_22:
   \   00000132   ........           BL       print_b0sp
   1907          		// pending? 
   1908          		if(k & (1<<10)) printf("1\n\r");
   \                     ??list_hw_ints_console_23:
   \   00000136   7005               LSLS     R0,R6,#+21
   \   00000138   03D5               BPL.N    ??list_hw_ints_console_24
   \   0000013A   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   0000013C   ........           BL       printf
   \   00000140   02E0               B.N      ??list_hw_ints_console_21
   1909          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_24:
   \   00000142   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   00000144   ........           BL       printf
   1910          	}
   1911          
   1912          	printf("BC Timetag Ct Rollover");
   \                     ??list_hw_ints_console_21:
   \   00000148   ........           LDR.W    R0,??DataTable20_22
   \   0000014C   ........           BL       printf
   1913          	if(!(i & (1<<9))) {	
   \   00000150   A005               LSLS     R0,R4,#+22
   \   00000152   02D4               BMI.N    ??list_hw_ints_console_25
   1914          		// int disabled 
   1915          		print_null();
   \   00000154   ........           BL       print_null
   \   00000158   11E0               B.N      ??list_hw_ints_console_26
   1916          	}
   1917          	else {
   1918          		// int enabled 
   1919          		print_sp1sp();
   \                     ??list_hw_ints_console_25:
   \   0000015A   ........           BL       print_sp1sp
   1920          		// pin output? 
   1921          		if(j & (1<<9)) print_b1sp();
   \   0000015E   A805               LSLS     R0,R5,#+22
   \   00000160   02D5               BPL.N    ??list_hw_ints_console_27
   \   00000162   ........           BL       print_b1sp
   \   00000166   01E0               B.N      ??list_hw_ints_console_28
   1922          		else print_b0sp(); 
   \                     ??list_hw_ints_console_27:
   \   00000168   ........           BL       print_b0sp
   1923          		// pending? 
   1924          		if(k & (1<<9)) printf("1\n\r");
   \                     ??list_hw_ints_console_28:
   \   0000016C   B005               LSLS     R0,R6,#+22
   \   0000016E   03D5               BPL.N    ??list_hw_ints_console_29
   \   00000170   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   00000172   ........           BL       printf
   \   00000176   02E0               B.N      ??list_hw_ints_console_26
   1925          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_29:
   \   00000178   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   0000017A   ........           BL       printf
   1926          	}
   1927          
   1928          	printf("RT2 Timetag Valu Match");
   \                     ??list_hw_ints_console_26:
   \   0000017E   ........           LDR.W    R0,??DataTable20_23
   \   00000182   ........           BL       printf
   1929          	if(!(i & (1<<8))) {	
   \   00000186   E005               LSLS     R0,R4,#+23
   \   00000188   02D4               BMI.N    ??list_hw_ints_console_30
   1930          		// int disabled 
   1931          		print_null();
   \   0000018A   ........           BL       print_null
   \   0000018E   11E0               B.N      ??list_hw_ints_console_31
   1932          	}
   1933          	else {
   1934          		// int enabled 
   1935          		print_sp1sp();
   \                     ??list_hw_ints_console_30:
   \   00000190   ........           BL       print_sp1sp
   1936          		// pin output? 
   1937          		if(j & (1<<8)) print_b1sp();
   \   00000194   E805               LSLS     R0,R5,#+23
   \   00000196   02D5               BPL.N    ??list_hw_ints_console_32
   \   00000198   ........           BL       print_b1sp
   \   0000019C   01E0               B.N      ??list_hw_ints_console_33
   1938          		else print_b0sp(); 
   \                     ??list_hw_ints_console_32:
   \   0000019E   ........           BL       print_b0sp
   1939          		// pending? 
   1940          		if(k & (1<<8)) printf("1\n\r");
   \                     ??list_hw_ints_console_33:
   \   000001A2   F005               LSLS     R0,R6,#+23
   \   000001A4   03D5               BPL.N    ??list_hw_ints_console_34
   \   000001A6   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   000001A8   ........           BL       printf
   \   000001AC   02E0               B.N      ??list_hw_ints_console_31
   1941          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_34:
   \   000001AE   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   000001B0   ........           BL       printf
   1942          	}
   1943          
   1944          	printf("RT1 Timetag Valu Match");
   \                     ??list_hw_ints_console_31:
   \   000001B4   ........           LDR.W    R0,??DataTable20_24
   \   000001B8   ........           BL       printf
   1945          	if(!(i & (1<<7))) {	
   \   000001BC   2006               LSLS     R0,R4,#+24
   \   000001BE   02D4               BMI.N    ??list_hw_ints_console_35
   1946          		// int disabled 
   1947          		print_null();
   \   000001C0   ........           BL       print_null
   \   000001C4   11E0               B.N      ??list_hw_ints_console_36
   1948          	}
   1949          	else {
   1950          		// int enabled 
   1951          		print_sp1sp();
   \                     ??list_hw_ints_console_35:
   \   000001C6   ........           BL       print_sp1sp
   1952          		// pin output? 
   1953          		if(j & (1<<7)) print_b1sp();
   \   000001CA   2806               LSLS     R0,R5,#+24
   \   000001CC   02D5               BPL.N    ??list_hw_ints_console_37
   \   000001CE   ........           BL       print_b1sp
   \   000001D2   01E0               B.N      ??list_hw_ints_console_38
   1954          		else print_b0sp(); 
   \                     ??list_hw_ints_console_37:
   \   000001D4   ........           BL       print_b0sp
   1955          		// pending? 
   1956          		if(k & (1<<7)) printf("1\n\r");
   \                     ??list_hw_ints_console_38:
   \   000001D8   3006               LSLS     R0,R6,#+24
   \   000001DA   03D5               BPL.N    ??list_hw_ints_console_39
   \   000001DC   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   000001DE   ........           BL       printf
   \   000001E2   02E0               B.N      ??list_hw_ints_console_36
   1957          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_39:
   \   000001E4   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   000001E6   ........           BL       printf
   1958          	}
   1959          
   1960          	printf("MT Timetag Value Match");
   \                     ??list_hw_ints_console_36:
   \   000001EA   ........           LDR.W    R0,??DataTable20_25
   \   000001EE   ........           BL       printf
   1961          	if(!(i & (1<<6))) {	
   \   000001F2   6006               LSLS     R0,R4,#+25
   \   000001F4   02D4               BMI.N    ??list_hw_ints_console_40
   1962          		// int disabled 
   1963          		print_null();
   \   000001F6   ........           BL       print_null
   \   000001FA   11E0               B.N      ??list_hw_ints_console_41
   1964          	}
   1965          	else {
   1966          		// int enabled 
   1967          		print_sp1sp();
   \                     ??list_hw_ints_console_40:
   \   000001FC   ........           BL       print_sp1sp
   1968          		// pin output? 
   1969          		if(j & (1<<6)) print_b1sp();
   \   00000200   6806               LSLS     R0,R5,#+25
   \   00000202   02D5               BPL.N    ??list_hw_ints_console_42
   \   00000204   ........           BL       print_b1sp
   \   00000208   01E0               B.N      ??list_hw_ints_console_43
   1970          		else print_b0sp(); 
   \                     ??list_hw_ints_console_42:
   \   0000020A   ........           BL       print_b0sp
   1971          		// pending? 
   1972          		if(k & (1<<6)) printf("1\n\r");
   \                     ??list_hw_ints_console_43:
   \   0000020E   7006               LSLS     R0,R6,#+25
   \   00000210   03D5               BPL.N    ??list_hw_ints_console_44
   \   00000212   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   00000214   ........           BL       printf
   \   00000218   02E0               B.N      ??list_hw_ints_console_41
   1973          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_44:
   \   0000021A   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   0000021C   ........           BL       printf
   1974          	}
   1975          
   1976          	printf("BC Timetag Value Match");
   \                     ??list_hw_ints_console_41:
   \   00000220   ........           LDR.W    R0,??DataTable20_26
   \   00000224   ........           BL       printf
   1977          	if(!(i & (1<<5))) {	
   \   00000228   A006               LSLS     R0,R4,#+26
   \   0000022A   02D4               BMI.N    ??list_hw_ints_console_45
   1978          		// int disabled 
   1979          		print_null();
   \   0000022C   ........           BL       print_null
   \   00000230   11E0               B.N      ??list_hw_ints_console_46
   1980          	}
   1981          	else {
   1982          		// int enabled 
   1983          		print_sp1sp();
   \                     ??list_hw_ints_console_45:
   \   00000232   ........           BL       print_sp1sp
   1984          		// pin output? 
   1985          		if(j & (1<<5)) print_b1sp();
   \   00000236   A806               LSLS     R0,R5,#+26
   \   00000238   02D5               BPL.N    ??list_hw_ints_console_47
   \   0000023A   ........           BL       print_b1sp
   \   0000023E   01E0               B.N      ??list_hw_ints_console_48
   1986          		else print_b0sp(); 
   \                     ??list_hw_ints_console_47:
   \   00000240   ........           BL       print_b0sp
   1987          		// pending? 
   1988          		if(k & (1<<5)) printf("1\n\r");
   \                     ??list_hw_ints_console_48:
   \   00000244   B006               LSLS     R0,R6,#+26
   \   00000246   03D5               BPL.N    ??list_hw_ints_console_49
   \   00000248   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   0000024A   ........           BL       printf
   \   0000024E   02E0               B.N      ??list_hw_ints_console_46
   1989          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_49:
   \   00000250   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   00000252   ........           BL       printf
   1990          	}
   1991          
   1992          	printf("  RT2 Addr Parity Fail");
   \                     ??list_hw_ints_console_46:
   \   00000256   ........           LDR.W    R0,??DataTable20_27
   \   0000025A   ........           BL       printf
   1993          	if(!(i & (1<<4))) {	
   \   0000025E   E006               LSLS     R0,R4,#+27
   \   00000260   02D4               BMI.N    ??list_hw_ints_console_50
   1994          		// int disabled 
   1995          		print_null();
   \   00000262   ........           BL       print_null
   \   00000266   11E0               B.N      ??list_hw_ints_console_51
   1996          	}
   1997          	else {
   1998          		// int enabled 
   1999          		print_sp1sp();
   \                     ??list_hw_ints_console_50:
   \   00000268   ........           BL       print_sp1sp
   2000          		// pin output? 
   2001          		if(j & (1<<4)) print_b1sp();
   \   0000026C   E806               LSLS     R0,R5,#+27
   \   0000026E   02D5               BPL.N    ??list_hw_ints_console_52
   \   00000270   ........           BL       print_b1sp
   \   00000274   01E0               B.N      ??list_hw_ints_console_53
   2002          		else print_b0sp(); 
   \                     ??list_hw_ints_console_52:
   \   00000276   ........           BL       print_b0sp
   2003          		// pending? 
   2004          		if(k & (1<<4)) printf("1\n\r");
   \                     ??list_hw_ints_console_53:
   \   0000027A   F006               LSLS     R0,R6,#+27
   \   0000027C   03D5               BPL.N    ??list_hw_ints_console_54
   \   0000027E   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   00000280   ........           BL       printf
   \   00000284   02E0               B.N      ??list_hw_ints_console_51
   2005          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_54:
   \   00000286   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   00000288   ........           BL       printf
   2006          	}
   2007          
   2008          	printf("  RT1 Addr Parity Fail");
   \                     ??list_hw_ints_console_51:
   \   0000028C   ........           LDR.W    R0,??DataTable20_28
   \   00000290   ........           BL       printf
   2009          	if(!(i & (1<<3))) {	
   \   00000294   2007               LSLS     R0,R4,#+28
   \   00000296   02D4               BMI.N    ??list_hw_ints_console_55
   2010          		// int disabled 
   2011          		print_null();
   \   00000298   ........           BL       print_null
   \   0000029C   11E0               B.N      ??list_hw_ints_console_56
   2012          	}
   2013          	else {
   2014          		// int enabled 
   2015          		print_sp1sp();
   \                     ??list_hw_ints_console_55:
   \   0000029E   ........           BL       print_sp1sp
   2016          		// pin output? 
   2017          		if(j & (1<<3)) print_b1sp();
   \   000002A2   2807               LSLS     R0,R5,#+28
   \   000002A4   02D5               BPL.N    ??list_hw_ints_console_57
   \   000002A6   ........           BL       print_b1sp
   \   000002AA   01E0               B.N      ??list_hw_ints_console_58
   2018          		else print_b0sp(); 
   \                     ??list_hw_ints_console_57:
   \   000002AC   ........           BL       print_b0sp
   2019          		// pending? 
   2020          		if(k & (1<<3)) printf("1\n\r");
   \                     ??list_hw_ints_console_58:
   \   000002B0   3007               LSLS     R0,R6,#+28
   \   000002B2   03D5               BPL.N    ??list_hw_ints_console_59
   \   000002B4   ....               ADR.N    R0,??DataTable9  ;; "1\n\r"
   \   000002B6   ........           BL       printf
   \   000002BA   02E0               B.N      ??list_hw_ints_console_56
   2021          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_59:
   \   000002BC   ....               ADR.N    R0,??DataTable9_1  ;; "0\n\r"
   \   000002BE   ........           BL       printf
   2022          	}
   2023          
   2024          	printf(" Check Pending RT Ints");
   \                     ??list_hw_ints_console_56:
   \   000002C2   ........           LDR.W    R0,??DataTable20_29
   \   000002C6   ........           BL       printf
   2025          	if(!(i & (1<<2))) print_dd0n(); // int disabled 
   \   000002CA   6007               LSLS     R0,R4,#+29
   \   000002CC   02D4               BMI.N    ??list_hw_ints_console_60
   \   000002CE   ........           BL       print_dd0n
   \   000002D2   01E0               B.N      ??list_hw_ints_console_61
   2026          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_60:
   \   000002D4   ........           BL       print_dd1n
   2027          
   2028          	printf(" Check Pending MT Ints");
   \                     ??list_hw_ints_console_61:
   \   000002D8   ........           LDR.W    R0,??DataTable20_30
   \   000002DC   ........           BL       printf
   2029          	if(!(i & (1<<1))) print_dd0n(); // int disabled 
   \   000002E0   A007               LSLS     R0,R4,#+30
   \   000002E2   02D4               BMI.N    ??list_hw_ints_console_62
   \   000002E4   ........           BL       print_dd0n
   \   000002E8   01E0               B.N      ??list_hw_ints_console_63
   2030          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_62:
   \   000002EA   ........           BL       print_dd1n
   2031          
   2032          	printf(" Check Pending BC Ints");
   \                     ??list_hw_ints_console_63:
   \   000002EE   ........           LDR.W    R0,??DataTable20_31
   \   000002F2   ........           BL       printf
   2033          	if(!(i & (1<<0))) print_dd0n(); // int disabled 
   \   000002F6   E007               LSLS     R0,R4,#+31
   \   000002F8   02D4               BMI.N    ??list_hw_ints_console_64
   \   000002FA   ........           BL       print_dd0n
   \   000002FE   01E0               B.N      ??list_hw_ints_console_65
   2034          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_64:
   \   00000300   ........           BL       print_dd1n
   2035          
   2036          	print_line();
   \                     ??list_hw_ints_console_65:
   \   00000304   ........           BL       print_line
   2037          	printf("Note: Reading the HW Pending Interrupt Register clears it!\n\r");
   \   00000308   ........           LDR.W    R0,??DataTable20_32
   \   0000030C   ........           BL       printf
   2038          	printf("Press 'M' for menu, or press any valid menu key.   ");
   \   00000310   ........           LDR.W    R0,??DataTable20_33
   \   00000314   ........           BL       printf
   2039          
   2040          	// return value read from the HW Pending Interrupt Register, now cleared 
   2041          	return k;
   \   00000318   3000               MOVS     R0,R6
   \   0000031A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000031C   70BD               POP      {R4-R6,PC}       ;; return
   2042          
   2043          }	// end list_hw_ints_console()
   2044          
   2045          
   2046          //---------------------------------------------------------------
   2047          //  this function lists remote terminal interrupt 
   2048          //	configuration to the console via UART. if there
   2049          //	are pending RT interrupts, these too are displayed.
   2050          //	Function returns the value read from the RT pending
   2051          //	interrupt register, since reading the reg clears it.
   2052          //---------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2053          unsigned short int list_rt_ints_console (void) {
   \                     list_rt_ints_console:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   2054            
   2055                  unsigned short k=0;
   \   00000002   0024               MOVS     R4,#+0
   2056          
   2057          	#if(!(RT1_ena||RT2_ena)) 
   2058          	printf("\n\rNeither Remote Terminal Is Enabled!\n\n\r"); 
   2059          	#else // (RT1_ena||RT2_ena)
   2060                  
   2061                      unsigned short i,j;
   2062              
   2063                      #if (HOST_BUS_INTERFACE)
   2064                      extern const H6130 pH6130; // HI-6130 register struct base address  
   2065                      #endif
   2066                      
   2067                      // formfeed 
   2068                      putchar(12); 	
   \   00000004   0C20               MOVS     R0,#+12
   \   00000006   ........           BL       putchar
   2069              
   2070                      #if (HOST_BUS_INTERFACE)
   2071                              i = pH6130->RT_INT_ENABLE_REG;
   \   0000000A   ........           LDR.W    R0,??DataTable20_15
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   808C               LDRH     R0,[R0, #+36]
   \   00000012   0500               MOVS     R5,R0
   2072                              j = pH6130->RT_INT_OUTPUT_ENABLE_REG;
   \   00000014   ........           LDR.W    R0,??DataTable20_15
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   808D               LDRH     R0,[R0, #+44]
   \   0000001C   0600               MOVS     R6,R0
   2073                              k = pH6130->RT_PENDING_INT_REG;
   \   0000001E   ........           LDR.W    R0,??DataTable20_15
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   408A               LDRH     R0,[R0, #+18]
   \   00000026   0400               MOVS     R4,R0
   2074                      #else // (HOST_SPI_INTERFACE)
   2075                              Write_6131LowReg(MAP_1, RT_INT_ENABLE_REG, 1);
   2076                              i = Read_6131_1word(1);
   2077                              Write_6131LowReg(MAP_1, RT_INT_OUTPUT_ENABLE_REG, 1);
   2078                              j = Read_6131_1word(1);
   2079                              Write_6131LowReg(MAP_1, RT_PENDING_INT_REG, 1);
   2080                              k = Read_6131_1word(1);
   2081                      #endif
   2082              
   2083                      printf("\n\r Remote Terminal Ints  Enabled?   Pin Output?   Pending?\n\r");
   \   00000028   ........           LDR.W    R0,??DataTable20_34
   \   0000002C   ........           BL       printf
   2084                      print_line();
   \   00000030   ........           BL       print_line
   2085              
   2086                      printf("RT2  Reset RT mode cmd");
   \   00000034   ........           LDR.W    R0,??DataTable20_35
   \   00000038   ........           BL       printf
   2087                      if(!(i & (1<<15))) {	
   \   0000003C   2804               LSLS     R0,R5,#+16
   \   0000003E   02D4               BMI.N    ??list_rt_ints_console_0
   2088                              // int disabled 
   2089                              print_null();
   \   00000040   ........           BL       print_null
   \   00000044   11E0               B.N      ??list_rt_ints_console_1
   2090                      }
   2091                      else {
   2092                              // int enabled 
   2093                              print_sp1sp();
   \                     ??list_rt_ints_console_0:
   \   00000046   ........           BL       print_sp1sp
   2094                              // pin output? 
   2095                              if(j & (1<<15)) print_b1sp();
   \   0000004A   3004               LSLS     R0,R6,#+16
   \   0000004C   02D5               BPL.N    ??list_rt_ints_console_2
   \   0000004E   ........           BL       print_b1sp
   \   00000052   01E0               B.N      ??list_rt_ints_console_3
   2096                              else print_b0sp(); 
   \                     ??list_rt_ints_console_2:
   \   00000054   ........           BL       print_b0sp
   2097                              // pending? 
   2098                              if(k & (1<<15)) printf("1\n\r");
   \                     ??list_rt_ints_console_3:
   \   00000058   2004               LSLS     R0,R4,#+16
   \   0000005A   03D5               BPL.N    ??list_rt_ints_console_4
   \   0000005C   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   0000005E   ........           BL       printf
   \   00000062   02E0               B.N      ??list_rt_ints_console_1
   2099                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_4:
   \   00000064   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   00000066   ........           BL       printf
   2100                      }
   2101              
   2102                      printf("RT2  Index Equals Zero");
   \                     ??list_rt_ints_console_1:
   \   0000006A   ........           LDR.W    R0,??DataTable20_36
   \   0000006E   ........           BL       printf
   2103                      if(!(i & (1<<14))) {	
   \   00000072   6804               LSLS     R0,R5,#+17
   \   00000074   02D4               BMI.N    ??list_rt_ints_console_5
   2104                              // int disabled 
   2105                              print_null();
   \   00000076   ........           BL       print_null
   \   0000007A   11E0               B.N      ??list_rt_ints_console_6
   2106                      }
   2107                      else {
   2108                              // int enabled 
   2109                              print_sp1sp();
   \                     ??list_rt_ints_console_5:
   \   0000007C   ........           BL       print_sp1sp
   2110                              // pin output? 
   2111                              if(j & (1<<14)) print_b1sp();
   \   00000080   7004               LSLS     R0,R6,#+17
   \   00000082   02D5               BPL.N    ??list_rt_ints_console_7
   \   00000084   ........           BL       print_b1sp
   \   00000088   01E0               B.N      ??list_rt_ints_console_8
   2112                              else print_b0sp(); 
   \                     ??list_rt_ints_console_7:
   \   0000008A   ........           BL       print_b0sp
   2113                              // pending? 
   2114                              if(k & (1<<14)) printf("1\n\r");
   \                     ??list_rt_ints_console_8:
   \   0000008E   6004               LSLS     R0,R4,#+17
   \   00000090   03D5               BPL.N    ??list_rt_ints_console_9
   \   00000092   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   00000094   ........           BL       printf
   \   00000098   02E0               B.N      ??list_rt_ints_console_6
   2115                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_9:
   \   0000009A   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   0000009C   ........           BL       printf
   2116                      }
   2117              
   2118                      printf("RT2    Illegal Command");
   \                     ??list_rt_ints_console_6:
   \   000000A0   ........           LDR.W    R0,??DataTable20_37
   \   000000A4   ........           BL       printf
   2119                      if(!(i & (1<<13))) {	
   \   000000A8   A804               LSLS     R0,R5,#+18
   \   000000AA   02D4               BMI.N    ??list_rt_ints_console_10
   2120                              // int disabled 
   2121                              print_null();
   \   000000AC   ........           BL       print_null
   \   000000B0   11E0               B.N      ??list_rt_ints_console_11
   2122                      }
   2123                      else {
   2124                              // int enabled 
   2125                              print_sp1sp();
   \                     ??list_rt_ints_console_10:
   \   000000B2   ........           BL       print_sp1sp
   2126                              // pin output? 
   2127                              if(j & (1<<13)) print_b1sp();
   \   000000B6   B004               LSLS     R0,R6,#+18
   \   000000B8   02D5               BPL.N    ??list_rt_ints_console_12
   \   000000BA   ........           BL       print_b1sp
   \   000000BE   01E0               B.N      ??list_rt_ints_console_13
   2128                              else print_b0sp(); 
   \                     ??list_rt_ints_console_12:
   \   000000C0   ........           BL       print_b0sp
   2129                              // pending? 
   2130                              if(k & (1<<13)) printf("1\n\r");
   \                     ??list_rt_ints_console_13:
   \   000000C4   A004               LSLS     R0,R4,#+18
   \   000000C6   03D5               BPL.N    ??list_rt_ints_console_14
   \   000000C8   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   000000CA   ........           BL       printf
   \   000000CE   02E0               B.N      ??list_rt_ints_console_11
   2131                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_14:
   \   000000D0   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   000000D2   ........           BL       printf
   2132                      }
   2133              
   2134                      printf("RT2 Broadcast Msg Rcvd");
   \                     ??list_rt_ints_console_11:
   \   000000D6   ........           LDR.W    R0,??DataTable20_38
   \   000000DA   ........           BL       printf
   2135                      if(!(i & (1<<12))) {	
   \   000000DE   E804               LSLS     R0,R5,#+19
   \   000000E0   02D4               BMI.N    ??list_rt_ints_console_15
   2136                              // int disabled 
   2137                              print_null();
   \   000000E2   ........           BL       print_null
   \   000000E6   11E0               B.N      ??list_rt_ints_console_16
   2138                      }
   2139                      else {
   2140                              // int enabled 
   2141                              print_sp1sp();
   \                     ??list_rt_ints_console_15:
   \   000000E8   ........           BL       print_sp1sp
   2142                              // pin output? 
   2143                              if(j & (1<<12)) print_b1sp();
   \   000000EC   F004               LSLS     R0,R6,#+19
   \   000000EE   02D5               BPL.N    ??list_rt_ints_console_17
   \   000000F0   ........           BL       print_b1sp
   \   000000F4   01E0               B.N      ??list_rt_ints_console_18
   2144                              else print_b0sp(); 
   \                     ??list_rt_ints_console_17:
   \   000000F6   ........           BL       print_b0sp
   2145                              // pending? 
   2146                              if(k & (1<<12)) printf("1\n\r");
   \                     ??list_rt_ints_console_18:
   \   000000FA   E004               LSLS     R0,R4,#+19
   \   000000FC   03D5               BPL.N    ??list_rt_ints_console_19
   \   000000FE   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   00000100   ........           BL       printf
   \   00000104   02E0               B.N      ??list_rt_ints_console_16
   2147                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_19:
   \   00000106   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   00000108   ........           BL       printf
   2148                      }
   2149              
   2150                      printf("RT2 MessageErrorStatus");
   \                     ??list_rt_ints_console_16:
   \   0000010C   ........           LDR.W    R0,??DataTable20_39
   \   00000110   ........           BL       printf
   2151                      if(!(i & (1<<11))) {	
   \   00000114   2805               LSLS     R0,R5,#+20
   \   00000116   02D4               BMI.N    ??list_rt_ints_console_20
   2152                              // int disabled 
   2153                              print_null();
   \   00000118   ........           BL       print_null
   \   0000011C   11E0               B.N      ??list_rt_ints_console_21
   2154                      }
   2155                      else {
   2156                              // int enabled 
   2157                              print_sp1sp();
   \                     ??list_rt_ints_console_20:
   \   0000011E   ........           BL       print_sp1sp
   2158                              // pin output? 
   2159                              if(j & (1<<11)) print_b1sp();
   \   00000122   3005               LSLS     R0,R6,#+20
   \   00000124   02D5               BPL.N    ??list_rt_ints_console_22
   \   00000126   ........           BL       print_b1sp
   \   0000012A   01E0               B.N      ??list_rt_ints_console_23
   2160                              else print_b0sp(); 
   \                     ??list_rt_ints_console_22:
   \   0000012C   ........           BL       print_b0sp
   2161                              // pending? 
   2162                              if(k & (1<<11)) printf("1\n\r");
   \                     ??list_rt_ints_console_23:
   \   00000130   2005               LSLS     R0,R4,#+20
   \   00000132   03D5               BPL.N    ??list_rt_ints_console_24
   \   00000134   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   00000136   ........           BL       printf
   \   0000013A   02E0               B.N      ??list_rt_ints_console_21
   2163                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_24:
   \   0000013C   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   0000013E   ........           BL       printf
   2164                      }
   2165              
   2166                      printf("RT2  Int When Accessed");
   \                     ??list_rt_ints_console_21:
   \   00000142   ........           LDR.W    R0,??DataTable20_40
   \   00000146   ........           BL       printf
   2167                      if(!(i & (1<<10))) {	
   \   0000014A   6805               LSLS     R0,R5,#+21
   \   0000014C   02D4               BMI.N    ??list_rt_ints_console_25
   2168                              // int disabled 
   2169                              print_null();
   \   0000014E   ........           BL       print_null
   \   00000152   11E0               B.N      ??list_rt_ints_console_26
   2170                      }
   2171                      else {
   2172                              // int enabled 
   2173                              print_sp1sp();
   \                     ??list_rt_ints_console_25:
   \   00000154   ........           BL       print_sp1sp
   2174                              // pin output? 
   2175                              if(j & (1<<10)) print_b1sp();
   \   00000158   7005               LSLS     R0,R6,#+21
   \   0000015A   02D5               BPL.N    ??list_rt_ints_console_27
   \   0000015C   ........           BL       print_b1sp
   \   00000160   01E0               B.N      ??list_rt_ints_console_28
   2176                              else print_b0sp(); 
   \                     ??list_rt_ints_console_27:
   \   00000162   ........           BL       print_b0sp
   2177                              // pending? 
   2178                              if(k & (1<<10)) printf("1\n\r");
   \                     ??list_rt_ints_console_28:
   \   00000166   6005               LSLS     R0,R4,#+21
   \   00000168   03D5               BPL.N    ??list_rt_ints_console_29
   \   0000016A   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   0000016C   ........           BL       printf
   \   00000170   02E0               B.N      ??list_rt_ints_console_26
   2179                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_29:
   \   00000172   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   00000174   ........           BL       printf
   2180                      }
   2181              
   2182                      printf("        Reserved Bit 9");
   \                     ??list_rt_ints_console_26:
   \   00000178   ........           LDR.W    R0,??DataTable20_41
   \   0000017C   ........           BL       printf
   2183                      print_dddn();
   \   00000180   ........           BL       print_dddn
   2184              
   2185                      printf("RT1  Reset RT mode cmd");
   \   00000184   ........           LDR.W    R0,??DataTable20_42
   \   00000188   ........           BL       printf
   2186                      if(!(i & (1<<8))) {	
   \   0000018C   E805               LSLS     R0,R5,#+23
   \   0000018E   02D4               BMI.N    ??list_rt_ints_console_30
   2187                              // int disabled 
   2188                              print_null();
   \   00000190   ........           BL       print_null
   \   00000194   11E0               B.N      ??list_rt_ints_console_31
   2189                      }
   2190                      else {
   2191                              // int enabled 
   2192                              print_sp1sp();
   \                     ??list_rt_ints_console_30:
   \   00000196   ........           BL       print_sp1sp
   2193                              // pin output? 
   2194                              if(j & (1<<8)) print_b1sp();
   \   0000019A   F005               LSLS     R0,R6,#+23
   \   0000019C   02D5               BPL.N    ??list_rt_ints_console_32
   \   0000019E   ........           BL       print_b1sp
   \   000001A2   01E0               B.N      ??list_rt_ints_console_33
   2195                              else print_b0sp(); 
   \                     ??list_rt_ints_console_32:
   \   000001A4   ........           BL       print_b0sp
   2196                              // pending? 
   2197                              if(k & (1<<8)) printf("1\n\r");
   \                     ??list_rt_ints_console_33:
   \   000001A8   E005               LSLS     R0,R4,#+23
   \   000001AA   03D5               BPL.N    ??list_rt_ints_console_34
   \   000001AC   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   000001AE   ........           BL       printf
   \   000001B2   02E0               B.N      ??list_rt_ints_console_31
   2198                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_34:
   \   000001B4   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   000001B6   ........           BL       printf
   2199                      }
   2200              
   2201                      printf("RT1  Index Equals Zero");
   \                     ??list_rt_ints_console_31:
   \   000001BA   ........           LDR.W    R0,??DataTable20_43
   \   000001BE   ........           BL       printf
   2202                      if(!(i & (1<<7))) {	
   \   000001C2   2806               LSLS     R0,R5,#+24
   \   000001C4   02D4               BMI.N    ??list_rt_ints_console_35
   2203                              // int disabled 
   2204                              print_null();
   \   000001C6   ........           BL       print_null
   \   000001CA   11E0               B.N      ??list_rt_ints_console_36
   2205                      }
   2206                      else {
   2207                              // int enabled 
   2208                              print_sp1sp();
   \                     ??list_rt_ints_console_35:
   \   000001CC   ........           BL       print_sp1sp
   2209                              // pin output? 
   2210                              if(j & (1<<7)) print_b1sp();
   \   000001D0   3006               LSLS     R0,R6,#+24
   \   000001D2   02D5               BPL.N    ??list_rt_ints_console_37
   \   000001D4   ........           BL       print_b1sp
   \   000001D8   01E0               B.N      ??list_rt_ints_console_38
   2211                              else print_b0sp(); 
   \                     ??list_rt_ints_console_37:
   \   000001DA   ........           BL       print_b0sp
   2212                              // pending? 
   2213                              if(k & (1<<7)) printf("1\n\r");
   \                     ??list_rt_ints_console_38:
   \   000001DE   2006               LSLS     R0,R4,#+24
   \   000001E0   03D5               BPL.N    ??list_rt_ints_console_39
   \   000001E2   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   000001E4   ........           BL       printf
   \   000001E8   02E0               B.N      ??list_rt_ints_console_36
   2214                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_39:
   \   000001EA   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   000001EC   ........           BL       printf
   2215                      }
   2216              
   2217                      printf("RT1    Illegal Command");
   \                     ??list_rt_ints_console_36:
   \   000001F0   ........           LDR.W    R0,??DataTable20_44
   \   000001F4   ........           BL       printf
   2218                      if(!(i & (1<<6))) {	
   \   000001F8   6806               LSLS     R0,R5,#+25
   \   000001FA   02D4               BMI.N    ??list_rt_ints_console_40
   2219                              // int disabled 
   2220                              print_null();
   \   000001FC   ........           BL       print_null
   \   00000200   11E0               B.N      ??list_rt_ints_console_41
   2221                      }
   2222                      else {
   2223                              // int enabled 
   2224                              print_sp1sp();
   \                     ??list_rt_ints_console_40:
   \   00000202   ........           BL       print_sp1sp
   2225                              // pin output? 
   2226                              if(j & (1<<6)) print_b1sp();
   \   00000206   7006               LSLS     R0,R6,#+25
   \   00000208   02D5               BPL.N    ??list_rt_ints_console_42
   \   0000020A   ........           BL       print_b1sp
   \   0000020E   01E0               B.N      ??list_rt_ints_console_43
   2227                              else print_b0sp(); 
   \                     ??list_rt_ints_console_42:
   \   00000210   ........           BL       print_b0sp
   2228                              // pending? 
   2229                              if(k & (1<<6)) printf("1\n\r");
   \                     ??list_rt_ints_console_43:
   \   00000214   6006               LSLS     R0,R4,#+25
   \   00000216   03D5               BPL.N    ??list_rt_ints_console_44
   \   00000218   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   0000021A   ........           BL       printf
   \   0000021E   02E0               B.N      ??list_rt_ints_console_41
   2230                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_44:
   \   00000220   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   00000222   ........           BL       printf
   2231                      }
   2232              
   2233                      printf("RT1 Broadcast Msg Rcvd");
   \                     ??list_rt_ints_console_41:
   \   00000226   ....               LDR.N    R0,??DataTable20_45
   \   00000228   ........           BL       printf
   2234                      if(!(i & (1<<5))) {	
   \   0000022C   A806               LSLS     R0,R5,#+26
   \   0000022E   02D4               BMI.N    ??list_rt_ints_console_45
   2235                              // int disabled 
   2236                              print_null();
   \   00000230   ........           BL       print_null
   \   00000234   11E0               B.N      ??list_rt_ints_console_46
   2237                      }
   2238                      else {
   2239                              // int enabled 
   2240                              print_sp1sp();
   \                     ??list_rt_ints_console_45:
   \   00000236   ........           BL       print_sp1sp
   2241                              // pin output? 
   2242                              if(j & (1<<5)) print_b1sp();
   \   0000023A   B006               LSLS     R0,R6,#+26
   \   0000023C   02D5               BPL.N    ??list_rt_ints_console_47
   \   0000023E   ........           BL       print_b1sp
   \   00000242   01E0               B.N      ??list_rt_ints_console_48
   2243                              else print_b0sp(); 
   \                     ??list_rt_ints_console_47:
   \   00000244   ........           BL       print_b0sp
   2244                              // pending? 
   2245                              if(k & (1<<5)) printf("1\n\r");
   \                     ??list_rt_ints_console_48:
   \   00000248   A006               LSLS     R0,R4,#+26
   \   0000024A   03D5               BPL.N    ??list_rt_ints_console_49
   \   0000024C   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   0000024E   ........           BL       printf
   \   00000252   02E0               B.N      ??list_rt_ints_console_46
   2246                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_49:
   \   00000254   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   00000256   ........           BL       printf
   2247                      }
   2248              
   2249                      printf("RT1 MessageErrorStatus");
   \                     ??list_rt_ints_console_46:
   \   0000025A   ....               LDR.N    R0,??DataTable20_46
   \   0000025C   ........           BL       printf
   2250                      if(!(i & (1<<4))) {	
   \   00000260   E806               LSLS     R0,R5,#+27
   \   00000262   02D4               BMI.N    ??list_rt_ints_console_50
   2251                              // int disabled 
   2252                              print_null();
   \   00000264   ........           BL       print_null
   \   00000268   11E0               B.N      ??list_rt_ints_console_51
   2253                      }
   2254                      else {
   2255                              // int enabled 
   2256                              print_sp1sp();
   \                     ??list_rt_ints_console_50:
   \   0000026A   ........           BL       print_sp1sp
   2257                              // pin output? 
   2258                              if(j & (1<<4)) print_b1sp();
   \   0000026E   F006               LSLS     R0,R6,#+27
   \   00000270   02D5               BPL.N    ??list_rt_ints_console_52
   \   00000272   ........           BL       print_b1sp
   \   00000276   01E0               B.N      ??list_rt_ints_console_53
   2259                              else print_b0sp(); 
   \                     ??list_rt_ints_console_52:
   \   00000278   ........           BL       print_b0sp
   2260                              // pending? 
   2261                              if(k & (1<<4)) printf("1\n\r");
   \                     ??list_rt_ints_console_53:
   \   0000027C   E006               LSLS     R0,R4,#+27
   \   0000027E   03D5               BPL.N    ??list_rt_ints_console_54
   \   00000280   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   00000282   ........           BL       printf
   \   00000286   02E0               B.N      ??list_rt_ints_console_51
   2262                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_54:
   \   00000288   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   0000028A   ........           BL       printf
   2263                      }
   2264              
   2265                      printf("RT1  Int When Accessed");
   \                     ??list_rt_ints_console_51:
   \   0000028E   ....               LDR.N    R0,??DataTable20_47
   \   00000290   ........           BL       printf
   2266                      if(!(i & (1<<3))) {	
   \   00000294   2807               LSLS     R0,R5,#+28
   \   00000296   02D4               BMI.N    ??list_rt_ints_console_55
   2267                              // int disabled 
   2268                              print_null();
   \   00000298   ........           BL       print_null
   \   0000029C   11E0               B.N      ??list_rt_ints_console_56
   2269                      }
   2270                      else {
   2271                              // int enabled 
   2272                              print_sp1sp();
   \                     ??list_rt_ints_console_55:
   \   0000029E   ........           BL       print_sp1sp
   2273                              // pin output? 
   2274                              if(j & (1<<3)) print_b1sp();
   \   000002A2   3007               LSLS     R0,R6,#+28
   \   000002A4   02D5               BPL.N    ??list_rt_ints_console_57
   \   000002A6   ........           BL       print_b1sp
   \   000002AA   01E0               B.N      ??list_rt_ints_console_58
   2275                              else print_b0sp(); 
   \                     ??list_rt_ints_console_57:
   \   000002AC   ........           BL       print_b0sp
   2276                              // pending? 
   2277                              if(k & (1<<3)) printf("1\n\r");
   \                     ??list_rt_ints_console_58:
   \   000002B0   2007               LSLS     R0,R4,#+28
   \   000002B2   03D5               BPL.N    ??list_rt_ints_console_59
   \   000002B4   ....               ADR.N    R0,??DataTable10  ;; "1\n\r"
   \   000002B6   ........           BL       printf
   \   000002BA   02E0               B.N      ??list_rt_ints_console_56
   2278                              else printf("0\n\r"); 
   \                     ??list_rt_ints_console_59:
   \   000002BC   ....               ADR.N    R0,??DataTable10_1  ;; "0\n\r"
   \   000002BE   ........           BL       printf
   2279                      }
   2280              
   2281                      printf("     Reserved Bits 2-0");
   \                     ??list_rt_ints_console_56:
   \   000002C2   ....               LDR.N    R0,??DataTable20_48
   \   000002C4   ........           BL       printf
   2282                      print_dddn();
   \   000002C8   ........           BL       print_dddn
   2283                      print_line();
   \   000002CC   ........           BL       print_line
   2284                      printf("Note: Reading the RT Pending Interrupt Register clears it!\n\r");
   \   000002D0   ....               LDR.N    R0,??DataTable20_49
   \   000002D2   ........           BL       printf
   2285                      
   2286          	#endif // (RT1_ena||RT2_ena)
   2287          	print_menuprompt();
   \   000002D6   ........           BL       print_menuprompt
   2288          
   2289          	// return value read from the RT Pending Interrupt Register, now cleared 
   2290          	return k;
   \   000002DA   2000               MOVS     R0,R4
   \   000002DC   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000002DE   70BD               POP      {R4-R6,PC}       ;; return
   2291          
   2292          }	// end list_rt_ints_console()
   2293          
   2294          
   2295          
   2296          
   2297          //---------------------------------------------------------------------------
   2298          //   brief	this function checks for keyboard input and
   2299          //		decodes it, acts on it, when it occurs
   2300          //---------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2301          void chk_key_input(void) {
   \                     chk_key_input:
   \   00000000   10B5               PUSH     {R4,LR}
   2302          
   2303              char key;
   2304              #if (!HOST_BUS_INTERFACE)
   2305              unsigned short i;
   2306              #endif
   2307              
   2308              // poll USART Channel Status Reg for Rx Ready 
   2309              if(USART_IsRxReady(BOARD_USART_BASE)) {
   \   00000002   ....               LDR.N    R0,??DataTable20_50  ;; 0x40094000
   \   00000004   ........           BL       USART_IsRxReady
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   6CD0               BEQ.N    ??chk_key_input_0
   2310                  // got key press at computer keyboard,
   2311                  // read USART Receive Holding register
   2312                  key = USART_GetChar(BOARD_USART_BASE);
   \   0000000C   ....               LDR.N    R0,??DataTable20_50  ;; 0x40094000
   \   0000000E   ........           BL       USART_GetChar
   \   00000012   0400               MOVS     R4,R0
   2313                
   2314                  //-----------------------------------
   2315                  
   2316                  if (watch) {
   \   00000014   ....               LDR.N    R0,??DataTable20_51
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   64D1               BNE.N    ??chk_key_input_0
   2317                      // Memory Watch mode enabled
   2318                    
   2319                      #if (!HOST_BUS_INTERFACE)
   2320                          switch(key) {
   2321                
   2322                              case 'm':
   2323                              case 'M':
   2324                              case 'w':
   2325                              case 'W':
   2326                                  // either M or W turns off Memory Watch mode, restores Menu display
   2327                                  watch = 0;
   2328                                  show_menu();
   2329                              break;
   2330                             
   2331                              case 'r':
   2332                              case 'R':
   2333                                  // refresh
   2334                                  Memory_watch(waddr);
   2335                              break;
   2336                  
   2337                              case 'd':
   2338                              case 'D':
   2339                                  if(waddr == 0x7F00) {
   2340                                      waddr = 0;
   2341                                      Memory_watch(waddr);
   2342                                  }
   2343                                  else { // waddr != 0x7F00
   2344                                      waddr += 0x100;
   2345                                      // top RAM address window = 0x7F00 to 0x7FFF
   2346                                      if(waddr > 0x7F00) waddr = 0x7F00;
   2347                                      Memory_watch(waddr);
   2348                                  }  
   2349                              break;
   2350                                
   2351                              case 'u':
   2352                              case 'U':
   2353                                  if(waddr == 0) {
   2354                                      waddr = 0x7F00;
   2355                                      Memory_watch(waddr);
   2356                                  }
   2357                                  else { // waddr != 0
   2358                                      // bottom RAM address window = 0x0000 to 0x01FF
   2359                                      if (waddr < 0x100) waddr = 0x100;
   2360                                      waddr -= 0x100;
   2361                                      Memory_watch(waddr);
   2362                                  } 
   2363                              break;
   2364                                         
   2365                              case 'a':
   2366                              case 'A':
   2367                                  i=0;
   2368                                  printf("Type 4 hex char address 0000 through 7E00: ");
   2369                                  key = USART_GetChar(BOARD_USART_BASE);
   2370                                  i = ascii2int(key) << 12;
   2371                                  printf("%c", key);
   2372                                      
   2373                                  key = USART_GetChar(BOARD_USART_BASE);
   2374                                  i += ascii2int(key) << 8;
   2375                                  printf("%c", key);
   2376                  
   2377                                  key = USART_GetChar(BOARD_USART_BASE);
   2378                                  i += ascii2int(key) << 4;
   2379                                  printf("%c", key);
   2380                  
   2381                                  key = USART_GetChar(BOARD_USART_BASE);
   2382                                  i += ascii2int(key);
   2383                                  printf("%c", key);
   2384                  
   2385                                  if (i < 0x100) i = 0x000;
   2386                                  if (i > 0x7E00) i = 0x7E00;
   2387                                  waddr = i;
   2388                                  Memory_watch(waddr);
   2389                              break;
   2390              
   2391                              default:
   2392                                  // ignore unrecognized keys
   2393                              break;
   2394                                  
   2395                          } // end switch(key)  
   2396                                  
   2397                      #endif // !HOST_BUS_INTERFACE
   2398          
   2399                  } // end if(watch)
   2400                  
   2401                  else { // Memory Watch mode disabled, normal menu mode...
   2402                    
   2403                      switch(key) {
   \   0000001C   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   3128               CMP      R0,#+49
   \   00000022   35D0               BEQ.N    ??chk_key_input_1
   \   00000024   3228               CMP      R0,#+50
   \   00000026   3CD0               BEQ.N    ??chk_key_input_2
   \   00000028   3328               CMP      R0,#+51
   \   0000002A   3DD0               BEQ.N    ??chk_key_input_3
   \   0000002C   3428               CMP      R0,#+52
   \   0000002E   41D0               BEQ.N    ??chk_key_input_4
   \   00000030   3528               CMP      R0,#+53
   \   00000032   42D0               BEQ.N    ??chk_key_input_5
   \   00000034   3628               CMP      R0,#+54
   \   00000036   43D0               BEQ.N    ??chk_key_input_6
   \   00000038   3728               CMP      R0,#+55
   \   0000003A   38D0               BEQ.N    ??chk_key_input_7
   \   0000003C   3828               CMP      R0,#+56
   \   0000003E   42D0               BEQ.N    ??chk_key_input_8
   \   00000040   3928               CMP      R0,#+57
   \   00000042   43D0               BEQ.N    ??chk_key_input_9
   \   00000044   4128               CMP      R0,#+65
   \   00000046   1CD0               BEQ.N    ??chk_key_input_10
   \   00000048   4428               CMP      R0,#+68
   \   0000004A   1AD0               BEQ.N    ??chk_key_input_10
   \   0000004C   4D28               CMP      R0,#+77
   \   0000004E   12D0               BEQ.N    ??chk_key_input_11
   \   00000050   5228               CMP      R0,#+82
   \   00000052   16D0               BEQ.N    ??chk_key_input_10
   \   00000054   5528               CMP      R0,#+85
   \   00000056   14D0               BEQ.N    ??chk_key_input_10
   \   00000058   5728               CMP      R0,#+87
   \   0000005A   12D0               BEQ.N    ??chk_key_input_10
   \   0000005C   6128               CMP      R0,#+97
   \   0000005E   10D0               BEQ.N    ??chk_key_input_10
   \   00000060   6428               CMP      R0,#+100
   \   00000062   0ED0               BEQ.N    ??chk_key_input_10
   \   00000064   6D28               CMP      R0,#+109
   \   00000066   06D0               BEQ.N    ??chk_key_input_11
   \   00000068   7228               CMP      R0,#+114
   \   0000006A   0AD0               BEQ.N    ??chk_key_input_10
   \   0000006C   7528               CMP      R0,#+117
   \   0000006E   08D0               BEQ.N    ??chk_key_input_10
   \   00000070   7728               CMP      R0,#+119
   \   00000072   06D0               BEQ.N    ??chk_key_input_10
   \   00000074   2DE0               B.N      ??chk_key_input_12
   2404                          
   2405                          case 'm':
   2406                          case 'M':
   2407                              watch = 0;
   \                     ??chk_key_input_11:
   \   00000076   ....               LDR.N    R0,??DataTable20_51
   \   00000078   0021               MOVS     R1,#+0
   \   0000007A   0170               STRB     R1,[R0, #+0]
   2408                              show_menu();
   \   0000007C   ........           BL       show_menu
   2409                          break;
   \   00000080   2DE0               B.N      ??chk_key_input_13
   2410                          
   2411                          #if (!HOST_BUS_INTERFACE)
   2412                          case 'w':
   2413                          case 'W':
   2414                              // disable menu mode, enable Memory Watch mode
   2415                              watch = 1;
   2416                              Memory_watch(waddr);
   2417                          break;
   2418                          #endif // (!HOST_BUS_INTERFACE)
   2419                            
   2420                          // the W keys are only recognized if HI-6131
   2421                          #if (HOST_BUS_INTERFACE)
   2422                          case 'w':
   2423                          case 'W':
   2424                          #endif // (HOST_BUS_INTERFACE)
   2425                              
   2426                          // these keys are only recognized in Memory Watch mode
   2427                          case 'r':
   2428                          case 'R':
   2429                          case 'u':
   2430                          case 'U':
   2431                          case 'd':
   2432                          case 'D':
   2433                          case 'a':
   2434                          case 'A':
   2435                              // formfeed
   2436                              putchar(12); 	
   \                     ??chk_key_input_10:
   \   00000082   0C20               MOVS     R0,#+12
   \   00000084   ........           BL       putchar
   2437                              printf("\n\r Invalid Choice. Press 'M' for menu, or press any valid menu key. >> ");
   \   00000088   ....               LDR.N    R0,??DataTable20_52
   \   0000008A   ........           BL       printf
   2438                          break;
   \   0000008E   26E0               B.N      ??chk_key_input_13
   2439                                
   2440                           #if(BC_ena) 
   2441                                case '1':	
   2442                                    // Generate a BC external trigger pulse for the HI-613x
   2443                                    bc_trigger();
   \                     ??chk_key_input_1:
   \   00000090   ........           BL       bc_trigger
   2444                                    // message completion delay, 1.5ms
   2445                                    Delay_us(1500);
   \   00000094   40F2DC50           MOVW     R0,#+1500
   \   00000098   ........           BL       Delay_us
   2446                                    // console output reg and RAM info for last completed msg
   2447                                    bc_last_msg_console();
   \   0000009C   ........           BL       bc_last_msg_console
   2448                                break;
   \   000000A0   1DE0               B.N      ??chk_key_input_13
   2449                        
   2450                                case '2': 		
   2451                                    list_bc_config();
   \                     ??chk_key_input_2:
   \   000000A2   ........           BL       list_bc_config
   2452                                break;
   \   000000A6   1AE0               B.N      ??chk_key_input_13
   2453                            
   2454                                case '3': 
   2455                                    // output Cond Code / GP Flag reg to console via UART
   2456                                    list_bc_ccgpf_reg();
   \                     ??chk_key_input_3:
   \   000000A8   ........           BL       list_bc_ccgpf_reg
   2457                                break;
   \   000000AC   17E0               B.N      ??chk_key_input_13
   2458                                
   2459                                case '7':
   2460                                    // display bc interrupt status
   2461                                    list_bc_ints_console();
   \                     ??chk_key_input_7:
   \   000000AE   ........           BL       list_bc_ints_console
   2462                                break;
   \   000000B2   14E0               B.N      ??chk_key_input_13
   2463                                
   2464                            #endif // (BC_ena) 
   2465                            
   2466                            #if(SMT_ena || IMT_ena)
   2467                                case '4': 		
   2468                                    list_mt_config();
   \                     ??chk_key_input_4:
   \   000000B4   ........           BL       list_mt_config
   2469                                break;
   \   000000B8   11E0               B.N      ??chk_key_input_13
   2470                
   2471                                case '5': 		
   2472                                    mt_last_msg_console();
   \                     ??chk_key_input_5:
   \   000000BA   ........           BL       mt_last_msg_console
   2473                                break;
   \   000000BE   0EE0               B.N      ??chk_key_input_13
   2474                            #endif // (SMT_ena || IMT_ena)
   2475                            
   2476                            case '6':
   2477                                // display hw interrupt status
   2478                                list_hw_ints_console();
   \                     ??chk_key_input_6:
   \   000000C0   ........           BL       list_hw_ints_console
   2479                            break;
   \   000000C4   0BE0               B.N      ??chk_key_input_13
   2480                            
   2481                            #if(RT1_ena || RT2_ena)
   2482                                case '8':
   2483                                    // display rt interrupt status
   2484                                    list_rt_ints_console();
   \                     ??chk_key_input_8:
   \   000000C6   ........           BL       list_rt_ints_console
   2485                                break;
   \   000000CA   08E0               B.N      ??chk_key_input_13
   2486                            #endif // (RT1_ena || RT2_ena)
   2487                            
   2488                            #if(SMT_ena || IMT_ena)
   2489                                case '9':
   2490                                    // display mt interrupt status
   2491                                    list_mt_ints_console();
   \                     ??chk_key_input_9:
   \   000000CC   ........           BL       list_mt_ints_console
   2492                                break;
   \   000000D0   05E0               B.N      ??chk_key_input_13
   2493                            #endif // (SMT_ena || IMT_ena)
   2494                            
   2495                            
   2496                            default:
   2497                                // ignore unrecognized keys
   2498                                // formfeed
   2499                                putchar(12); 	
   \                     ??chk_key_input_12:
   \   000000D2   0C20               MOVS     R0,#+12
   \   000000D4   ........           BL       putchar
   2500                                printf("\n\r Invalid Choice. Press 'M' for menu, or press any valid menu key. >> ");
   \   000000D8   ....               LDR.N    R0,??DataTable20_52
   \   000000DA   ........           BL       printf
   2501                            break;
   2502                            
   2503                      } // end switch(key)
   2504                      
   2505                      // prevent warning: waddr as declared but never referenced
   2506                      waddr = waddr;
   \                     ??chk_key_input_13:
   \   000000DE   ....               LDR.N    R0,??DataTable20_53
   \   000000E0   ....               LDR.N    R1,??DataTable20_53
   \   000000E2   0988               LDRH     R1,[R1, #+0]
   \   000000E4   0180               STRH     R1,[R0, #+0]
   2507                                                    
   2508                  }  // end else !watch
   2509                  
   2510              }  // end if(USART_IsRxReady(BOARD_USART_BASE))
   2511                              
   2512          } // end chk_key_input()
   \                     ??chk_key_input_0:
   \   000000E6   10BD               POP      {R4,PC}          ;; return
   2513                              
   2514                                                                                                           
   2515                                                 
   2516          //----------------------------------------------------------------------------
   2517          //    used by above function, this function converts a char 0-15 into 0x0-0xF
   2518          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2519          unsigned char ascii2int(char ch) {
   \                     ascii2int:
   \   00000000   0100               MOVS     R1,R0
   2520              unsigned char hex;
   2521              if((ch >='0') && (ch<='9')) hex = ch - '0';
   \   00000002   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   3029               CMP      R1,#+48
   \   00000006   06D3               BCC.N    ??ascii2int_0
   \   00000008   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   3A29               CMP      R1,#+58
   \   0000000C   03D2               BCS.N    ??ascii2int_0
   \   0000000E   B1F13002           SUBS     R2,R1,#+48
   \   00000012   1000               MOVS     R0,R2
   \   00000014   15E0               B.N      ??ascii2int_1
   2522              else if ((ch >='A') && (ch<='F')) hex = ch - 'A' + 10;
   \                     ??ascii2int_0:
   \   00000016   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   4129               CMP      R1,#+65
   \   0000001A   06D3               BCC.N    ??ascii2int_2
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   4729               CMP      R1,#+71
   \   00000020   03D2               BCS.N    ??ascii2int_2
   \   00000022   B1F13702           SUBS     R2,R1,#+55
   \   00000026   1000               MOVS     R0,R2
   \   00000028   0BE0               B.N      ??ascii2int_1
   2523              else if ((ch >='a') && (ch<='f')) hex = ch - 'a' + 10;
   \                     ??ascii2int_2:
   \   0000002A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   6129               CMP      R1,#+97
   \   0000002E   06D3               BCC.N    ??ascii2int_3
   \   00000030   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   6729               CMP      R1,#+103
   \   00000034   03D2               BCS.N    ??ascii2int_3
   \   00000036   B1F15702           SUBS     R2,R1,#+87
   \   0000003A   1000               MOVS     R0,R2
   \   0000003C   01E0               B.N      ??ascii2int_1
   2524              else hex = 0;
   \                     ??ascii2int_3:
   \   0000003E   0022               MOVS     R2,#+0
   \   00000040   1000               MOVS     R0,R2
   2525              return hex;
   \                     ??ascii2int_1:
   \   00000042   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   7047               BX       LR               ;; return
   2526          }
   2527                                                 
   2528                                                 
   2529                                                 
   2530                                                 
   2531                                                 
   2532          //-----------------------------------------------------------------
   2533          //    these functions give printf for text strings used
   2534          //    many times. reduces ROM needed for text storage
   2535          //-----------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2536          void print_null(void) {
   \                     print_null:
   \   00000000   80B5               PUSH     {R7,LR}
   2537          	printf("    0           -           -\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable20_54
   \   00000004   ........           BL       printf
   2538          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2539          
   2540          

   \                                 In section .text, align 2, keep-with-next
   2541          void print_sp1sp(void) {
   \                     print_sp1sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2542          	printf("    1           ");
   \   00000002   ....               LDR.N    R0,??DataTable20_55
   \   00000004   ........           BL       printf
   2543          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2544          
   2545          

   \                                 In section .text, align 2, keep-with-next
   2546          void print_b1sp(void) {
   \                     print_b1sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2547          	printf("1           ");
   \   00000002   ....               LDR.N    R0,??DataTable20_56
   \   00000004   ........           BL       printf
   2548          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2549          
   2550          

   \                                 In section .text, align 2, keep-with-next
   2551          void print_b0sp(void) {
   \                     print_b0sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2552          	printf("0           ");
   \   00000002   ....               LDR.N    R0,??DataTable20_57
   \   00000004   ........           BL       printf
   2553          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2554          
   2555          

   \                                 In section .text, align 2, keep-with-next
   2556          void print_dddn(void) {
   \                     print_dddn:
   \   00000000   80B5               PUSH     {R7,LR}
   2557          	printf("    -           -           -\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable20_58
   \   00000004   ........           BL       printf
   2558          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2559          
   2560          

   \                                 In section .text, align 2, keep-with-next
   2561          void print_dd0n(void) {
   \                     print_dd0n:
   \   00000000   80B5               PUSH     {R7,LR}
   2562          	printf("    -           -           0\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable20_59
   \   00000004   ........           BL       printf
   2563          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2564          
   2565          

   \                                 In section .text, align 2, keep-with-next
   2566          void print_dd1n(void) {
   \                     print_dd1n:
   \   00000000   80B5               PUSH     {R7,LR}
   2567          	printf("    -           -           1\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable20_60
   \   00000004   ........           BL       printf
   2568          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2569          

   \                                 In section .text, align 2, keep-with-next
   2570          void print_menuprompt(void) {
   \                     print_menuprompt:
   \   00000000   80B5               PUSH     {R7,LR}
   2571          	printf("Press 'M' for menu, or press any valid menu key. >> ");
   \   00000002   ....               LDR.N    R0,??DataTable20_61
   \   00000004   ........           BL       printf
   2572          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2573          

   \                                 In section .text, align 2, keep-with-next
   2574          void print_line(void) {
   \                     print_line:
   \   00000000   80B5               PUSH     {R7,LR}
   2575          	printf("===========================================================\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable20_62
   \   00000004   ........           BL       printf
   2576          }
   \   00000008   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   ........           DC32     `?<Constant {{2097152, (AT91S_PIO *)1074662400,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   006CDC02           DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   ........           DC32     `?<Constant "\\n\\r*******************...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   ........           DC32     `?<Constant "   Holt Integrated Ci...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   ........           DC32     `?<Constant "09:55:10">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   ........           DC32     `?<Constant "May 17 2012">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   ........           DC32     `?<Constant "        Compiled: %s ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   ........           DC32     `?<Constant "*********************...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   ........           DC32     `?<Constant "   BC On   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   ........           DC32     `?<Constant "SMT On    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   ........           DC32     `?<Constant "RT1 On   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   ........           DC32     `?<Constant "RT2 On">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   ........           DC32     `?<Constant " Press \\'1\\' to step BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   ........           DC32     `?<Constant " Press \\'2\\' to list BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   ........           DC32     `?<Constant " Press \\'3\\' to list BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   ........           DC32     `?<Constant " Press \\'4\\' to list MT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   ........           DC32     `?<Constant " Press \\'5\\' to list MT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   ........           DC32     `?<Constant " Press \\'6\\' to list HW...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   ........           DC32     `?<Constant " Press \\'7\\' to list BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_21:
   \   00000000   ........           DC32     `?<Constant " Press \\'8\\' to list RT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_22:
   \   00000000   ........           DC32     `?<Constant " Press \\'9\\' to list MT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_23:
   \   00000000   ........           DC32     `?<Constant " NOTE: Options 6-9 cl...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   00400940           DC32     0x40094000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   ........           DC32     `?<Constant "\\n\\rResults From Last M...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   ........           DC32     `?<Constant "Message Type: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   ........           DC32     `?<Constant "Broadcast ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   ........           DC32     `?<Constant "RT-RT Message, ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   ........           DC32     `?<Constant "Mode Code %02d With D...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   ........           DC32     `?<Constant "Mode Code %02d w/o Da...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   ........           DC32     `?<Constant "Mode Code %02d w/o Da...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   ........           DC32     `?<Constant "Subaddress Command, ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   ........           DC32     `?<Constant "%d data word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW m...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW i...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: TxCW i...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: TxCW m...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW &...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   ........           DC32     `?<Constant "RT-RT problem: RxCW &...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   ........           DC32     `?<Constant "CW1: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   ........           DC32     `?<Constant " = %02d-%1d-%02d-%02d...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   ........           DC32     `?<Constant "RSW not applicable\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   ........           DC32     `?<Constant "RxSW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   ........           DC32     `?<Constant " = RT%02d ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_24:
   \   00000000   ........           DC32     `?<Constant "CS\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_25:
   \   00000000   ........           DC32     `?<Constant "INST ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_26:
   \   00000000   ........           DC32     `?<Constant "SRQ ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_27:
   \   00000000   ........           DC32     `?<Constant "RSV ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_28:
   \   00000000   ........           DC32     `?<Constant "BCR ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_29:
   \   00000000   ........           DC32     `?<Constant "BSY ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_30:
   \   00000000   ........           DC32     `?<Constant "SSF ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_31:
   \   00000000   ........           DC32     `?<Constant "DBCA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_32:
   \   00000000   ........           DC32     `?<Constant "CW2: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_33:
   \   00000000   ........           DC32     `?<Constant "TxSW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_34:
   \   00000000   ........           DC32     `?<Constant "CS\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   ........           DC32     `?<Constant "CW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   ........           DC32     `?<Constant "SW not applicable\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     `?<Constant "SW not received\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     `?<Constant "SW: 0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   ........           DC32     `?<Constant "BC Control Word: 0x%....">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     `?<Constant "MC17TTL ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   ........           DC32     `?<Constant "MEmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   ........           DC32     `?<Constant "SRQmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   ........           DC32     `?<Constant "BSYmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   ........           DC32     `?<Constant "SSFmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   ........           DC32     `?<Constant "TFmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   ........           DC32     `?<Constant "RSVmask ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   ........           DC32     `?<Constant "RetryEna ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   ........           DC32     `?<Constant "UseBusA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   ........           DC32     `?<Constant "UseBusB ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   ........           DC32     `?<Constant "SelfTest ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   ........           DC32     `?<Constant "maskBCR ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   ........           DC32     `?<Constant "EOMirq ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   ........           DC32     `?<Constant "NonBcstSA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   ........           DC32     `?<Constant "RTRT ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   ........           DC32     `?<Constant "BcstSA ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   ........           DC32     `?<Constant "BcstRTRT ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   ........           DC32     `?<Constant "RTRT_MC?? ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   ........           DC32     `?<Constant "BcstMC ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   ........           DC32     `?<Constant "BcstRTRT_MC?? ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   ........           DC32     `?<Constant "The Cmd Word and Cont...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   ........           DC32     `?<Constant "The Cmd Word and Cont...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   ........           DC32     `?<Constant "Block Status Word: 0x...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   ........           DC32     `?<Constant "SOM  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   ........           DC32     `?<Constant "EOM  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   ........           DC32     `?<Constant "BusB  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   ........           DC32     `?<Constant "Bus A  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   ........           DC32     `?<Constant "ErrOcc ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   ........           DC32     `?<Constant "SSet  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   ........           DC32     `?<Constant "NoResp  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   ........           DC32     `?<Constant "LpBk  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_32:
   \   00000000   ........           DC32     `?<Constant "2retry  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_33:
   \   00000000   ........           DC32     `?<Constant "1retry  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_34:
   \   00000000   ........           DC32     `?<Constant "GDB  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_35:
   \   00000000   ........           DC32     `?<Constant "WAG  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_36:
   \   00000000   ........           DC32     `?<Constant "WdCt  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_37:
   \   00000000   ........           DC32     `?<Constant "SyncErr  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_38:
   \   00000000   ........           DC32     `?<Constant "InvWd  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_39:
   \   00000000   ........           DC32     `?<Constant "FmtErr  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_40:
   \   00000000   ........           DC32     `?<Constant "MSSet  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_41:
   \   00000000   ........           DC32     `?<Constant "Condition Code Regist...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_42:
   \   00000000   ........           DC32     `?<Constant "BC Stopped: No Condit...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_43:
   \   00000000   ........           DC32     `?<Constant "BC Running: No Condit...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_44:
   \   00000000   ........           DC32     `?<Constant "BC Is Running.\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_45:
   \   00000000   ........           DC32     `?<Constant "BC Not Running.\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   ........           DC32     `?<Constant "2Retries  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   ........           DC32     `?<Constant "1Retry  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   ........           DC32     `?<Constant "BadMsg  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   ........           DC32     `?<Constant "GdDataBlk  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   ........           DC32     `?<Constant "GPF7  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   ........           DC32     `?<Constant "GPF6  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   ........           DC32     `?<Constant "GPF5  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   ........           DC32     `?<Constant "GPF4  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   ........           DC32     `?<Constant "GPF3  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   ........           DC32     `?<Constant "GPF2  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   ........           DC32     `?<Constant "LT-GPF1  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   ........           DC32     `?<Constant "EQ-GPF0  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   ........           DC32     `?<Constant "No RT response, no re...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   ........           DC32     `?<Constant "Data Addr: 0x%.2X%.2X...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   ........           DC32     `?<Constant "Bus Addr: 0x6000%.2X%...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   ........           DC32     `?<Constant "\\n\\rBC Configuration Re...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0A0D5300           DC8      "\n\rS"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0A0D4900           DC8      "\n\rI"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     `?<Constant "  20">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   ........           DC32     `?<Constant "  58">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   ........           DC32     `?<Constant " 138">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   ........           DC32     `?<Constant "  15">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   ........           DC32     `?<Constant "us Timeout (bus dead ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   ........           DC32     `?<Constant "Check Control Word Fo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   ........           DC32     `?<Constant "Don\\'t Check Control W...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   ........           DC32     `?<Constant " 2 Retries, Same Bus,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   ........           DC32     `?<Constant "  2 Retries, Alt Bus,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   ........           DC32     `?<Constant "  2 Retries, Same Bus...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   ........           DC32     `?<Constant "   2 Retries, Alt Bus...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   ........           DC32     `?<Constant "  1 Retry if Msg Fail...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   ........           DC32     `?<Constant " 1 Retry if Msg Fail,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   4F4E0000           DC8      0x4F, 0x4E, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   4F464600           DC8      "OFF"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   ........           DC32     `?<Constant "    No Retries for Ms...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   ........           DC32     `?<Constant "Retry if RT status bi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   ........           DC32     `?<Constant "No Retry if RT status...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   34380000           DC8      0x34, 0x38, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   31360000           DC8      0x31, 0x36, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   ........           DC32     `?<Constant " RT status ME w/o dat...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   ........           DC32     `?<Constant " RT status ME w/o dat...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   ........           DC32     `?<Constant "RT status BSY w/o dat...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   ........           DC32     `?<Constant "RT status BSY w/o dat...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_28:
   \   00000000   ........           DC32     `?<Constant "            Msg Gap T...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_29:
   \   00000000   ........           DC32     `?<Constant "           Msg Gap Ti...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_30:
   \   00000000   ........           DC32     `?<Constant "Watchdog Frame Timer ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_31:
   \   00000000   ........           DC32     `?<Constant "Watchdog Frame Timer ...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_32:
   \   00000000   ........           DC32     `?<Constant "MC17 send Time Tag lo...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_33:
   \   00000000   ........           DC32     `?<Constant "MC17 send data in msg...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_34:
   \   00000000   ........           DC32     `?<Constant "MC17 data word always...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_35:
   \   00000000   ........           DC32     `?<Constant "MC17 data may be even...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_36:
   \   00000000   ........           DC32     `?<Constant "  Enable 4us Minimum ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_37:
   \   00000000   ........           DC32     `?<Constant "   No 4us Minimum Gap...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_38:
   \   00000000   ........           DC32     `?<Constant "BCR Mask Enabled, BCR...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_39:
   \   00000000   ........           DC32     `?<Constant "BCR Mask Disabled, BC...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_40:
   \   00000000   ........           DC32     `?<Constant "Timetag Config Regist...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_41:
   \   00000000   ........           DC32     `?<Constant "32-bit timebase with ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_42:
   \   00000000   ........           DC32     `?<Constant "16-bit timebase with ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_43:
   \   00000000   ........           DC32     `?<Constant "clock disabled! ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_44:
   \   00000000   ........           DC32     `?<Constant "ext clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_45:
   \   00000000   ........           DC32     `?<Constant "2us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_46:
   \   00000000   ........           DC32     `?<Constant "4us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_47:
   \   00000000   ........           DC32     `?<Constant "8us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_48:
   \   00000000   ........           DC32     `?<Constant "16us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_49:
   \   00000000   ........           DC32     `?<Constant "32us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_50:
   \   00000000   ........           DC32     `?<Constant "64us clock ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_51:
   \   00000000   ........           DC32     `?<Constant "\\n\\rBC Condition Code &...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_52:
   \   00000000   ........           DC32     `?<Constant "BC Stopped: No Condit...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_53:
   \   00000000   ........           DC32     `?<Constant "BC Running: No Condit...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_54:
   \   00000000   ........           DC32     `?<Constant "BC Is Running.\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_55:
   \   00000000   ........           DC32     `?<Constant "BC Not Running.\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_56:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Bus Controller Int...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_57:
   \   00000000   ........           DC32     `?<Constant "BC Frame Timer Expired">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_58:
   \   00000000   ........           DC32     `?<Constant "Selected Msg Int,EOM=1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_59:
   \   00000000   ........           DC32     `?<Constant "GenPurp Queue Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_60:
   \   00000000   ........           DC32     `?<Constant "   Message Was Retried">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_61:
   \   00000000   ........           DC32     `?<Constant "Call Stack Pointer Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_62:
   \   00000000   ........           DC32     `?<Constant "  Illegal Op Code Trap">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_63:
   \   00000000   ........           DC32     `?<Constant "Unexpected RT Stat Bit">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_64:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 3">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_65:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 2">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_66:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 1">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_67:
   \   00000000   ........           DC32     `?<Constant "User-Def Int Req Bit 0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     `?<Constant "RT Status is Msg Error">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     `?<Constant "     BC End-of-Message">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   20000000           DC8      " ",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   ........           DC32     `?<Constant "     Reserved Bits 2-0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   20256400           DC8      " %d"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the BC ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   ........           DC32     `?<Constant "MT monitor mode selec...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   ........           DC32     `?<Constant "MT Configuration Regi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   ........           DC32     `?<Constant "  20us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   ........           DC32     `?<Constant "  58us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   ........           DC32     `?<Constant " 138us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   ........           DC32     `?<Constant "  15us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   ........           DC32     `?<Constant " (bus dead time)   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   ........           DC32     `?<Constant "2us Gap Check ON">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   ........           DC32     `?<Constant "2us Gap Check OFF">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   ........           DC32     `?<Constant "  Time Tag last word,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   ........           DC32     `?<Constant "Time Tag first word, ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   ........           DC32     `?<Constant " Time Tag first word,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   ........           DC32     `?<Constant "           Time Taggi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   ........           DC32     `?<Constant "Start Rec: First Cmd ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   ........           DC32     `?<Constant "Word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   ........           DC32     `?<Constant "or Data Word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   ........           DC32     `?<Constant "Sync + 2 bits">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   ........           DC32     `?<Constant "or Data Sync + 2 bits">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   ........           DC32     `?<Constant "   Invalid Data Word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   ........           DC32     `?<Constant "s recorded   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   ........           DC32     `?<Constant " ends mssg   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   ........           DC32     `?<Constant "Extended Status Flags ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   ........           DC32     `?<Constant " SMT using ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   ........           DC32     `?<Constant "-bit Time Tag ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   ........           DC32     `?<Constant "IMT Pkt Timer starts ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_33:
   \   00000000   ........           DC32     `?<Constant "at PktEnd   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_34:
   \   00000000   ........           DC32     `?<Constant "at Cmd Wd   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_35:
   \   00000000   ........           DC32     `?<Constant "IMT Hdr Data Type IRI...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_36:
   \   00000000   ........           DC32     `?<Constant "09  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_37:
   \   00000000   ........           DC32     `?<Constant "04  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_38:
   \   00000000   ........           DC32     `?<Constant "05  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_39:
   \   00000000   ........           DC32     `?<Constant "07  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_40:
   \   00000000   ........           DC32     `?<Constant " IMT Auto Header & Tr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_41:
   \   00000000   ........           DC32     `?<Constant "OFF   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_42:
   \   00000000   ........           DC32     `?<Constant " ON   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_43:
   \   00000000   ........           DC32     `?<Constant "IMT Data Packet Check...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant "\\n\\rLast Message Record...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   ........           DC32     `?<Constant "SMT:    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   04000060           DC32     0x60000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0C000060           DC32     0x6000000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0A000060           DC32     0x6000000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   08000060           DC32     0x60000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   02000060           DC32     0x60000002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   FEFFFF5F           DC32     0x5ffffffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   ........           DC32     `?<Constant "IMT:   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   ........           DC32     `?<Constant "Block Status Word = 0...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   ........           DC32     `?<Constant "* means IMT BSW reser...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   ........           DC32     `?<Constant "           * Start of...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   ........           DC32     `?<Constant "n/a    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   ........           DC32     `?<Constant "= 1    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   ........           DC32     `?<Constant "= 0    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   ........           DC32     `?<Constant "Bus Used = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_19:
   \   00000000   ........           DC32     `?<Constant "B\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_20:
   \   00000000   ........           DC32     `?<Constant "A\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_21:
   \   00000000   ........           DC32     `?<Constant "             * End of...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_22:
   \   00000000   ........           DC32     `?<Constant "Error Occurred = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_23:
   \   00000000   ........           DC32     `?<Constant "1\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_24:
   \   00000000   ........           DC32     `?<Constant "0\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_25:
   \   00000000   ........           DC32     `?<Constant "        * Good Data B...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_26:
   \   00000000   ........           DC32     `?<Constant "Response Timeout = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_27:
   \   00000000   ........           DC32     `?<Constant "* SMT Data Stack Roll...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_28:
   \   00000000   ........           DC32     `?<Constant "Illegal Gap Error = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_29:
   \   00000000   ........           DC32     `?<Constant " * Cmd Word Content E...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_30:
   \   00000000   ........           DC32     `?<Constant "Word Count Error = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_31:
   \   00000000   ........           DC32     `?<Constant "* RT-RT Gap,Sync,Addr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   ........           DC32     `?<Constant "Non-">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   ........           DC32     `?<Constant "RT-RT Cmd: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   10000060           DC32     0x60000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   ........           DC32     `?<Constant "\\n\\n\\r * RT-RT Cmd Word ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   ........           DC32     `?<Constant "Timetag = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   ........           DC32     `?<Constant "%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   ........           DC32     `?<Constant "%.2X%.2X\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   ........           DC32     `?<Constant "No Words Stored in Da...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   ........           DC32     `?<Constant "Msg Words 2-%d at Add...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_13:
   \   00000000   ........           DC32     `?<Constant "  %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_14:
   \   00000000   ........           DC32     `?<Constant " Msg Words at Addr: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_15:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_16:
   \   00000000   ........           DC32     `?<Constant "Bus Debug Addr: 0x600...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_17:
   \   00000000   ........           DC32     `?<Constant "       Tx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_18:
   \   00000000   ........           DC32     `?<Constant "RT Response = %d.%dus...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_19:
   \   00000000   ........           DC32     `?<Constant "(Broadcast?)">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_20:
   \   00000000   ........           DC32     `?<Constant "RxRT Response = %d.%dus ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   ........           DC32     `?<Constant "SMT mode is selected ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   ........           DC32     `?<Constant "IMT mode is selected ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   ........           DC32     `?<Constant "   Bus Monitor Ints  ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   ........           DC32     `?<Constant "End of Pkt,Buffer Full">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     `?<Constant "Offset before FULL_EOP">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     `?<Constant "Pkt Max 1553 Msg Words">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     `?<Constant "Pkt Max 1553 Msg Count">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     `?<Constant " Max Gap Time Exceeded">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     `?<Constant "Max Pkt Recording Time">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_1:
   \   00000000   ........           DC32     `?<Constant "      Host Packet Stop">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_2:
   \   00000000   ........           DC32     `?<Constant "Stack End Addr Written">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_3:
   \   00000000   ........           DC32     `?<Constant " Hit Cmd Stack Address">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_4:
   \   00000000   ........           DC32     `?<Constant " IRIG-106 Packet Ready">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_5:
   \   00000000   ........           DC32     `?<Constant "Monitor End-of-Message">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_6:
   \   00000000   ........           DC32     `?<Constant "\\nIMT Skips Bits 4,2,1,0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_7:
   \   00000000   ........           DC32     `?<Constant "SMT Cmd Stack Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_8:
   \   00000000   ........           DC32     `?<Constant "SMT DataStack Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_9:
   \   00000000   ........           DC32     `?<Constant "SMT  Cmd Stack Address">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_10:
   \   00000000   ........           DC32     `?<Constant "SMT Data Stack Address">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_11:
   \   00000000   ........           DC32     `?<Constant "RT Status is Msg Error">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_12:
   \   00000000   ........           DC32     `?<Constant "     MT End-of-Message">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_13:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the MT ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_14:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Hardware Interrupt...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_15:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_16:
   \   00000000   ........           DC32     `?<Constant "HI-6131 Host SPI Erro...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_17:
   \   00000000   ........           DC32     `?<Constant "EE Chksum/Corr RAM Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_18:
   \   00000000   ........           DC32     `?<Constant "RAM Init/UncorrRAM Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_19:
   \   00000000   ........           DC32     `?<Constant "Loopback Fail on Bus A">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_20:
   \   00000000   ........           DC32     `?<Constant "Loopback Fail on Bus B">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_21:
   \   00000000   ........           DC32     `?<Constant "MT Timetag Ct Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_22:
   \   00000000   ........           DC32     `?<Constant "BC Timetag Ct Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_23:
   \   00000000   ........           DC32     `?<Constant "RT2 Timetag Valu Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_24:
   \   00000000   ........           DC32     `?<Constant "RT1 Timetag Valu Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_25:
   \   00000000   ........           DC32     `?<Constant "MT Timetag Value Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_26:
   \   00000000   ........           DC32     `?<Constant "BC Timetag Value Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_27:
   \   00000000   ........           DC32     `?<Constant "  RT2 Addr Parity Fail">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_28:
   \   00000000   ........           DC32     `?<Constant "  RT1 Addr Parity Fail">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_29:
   \   00000000   ........           DC32     `?<Constant " Check Pending RT Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_30:
   \   00000000   ........           DC32     `?<Constant " Check Pending MT Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_31:
   \   00000000   ........           DC32     `?<Constant " Check Pending BC Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_32:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the HW ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_33:
   \   00000000   ........           DC32     `?<Constant "Press \\'M\\' for menu, o...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_34:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Remote Terminal In...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_35:
   \   00000000   ........           DC32     `?<Constant "RT2  Reset RT mode cmd">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_36:
   \   00000000   ........           DC32     `?<Constant "RT2  Index Equals Zero">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_37:
   \   00000000   ........           DC32     `?<Constant "RT2    Illegal Command">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_38:
   \   00000000   ........           DC32     `?<Constant "RT2 Broadcast Msg Rcvd">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_39:
   \   00000000   ........           DC32     `?<Constant "RT2 MessageErrorStatus">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_40:
   \   00000000   ........           DC32     `?<Constant "RT2  Int When Accessed">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_41:
   \   00000000   ........           DC32     `?<Constant "        Reserved Bit 9">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_42:
   \   00000000   ........           DC32     `?<Constant "RT1  Reset RT mode cmd">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_43:
   \   00000000   ........           DC32     `?<Constant "RT1  Index Equals Zero">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_44:
   \   00000000   ........           DC32     `?<Constant "RT1    Illegal Command">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_45:
   \   00000000   ........           DC32     `?<Constant "RT1 Broadcast Msg Rcvd">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_46:
   \   00000000   ........           DC32     `?<Constant "RT1 MessageErrorStatus">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_47:
   \   00000000   ........           DC32     `?<Constant "RT1  Int When Accessed">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_48:
   \   00000000   ........           DC32     `?<Constant "     Reserved Bits 2-0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_49:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the RT ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_50:
   \   00000000   00400940           DC32     0x40094000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_51:
   \   00000000   ........           DC32     watch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_52:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Invalid Choice. Pr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_53:
   \   00000000   ........           DC32     waddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_54:
   \   00000000   ........           DC32     `?<Constant "    0           -    ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_55:
   \   00000000   ........           DC32     `?<Constant "    1           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_56:
   \   00000000   ........           DC32     `?<Constant "1           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_57:
   \   00000000   ........           DC32     `?<Constant "0           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_58:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_59:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_60:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">_2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_61:
   \   00000000   ........           DC32     `?<Constant "Press \\'M\\' for menu, o...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable20_62:
   \   00000000   ........           DC32     `?<Constant "=====================...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant {{2097152, (AT91S_PIO *)1074662400,`:
   \   00000000   00002000000C       DC32 2097152, 400E0C00H
   \              0E40        
   \   00000008   0A0000000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000001B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000020   00001000000C       DC32 1048576, 400E0C00H
   \              0E40        
   \   00000028   0A0000000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000003B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000040   00008000000C       DC32 8388608, 400E0C00H
   \              0E40        
   \   00000048   0A0100000000       DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000005B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000060   00004000000C       DC32 4194304, 400E0C00H
   \              0E40        
   \   00000068   0A0100000000       DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000007B   0000000000         DC8 0, 0, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r*******************...">`:
   \   00000000   0A0D2A2A2A2A       DC8 0AH, 0DH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000008   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000010   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000018   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000020   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000028   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000030   2A2A2A0A0D00       DC8 2AH, 2AH, 2AH, 0AH, 0DH, 0
   \   00000036   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Holt Integrated Ci...">`:
   \   00000000   202020486F6C       DC8 20H, 20H, 20H, 48H, 6FH, 6CH, 74H, 20H
   \              7420        
   \   00000008   496E74656772       DC8 49H, 6EH, 74H, 65H, 67H, 72H, 61H, 74H
   \              6174        
   \   00000010   656420436972       DC8 65H, 64H, 20H, 43H, 69H, 72H, 63H, 75H
   \              6375        
   \   00000018   697473204849       DC8 69H, 74H, 73H, 20H, 48H, 49H, 2DH, 36H
   \              2D36        
   \   00000020   3133302F3331       DC8 31H, 33H, 30H, 2FH, 33H, 31H, 20H, 50H
   \              2050        
   \   00000028   726F6A656374       DC8 72H, 6FH, 6AH, 65H, 63H, 74H, 20H, 20H
   \              2020        
   \   00000030   200A0D00           DC8 20H, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "        Compiled: %s ...">`:
   \   00000000   202020202020       DC8 "        Compiled: %s %s        \012\015"
   \              2020436F6D70
   \              696C65643A20
   \              257320257320
   \              202020202020
   \              200A0D00    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "May 17 2012">`:
   \   00000000   4D6179203137       DC8 "May 17 2012"
   \              203230313200

   \                                 In section .rodata, align 4
   \                     `?<Constant "09:55:10">`:
   \   00000000   30393A35353A       DC8 "09:55:10"
   \              313000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "*********************...">`:
   \   00000000   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000008   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000010   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000018   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000020   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000028   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000030   2A0A0A0D00         DC8 2AH, 0AH, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   BC On   ">`:
   \   00000000   202020424320       DC8 "   BC On   "
   \              4F6E20202000

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT On    ">`:
   \   00000000   534D54204F6E       DC8 "SMT On    "
   \              2020202000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 On   ">`:
   \   00000000   525431204F6E       DC8 "RT1 On   "
   \              20202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 On">`:
   \   00000000   525432204F6E       DC8 "RT2 On"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0A0A0D00           DC8 "\012\012\015"

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'1\\' to step BC...">`:
   \   00000000   205072657373       DC8 " Press '1' to step BC and list results...\012\015"
   \              202731272074
   \              6F2073746570
   \              20424320616E
   \              64206C697374
   \              20726573756C
   \              74732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'2\\' to list BC...">`:
   \   00000000   205072657373       DC8 " Press '2' to list BC configuration...\012\015"
   \              202732272074
   \              6F206C697374
   \              20424320636F
   \              6E6669677572
   \              6174696F6E2E
   \              2E2E0A0D00  
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'3\\' to list BC...">`:
   \   00000000   205072657373       DC8 20H, 50H, 72H, 65H, 73H, 73H, 20H, 27H
   \              2027        
   \   00000008   332720746F20       DC8 33H, 27H, 20H, 74H, 6FH, 20H, 6CH, 69H
   \              6C69        
   \   00000010   737420424320       DC8 73H, 74H, 20H, 42H, 43H, 20H, 63H, 6FH
   \              636F        
   \   00000018   6E646974696F       DC8 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH, 20H
   \              6E20        
   \   00000020   636F64657320       DC8 63H, 6FH, 64H, 65H, 73H, 20H, 26H, 20H
   \              2620        
   \   00000028   475020666C61       DC8 47H, 50H, 20H, 66H, 6CH, 61H, 67H, 73H
   \              6773        
   \   00000030   2E2E2E0A0D00       DC8 2EH, 2EH, 2EH, 0AH, 0DH, 0
   \   00000036   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'4\\' to list MT...">`:
   \   00000000   205072657373       DC8 " Press '4' to list MT configuration...\012\015"
   \              202734272074
   \              6F206C697374
   \              204D5420636F
   \              6E6669677572
   \              6174696F6E2E
   \              2E2E0A0D00  
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'5\\' to list MT...">`:
   \   00000000   205072657373       DC8 " Press '5' to list MT results, last msg...\012\015"
   \              202735272074
   \              6F206C697374
   \              204D54207265
   \              73756C74732C
   \              206C61737420
   \              6D73672E2E2E
   \              0A0D00      
   \   0000002D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'6\\' to list HW...">`:
   \   00000000   205072657373       DC8 " Press '6' to list HW interrupt status...\012\015"
   \              202736272074
   \              6F206C697374
   \              20485720696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'7\\' to list BC...">`:
   \   00000000   205072657373       DC8 " Press '7' to list BC interrupt status...\012\015"
   \              202737272074
   \              6F206C697374
   \              20424320696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'8\\' to list RT...">`:
   \   00000000   205072657373       DC8 " Press '8' to list RT interrupt status...\012\015"
   \              202738272074
   \              6F206C697374
   \              20525420696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'9\\' to list MT...">`:
   \   00000000   205072657373       DC8 " Press '9' to list MT interrupt status...\012\015"
   \              202739272074
   \              6F206C697374
   \              204D5420696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " NOTE: Options 6-9 cl...">`:
   \   00000000   204E4F54453A       DC8 20H, 4EH, 4FH, 54H, 45H, 3AH, 20H, 4FH
   \              204F        
   \   00000008   7074696F6E73       DC8 70H, 74H, 69H, 6FH, 6EH, 73H, 20H, 36H
   \              2036        
   \   00000010   2D3920636C65       DC8 2DH, 39H, 20H, 63H, 6CH, 65H, 61H, 72H
   \              6172        
   \   00000018   207468652061       DC8 20H, 74H, 68H, 65H, 20H, 61H, 63H, 63H
   \              6363        
   \   00000020   657373656420       DC8 65H, 73H, 73H, 65H, 64H, 20H, 50H, 65H
   \              5065        
   \   00000028   6E64696E6720       DC8 6EH, 64H, 69H, 6EH, 67H, 20H, 49H, 6EH
   \              496E        
   \   00000030   746572727570       DC8 74H, 65H, 72H, 72H, 75H, 70H, 74H, 20H
   \              7420        
   \   00000038   526567697374       DC8 52H, 65H, 67H, 69H, 73H, 74H, 65H, 72H
   \              6572        
   \   00000040   210A0D00           DC8 21H, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \   00000000   0A0D00             DC8 "\012\015"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rResults From Last M...">`:
   \   00000000   0A0D52657375       DC8 "\012\015Results From Last Message Issued by BC\012\015"
   \              6C7473204672
   \              6F6D204C6173
   \              74204D657373
   \              616765204973
   \              737565642062
   \              792042430A0D
   \              00          
   \   0000002B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Message Type: ">`:
   \   00000000   4D6573736167       DC8 "Message Type: "
   \              652054797065
   \              3A2000      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Broadcast ">`:
   \   00000000   42726F616463       DC8 "Broadcast "
   \              6173742000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT Message, ">`:
   \   00000000   52542D525420       DC8 "RT-RT Message, "
   \              4D6573736167
   \              652C2000    

   \                                 In section .rodata, align 4
   \   00000000   54782000           DC8 "Tx "

   \                                 In section .rodata, align 4
   \   00000000   52782000           DC8 "Rx "

   \                                 In section .rodata, align 4
   \                     `?<Constant "Mode Code %02d With D...">`:
   \   00000000   4D6F64652043       DC8 "Mode Code %02d With Data 0x%.2X%.2X\012\012\015"
   \              6F6465202530
   \              326420576974
   \              682044617461
   \              203078252E32
   \              58252E32580A
   \              0A0D00      
   \   00000027   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Mode Code %02d w/o Da...">`:
   \   00000000   4D6F64652043       DC8 "Mode Code %02d w/o Data\012\012\015"
   \              6F6465202530
   \              326420772F6F
   \              20446174610A
   \              0A0D00      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Mode Code %02d w/o Da...">_1`:
   \   00000000   4D6F64652043       DC8 "Mode Code %02d w/o Data, Undefined\012\012\015"
   \              6F6465202530
   \              326420772F6F
   \              20446174612C
   \              20556E646566
   \              696E65640A0A
   \              0D00        
   \   00000026   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Subaddress Command, ">`:
   \   00000000   537562616464       DC8 "Subaddress Command, "
   \              726573732043
   \              6F6D6D616E64
   \              2C2000      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%d data word">`:
   \   00000000   256420646174       DC8 "%d data word"
   \              6120776F7264
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 2
   \   00000000   7300               DC8 "s"

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW m...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW mode code.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              57206D6F6465
   \              20636F64652E
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW i...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW is transmit.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              572069732074
   \              72616E736D69
   \              742E0A0D00  
   \   00000023   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: TxCW i...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: TxCW is receive.\012\015"
   \              70726F626C65
   \              6D3A20547843
   \              572069732072
   \              656365697665
   \              2E0A0D00    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: TxCW m...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: TxCW mode code.\012\015"
   \              70726F626C65
   \              6D3A20547843
   \              57206D6F6465
   \              20636F64652E
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW &...">`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW & TxCW have same RT addr.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              572026205478
   \              435720686176
   \              652073616D65
   \              205254206164
   \              64722E0A0D00

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT problem: RxCW &...">_1`:
   \   00000000   52542D525420       DC8 "RT-RT problem: RxCW & TxCW word counts differ.\012\015"
   \              70726F626C65
   \              6D3A20527843
   \              572026205478
   \              435720776F72
   \              6420636F756E
   \              747320646966
   \              6665722E0A0D
   \              00          
   \   00000031   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CW1: 0x%.2X%.2X">`:
   \   00000000   4357313A2030       DC8 "CW1: 0x%.2X%.2X"
   \              78252E325825
   \              2E325800    

   \                                 In section .rodata, align 4
   \                     `?<Constant " = %02d-%1d-%02d-%02d...">`:
   \   00000000   203D20253032       DC8 " = %02d-%1d-%02d-%02d     "
   \              642D2531642D
   \              253032642D25
   \              303264202020
   \              202000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RSW not applicable\\n\\r">`:
   \   00000000   525357206E6F       DC8 "RSW not applicable\012\015"
   \              74206170706C
   \              696361626C65
   \              0A0D00      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RxSW: 0x%.2X%.2X">`:
   \   00000000   527853573A20       DC8 "RxSW: 0x%.2X%.2X"
   \              3078252E3258
   \              252E325800  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " = RT%02d ">`:
   \   00000000   203D20525425       DC8 " = RT%02d "
   \              3032642000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CS\\n\\r">`:
   \   00000000   43530A0D00         DC8 "CS\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   4D452000           DC8 "ME "

   \                                 In section .rodata, align 4
   \                     `?<Constant "INST ">`:
   \   00000000   494E53542000       DC8 "INST "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SRQ ">`:
   \   00000000   5352512000         DC8 "SRQ "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RSV ">`:
   \   00000000   5253562000         DC8 "RSV "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BCR ">`:
   \   00000000   4243522000         DC8 "BCR "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BSY ">`:
   \   00000000   4253592000         DC8 "BSY "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SSF ">`:
   \   00000000   5353462000         DC8 "SSF "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "DBCA ">`:
   \   00000000   444243412000       DC8 "DBCA "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   54462000           DC8 "TF "

   \                                 In section .rodata, align 4
   \                     `?<Constant "CW2: 0x%.2X%.2X">`:
   \   00000000   4357323A2030       DC8 "CW2: 0x%.2X%.2X"
   \              78252E325825
   \              2E325800    

   \                                 In section .rodata, align 4
   \                     `?<Constant "TxSW: 0x%.2X%.2X">`:
   \   00000000   547853573A20       DC8 "TxSW: 0x%.2X%.2X"
   \              3078252E3258
   \              252E325800  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CS\\n\\n\\r">`:
   \   00000000   43530A0A0D00       DC8 "CS\012\012\015"
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "CW: 0x%.2X%.2X">`:
   \   00000000   43573A203078       DC8 "CW: 0x%.2X%.2X"
   \              252E3258252E
   \              325800      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SW not applicable\\n\\n\\r">`:
   \   00000000   5357206E6F74       DC8 "SW not applicable\012\012\015"
   \              206170706C69
   \              6361626C650A
   \              0A0D00      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SW not received\\n\\n\\r">`:
   \   00000000   5357206E6F74       DC8 "SW not received\012\012\015"
   \              207265636569
   \              7665640A0A0D
   \              00          
   \   00000013   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SW: 0x%.2X%.2X">`:
   \   00000000   53573A203078       DC8 "SW: 0x%.2X%.2X"
   \              252E3258252E
   \              325800      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Control Word: 0x%....">`:
   \   00000000   424320436F6E       DC8 "BC Control Word: 0x%.2X%.2X  \012\015"
   \              74726F6C2057
   \              6F72643A2030
   \              78252E325825
   \              2E325820200A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17TTL ">`:
   \   00000000   4D4331375454       DC8 "MC17TTL "
   \              4C2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MEmask ">`:
   \   00000000   4D456D61736B       DC8 "MEmask "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "SRQmask ">`:
   \   00000000   5352516D6173       DC8 "SRQmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BSYmask ">`:
   \   00000000   4253596D6173       DC8 "BSYmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SSFmask ">`:
   \   00000000   5353466D6173       DC8 "SSFmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "TFmask ">`:
   \   00000000   54466D61736B       DC8 "TFmask "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "RSVmask ">`:
   \   00000000   5253566D6173       DC8 "RSVmask "
   \              6B2000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RetryEna ">`:
   \   00000000   526574727945       DC8 "RetryEna "
   \              6E612000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "UseBusA ">`:
   \   00000000   557365427573       DC8 "UseBusA "
   \              412000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "UseBusB ">`:
   \   00000000   557365427573       DC8 "UseBusB "
   \              422000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SelfTest ">`:
   \   00000000   53656C665465       DC8 "SelfTest "
   \              73742000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "maskBCR ">`:
   \   00000000   6D61736B4243       DC8 "maskBCR "
   \              522000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "EOMirq ">`:
   \   00000000   454F4D697271       DC8 "EOMirq "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "NonBcstSA ">`:
   \   00000000   4E6F6E426373       DC8 "NonBcstSA "
   \              7453412000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RTRT ">`:
   \   00000000   525452542000       DC8 "RTRT "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstSA ">`:
   \   00000000   426373745341       DC8 "BcstSA "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstRTRT ">`:
   \   00000000   426373745254       DC8 "BcstRTRT "
   \              52542000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   4D432000           DC8 "MC "

   \                                 In section .rodata, align 4
   \                     `?<Constant "RTRT_MC?? ">`:
   \   00000000   525452545F4D       DC8 "RTRT_MC?? "
   \              433F3F2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstMC ">`:
   \   00000000   426373744D43       DC8 "BcstMC "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "BcstRTRT_MC?? ">`:
   \   00000000   426373745254       DC8 "BcstRTRT_MC?? "
   \              52545F4D433F
   \              3F2000      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "The Cmd Word and Cont...">`:
   \   00000000   54686520436D       DC8 54H, 68H, 65H, 20H, 43H, 6DH, 64H, 20H
   \              6420        
   \   00000008   576F72642061       DC8 57H, 6FH, 72H, 64H, 20H, 61H, 6EH, 64H
   \              6E64        
   \   00000010   20436F6E7472       DC8 20H, 43H, 6FH, 6EH, 74H, 72H, 6FH, 6CH
   \              6F6C        
   \   00000018   20576F726420       DC8 20H, 57H, 6FH, 72H, 64H, 20H, 62H, 69H
   \              6269        
   \   00000020   742031206469       DC8 74H, 20H, 31H, 20H, 64H, 69H, 73H, 61H
   \              7361        
   \   00000028   67726565206F       DC8 67H, 72H, 65H, 65H, 20H, 6FH, 6EH, 20H
   \              6E20        
   \   00000030   62726F616463       DC8 62H, 72H, 6FH, 61H, 64H, 63H, 61H, 73H
   \              6173        
   \   00000038   7420666F726D       DC8 74H, 20H, 66H, 6FH, 72H, 6DH, 61H, 74H
   \              6174        
   \   00000040   2E0A0D00           DC8 2EH, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "The Cmd Word and Cont...">_1`:
   \   00000000   54686520436D       DC8 54H, 68H, 65H, 20H, 43H, 6DH, 64H, 20H
   \              6420        
   \   00000008   576F72642061       DC8 57H, 6FH, 72H, 64H, 20H, 61H, 6EH, 64H
   \              6E64        
   \   00000010   20436F6E7472       DC8 20H, 43H, 6FH, 6EH, 74H, 72H, 6FH, 6CH
   \              6F6C        
   \   00000018   20576F726420       DC8 20H, 57H, 6FH, 72H, 64H, 20H, 62H, 69H
   \              6269        
   \   00000020   742032206469       DC8 74H, 20H, 32H, 20H, 64H, 69H, 73H, 61H
   \              7361        
   \   00000028   67726565206F       DC8 67H, 72H, 65H, 65H, 20H, 6FH, 6EH, 20H
   \              6E20        
   \   00000030   6D6F64652063       DC8 6DH, 6FH, 64H, 65H, 20H, 63H, 6FH, 64H
   \              6F64        
   \   00000038   6520666F726D       DC8 65H, 20H, 66H, 6FH, 72H, 6DH, 61H, 74H
   \              6174        
   \   00000040   2E0A0D00           DC8 2EH, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Block Status Word: 0x...">`:
   \   00000000   426C6F636B20       DC8 "Block Status Word: 0x%.2X%.2X \012\015"
   \              537461747573
   \              20576F72643A
   \              203078252E32
   \              58252E325820
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SOM  ">`:
   \   00000000   534F4D202000       DC8 "SOM  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "EOM  ">`:
   \   00000000   454F4D202000       DC8 "EOM  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BusB  ">`:
   \   00000000   427573422020       DC8 "BusB  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus A  ">`:
   \   00000000   427573204120       DC8 "Bus A  "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "ErrOcc ">`:
   \   00000000   4572724F6363       DC8 "ErrOcc "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "SSet  ">`:
   \   00000000   535365742020       DC8 "SSet  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "NoResp  ">`:
   \   00000000   4E6F52657370       DC8 "NoResp  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LpBk  ">`:
   \   00000000   4C70426B2020       DC8 "LpBk  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2retry  ">`:
   \   00000000   327265747279       DC8 "2retry  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1retry  ">`:
   \   00000000   317265747279       DC8 "1retry  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GDB  ">`:
   \   00000000   474442202000       DC8 "GDB  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WAG  ">`:
   \   00000000   574147202000       DC8 "WAG  "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WdCt  ">`:
   \   00000000   576443742020       DC8 "WdCt  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SyncErr  ">`:
   \   00000000   53796E634572       DC8 "SyncErr  "
   \              72202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "InvWd  ">`:
   \   00000000   496E76576420       DC8 "InvWd  "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "FmtErr  ">`:
   \   00000000   466D74457272       DC8 "FmtErr  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MSSet  ">`:
   \   00000000   4D5353657420       DC8 "MSSet  "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Condition Code Regist...">`:
   \   00000000   436F6E646974       DC8 "Condition Code Register: 0x%.2X%.2X\012\015"
   \              696F6E20436F
   \              646520526567
   \              69737465723A
   \              203078252E32
   \              58252E32580A
   \              0D00        
   \   00000026   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Stopped: No Condit...">`:
   \   00000000   42432053746F       DC8 42H, 43H, 20H, 53H, 74H, 6FH, 70H, 70H
   \              7070        
   \   00000008   65643A204E6F       DC8 65H, 64H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E00         DC8 53H, 65H, 74H, 2EH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Running: No Condit...">`:
   \   00000000   42432052756E       DC8 42H, 43H, 20H, 52H, 75H, 6EH, 6EH, 69H
   \              6E69        
   \   00000008   6E673A204E6F       DC8 6EH, 67H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E00         DC8 53H, 65H, 74H, 2EH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Is Running.\\n\\r">`:
   \   00000000   424320497320       DC8 "BC Is Running.\012\015"
   \              52756E6E696E
   \              672E0A0D00  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Not Running.\\n\\r">`:
   \   00000000   4243204E6F74       DC8 "BC Not Running.\012\015"
   \              2052756E6E69
   \              6E672E0A0D00
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2Retries  ">`:
   \   00000000   325265747269       DC8 "2Retries  "
   \              6573202000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1Retry  ">`:
   \   00000000   315265747279       DC8 "1Retry  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BadMsg  ">`:
   \   00000000   4261644D7367       DC8 "BadMsg  "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GdDataBlk  ">`:
   \   00000000   476444617461       DC8 "GdDataBlk  "
   \              426C6B202000

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF7  ">`:
   \   00000000   475046372020       DC8 "GPF7  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF6  ">`:
   \   00000000   475046362020       DC8 "GPF6  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF5  ">`:
   \   00000000   475046352020       DC8 "GPF5  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF4  ">`:
   \   00000000   475046342020       DC8 "GPF4  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF3  ">`:
   \   00000000   475046332020       DC8 "GPF3  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GPF2  ">`:
   \   00000000   475046322020       DC8 "GPF2  "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "LT-GPF1  ">`:
   \   00000000   4C542D475046       DC8 "LT-GPF1  "
   \              31202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "EQ-GPF0  ">`:
   \   00000000   45512D475046       DC8 "EQ-GPF0  "
   \              30202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "No RT response, no re...">`:
   \   00000000   4E6F20525420       DC8 "No RT response, no received data\012\012\015"
   \              726573706F6E
   \              73652C206E6F
   \              207265636569
   \              766564206461
   \              74610A0A0D00

   \                                 In section .rodata, align 4
   \                     `?<Constant "Data Addr: 0x%.2X%.2X...">`:
   \   00000000   446174612041       DC8 "Data Addr: 0x%.2X%.2X,      "
   \              6464723A2030
   \              78252E325825
   \              2E32582C2020
   \              2020202000  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus Addr: 0x6000%.2X%...">`:
   \   00000000   427573204164       DC8 "Bus Addr: 0x6000%.2X%.2X\012\015Data:"
   \              64723A203078
   \              36303030252E
   \              3258252E3258
   \              0A0D44617461
   \              3A00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X ">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X "
   \              252E32582000

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rBC Configuration Re...">`:
   \   00000000   0A0D42432043       DC8 "\012\015BC Configuration Register: 0x%.2X%.2X\012\015"
   \              6F6E66696775
   \              726174696F6E
   \              205265676973
   \              7465723A2030
   \              78252E325825
   \              2E32580A0D00
   \   0000002A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  20">`:
   \   00000000   2020323000         DC8 "  20"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  58">`:
   \   00000000   2020353800         DC8 "  58"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 138">`:
   \   00000000   2031333800         DC8 " 138"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  15">`:
   \   00000000   2020313500         DC8 "  15"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "us Timeout (bus dead ...">`:
   \   00000000   75732054696D       DC8 "us Timeout (bus dead time)   "
   \              656F75742028
   \              627573206465
   \              61642074696D
   \              652920202000
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Check Control Word Fo...">`:
   \   00000000   436865636B20       DC8 "Check Control Word Format Bits"
   \              436F6E74726F
   \              6C20576F7264
   \              20466F726D61
   \              742042697473
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Don\\'t Check Control W...">`:
   \   00000000   446F6E277420       DC8 "Don't Check Control Word Format Bits"
   \              436865636B20
   \              436F6E74726F
   \              6C20576F7264
   \              20466F726D61
   \              742042697473
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 2 Retries, Same Bus,...">`:
   \   00000000   203220526574       DC8 " 2 Retries, Same Bus, Same Bus   "
   \              726965732C20
   \              53616D652042
   \              75732C205361
   \              6D6520427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  2 Retries, Alt Bus,...">`:
   \   00000000   202032205265       DC8 "  2 Retries, Alt Bus, Same Bus   "
   \              74726965732C
   \              20416C742042
   \              75732C205361
   \              6D6520427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  2 Retries, Same Bus...">`:
   \   00000000   202032205265       DC8 "  2 Retries, Same Bus, Alt Bus   "
   \              74726965732C
   \              2053616D6520
   \              4275732C2041
   \              6C7420427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   2 Retries, Alt Bus...">`:
   \   00000000   202020322052       DC8 "   2 Retries, Alt Bus, Alt Bus   "
   \              657472696573
   \              2C20416C7420
   \              4275732C2041
   \              6C7420427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  1 Retry if Msg Fail...">`:
   \   00000000   202031205265       DC8 "  1 Retry if Msg Fail, Alt Bus   "
   \              747279206966
   \              204D73672046
   \              61696C2C2041
   \              6C7420427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 1 Retry if Msg Fail,...">`:
   \   00000000   203120526574       DC8 " 1 Retry if Msg Fail, Same Bus   "
   \              727920696620
   \              4D7367204661
   \              696C2C205361
   \              6D6520427573
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "    No Retries for Ms...">`:
   \   00000000   202020204E6F       DC8 "    No Retries for Msg Failure   "
   \              205265747269
   \              657320666F72
   \              204D73672046
   \              61696C757265
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Retry if RT status bi...">`:
   \   00000000   526574727920       DC8 "Retry if RT status bit high"
   \              696620525420
   \              737461747573
   \              206269742068
   \              69676800    

   \                                 In section .rodata, align 4
   \                     `?<Constant "No Retry if RT status...">`:
   \   00000000   4E6F20526574       DC8 "No Retry if RT status bit high"
   \              727920696620
   \              525420737461
   \              747573206269
   \              742068696768
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " RT status ME w/o dat...">`:
   \   00000000   205254207374       DC8 " RT status ME w/o data = Valid   "
   \              61747573204D
   \              4520772F6F20
   \              64617461203D
   \              2056616C6964
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " RT status ME w/o dat...">_1`:
   \   00000000   205254207374       DC8 " RT status ME w/o data = Inval   "
   \              61747573204D
   \              4520772F6F20
   \              64617461203D
   \              20496E76616C
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT status BSY w/o dat...">`:
   \   00000000   525420737461       DC8 "RT status BSY w/o data = Valid"
   \              747573204253
   \              5920772F6F20
   \              64617461203D
   \              2056616C6964
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT status BSY w/o dat...">_1`:
   \   00000000   525420737461       DC8 "RT status BSY w/o data = Inval"
   \              747573204253
   \              5920772F6F20
   \              64617461203D
   \              20496E76616C
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "            Msg Gap T...">`:
   \   00000000   202020202020       DC8 "            Msg Gap Timer = On   "
   \              202020202020
   \              4D7367204761
   \              702054696D65
   \              72203D204F6E
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "           Msg Gap Ti...">`:
   \   00000000   202020202020       DC8 "           Msg Gap Timer = Off   "
   \              20202020204D
   \              736720476170
   \              2054696D6572
   \              203D204F6666
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Watchdog Frame Timer ...">`:
   \   00000000   576174636864       DC8 "Watchdog Frame Timer = On"
   \              6F6720467261
   \              6D652054696D
   \              6572203D204F
   \              6E00        
   \   0000001A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Watchdog Frame Timer ...">_1`:
   \   00000000   576174636864       DC8 "Watchdog Frame Timer = Off"
   \              6F6720467261
   \              6D652054696D
   \              6572203D204F
   \              666600      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 send Time Tag lo...">`:
   \   00000000   4D4331372073       DC8 "MC17 send Time Tag low 16 bits   "
   \              656E64205469
   \              6D6520546167
   \              206C6F772031
   \              362062697473
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 send data in msg...">`:
   \   00000000   4D4331372073       DC8 "MC17 send data in msg data blk   "
   \              656E64206461
   \              746120696E20
   \              6D7367206461
   \              746120626C6B
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 data word always...">`:
   \   00000000   4D4331372064       DC8 "MC17 data word always even"
   \              61746120776F
   \              726420616C77
   \              617973206576
   \              656E00      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MC17 data may be even...">`:
   \   00000000   4D4331372064       DC8 "MC17 data may be even or odd"
   \              617461206D61
   \              792062652065
   \              76656E206F72
   \              206F646400  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  Enable 4us Minimum ...">`:
   \   00000000   2020456E6162       DC8 "  Enable 4us Minimum Gap Check   "
   \              6C6520347573
   \              204D696E696D
   \              756D20476170
   \              20436865636B
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   No 4us Minimum Gap...">`:
   \   00000000   2020204E6F20       DC8 "   No 4us Minimum Gap Checking   "
   \              347573204D69
   \              6E696D756D20
   \              476170204368
   \              65636B696E67
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BCR Mask Enabled, BCR...">`:
   \   00000000   424352204D61       DC8 "BCR Mask Enabled, BCRME = 1"
   \              736B20456E61
   \              626C65642C20
   \              4243524D4520
   \              3D203100    

   \                                 In section .rodata, align 4
   \                     `?<Constant "BCR Mask Disabled, BC...">`:
   \   00000000   424352204D61       DC8 "BCR Mask Disabled, BCRME = 0"
   \              736B20446973
   \              61626C65642C
   \              204243524D45
   \              203D203000  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Timetag Config Regist...">`:
   \   00000000   54696D657461       DC8 "Timetag Config Register 0x%.2X%.2X  "
   \              6720436F6E66
   \              696720526567
   \              697374657220
   \              3078252E3258
   \              252E32582020
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "32-bit timebase with ">`:
   \   00000000   33322D626974       DC8 "32-bit timebase with "
   \              2074696D6562
   \              617365207769
   \              74682000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "16-bit timebase with ">`:
   \   00000000   31362D626974       DC8 "16-bit timebase with "
   \              2074696D6562
   \              617365207769
   \              74682000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "clock disabled! ">`:
   \   00000000   636C6F636B20       DC8 "clock disabled! "
   \              64697361626C
   \              6564212000  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "ext clock ">`:
   \   00000000   65787420636C       DC8 "ext clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2us clock ">`:
   \   00000000   32757320636C       DC8 "2us clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "4us clock ">`:
   \   00000000   34757320636C       DC8 "4us clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "8us clock ">`:
   \   00000000   38757320636C       DC8 "8us clock "
   \              6F636B2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "16us clock ">`:
   \   00000000   313675732063       DC8 "16us clock "
   \              6C6F636B2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "32us clock ">`:
   \   00000000   333275732063       DC8 "32us clock "
   \              6C6F636B2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "64us clock ">`:
   \   00000000   363475732063       DC8 "64us clock "
   \              6C6F636B2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rBC Condition Code &...">`:
   \   00000000   0A0D42432043       DC8 0AH, 0DH, 42H, 43H, 20H, 43H, 6FH, 6EH
   \              6F6E        
   \   00000008   646974696F6E       DC8 64H, 69H, 74H, 69H, 6FH, 6EH, 20H, 43H
   \              2043        
   \   00000010   6F6465202620       DC8 6FH, 64H, 65H, 20H, 26H, 20H, 47H, 50H
   \              4750        
   \   00000018   20466C616720       DC8 20H, 46H, 6CH, 61H, 67H, 20H, 52H, 65H
   \              5265        
   \   00000020   676973746572       DC8 67H, 69H, 73H, 74H, 65H, 72H, 3AH, 20H
   \              3A20        
   \   00000028   3078252E3258       DC8 30H, 78H, 25H, 2EH, 32H, 58H, 25H, 2EH
   \              252E        
   \   00000030   32580A0D00         DC8 32H, 58H, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Stopped: No Condit...">_1`:
   \   00000000   42432053746F       DC8 42H, 43H, 20H, 53H, 74H, 6FH, 70H, 70H
   \              7070        
   \   00000008   65643A204E6F       DC8 65H, 64H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E0A0D       DC8 53H, 65H, 74H, 2EH, 0AH, 0DH, 0
   \              00          
   \   0000003F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Running: No Condit...">_1`:
   \   00000000   42432052756E       DC8 42H, 43H, 20H, 52H, 75H, 6EH, 6EH, 69H
   \              6E69        
   \   00000008   6E673A204E6F       DC8 6EH, 67H, 3AH, 20H, 4EH, 6FH, 20H, 43H
   \              2043        
   \   00000010   6F6E64697469       DC8 6FH, 6EH, 64H, 69H, 74H, 69H, 6FH, 6EH
   \              6F6E        
   \   00000018   20436F646573       DC8 20H, 43H, 6FH, 64H, 65H, 73H, 20H, 6FH
   \              206F        
   \   00000020   722047656E20       DC8 72H, 20H, 47H, 65H, 6EH, 20H, 50H, 75H
   \              5075        
   \   00000028   72706F736520       DC8 72H, 70H, 6FH, 73H, 65H, 20H, 46H, 6CH
   \              466C        
   \   00000030   616773204172       DC8 61H, 67H, 73H, 20H, 41H, 72H, 65H, 20H
   \              6520        
   \   00000038   5365742E0A0D       DC8 53H, 65H, 74H, 2EH, 0AH, 0DH, 0
   \              00          
   \   0000003F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Is Running.\\n\\n\\r">`:
   \   00000000   424320497320       DC8 "BC Is Running.\012\012\015"
   \              52756E6E696E
   \              672E0A0A0D00
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Not Running.\\n\\n\\r">`:
   \   00000000   4243204E6F74       DC8 "BC Not Running.\012\012\015"
   \              2052756E6E69
   \              6E672E0A0A0D
   \              00          
   \   00000013   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Bus Controller Int...">`:
   \   00000000   0A0D20427573       DC8 0AH, 0DH, 20H, 42H, 75H, 73H, 20H, 43H
   \              2043        
   \   00000008   6F6E74726F6C       DC8 6FH, 6EH, 74H, 72H, 6FH, 6CH, 6CH, 65H
   \              6C65        
   \   00000010   7220496E7473       DC8 72H, 20H, 49H, 6EH, 74H, 73H, 20H, 20H
   \              2020        
   \   00000018   20456E61626C       DC8 20H, 45H, 6EH, 61H, 62H, 6CH, 65H, 64H
   \              6564        
   \   00000020   3F2020205069       DC8 3FH, 20H, 20H, 20H, 50H, 69H, 6EH, 20H
   \              6E20        
   \   00000028   4F7574707574       DC8 4FH, 75H, 74H, 70H, 75H, 74H, 3FH, 20H
   \              3F20        
   \   00000030   202050656E64       DC8 20H, 20H, 50H, 65H, 6EH, 64H, 69H, 6EH
   \              696E        
   \   00000038   673F0A0D00         DC8 67H, 3FH, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Frame Timer Expired">`:
   \   00000000   424320467261       DC8 "BC Frame Timer Expired"
   \              6D652054696D
   \              657220457870
   \              6972656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   310A0D00           DC8 "1\012\015"

   \                                 In section .rodata, align 4
   \   00000000   300A0D00           DC8 "0\012\015"

   \                                 In section .rodata, align 4
   \                     `?<Constant "Selected Msg Int,EOM=1">`:
   \   00000000   53656C656374       DC8 "Selected Msg Int,EOM=1"
   \              6564204D7367
   \              20496E742C45
   \              4F4D3D3100  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GenPurp Queue Rollover">`:
   \   00000000   47656E507572       DC8 "GenPurp Queue Rollover"
   \              702051756575
   \              6520526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Message Was Retried">`:
   \   00000000   2020204D6573       DC8 "   Message Was Retried"
   \              736167652057
   \              617320526574
   \              7269656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Call Stack Pointer Err">`:
   \   00000000   43616C6C2053       DC8 "Call Stack Pointer Err"
   \              7461636B2050
   \              6F696E746572
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  Illegal Op Code Trap">`:
   \   00000000   2020496C6C65       DC8 "  Illegal Op Code Trap"
   \              67616C204F70
   \              20436F646520
   \              5472617000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Unexpected RT Stat Bit">`:
   \   00000000   556E65787065       DC8 "Unexpected RT Stat Bit"
   \              637465642052
   \              542053746174
   \              2042697400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 3">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 3"
   \              656620496E74
   \              205265712042
   \              6974203300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 2">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 2"
   \              656620496E74
   \              205265712042
   \              6974203200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 1">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 1"
   \              656620496E74
   \              205265712042
   \              6974203100  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "User-Def Int Req Bit 0">`:
   \   00000000   557365722D44       DC8 "User-Def Int Req Bit 0"
   \              656620496E74
   \              205265712042
   \              6974203000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT Status is Msg Error">`:
   \   00000000   525420537461       DC8 "RT Status is Msg Error"
   \              747573206973
   \              204D73672045
   \              72726F7200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "     BC End-of-Message">`:
   \   00000000   202020202042       DC8 "     BC End-of-Message"
   \              4320456E642D
   \              6F662D4D6573
   \              7361676500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "     Reserved Bits 2-0">`:
   \   00000000   202020202052       DC8 "     Reserved Bits 2-0"
   \              657365727665
   \              642042697473
   \              20322D3000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the BC ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   652042432050       DC8 65H, 20H, 42H, 43H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0A0D5300           DC8 "\012\015S"

   \                                 In section .rodata, align 4
   \   00000000   0A0D4900           DC8 "\012\015I"

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT monitor mode selec...">`:
   \   00000000   4D54206D6F6E       DC8 "MT monitor mode selected.\012\012\015"
   \              69746F72206D
   \              6F6465207365
   \              6C6563746564
   \              2E0A0A0D00  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Configuration Regi...">`:
   \   00000000   4D5420436F6E       DC8 "MT Configuration Register: 0x%.2X%.2X\012\015"
   \              666967757261
   \              74696F6E2052
   \              656769737465
   \              723A20307825
   \              2E3258252E32
   \              580A0D00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "  20us Timeout">`:
   \   00000000   202032307573       DC8 "  20us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  58us Timeout">`:
   \   00000000   202035387573       DC8 "  58us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 138us Timeout">`:
   \   00000000   203133387573       DC8 " 138us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  15us Timeout">`:
   \   00000000   202031357573       DC8 "  15us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " (bus dead time)   ">`:
   \   00000000   202862757320       DC8 " (bus dead time)   "
   \              646561642074
   \              696D65292020
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "2us Gap Check ON">`:
   \   00000000   327573204761       DC8 "2us Gap Check ON"
   \              702043686563
   \              6B204F4E00  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2us Gap Check OFF">`:
   \   00000000   327573204761       DC8 "2us Gap Check OFF"
   \              702043686563
   \              6B204F464600
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  Time Tag last word,...">`:
   \   00000000   202054696D65       DC8 "  Time Tag last word, last bit   "
   \              20546167206C
   \              61737420776F
   \              72642C206C61
   \              737420626974
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Time Tag first word, ...">`:
   \   00000000   54696D652054       DC8 "Time Tag first word, first bit   "
   \              616720666972
   \              737420776F72
   \              642C20666972
   \              737420626974
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Time Tag first word,...">`:
   \   00000000   2054696D6520       DC8 " Time Tag first word, last bit   "
   \              546167206669
   \              72737420776F
   \              72642C206C61
   \              737420626974
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "           Time Taggi...">`:
   \   00000000   202020202020       DC8 "           Time Tagging is OFF   "
   \              202020202054
   \              696D65205461
   \              6767696E6720
   \              6973204F4646
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Start Rec: First Cmd ">`:
   \   00000000   537461727420       DC8 "Start Rec: First Cmd "
   \              5265633A2046
   \              697273742043
   \              6D642000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Word">`:
   \   00000000   576F726400         DC8 "Word"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "or Data Word">`:
   \   00000000   6F7220446174       DC8 "or Data Word"
   \              6120576F7264
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Sync + 2 bits">`:
   \   00000000   53796E63202B       DC8 "Sync + 2 bits"
   \              203220626974
   \              7300        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "or Data Sync + 2 bits">`:
   \   00000000   6F7220446174       DC8 "or Data Sync + 2 bits"
   \              612053796E63
   \              202B20322062
   \              69747300    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Invalid Data Word">`:
   \   00000000   202020496E76       DC8 "   Invalid Data Word"
   \              616C69642044
   \              61746120576F
   \              726400      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "s recorded   ">`:
   \   00000000   73207265636F       DC8 "s recorded   "
   \              726465642020
   \              2000        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " ends mssg   ">`:
   \   00000000   20656E647320       DC8 " ends mssg   "
   \              6D7373672020
   \              2000        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Extended Status Flags ">`:
   \   00000000   457874656E64       DC8 "Extended Status Flags "
   \              656420537461
   \              74757320466C
   \              6167732000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   4F4E00             DC8 "ON"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   4F464600           DC8 "OFF"

   \                                 In section .rodata, align 4
   \                     `?<Constant " SMT using ">`:
   \   00000000   20534D542075       DC8 " SMT using "
   \              73696E672000

   \                                 In section .rodata, align 4
   \   00000000   343800             DC8 "48"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   313600             DC8 "16"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "-bit Time Tag ">`:
   \   00000000   2D6269742054       DC8 "-bit Time Tag "
   \              696D65205461
   \              672000      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT Pkt Timer starts ">`:
   \   00000000   494D5420506B       DC8 "IMT Pkt Timer starts "
   \              742054696D65
   \              722073746172
   \              74732000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at PktEnd   ">`:
   \   00000000   617420506B74       DC8 "at PktEnd   "
   \              456E64202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at Cmd Wd   ">`:
   \   00000000   617420436D64       DC8 "at Cmd Wd   "
   \              205764202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT Hdr Data Type IRI...">`:
   \   00000000   494D54204864       DC8 "IMT Hdr Data Type IRIG-106-"
   \              722044617461
   \              205479706520
   \              495249472D31
   \              30362D00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "09  ">`:
   \   00000000   3039202000         DC8 "09  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "04  ">`:
   \   00000000   3034202000         DC8 "04  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "05  ">`:
   \   00000000   3035202000         DC8 "05  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "07  ">`:
   \   00000000   3037202000         DC8 "07  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " IMT Auto Header & Tr...">`:
   \   00000000   20494D542041       DC8 " IMT Auto Header & Trailer "
   \              75746F204865
   \              616465722026
   \              20547261696C
   \              65722000    

   \                                 In section .rodata, align 4
   \                     `?<Constant "OFF   ">`:
   \   00000000   4F4646202020       DC8 "OFF   "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " ON   ">`:
   \   00000000   204F4E202020       DC8 " ON   "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT Data Packet Check...">`:
   \   00000000   494D54204461       DC8 "IMT Data Packet Checksum "
   \              746120506163
   \              6B6574204368
   \              65636B73756D
   \              2000        
   \   0000001A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rLast Message Record...">`:
   \   00000000   0A0D4C617374       DC8 "\012\015Last Message Recorded by "
   \              204D65737361
   \              676520526563
   \              6F7264656420
   \              62792000    

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT:    ">`:
   \   00000000   534D543A2020       DC8 "SMT:    "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT:   ">`:
   \   00000000   494D543A2020       DC8 "IMT:   "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Block Status Word = 0...">`:
   \   00000000   426C6F636B20       DC8 "Block Status Word = 0x%.2X%.2X...\012\012\015"
   \              537461747573
   \              20576F726420
   \              3D203078252E
   \              3258252E3258
   \              2E2E2E0A0A0D
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "* means IMT BSW reser...">`:
   \   00000000   2A206D65616E       DC8 "* means IMT BSW reserved bit:\012\012\015"
   \              7320494D5420
   \              425357207265
   \              736572766564
   \              206269743A0A
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "           * Start of...">`:
   \   00000000   202020202020       DC8 "           * Start of Msg "
   \              20202020202A
   \              205374617274
   \              206F66204D73
   \              672000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "n/a    ">`:
   \   00000000   6E2F61202020       DC8 "n/a    "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "= 1    ">`:
   \   00000000   3D2031202020       DC8 "= 1    "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "= 0    ">`:
   \   00000000   3D2030202020       DC8 "= 0    "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus Used = ">`:
   \   00000000   427573205573       DC8 "Bus Used = "
   \              6564203D2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "B\\n\\n\\r">`:
   \   00000000   420A0A0D00         DC8 "B\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "A\\n\\n\\r">`:
   \   00000000   410A0A0D00         DC8 "A\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "             * End of...">`:
   \   00000000   202020202020       DC8 "             * End of Msg "
   \              202020202020
   \              202A20456E64
   \              206F66204D73
   \              672000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error Occurred = ">`:
   \   00000000   4572726F7220       DC8 "Error Occurred = "
   \              4F6363757272
   \              6564203D2000
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1\\n\\n\\r">`:
   \   00000000   310A0A0D00         DC8 "1\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0\\n\\n\\r">`:
   \   00000000   300A0A0D00         DC8 "0\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "        * Good Data B...">`:
   \   00000000   202020202020       DC8 "        * Good Data Block "
   \              20202A20476F
   \              6F6420446174
   \              6120426C6F63
   \              6B2000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Response Timeout = ">`:
   \   00000000   526573706F6E       DC8 "Response Timeout = "
   \              73652054696D
   \              656F7574203D
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "* SMT Data Stack Roll...">`:
   \   00000000   2A20534D5420       DC8 "* SMT Data Stack Rollover "
   \              446174612053
   \              7461636B2052
   \              6F6C6C6F7665
   \              722000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Illegal Gap Error = ">`:
   \   00000000   496C6C656761       DC8 "Illegal Gap Error = "
   \              6C2047617020
   \              4572726F7220
   \              3D2000      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " * Cmd Word Content E...">`:
   \   00000000   202A20436D64       DC8 " * Cmd Word Content Error "
   \              20576F726420
   \              436F6E74656E
   \              74204572726F
   \              722000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Word Count Error = ">`:
   \   00000000   576F72642043       DC8 "Word Count Error = "
   \              6F756E742045
   \              72726F72203D
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "* RT-RT Gap,Sync,Addr...">`:
   \   00000000   2A2052542D52       DC8 "* RT-RT Gap,Sync,Addr Err "
   \              54204761702C
   \              53796E632C41
   \              646472204572
   \              722000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Non-">`:
   \   00000000   4E6F6E2D00         DC8 "Non-"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT Cmd: ">`:
   \   00000000   52542D525420       DC8 "RT-RT Cmd: "
   \              436D643A2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X"
   \              252E325800  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\n\\r * RT-RT Cmd Word ...">`:
   \   00000000   0A0A0D202A20       DC8 "\012\012\015 * RT-RT Cmd Word 2 Error "
   \              52542D525420
   \              436D6420576F
   \              726420322045
   \              72726F722000
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Timetag = ">`:
   \   00000000   54696D657461       DC8 "Timetag = "
   \              67203D2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X\\n\\n\\r">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X\012\012\015"
   \              252E32580A0A
   \              0D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%.2X%.2X">`:
   \   00000000   252E3258252E       DC8 "%.2X%.2X"
   \              325800      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%.2X%.2X\\n\\n\\r">`:
   \   00000000   252E3258252E       DC8 "%.2X%.2X\012\012\015"
   \              32580A0A0D00

   \                                 In section .rodata, align 4
   \                     `?<Constant "No Words Stored in Da...">`:
   \   00000000   4E6F20576F72       DC8 4EH, 6FH, 20H, 57H, 6FH, 72H, 64H, 73H
   \              6473        
   \   00000008   2053746F7265       DC8 20H, 53H, 74H, 6FH, 72H, 65H, 64H, 20H
   \              6420        
   \   00000010   696E20446174       DC8 69H, 6EH, 20H, 44H, 61H, 74H, 61H, 20H
   \              6120        
   \   00000018   537461636B20       DC8 53H, 74H, 61H, 63H, 6BH, 20H, 20H, 20H
   \              2020        
   \   00000020   202842726F61       DC8 20H, 28H, 42H, 72H, 6FH, 61H, 64H, 63H
   \              6463        
   \   00000028   617374204D6F       DC8 61H, 73H, 74H, 20H, 4DH, 6FH, 64H, 65H
   \              6465        
   \   00000030   20436F646520       DC8 20H, 43H, 6FH, 64H, 65H, 20H, 77H, 2FH
   \              772F        
   \   00000038   6F2044617461       DC8 6FH, 20H, 44H, 61H, 74H, 61H, 29H, 0AH
   \              290A        
   \   00000040   0A0D00             DC8 0AH, 0DH, 0
   \   00000043   00                 DC8 0

   \                                 In section .rodata, align 2
   \   00000000   2000               DC8 " "

   \                                 In section .rodata, align 4
   \                     `?<Constant "Msg Words 2-%d at Add...">`:
   \   00000000   4D736720576F       DC8 "Msg Words 2-%d at Addr 0x%.2X%.2X   "
   \              72647320322D
   \              256420617420
   \              416464722030
   \              78252E325825
   \              2E3258202020
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %d">`:
   \   00000000   2020256400         DC8 "  %d"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   20256400           DC8 " %d"

   \                                 In section .rodata, align 4
   \                     `?<Constant " Msg Words at Addr: ">`:
   \   00000000   204D73672057       DC8 " Msg Words at Addr: "
   \              6F7264732061
   \              742041646472
   \              3A2000      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X   ">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X   "
   \              252E32582020
   \              2000        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus Debug Addr: 0x600...">`:
   \   00000000   427573204465       DC8 "Bus Debug Addr: 0x6000%.2X%.2X"
   \              627567204164
   \              64723A203078
   \              36303030252E
   \              3258252E3258
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "       Tx">`:
   \   00000000   202020202020       DC8 "       Tx"
   \              20547800    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT Response = %d.%dus...">`:
   \   00000000   525420526573       DC8 "RT Response = %d.%dus    "
   \              706F6E736520
   \              3D2025642E25
   \              647573202020
   \              2000        
   \   0000001A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "(Broadcast?)">`:
   \   00000000   2842726F6164       DC8 "(Broadcast?)"
   \              636173743F29
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RxRT Response = %d.%dus ">`:
   \   00000000   527852542052       DC8 "RxRT Response = %d.%dus "
   \              6573706F6E73
   \              65203D202564
   \              2E2564757320
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT mode is selected ...">`:
   \   00000000   534D54206D6F       DC8 53H, 4DH, 54H, 20H, 6DH, 6FH, 64H, 65H
   \              6465        
   \   00000008   206973207365       DC8 20H, 69H, 73H, 20H, 73H, 65H, 6CH, 65H
   \              6C65        
   \   00000010   637465642062       DC8 63H, 74H, 65H, 64H, 20H, 62H, 79H, 20H
   \              7920        
   \   00000018   4D5420436F6E       DC8 4DH, 54H, 20H, 43H, 6FH, 6EH, 66H, 69H
   \              6669        
   \   00000020   672052656769       DC8 67H, 20H, 52H, 65H, 67H, 69H, 73H, 74H
   \              7374        
   \   00000028   657220626974       DC8 65H, 72H, 20H, 62H, 69H, 74H, 20H, 30H
   \              2030        
   \   00000030   2E0A0A0D00         DC8 2EH, 0AH, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT mode is selected ...">`:
   \   00000000   494D54206D6F       DC8 49H, 4DH, 54H, 20H, 6DH, 6FH, 64H, 65H
   \              6465        
   \   00000008   206973207365       DC8 20H, 69H, 73H, 20H, 73H, 65H, 6CH, 65H
   \              6C65        
   \   00000010   637465642062       DC8 63H, 74H, 65H, 64H, 20H, 62H, 79H, 20H
   \              7920        
   \   00000018   4D5420436F6E       DC8 4DH, 54H, 20H, 43H, 6FH, 6EH, 66H, 69H
   \              6669        
   \   00000020   672052656769       DC8 67H, 20H, 52H, 65H, 67H, 69H, 73H, 74H
   \              7374        
   \   00000028   657220626974       DC8 65H, 72H, 20H, 62H, 69H, 74H, 20H, 30H
   \              2030        
   \   00000030   2E0A0A0D00         DC8 2EH, 0AH, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Bus Monitor Ints  ...">`:
   \   00000000   202020427573       DC8 20H, 20H, 20H, 42H, 75H, 73H, 20H, 4DH
   \              204D        
   \   00000008   6F6E69746F72       DC8 6FH, 6EH, 69H, 74H, 6FH, 72H, 20H, 49H
   \              2049        
   \   00000010   6E7473202020       DC8 6EH, 74H, 73H, 20H, 20H, 20H, 20H, 45H
   \              2045        
   \   00000018   6E61626C6564       DC8 6EH, 61H, 62H, 6CH, 65H, 64H, 3FH, 20H
   \              3F20        
   \   00000020   202050696E20       DC8 20H, 20H, 50H, 69H, 6EH, 20H, 4FH, 75H
   \              4F75        
   \   00000028   747075743F20       DC8 74H, 70H, 75H, 74H, 3FH, 20H, 20H, 20H
   \              2020        
   \   00000030   50656E64696E       DC8 50H, 65H, 6EH, 64H, 69H, 6EH, 67H, 3FH
   \              673F        
   \   00000038   0A0D00             DC8 0AH, 0DH, 0
   \   0000003B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "End of Pkt,Buffer Full">`:
   \   00000000   456E64206F66       DC8 "End of Pkt,Buffer Full"
   \              20506B742C42
   \              756666657220
   \              46756C6C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Offset before FULL_EOP">`:
   \   00000000   4F6666736574       DC8 "Offset before FULL_EOP"
   \              206265666F72
   \              652046554C4C
   \              5F454F5000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Pkt Max 1553 Msg Words">`:
   \   00000000   506B74204D61       DC8 "Pkt Max 1553 Msg Words"
   \              782031353533
   \              204D73672057
   \              6F72647300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Pkt Max 1553 Msg Count">`:
   \   00000000   506B74204D61       DC8 "Pkt Max 1553 Msg Count"
   \              782031353533
   \              204D73672043
   \              6F756E7400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Max Gap Time Exceeded">`:
   \   00000000   204D61782047       DC8 " Max Gap Time Exceeded"
   \              61702054696D
   \              652045786365
   \              6564656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Max Pkt Recording Time">`:
   \   00000000   4D617820506B       DC8 "Max Pkt Recording Time"
   \              74205265636F
   \              7264696E6720
   \              54696D6500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "      Host Packet Stop">`:
   \   00000000   202020202020       DC8 "      Host Packet Stop"
   \              486F73742050
   \              61636B657420
   \              53746F7000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Stack End Addr Written">`:
   \   00000000   537461636B20       DC8 "Stack End Addr Written"
   \              456E64204164
   \              647220577269
   \              7474656E00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Hit Cmd Stack Address">`:
   \   00000000   204869742043       DC8 " Hit Cmd Stack Address"
   \              6D6420537461
   \              636B20416464
   \              7265737300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " IRIG-106 Packet Ready">`:
   \   00000000   20495249472D       DC8 " IRIG-106 Packet Ready"
   \              313036205061
   \              636B65742052
   \              6561647900  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Monitor End-of-Message">`:
   \   00000000   4D6F6E69746F       DC8 "Monitor End-of-Message"
   \              7220456E642D
   \              6F662D4D6573
   \              7361676500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nIMT Skips Bits 4,2,1,0">`:
   \   00000000   0A494D542053       DC8 "\012IMT Skips Bits 4,2,1,0"
   \              6B6970732042
   \              69747320342C
   \              322C312C3000

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT Cmd Stack Rollover">`:
   \   00000000   534D5420436D       DC8 "SMT Cmd Stack Rollover"
   \              642053746163
   \              6B20526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT DataStack Rollover">`:
   \   00000000   534D54204461       DC8 "SMT DataStack Rollover"
   \              746153746163
   \              6B20526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT  Cmd Stack Address">`:
   \   00000000   534D54202043       DC8 "SMT  Cmd Stack Address"
   \              6D6420537461
   \              636B20416464
   \              7265737300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT Data Stack Address">`:
   \   00000000   534D54204461       DC8 "SMT Data Stack Address"
   \              746120537461
   \              636B20416464
   \              7265737300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "     MT End-of-Message">`:
   \   00000000   20202020204D       DC8 "     MT End-of-Message"
   \              5420456E642D
   \              6F662D4D6573
   \              7361676500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the MT ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   65204D542050       DC8 65H, 20H, 4DH, 54H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Hardware Interrupt...">`:
   \   00000000   0A0D20486172       DC8 0AH, 0DH, 20H, 48H, 61H, 72H, 64H, 77H
   \              6477        
   \   00000008   61726520496E       DC8 61H, 72H, 65H, 20H, 49H, 6EH, 74H, 65H
   \              7465        
   \   00000010   727275707473       DC8 72H, 72H, 75H, 70H, 74H, 73H, 20H, 20H
   \              2020        
   \   00000018   20456E61626C       DC8 20H, 45H, 6EH, 61H, 62H, 6CH, 65H, 64H
   \              6564        
   \   00000020   3F2020205069       DC8 3FH, 20H, 20H, 20H, 50H, 69H, 6EH, 20H
   \              6E20        
   \   00000028   4F7574707574       DC8 4FH, 75H, 74H, 70H, 75H, 74H, 3FH, 20H
   \              3F20        
   \   00000030   202050656E64       DC8 20H, 20H, 50H, 65H, 6EH, 64H, 69H, 6EH
   \              696E        
   \   00000038   673F0A0D00         DC8 67H, 3FH, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "HI-6131 Host SPI Erro...">`:
   \   00000000   48492D363133       DC8 48H, 49H, 2DH, 36H, 31H, 33H, 31H, 20H
   \              3120        
   \   00000008   486F73742053       DC8 48H, 6FH, 73H, 74H, 20H, 53H, 50H, 49H
   \              5049        
   \   00000010   204572726F72       DC8 20H, 45H, 72H, 72H, 6FH, 72H, 20H, 20H
   \              2020        
   \   00000018   20206E2F6120       DC8 20H, 20H, 6EH, 2FH, 61H, 20H, 20H, 20H
   \              2020        
   \   00000020   202020202020       DC8 20H, 20H, 20H, 20H, 20H, 20H, 6EH, 2FH
   \              6E2F        
   \   00000028   612020202020       DC8 61H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              2020        
   \   00000030   20206E2F610A       DC8 20H, 20H, 6EH, 2FH, 61H, 0AH, 0DH, 0
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "EE Chksum/Corr RAM Err">`:
   \   00000000   45452043686B       DC8 "EE Chksum/Corr RAM Err"
   \              73756D2F436F
   \              72722052414D
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RAM Init/UncorrRAM Err">`:
   \   00000000   52414D20496E       DC8 "RAM Init/UncorrRAM Err"
   \              69742F556E63
   \              6F727252414D
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Loopback Fail on Bus A">`:
   \   00000000   4C6F6F706261       DC8 "Loopback Fail on Bus A"
   \              636B20466169
   \              6C206F6E2042
   \              7573204100  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Loopback Fail on Bus B">`:
   \   00000000   4C6F6F706261       DC8 "Loopback Fail on Bus B"
   \              636B20466169
   \              6C206F6E2042
   \              7573204200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Timetag Ct Rollover">`:
   \   00000000   4D542054696D       DC8 "MT Timetag Ct Rollover"
   \              657461672043
   \              7420526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Timetag Ct Rollover">`:
   \   00000000   42432054696D       DC8 "BC Timetag Ct Rollover"
   \              657461672043
   \              7420526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 Timetag Valu Match">`:
   \   00000000   525432205469       DC8 "RT2 Timetag Valu Match"
   \              6D6574616720
   \              56616C75204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 Timetag Valu Match">`:
   \   00000000   525431205469       DC8 "RT1 Timetag Valu Match"
   \              6D6574616720
   \              56616C75204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Timetag Value Match">`:
   \   00000000   4D542054696D       DC8 "MT Timetag Value Match"
   \              657461672056
   \              616C7565204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Timetag Value Match">`:
   \   00000000   42432054696D       DC8 "BC Timetag Value Match"
   \              657461672056
   \              616C7565204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  RT2 Addr Parity Fail">`:
   \   00000000   202052543220       DC8 "  RT2 Addr Parity Fail"
   \              416464722050
   \              617269747920
   \              4661696C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  RT1 Addr Parity Fail">`:
   \   00000000   202052543120       DC8 "  RT1 Addr Parity Fail"
   \              416464722050
   \              617269747920
   \              4661696C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending RT Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending RT Ints"
   \              2050656E6469
   \              6E6720525420
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending MT Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending MT Ints"
   \              2050656E6469
   \              6E67204D5420
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending BC Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending BC Ints"
   \              2050656E6469
   \              6E6720424320
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the HW ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   652048572050       DC8 65H, 20H, 48H, 57H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Press \\'M\\' for menu, o...">`:
   \   00000000   507265737320       DC8 50H, 72H, 65H, 73H, 73H, 20H, 27H, 4DH
   \              274D        
   \   00000008   2720666F7220       DC8 27H, 20H, 66H, 6FH, 72H, 20H, 6DH, 65H
   \              6D65        
   \   00000010   6E752C206F72       DC8 6EH, 75H, 2CH, 20H, 6FH, 72H, 20H, 70H
   \              2070        
   \   00000018   726573732061       DC8 72H, 65H, 73H, 73H, 20H, 61H, 6EH, 79H
   \              6E79        
   \   00000020   2076616C6964       DC8 20H, 76H, 61H, 6CH, 69H, 64H, 20H, 6DH
   \              206D        
   \   00000028   656E75206B65       DC8 65H, 6EH, 75H, 20H, 6BH, 65H, 79H, 2EH
   \              792E        
   \   00000030   20202000           DC8 20H, 20H, 20H, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Remote Terminal In...">`:
   \   00000000   0A0D2052656D       DC8 0AH, 0DH, 20H, 52H, 65H, 6DH, 6FH, 74H
   \              6F74        
   \   00000008   65205465726D       DC8 65H, 20H, 54H, 65H, 72H, 6DH, 69H, 6EH
   \              696E        
   \   00000010   616C20496E74       DC8 61H, 6CH, 20H, 49H, 6EH, 74H, 73H, 20H
   \              7320        
   \   00000018   20456E61626C       DC8 20H, 45H, 6EH, 61H, 62H, 6CH, 65H, 64H
   \              6564        
   \   00000020   3F2020205069       DC8 3FH, 20H, 20H, 20H, 50H, 69H, 6EH, 20H
   \              6E20        
   \   00000028   4F7574707574       DC8 4FH, 75H, 74H, 70H, 75H, 74H, 3FH, 20H
   \              3F20        
   \   00000030   202050656E64       DC8 20H, 20H, 50H, 65H, 6EH, 64H, 69H, 6EH
   \              696E        
   \   00000038   673F0A0D00         DC8 67H, 3FH, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2  Reset RT mode cmd">`:
   \   00000000   525432202052       DC8 "RT2  Reset RT mode cmd"
   \              657365742052
   \              54206D6F6465
   \              20636D6400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2  Index Equals Zero">`:
   \   00000000   525432202049       DC8 "RT2  Index Equals Zero"
   \              6E6465782045
   \              7175616C7320
   \              5A65726F00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2    Illegal Command">`:
   \   00000000   525432202020       DC8 "RT2    Illegal Command"
   \              20496C6C6567
   \              616C20436F6D
   \              6D616E6400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 Broadcast Msg Rcvd">`:
   \   00000000   525432204272       DC8 "RT2 Broadcast Msg Rcvd"
   \              6F6164636173
   \              74204D736720
   \              5263766400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 MessageErrorStatus">`:
   \   00000000   525432204D65       DC8 "RT2 MessageErrorStatus"
   \              737361676545
   \              72726F725374
   \              6174757300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2  Int When Accessed">`:
   \   00000000   525432202049       DC8 "RT2  Int When Accessed"
   \              6E7420576865
   \              6E2041636365
   \              7373656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "        Reserved Bit 9">`:
   \   00000000   202020202020       DC8 "        Reserved Bit 9"
   \              202052657365
   \              727665642042
   \              6974203900  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1  Reset RT mode cmd">`:
   \   00000000   525431202052       DC8 "RT1  Reset RT mode cmd"
   \              657365742052
   \              54206D6F6465
   \              20636D6400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1  Index Equals Zero">`:
   \   00000000   525431202049       DC8 "RT1  Index Equals Zero"
   \              6E6465782045
   \              7175616C7320
   \              5A65726F00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1    Illegal Command">`:
   \   00000000   525431202020       DC8 "RT1    Illegal Command"
   \              20496C6C6567
   \              616C20436F6D
   \              6D616E6400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 Broadcast Msg Rcvd">`:
   \   00000000   525431204272       DC8 "RT1 Broadcast Msg Rcvd"
   \              6F6164636173
   \              74204D736720
   \              5263766400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 MessageErrorStatus">`:
   \   00000000   525431204D65       DC8 "RT1 MessageErrorStatus"
   \              737361676545
   \              72726F725374
   \              6174757300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1  Int When Accessed">`:
   \   00000000   525431202049       DC8 "RT1  Int When Accessed"
   \              6E7420576865
   \              6E2041636365
   \              7373656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the RT ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   652052542050       DC8 65H, 20H, 52H, 54H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Invalid Choice. Pr...">`:
   \   00000000   0A0D20496E76       DC8 0AH, 0DH, 20H, 49H, 6EH, 76H, 61H, 6CH
   \              616C        
   \   00000008   69642043686F       DC8 69H, 64H, 20H, 43H, 68H, 6FH, 69H, 63H
   \              6963        
   \   00000010   652E20507265       DC8 65H, 2EH, 20H, 50H, 72H, 65H, 73H, 73H
   \              7373        
   \   00000018   20274D272066       DC8 20H, 27H, 4DH, 27H, 20H, 66H, 6FH, 72H
   \              6F72        
   \   00000020   206D656E752C       DC8 20H, 6DH, 65H, 6EH, 75H, 2CH, 20H, 6FH
   \              206F        
   \   00000028   722070726573       DC8 72H, 20H, 70H, 72H, 65H, 73H, 73H, 20H
   \              7320        
   \   00000030   616E79207661       DC8 61H, 6EH, 79H, 20H, 76H, 61H, 6CH, 69H
   \              6C69        
   \   00000038   64206D656E75       DC8 64H, 20H, 6DH, 65H, 6EH, 75H, 20H, 6BH
   \              206B        
   \   00000040   65792E203E3E       DC8 65H, 79H, 2EH, 20H, 3EH, 3EH, 20H, 0
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    0           -    ...">`:
   \   00000000   202020203020       DC8 "    0           -           -\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              202020202D0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    1           ">`:
   \   00000000   202020203120       DC8 "    1           "
   \              202020202020
   \              2020202000  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1           ">`:
   \   00000000   312020202020       DC8 "1           "
   \              202020202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0           ">`:
   \   00000000   302020202020       DC8 "0           "
   \              202020202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">`:
   \   00000000   202020202D20       DC8 "    -           -           -\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              202020202D0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">_1`:
   \   00000000   202020202D20       DC8 "    -           -           0\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              20202020300A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">_2`:
   \   00000000   202020202D20       DC8 "    -           -           1\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              20202020310A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Press \\'M\\' for menu, o...">_1`:
   \   00000000   507265737320       DC8 50H, 72H, 65H, 73H, 73H, 20H, 27H, 4DH
   \              274D        
   \   00000008   2720666F7220       DC8 27H, 20H, 66H, 6FH, 72H, 20H, 6DH, 65H
   \              6D65        
   \   00000010   6E752C206F72       DC8 6EH, 75H, 2CH, 20H, 6FH, 72H, 20H, 70H
   \              2070        
   \   00000018   726573732061       DC8 72H, 65H, 73H, 73H, 20H, 61H, 6EH, 79H
   \              6E79        
   \   00000020   2076616C6964       DC8 20H, 76H, 61H, 6CH, 69H, 64H, 20H, 6DH
   \              206D        
   \   00000028   656E75206B65       DC8 65H, 6EH, 75H, 20H, 6BH, 65H, 79H, 2EH
   \              792E        
   \   00000030   203E3E2000         DC8 20H, 3EH, 3EH, 20H, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "=====================...">`:
   \   00000000   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000008   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000010   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000018   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000020   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000028   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000030   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000038   3D3D3D0A0D00       DC8 3DH, 3DH, 3DH, 0AH, 0DH, 0
   \   0000003E   0000               DC8 0, 0
   2577          
   2578          

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     ConfigureUsart1         136
     ascii2int                 0
     bc_last_msg_console     128
     chk_key_input             8
     list_bc_ccgpf_reg         8
     list_bc_config           16
     list_bc_ints_console     16
     list_hw_ints_console     16
     list_mt_config           16
     list_mt_ints_console     24
     list_rt_ints_console     16
     mt_last_msg_console      48
     print_b0sp                8
     print_b1sp                8
     print_dd0n                8
     print_dd1n                8
     print_dddn                8
     print_line                8
     print_menuprompt          8
     print_null                8
     print_sp1sp               8
     show_menu                 8


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     waddr                                             2
     watch                                             1
     ConfigureUsart1                                  72
     show_menu                                       142
     bc_last_msg_console                            3002
     list_bc_config                                  664
     list_bc_ccgpf_reg                               288
     list_bc_ints_console                            788
     list_mt_config                                  596
     mt_last_msg_console                            1734
     list_mt_ints_console                           1078
     list_hw_ints_console                            798
     list_rt_ints_console                            736
     chk_key_input                                   232
     ascii2int                                        70
     print_null                                       10
     print_sp1sp                                      10
     print_b1sp                                       10
     print_b0sp                                       10
     print_dddn                                       10
     print_dd0n                                       10
     print_dd1n                                       10
     print_menuprompt                                 10
     print_line                                       10
     ??DataTable1                                      4
     ??DataTable1_1                                    4
     ??DataTable1_2                                    4
     ??DataTable1_3                                    4
     ??DataTable1_4                                    4
     ??DataTable1_5                                    4
     ??DataTable1_6                                    4
     ??DataTable1_7                                    4
     ??DataTable1_8                                    4
     ??DataTable1_9                                    4
     ??DataTable1_10                                   4
     ??DataTable1_11                                   4
     ??DataTable1_12                                   4
     ??DataTable1_13                                   4
     ??DataTable1_14                                   4
     ??DataTable1_15                                   4
     ??DataTable1_16                                   4
     ??DataTable1_17                                   4
     ??DataTable1_18                                   4
     ??DataTable1_19                                   4
     ??DataTable1_20                                   4
     ??DataTable1_21                                   4
     ??DataTable1_22                                   4
     ??DataTable1_23                                   4
     ??DataTable2                                      4
     ??DataTable2_1                                    4
     ??DataTable2_2                                    4
     ??DataTable2_3                                    4
     ??DataTable2_4                                    4
     ??DataTable2_5                                    4
     ??DataTable2_6                                    4
     ??DataTable2_7                                    4
     ??DataTable2_8                                    4
     ??DataTable2_9                                    4
     ??DataTable2_10                                   4
     ??DataTable2_11                                   4
     ??DataTable2_12                                   4
     ??DataTable2_13                                   4
     ??DataTable2_14                                   4
     ??DataTable2_15                                   4
     ??DataTable2_16                                   4
     ??DataTable2_17                                   4
     ??DataTable2_18                                   4
     ??DataTable2_19                                   4
     ??DataTable2_20                                   4
     ??DataTable2_21                                   4
     ??DataTable2_22                                   4
     ??DataTable2_23                                   4
     ??DataTable2_24                                   4
     ??DataTable2_25                                   4
     ??DataTable2_26                                   4
     ??DataTable2_27                                   4
     ??DataTable2_28                                   4
     ??DataTable2_29                                   4
     ??DataTable2_30                                   4
     ??DataTable2_31                                   4
     ??DataTable2_32                                   4
     ??DataTable2_33                                   4
     ??DataTable2_34                                   4
     ??DataTable3                                      4
     ??DataTable3_1                                    4
     ??DataTable3_2                                    4
     ??DataTable3_3                                    4
     ??DataTable3_4                                    4
     ??DataTable3_5                                    4
     ??DataTable4                                      4
     ??DataTable4_1                                    4
     ??DataTable4_2                                    4
     ??DataTable4_3                                    4
     ??DataTable4_4                                    4
     ??DataTable4_5                                    4
     ??DataTable4_6                                    4
     ??DataTable4_7                                    4
     ??DataTable4_8                                    4
     ??DataTable4_9                                    4
     ??DataTable4_10                                   4
     ??DataTable4_11                                   4
     ??DataTable4_12                                   4
     ??DataTable4_13                                   4
     ??DataTable4_14                                   4
     ??DataTable4_15                                   4
     ??DataTable4_16                                   4
     ??DataTable4_17                                   4
     ??DataTable4_18                                   4
     ??DataTable4_19                                   4
     ??DataTable4_20                                   4
     ??DataTable4_21                                   4
     ??DataTable4_22                                   4
     ??DataTable4_23                                   4
     ??DataTable4_24                                   4
     ??DataTable4_25                                   4
     ??DataTable4_26                                   4
     ??DataTable4_27                                   4
     ??DataTable4_28                                   4
     ??DataTable4_29                                   4
     ??DataTable4_30                                   4
     ??DataTable4_31                                   4
     ??DataTable4_32                                   4
     ??DataTable4_33                                   4
     ??DataTable4_34                                   4
     ??DataTable4_35                                   4
     ??DataTable4_36                                   4
     ??DataTable4_37                                   4
     ??DataTable4_38                                   4
     ??DataTable4_39                                   4
     ??DataTable4_40                                   4
     ??DataTable4_41                                   4
     ??DataTable4_42                                   4
     ??DataTable4_43                                   4
     ??DataTable4_44                                   4
     ??DataTable4_45                                   4
     ??DataTable5                                      4
     ??DataTable5_1                                    4
     ??DataTable5_2                                    4
     ??DataTable5_3                                    4
     ??DataTable5_4                                    4
     ??DataTable5_5                                    4
     ??DataTable5_6                                    4
     ??DataTable5_7                                    4
     ??DataTable5_8                                    4
     ??DataTable5_9                                    4
     ??DataTable5_10                                   4
     ??DataTable5_11                                   4
     ??DataTable5_12                                   4
     ??DataTable5_13                                   4
     ??DataTable5_14                                   4
     ??DataTable5_15                                   4
     ??DataTable5_16                                   4
     ??DataTable5_17                                   4
     ??DataTable5_18                                   4
     ??DataTable6                                      4
     ??DataTable6_1                                    4
     ??DataTable6_2                                    4
     ??DataTable6_3                                    4
     ??DataTable6_4                                    4
     ??DataTable6_5                                    4
     ??DataTable6_6                                    4
     ??DataTable6_7                                    4
     ??DataTable6_8                                    4
     ??DataTable6_9                                    4
     ??DataTable6_10                                   4
     ??DataTable6_11                                   4
     ??DataTable6_12                                   4
     ??DataTable6_13                                   4
     ??DataTable6_14                                   4
     ??DataTable6_15                                   4
     ??DataTable6_16                                   4
     ??DataTable6_17                                   4
     ??DataTable6_18                                   4
     ??DataTable6_19                                   4
     ??DataTable6_20                                   4
     ??DataTable6_21                                   4
     ??DataTable6_22                                   4
     ??DataTable6_23                                   4
     ??DataTable6_24                                   4
     ??DataTable6_25                                   4
     ??DataTable6_26                                   4
     ??DataTable6_27                                   4
     ??DataTable6_28                                   4
     ??DataTable6_29                                   4
     ??DataTable6_30                                   4
     ??DataTable6_31                                   4
     ??DataTable6_32                                   4
     ??DataTable6_33                                   4
     ??DataTable6_34                                   4
     ??DataTable6_35                                   4
     ??DataTable6_36                                   4
     ??DataTable6_37                                   4
     ??DataTable6_38                                   4
     ??DataTable6_39                                   4
     ??DataTable6_40                                   4
     ??DataTable6_41                                   4
     ??DataTable6_42                                   4
     ??DataTable6_43                                   4
     ??DataTable6_44                                   4
     ??DataTable6_45                                   4
     ??DataTable6_46                                   4
     ??DataTable6_47                                   4
     ??DataTable6_48                                   4
     ??DataTable6_49                                   4
     ??DataTable6_50                                   4
     ??DataTable6_51                                   4
     ??DataTable6_52                                   4
     ??DataTable6_53                                   4
     ??DataTable6_54                                   4
     ??DataTable6_55                                   4
     ??DataTable6_56                                   4
     ??DataTable6_57                                   4
     ??DataTable6_58                                   4
     ??DataTable6_59                                   4
     ??DataTable6_60                                   4
     ??DataTable6_61                                   4
     ??DataTable6_62                                   4
     ??DataTable6_63                                   4
     ??DataTable6_64                                   4
     ??DataTable6_65                                   4
     ??DataTable6_66                                   4
     ??DataTable6_67                                   4
     ??DataTable7                                      4
     ??DataTable7_1                                    4
     ??DataTable7_2                                    4
     ??DataTable7_3                                    4
     ??DataTable7_4                                    4
     ??DataTable7_5                                    4
     ??DataTable7_6                                    4
     ??DataTable7_7                                    4
     ??DataTable7_8                                    4
     ??DataTable7_9                                    4
     ??DataTable7_10                                   4
     ??DataTable7_11                                   4
     ??DataTable7_12                                   4
     ??DataTable7_13                                   4
     ??DataTable7_14                                   4
     ??DataTable7_15                                   4
     ??DataTable7_16                                   4
     ??DataTable7_17                                   4
     ??DataTable7_18                                   4
     ??DataTable7_19                                   4
     ??DataTable7_20                                   4
     ??DataTable7_21                                   4
     ??DataTable7_22                                   4
     ??DataTable7_23                                   4
     ??DataTable7_24                                   4
     ??DataTable7_25                                   4
     ??DataTable7_26                                   4
     ??DataTable7_27                                   4
     ??DataTable7_28                                   4
     ??DataTable7_29                                   4
     ??DataTable7_30                                   4
     ??DataTable7_31                                   4
     ??DataTable7_32                                   4
     ??DataTable7_33                                   4
     ??DataTable7_34                                   4
     ??DataTable7_35                                   4
     ??DataTable7_36                                   4
     ??DataTable7_37                                   4
     ??DataTable7_38                                   4
     ??DataTable7_39                                   4
     ??DataTable7_40                                   4
     ??DataTable7_41                                   4
     ??DataTable7_42                                   4
     ??DataTable7_43                                   4
     ??DataTable8                                      4
     ??DataTable8_1                                    4
     ??DataTable8_2                                    4
     ??DataTable8_3                                    4
     ??DataTable8_4                                    4
     ??DataTable8_5                                    4
     ??DataTable8_6                                    4
     ??DataTable8_7                                    4
     ??DataTable8_8                                    4
     ??DataTable8_9                                    4
     ??DataTable8_10                                   4
     ??DataTable8_11                                   4
     ??DataTable8_12                                   4
     ??DataTable8_13                                   4
     ??DataTable8_14                                   4
     ??DataTable8_15                                   4
     ??DataTable8_16                                   4
     ??DataTable8_17                                   4
     ??DataTable8_18                                   4
     ??DataTable8_19                                   4
     ??DataTable8_20                                   4
     ??DataTable8_21                                   4
     ??DataTable8_22                                   4
     ??DataTable8_23                                   4
     ??DataTable8_24                                   4
     ??DataTable8_25                                   4
     ??DataTable8_26                                   4
     ??DataTable8_27                                   4
     ??DataTable8_28                                   4
     ??DataTable8_29                                   4
     ??DataTable8_30                                   4
     ??DataTable8_31                                   4
     ??DataTable9                                      4
     ??DataTable9_1                                    4
     ??DataTable9_2                                    4
     ??DataTable9_3                                    4
     ??DataTable9_4                                    4
     ??DataTable9_5                                    4
     ??DataTable9_6                                    4
     ??DataTable9_7                                    4
     ??DataTable9_8                                    4
     ??DataTable9_9                                    4
     ??DataTable9_10                                   4
     ??DataTable9_11                                   4
     ??DataTable9_12                                   4
     ??DataTable9_13                                   4
     ??DataTable9_14                                   4
     ??DataTable9_15                                   4
     ??DataTable9_16                                   4
     ??DataTable9_17                                   4
     ??DataTable9_18                                   4
     ??DataTable9_19                                   4
     ??DataTable9_20                                   4
     ??DataTable10                                     4
     ??DataTable10_1                                   4
     ??DataTable10_2                                   4
     ??DataTable10_3                                   4
     ??DataTable10_4                                   4
     ??DataTable10_5                                   4
     ??DataTable11                                     4
     ??DataTable12                                     4
     ??DataTable15                                     4
     ??DataTable19                                     4
     ??DataTable20                                     4
     ??DataTable20_1                                   4
     ??DataTable20_2                                   4
     ??DataTable20_3                                   4
     ??DataTable20_4                                   4
     ??DataTable20_5                                   4
     ??DataTable20_6                                   4
     ??DataTable20_7                                   4
     ??DataTable20_8                                   4
     ??DataTable20_9                                   4
     ??DataTable20_10                                  4
     ??DataTable20_11                                  4
     ??DataTable20_12                                  4
     ??DataTable20_13                                  4
     ??DataTable20_14                                  4
     ??DataTable20_15                                  4
     ??DataTable20_16                                  4
     ??DataTable20_17                                  4
     ??DataTable20_18                                  4
     ??DataTable20_19                                  4
     ??DataTable20_20                                  4
     ??DataTable20_21                                  4
     ??DataTable20_22                                  4
     ??DataTable20_23                                  4
     ??DataTable20_24                                  4
     ??DataTable20_25                                  4
     ??DataTable20_26                                  4
     ??DataTable20_27                                  4
     ??DataTable20_28                                  4
     ??DataTable20_29                                  4
     ??DataTable20_30                                  4
     ??DataTable20_31                                  4
     ??DataTable20_32                                  4
     ??DataTable20_33                                  4
     ??DataTable20_34                                  4
     ??DataTable20_35                                  4
     ??DataTable20_36                                  4
     ??DataTable20_37                                  4
     ??DataTable20_38                                  4
     ??DataTable20_39                                  4
     ??DataTable20_40                                  4
     ??DataTable20_41                                  4
     ??DataTable20_42                                  4
     ??DataTable20_43                                  4
     ??DataTable20_44                                  4
     ??DataTable20_45                                  4
     ??DataTable20_46                                  4
     ??DataTable20_47                                  4
     ??DataTable20_48                                  4
     ??DataTable20_49                                  4
     ??DataTable20_50                                  4
     ??DataTable20_51                                  4
     ??DataTable20_52                                  4
     ??DataTable20_53                                  4
     ??DataTable20_54                                  4
     ??DataTable20_55                                  4
     ??DataTable20_56                                  4
     ??DataTable20_57                                  4
     ??DataTable20_58                                  4
     ??DataTable20_59                                  4
     ??DataTable20_60                                  4
     ??DataTable20_61                                  4
     ??DataTable20_62                                  4
     ?<Constant {{2097152, (AT91S_PIO *)1074662400,  128
     ?<Constant "\n\r*******************...">         56
     ?<Constant "   Holt Integrated Ci...">           52
     ?<Constant "        Compiled: %s ...">           36
     ?<Constant "May 17 2012">                        12
     ?<Constant "09:55:10">                           12
     ?<Constant "*********************...">           56
     ?<Constant "   BC On   ">                        12
     ?<Constant "SMT On    ">                         12
     ?<Constant "RT1 On   ">                          12
     ?<Constant "RT2 On">                              8
     ?<Constant "\n\n\r">                              4
     ?<Constant " Press \'1\' to step BC...">         44
     ?<Constant " Press \'2\' to list BC...">         44
     ?<Constant " Press \'3\' to list BC...">         56
     ?<Constant " Press \'4\' to list MT...">         44
     ?<Constant " Press \'5\' to list MT...">         48
     ?<Constant " Press \'6\' to list HW...">         44
     ?<Constant " Press \'7\' to list BC...">         44
     ?<Constant " Press \'8\' to list RT...">         44
     ?<Constant " Press \'9\' to list MT...">         44
     ?<Constant " NOTE: Options 6-9 cl...">           68
     ?<Constant "\n\r">                                4
     ?<Constant "\n\rResults From Last M...">         44
     ?<Constant "Message Type: ">                     16
     ?<Constant "Broadcast ">                         12
     ?<Constant "RT-RT Message, ">                    16
     ?<Constant "Tx ">                                 4
     ?<Constant "Rx ">                                 4
     ?<Constant "Mode Code %02d With D...">           40
     ?<Constant "Mode Code %02d w/o Da...">           28
     ?<Constant "Mode Code %02d w/o Da...">_1         40
     ?<Constant "Subaddress Command, ">               24
     ?<Constant "%d data word">                       16
     ?<Constant "s">                                   2
     ?<Constant "RT-RT problem: RxCW m...">           36
     ?<Constant "RT-RT problem: RxCW i...">           36
     ?<Constant "RT-RT problem: TxCW i...">           36
     ?<Constant "RT-RT problem: TxCW m...">           36
     ?<Constant "RT-RT problem: RxCW &...">           48
     ?<Constant "RT-RT problem: RxCW &...">_1         52
     ?<Constant "CW1: 0x%.2X%.2X">                    16
     ?<Constant " = %02d-%1d-%02d-%02d...">           28
     ?<Constant "RSW not applicable\n\r">             24
     ?<Constant "RxSW: 0x%.2X%.2X">                   20
     ?<Constant " = RT%02d ">                         12
     ?<Constant "CS\n\r">                              8
     ?<Constant "ME ">                                 4
     ?<Constant "INST ">                               8
     ?<Constant "SRQ ">                                8
     ?<Constant "RSV ">                                8
     ?<Constant "BCR ">                                8
     ?<Constant "BSY ">                                8
     ?<Constant "SSF ">                                8
     ?<Constant "DBCA ">                               8
     ?<Constant "TF ">                                 4
     ?<Constant "CW2: 0x%.2X%.2X">                    16
     ?<Constant "TxSW: 0x%.2X%.2X">                   20
     ?<Constant "CS\n\n\r">                            8
     ?<Constant "CW: 0x%.2X%.2X">                     16
     ?<Constant "SW not applicable\n\n\r">            24
     ?<Constant "SW not received\n\n\r">              20
     ?<Constant "SW: 0x%.2X%.2X">                     16
     ?<Constant "BC Control Word: 0x%....">           32
     ?<Constant "MC17TTL ">                           12
     ?<Constant "MEmask ">                             8
     ?<Constant "SRQmask ">                           12
     ?<Constant "BSYmask ">                           12
     ?<Constant "SSFmask ">                           12
     ?<Constant "TFmask ">                             8
     ?<Constant "RSVmask ">                           12
     ?<Constant "RetryEna ">                          12
     ?<Constant "UseBusA ">                           12
     ?<Constant "UseBusB ">                           12
     ?<Constant "SelfTest ">                          12
     ?<Constant "maskBCR ">                           12
     ?<Constant "EOMirq ">                             8
     ?<Constant "NonBcstSA ">                         12
     ?<Constant "RTRT ">                               8
     ?<Constant "BcstSA ">                             8
     ?<Constant "BcstRTRT ">                          12
     ?<Constant "MC ">                                 4
     ?<Constant "RTRT_MC?? ">                         12
     ?<Constant "BcstMC ">                             8
     ?<Constant "BcstRTRT_MC?? ">                     16
     ?<Constant "The Cmd Word and Cont...">           68
     ?<Constant "The Cmd Word and Cont...">_1         68
     ?<Constant "Block Status Word: 0x...">           36
     ?<Constant "SOM  ">                               8
     ?<Constant "EOM  ">                               8
     ?<Constant "BusB  ">                              8
     ?<Constant "Bus A  ">                             8
     ?<Constant "ErrOcc ">                             8
     ?<Constant "SSet  ">                              8
     ?<Constant "NoResp  ">                           12
     ?<Constant "LpBk  ">                              8
     ?<Constant "2retry  ">                           12
     ?<Constant "1retry  ">                           12
     ?<Constant "GDB  ">                               8
     ?<Constant "WAG  ">                               8
     ?<Constant "WdCt  ">                              8
     ?<Constant "SyncErr  ">                          12
     ?<Constant "InvWd  ">                             8
     ?<Constant "FmtErr  ">                           12
     ?<Constant "MSSet  ">                             8
     ?<Constant "Condition Code Regist...">           40
     ?<Constant "BC Stopped: No Condit...">           64
     ?<Constant "BC Running: No Condit...">           64
     ?<Constant "BC Is Running.\n\r">                 20
     ?<Constant "BC Not Running.\n\r">                20
     ?<Constant "2Retries  ">                         12
     ?<Constant "1Retry  ">                           12
     ?<Constant "BadMsg  ">                           12
     ?<Constant "GdDataBlk  ">                        12
     ?<Constant "GPF7  ">                              8
     ?<Constant "GPF6  ">                              8
     ?<Constant "GPF5  ">                              8
     ?<Constant "GPF4  ">                              8
     ?<Constant "GPF3  ">                              8
     ?<Constant "GPF2  ">                              8
     ?<Constant "LT-GPF1  ">                          12
     ?<Constant "EQ-GPF0  ">                          12
     ?<Constant "No RT response, no re...">           36
     ?<Constant "Data Addr: 0x%.2X%.2X...">           32
     ?<Constant "Bus Addr: 0x6000%.2X%...">           32
     ?<Constant "0x%.2X%.2X ">                        12
     ?<Constant "\n\rBC Configuration Re...">         44
     ?<Constant "  20">                                8
     ?<Constant "  58">                                8
     ?<Constant " 138">                                8
     ?<Constant "  15">                                8
     ?<Constant "us Timeout (bus dead ...">           32
     ?<Constant "Check Control Word Fo...">           32
     ?<Constant "Don\'t Check Control W...">          40
     ?<Constant " 2 Retries, Same Bus,...">           36
     ?<Constant "  2 Retries, Alt Bus,...">           36
     ?<Constant "  2 Retries, Same Bus...">           36
     ?<Constant "   2 Retries, Alt Bus...">           36
     ?<Constant "  1 Retry if Msg Fail...">           36
     ?<Constant " 1 Retry if Msg Fail,...">           36
     ?<Constant "    No Retries for Ms...">           36
     ?<Constant "Retry if RT status bi...">           28
     ?<Constant "No Retry if RT status...">           32
     ?<Constant " RT status ME w/o dat...">           36
     ?<Constant " RT status ME w/o dat...">_1         36
     ?<Constant "RT status BSY w/o dat...">           32
     ?<Constant "RT status BSY w/o dat...">_1         32
     ?<Constant "            Msg Gap T...">           36
     ?<Constant "           Msg Gap Ti...">           36
     ?<Constant "Watchdog Frame Timer ...">           28
     ?<Constant "Watchdog Frame Timer ...">_1         28
     ?<Constant "MC17 send Time Tag lo...">           36
     ?<Constant "MC17 send data in msg...">           36
     ?<Constant "MC17 data word always...">           28
     ?<Constant "MC17 data may be even...">           32
     ?<Constant "  Enable 4us Minimum ...">           36
     ?<Constant "   No 4us Minimum Gap...">           36
     ?<Constant "BCR Mask Enabled, BCR...">           28
     ?<Constant "BCR Mask Disabled, BC...">           32
     ?<Constant "Timetag Config Regist...">           40
     ?<Constant "32-bit timebase with ">              24
     ?<Constant "16-bit timebase with ">              24
     ?<Constant "clock disabled! ">                   20
     ?<Constant "ext clock ">                         12
     ?<Constant "2us clock ">                         12
     ?<Constant "4us clock ">                         12
     ?<Constant "8us clock ">                         12
     ?<Constant "16us clock ">                        12
     ?<Constant "32us clock ">                        12
     ?<Constant "64us clock ">                        12
     ?<Constant "\n\rBC Condition Code &...">         56
     ?<Constant "BC Stopped: No Condit...">_1         64
     ?<Constant "BC Running: No Condit...">_1         64
     ?<Constant "BC Is Running.\n\n\r">               20
     ?<Constant "BC Not Running.\n\n\r">              20
     ?<Constant "\n\r Bus Controller Int...">         64
     ?<Constant "BC Frame Timer Expired">             24
     ?<Constant "1\n\r">                               4
     ?<Constant "0\n\r">                               4
     ?<Constant "Selected Msg Int,EOM=1">             24
     ?<Constant "GenPurp Queue Rollover">             24
     ?<Constant "   Message Was Retried">             24
     ?<Constant "Call Stack Pointer Err">             24
     ?<Constant "  Illegal Op Code Trap">             24
     ?<Constant "Unexpected RT Stat Bit">             24
     ?<Constant "User-Def Int Req Bit 3">             24
     ?<Constant "User-Def Int Req Bit 2">             24
     ?<Constant "User-Def Int Req Bit 1">             24
     ?<Constant "User-Def Int Req Bit 0">             24
     ?<Constant "RT Status is Msg Error">             24
     ?<Constant "     BC End-of-Message">             24
     ?<Constant "     Reserved Bits 2-0">             24
     ?<Constant "Note: Reading the BC ...">           64
     ?<Constant "\n\rS">                               4
     ?<Constant "\n\rI">                               4
     ?<Constant "MT monitor mode selec...">           32
     ?<Constant "MT Configuration Regi...">           40
     ?<Constant "  20us Timeout">                     16
     ?<Constant "  58us Timeout">                     16
     ?<Constant " 138us Timeout">                     16
     ?<Constant "  15us Timeout">                     16
     ?<Constant " (bus dead time)   ">                20
     ?<Constant "2us Gap Check ON">                   20
     ?<Constant "2us Gap Check OFF">                  20
     ?<Constant "  Time Tag last word,...">           36
     ?<Constant "Time Tag first word, ...">           36
     ?<Constant " Time Tag first word,...">           36
     ?<Constant "           Time Taggi...">           36
     ?<Constant "Start Rec: First Cmd ">              24
     ?<Constant "Word">                                8
     ?<Constant "or Data Word">                       16
     ?<Constant "Sync + 2 bits">                      16
     ?<Constant "or Data Sync + 2 bits">              24
     ?<Constant "   Invalid Data Word">               24
     ?<Constant "s recorded   ">                      16
     ?<Constant " ends mssg   ">                      16
     ?<Constant "Extended Status Flags ">             24
     ?<Constant "ON">                                  4
     ?<Constant "OFF">                                 4
     ?<Constant " SMT using ">                        12
     ?<Constant "48">                                  4
     ?<Constant "16">                                  4
     ?<Constant "-bit Time Tag ">                     16
     ?<Constant "IMT Pkt Timer starts ">              24
     ?<Constant "at PktEnd   ">                       16
     ?<Constant "at Cmd Wd   ">                       16
     ?<Constant "IMT Hdr Data Type IRI...">           28
     ?<Constant "09  ">                                8
     ?<Constant "04  ">                                8
     ?<Constant "05  ">                                8
     ?<Constant "07  ">                                8
     ?<Constant " IMT Auto Header & Tr...">           28
     ?<Constant "OFF   ">                              8
     ?<Constant " ON   ">                              8
     ?<Constant "IMT Data Packet Check...">           28
     ?<Constant "\n\rLast Message Record...">         28
     ?<Constant "SMT:    ">                           12
     ?<Constant "IMT:   ">                             8
     ?<Constant "Block Status Word = 0...">           40
     ?<Constant "* means IMT BSW reser...">           36
     ?<Constant "           * Start of...">           28
     ?<Constant "n/a    ">                             8
     ?<Constant "= 1    ">                             8
     ?<Constant "= 0    ">                             8
     ?<Constant "Bus Used = ">                        12
     ?<Constant "B\n\n\r">                             8
     ?<Constant "A\n\n\r">                             8
     ?<Constant "             * End of...">           28
     ?<Constant "Error Occurred = ">                  20
     ?<Constant "1\n\n\r">                             8
     ?<Constant "0\n\n\r">                             8
     ?<Constant "        * Good Data B...">           28
     ?<Constant "Response Timeout = ">                20
     ?<Constant "* SMT Data Stack Roll...">           28
     ?<Constant "Illegal Gap Error = ">               24
     ?<Constant " * Cmd Word Content E...">           28
     ?<Constant "Word Count Error = ">                20
     ?<Constant "* RT-RT Gap,Sync,Addr...">           28
     ?<Constant "Non-">                                8
     ?<Constant "RT-RT Cmd: ">                        12
     ?<Constant "0x%.2X%.2X">                         12
     ?<Constant "\n\n\r * RT-RT Cmd Word ...">        32
     ?<Constant "Timetag = ">                         12
     ?<Constant "0x%.2X%.2X\n\n\r">                   16
     ?<Constant "%.2X%.2X">                           12
     ?<Constant "%.2X%.2X\n\n\r">                     12
     ?<Constant "No Words Stored in Da...">           68
     ?<Constant " ">                                   2
     ?<Constant "Msg Words 2-%d at Add...">           40
     ?<Constant "  %d">                                8
     ?<Constant " %d">                                 4
     ?<Constant " Msg Words at Addr: ">               24
     ?<Constant "0x%.2X%.2X   ">                      16
     ?<Constant "Bus Debug Addr: 0x600...">           32
     ?<Constant "       Tx">                          12
     ?<Constant "RT Response = %d.%dus...">           28
     ?<Constant "(Broadcast?)">                       16
     ?<Constant "RxRT Response = %d.%dus ">           28
     ?<Constant "SMT mode is selected ...">           56
     ?<Constant "IMT mode is selected ...">           56
     ?<Constant "   Bus Monitor Ints  ...">           60
     ?<Constant "End of Pkt,Buffer Full">             24
     ?<Constant "Offset before FULL_EOP">             24
     ?<Constant "Pkt Max 1553 Msg Words">             24
     ?<Constant "Pkt Max 1553 Msg Count">             24
     ?<Constant " Max Gap Time Exceeded">             24
     ?<Constant "Max Pkt Recording Time">             24
     ?<Constant "      Host Packet Stop">             24
     ?<Constant "Stack End Addr Written">             24
     ?<Constant " Hit Cmd Stack Address">             24
     ?<Constant " IRIG-106 Packet Ready">             24
     ?<Constant "Monitor End-of-Message">             24
     ?<Constant "\nIMT Skips Bits 4,2,1,0">           24
     ?<Constant "SMT Cmd Stack Rollover">             24
     ?<Constant "SMT DataStack Rollover">             24
     ?<Constant "SMT  Cmd Stack Address">             24
     ?<Constant "SMT Data Stack Address">             24
     ?<Constant "     MT End-of-Message">             24
     ?<Constant "Note: Reading the MT ...">           64
     ?<Constant "\n\r Hardware Interrupt...">         64
     ?<Constant "HI-6131 Host SPI Erro...">           56
     ?<Constant "EE Chksum/Corr RAM Err">             24
     ?<Constant "RAM Init/UncorrRAM Err">             24
     ?<Constant "Loopback Fail on Bus A">             24
     ?<Constant "Loopback Fail on Bus B">             24
     ?<Constant "MT Timetag Ct Rollover">             24
     ?<Constant "BC Timetag Ct Rollover">             24
     ?<Constant "RT2 Timetag Valu Match">             24
     ?<Constant "RT1 Timetag Valu Match">             24
     ?<Constant "MT Timetag Value Match">             24
     ?<Constant "BC Timetag Value Match">             24
     ?<Constant "  RT2 Addr Parity Fail">             24
     ?<Constant "  RT1 Addr Parity Fail">             24
     ?<Constant " Check Pending RT Ints">             24
     ?<Constant " Check Pending MT Ints">             24
     ?<Constant " Check Pending BC Ints">             24
     ?<Constant "Note: Reading the HW ...">           64
     ?<Constant "Press \'M\' for menu, o...">         52
     ?<Constant "\n\r Remote Terminal In...">         64
     ?<Constant "RT2  Reset RT mode cmd">             24
     ?<Constant "RT2  Index Equals Zero">             24
     ?<Constant "RT2    Illegal Command">             24
     ?<Constant "RT2 Broadcast Msg Rcvd">             24
     ?<Constant "RT2 MessageErrorStatus">             24
     ?<Constant "RT2  Int When Accessed">             24
     ?<Constant "        Reserved Bit 9">             24
     ?<Constant "RT1  Reset RT mode cmd">             24
     ?<Constant "RT1  Index Equals Zero">             24
     ?<Constant "RT1    Illegal Command">             24
     ?<Constant "RT1 Broadcast Msg Rcvd">             24
     ?<Constant "RT1 MessageErrorStatus">             24
     ?<Constant "RT1  Int When Accessed">             24
     ?<Constant "Note: Reading the RT ...">           64
     ?<Constant "\n\r Invalid Choice. Pr...">         72
     ?<Constant "    0           -    ...">           32
     ?<Constant "    1           ">                   20
     ?<Constant "1           ">                       16
     ?<Constant "0           ">                       16
     ?<Constant "    -           -    ...">           32
     ?<Constant "    -           -    ...">_1         32
     ?<Constant "    -           -    ...">_2         32
     ?<Constant "Press \'M\' for menu, o...">_1       56
     ?<Constant "=====================...">           64

 
      3 bytes in section .bss
  8 236 bytes in section .rodata
 11 762 bytes in section .text
 
 11 762 bytes of CODE  memory
  8 236 bytes of CONST memory
      3 bytes of DATA  memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
#                                                       22/May/2012  13:42:57 #
# IAR ANSI C/C++ Compiler V6.21.1.32794/W32 KICKSTART for ARM                 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\board_lowlevel.c                 #
#    Command line =  "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\board_lowlevel.c" -D at91sam3u4  #
#                    -D flash -D TRACE_LEVEL=4 -D BC_ena=0 -D RT2_ena=0 -D    #
#                    RT1_ena=0 -D SMT_ena=1 -D IMT_ena=0 -lC "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\SMT_ONLY\List\" --remarks    #
#                    --diag_suppress Pe826,Pe1375,Pe068 -o "C:\Program        #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\SMT_ONLY\Obj\" --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/peripherals #
#                    \" -I "C:\Program Files\IAR Systems\Embedded Workbench   #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/components\ #
#                    " -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib\" -I        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\external_libs\" -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/boards/at91 #
#                    sam3u-ek\" --cpu_mode thumb -On --use_c++_inline         #
#    List file    =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\SMT_ONLY\List\board_lowlevel #
#                    .lst                                                     #
#    Object file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\SMT_ONLY\Obj\board_lowlevel. #
#                    o                                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Program Files\IAR Systems\Embedded Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt HI-6130-40 EBI Demo 1_0\board_lowlevel.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          /// \unit
     32          ///
     33          /// !Purpose
     34          ///
     35          /// Provides the low-level initialization function that gets called on chip
     36          /// startup.
     37          ///
     38          /// !Usage
     39          ///
     40          /// LowLevelInit() is called in #board_cstartup_xxx.c#.
     41          //------------------------------------------------------------------------------
     42          
     43          //------------------------------------------------------------------------------
     44          //         Headers
     45          //------------------------------------------------------------------------------
     46          
     47          #include "board.h"
     48          #include "board_memories.h"
     49          #include "board_lowlevel.h"
     50          #include <pio/pio.h>
     51          
     52          //------------------------------------------------------------------------------
     53          //         Local definitions
     54          //------------------------------------------------------------------------------
     55          // Settings at 48/48MHz
     56          #define AT91C_CKGR_MUL_SHIFT         16
     57          #define AT91C_CKGR_OUT_SHIFT         14
     58          #define AT91C_CKGR_PLLCOUNT_SHIFT     8
     59          #define AT91C_CKGR_DIV_SHIFT          0
     60          
     61          // Note: 
     62          // MOSCXTST in CKGR_MOR takes 0x3F here, you can change it according to
     63          // Crystal Oscillators Characteristics for quick startup; 
     64          // PLLACOUNT in CKGR_PLLAR takes 0x3F here, you can change it according to 
     65          // PLLA Characteristics for quick startup.
     66          #define BOARD_OSCOUNT         (AT91C_CKGR_MOSCXTST & (0x3F << 8))
     67          #define BOARD_PLLR ((1 << 29) | (0x7 << AT91C_CKGR_MUL_SHIFT) \
     68                  | (0x0 << AT91C_CKGR_OUT_SHIFT) |(0x3F << AT91C_CKGR_PLLCOUNT_SHIFT) \
     69                  | (0x1 << AT91C_CKGR_DIV_SHIFT))
     70          #define BOARD_MCKR ( AT91C_PMC_PRES_CLK_2 | AT91C_PMC_CSS_PLLA_CLK)
     71          
     72          // Define clock timeout
     73          #define CLOCK_TIMEOUT           0xFFFFFFFF
     74          
     75          //------------------------------------------------------------------------------
     76          //         Local variables
     77          //------------------------------------------------------------------------------
     78          
     79          //------------------------------------------------------------------------------
     80          //         Local functions
     81          //------------------------------------------------------------------------------
     82          
     83          //------------------------------------------------------------------------------
     84          //         Exported functions
     85          //------------------------------------------------------------------------------
     86          
     87          //------------------------------------------------------------------------------
     88          /// After POR, at91sam3u device is running on 4MHz internal RC
     89          /// At the end of the LowLevelInit procedure MCK = 48MHz PLLA = 96 CPU=48MHz
     90          /// Performs the low-level initialization of the chip. This includes EFC, master
     91          /// clock, IRQ & watchdog configuration.
     92          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     93          void LowLevelInit(void)
     94          {
   \                     LowLevelInit:
   \   00000000   10B5               PUSH     {R4,LR}
     95              unsigned int timeout = 0;
   \   00000002   0024               MOVS     R4,#+0
     96          
     97              /* Set 2 WS for Embedded Flash Access
     98               ************************************/
     99           //   AT91C_BASE_EFC0->EFC_FMR = AT91C_EFC_FWS_2WS;
    100              AT91C_BASE_EFC0->EFC_FMR = AT91C_EFC_FWS_3WS;
   \   00000004   ....               LDR.N    R0,??DataTable2  ;; 0x400e0800
   \   00000006   4FF44071           MOV      R1,#+768
   \   0000000A   0160               STR      R1,[R0, #+0]
    101              AT91C_BASE_EFC1->EFC_FMR = AT91C_EFC_FWS_2WS;
   \   0000000C   ....               LDR.N    R0,??DataTable2_1  ;; 0x400e0a00
   \   0000000E   4FF40071           MOV      R1,#+512
   \   00000012   0160               STR      R1,[R0, #+0]
    102          
    103              /* Watchdog initialization
    104               *************************/
    105              AT91C_BASE_WDTC->WDTC_WDMR = AT91C_WDTC_WDDIS;
   \   00000014   ....               LDR.N    R0,??DataTable2_2  ;; 0x400e1254
   \   00000016   4FF40041           MOV      R1,#+32768
   \   0000001A   0160               STR      R1,[R0, #+0]
    106          
    107              /* Select external slow clock
    108               ****************************/
    109              if ((AT91C_BASE_SUPC->SUPC_SR & AT91C_SUPC_SR_OSCSEL_CRYST) != AT91C_SUPC_SR_OSCSEL_CRYST) {
   \   0000001C   ....               LDR.N    R0,??DataTable2_3  ;; 0x400e1224
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   0DD4               BMI.N    ??LowLevelInit_0
    110                  AT91C_BASE_SUPC->SUPC_CR = AT91C_SUPC_CR_XTALSEL_CRYSTAL_SEL | (0xA5 << 24);
   \   00000024   ....               LDR.N    R0,??DataTable2_4  ;; 0x400e1210
   \   00000026   ....               LDR.N    R1,??DataTable2_5  ;; 0xa5000008
   \   00000028   0160               STR      R1,[R0, #+0]
    111                  timeout = 0;
   \   0000002A   0020               MOVS     R0,#+0
   \   0000002C   0400               MOVS     R4,R0
    112                  while (!(AT91C_BASE_SUPC->SUPC_SR & AT91C_SUPC_SR_OSCSEL_CRYST) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_1:
   \   0000002E   ....               LDR.N    R0,??DataTable2_3  ;; 0x400e1224
   \   00000030   0068               LDR      R0,[R0, #+0]
   \   00000032   0006               LSLS     R0,R0,#+24
   \   00000034   04D4               BMI.N    ??LowLevelInit_0
   \   00000036   2000               MOVS     R0,R4
   \   00000038   441C               ADDS     R4,R0,#+1
   \   0000003A   10F1010F           CMN      R0,#+1
   \   0000003E   F6D1               BNE.N    ??LowLevelInit_1
    113              }
    114          
    115              /* Initialize main oscillator
    116               ****************************/
    117              if(!(AT91C_BASE_PMC->PMC_MOR & AT91C_CKGR_MOSCSEL))
   \                     ??LowLevelInit_0:
   \   00000040   ....               LDR.N    R0,??DataTable2_6  ;; 0x400e0420
   \   00000042   0068               LDR      R0,[R0, #+0]
   \   00000044   C001               LSLS     R0,R0,#+7
   \   00000046   0DD4               BMI.N    ??LowLevelInit_2
    118              {
    119          
    120                //  AT91C_BASE_PMC->PMC_MOR = (0x37 << 16) | BOARD_OSCOUNT | AT91C_CKGR_MOSCRCEN | 0;
    121                  AT91C_BASE_PMC->PMC_MOR = (0x37 << 16) | BOARD_OSCOUNT | AT91C_CKGR_MOSCRCEN | AT91C_CKGR_MOSCXTEN;
   \   00000048   ....               LDR.N    R0,??DataTable2_6  ;; 0x400e0420
   \   0000004A   ....               LDR.N    R1,??DataTable2_7  ;; 0x373f09
   \   0000004C   0160               STR      R1,[R0, #+0]
    122                  timeout = 0;
   \   0000004E   0020               MOVS     R0,#+0
   \   00000050   0400               MOVS     R4,R0
    123                  while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCXTS) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_3:
   \   00000052   ....               LDR.N    R0,??DataTable2_8  ;; 0x400e0468
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   C007               LSLS     R0,R0,#+31
   \   00000058   04D4               BMI.N    ??LowLevelInit_2
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   441C               ADDS     R4,R0,#+1
   \   0000005E   10F1010F           CMN      R0,#+1
   \   00000062   F6D1               BNE.N    ??LowLevelInit_3
    124                  
    125              }
    126           
    127              /* Switch to 3-20MHz Xtal oscillator */
    128              AT91C_BASE_PMC->PMC_MOR = (0x37 << 16) | BOARD_OSCOUNT | AT91C_CKGR_MOSCRCEN | AT91C_CKGR_MOSCXTEN | AT91C_CKGR_MOSCSEL;
   \                     ??LowLevelInit_2:
   \   00000064   ....               LDR.N    R0,??DataTable2_6  ;; 0x400e0420
   \   00000066   ....               LDR.N    R1,??DataTable2_9  ;; 0x1373f09
   \   00000068   0160               STR      R1,[R0, #+0]
    129              timeout = 0;
   \   0000006A   0020               MOVS     R0,#+0
   \   0000006C   0400               MOVS     R4,R0
    130              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCSELS) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_4:
   \   0000006E   ....               LDR.N    R0,??DataTable2_8  ;; 0x400e0468
   \   00000070   0068               LDR      R0,[R0, #+0]
   \   00000072   C003               LSLS     R0,R0,#+15
   \   00000074   04D4               BMI.N    ??LowLevelInit_5
   \   00000076   2000               MOVS     R0,R4
   \   00000078   441C               ADDS     R4,R0,#+1
   \   0000007A   10F1010F           CMN      R0,#+1
   \   0000007E   F6D1               BNE.N    ??LowLevelInit_4
    131              AT91C_BASE_PMC->PMC_MCKR = (AT91C_BASE_PMC->PMC_MCKR & ~AT91C_PMC_CSS) | AT91C_PMC_CSS_MAIN_CLK;
   \                     ??LowLevelInit_5:
   \   00000080   ....               LDR.N    R0,??DataTable2_10  ;; 0x400e0430
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   C008               LSRS     R0,R0,#+3
   \   00000086   C000               LSLS     R0,R0,#+3
   \   00000088   50F00100           ORRS     R0,R0,#0x1
   \   0000008C   ....               LDR.N    R1,??DataTable2_10  ;; 0x400e0430
   \   0000008E   0860               STR      R0,[R1, #+0]
    132              timeout = 0;
   \   00000090   0020               MOVS     R0,#+0
   \   00000092   0400               MOVS     R4,R0
    133              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_6:
   \   00000094   ....               LDR.N    R0,??DataTable2_8  ;; 0x400e0468
   \   00000096   0068               LDR      R0,[R0, #+0]
   \   00000098   0007               LSLS     R0,R0,#+28
   \   0000009A   04D4               BMI.N    ??LowLevelInit_7
   \   0000009C   2000               MOVS     R0,R4
   \   0000009E   441C               ADDS     R4,R0,#+1
   \   000000A0   10F1010F           CMN      R0,#+1
   \   000000A4   F6D1               BNE.N    ??LowLevelInit_6
    134          
    135              /* Initialize PLLA */
    136              AT91C_BASE_PMC->PMC_PLLAR = BOARD_PLLR;
   \                     ??LowLevelInit_7:
   \   000000A6   ....               LDR.N    R0,??DataTable2_11  ;; 0x400e0428
   \   000000A8   ....               LDR.N    R1,??DataTable2_12  ;; 0x20073f01
   \   000000AA   0160               STR      R1,[R0, #+0]
    137              timeout = 0;
   \   000000AC   0020               MOVS     R0,#+0
   \   000000AE   0400               MOVS     R4,R0
    138              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCKA) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_8:
   \   000000B0   ....               LDR.N    R0,??DataTable2_8  ;; 0x400e0468
   \   000000B2   0068               LDR      R0,[R0, #+0]
   \   000000B4   8007               LSLS     R0,R0,#+30
   \   000000B6   04D4               BMI.N    ??LowLevelInit_9
   \   000000B8   2000               MOVS     R0,R4
   \   000000BA   441C               ADDS     R4,R0,#+1
   \   000000BC   10F1010F           CMN      R0,#+1
   \   000000C0   F6D1               BNE.N    ??LowLevelInit_8
    139          
    140              /* Initialize UTMI for USB usage */
    141              AT91C_BASE_CKGR->CKGR_UCKR |= (AT91C_CKGR_UPLLCOUNT & (3 << 20)) | AT91C_CKGR_UPLLEN;
   \                     ??LowLevelInit_9:
   \   000000C2   ....               LDR.N    R0,??DataTable2_13  ;; 0x400e041c
   \   000000C4   0068               LDR      R0,[R0, #+0]
   \   000000C6   50F44410           ORRS     R0,R0,#0x310000
   \   000000CA   ....               LDR.N    R1,??DataTable2_13  ;; 0x400e041c
   \   000000CC   0860               STR      R0,[R1, #+0]
    142              timeout = 0;
   \   000000CE   0020               MOVS     R0,#+0
   \   000000D0   0400               MOVS     R4,R0
    143              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCKU) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_10:
   \   000000D2   ....               LDR.N    R0,??DataTable2_8  ;; 0x400e0468
   \   000000D4   0068               LDR      R0,[R0, #+0]
   \   000000D6   4006               LSLS     R0,R0,#+25
   \   000000D8   04D4               BMI.N    ??LowLevelInit_11
   \   000000DA   2000               MOVS     R0,R4
   \   000000DC   441C               ADDS     R4,R0,#+1
   \   000000DE   10F1010F           CMN      R0,#+1
   \   000000E2   F6D1               BNE.N    ??LowLevelInit_10
    144          
    145              /* Switch to fast clock
    146               **********************/
    147              AT91C_BASE_PMC->PMC_MCKR = (BOARD_MCKR & ~AT91C_PMC_CSS) | AT91C_PMC_CSS_MAIN_CLK;
   \                     ??LowLevelInit_11:
   \   000000E4   ....               LDR.N    R0,??DataTable2_10  ;; 0x400e0430
   \   000000E6   1121               MOVS     R1,#+17
   \   000000E8   0160               STR      R1,[R0, #+0]
    148              timeout = 0;
   \   000000EA   0020               MOVS     R0,#+0
   \   000000EC   0400               MOVS     R4,R0
    149              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_12:
   \   000000EE   ....               LDR.N    R0,??DataTable2_8  ;; 0x400e0468
   \   000000F0   0068               LDR      R0,[R0, #+0]
   \   000000F2   0007               LSLS     R0,R0,#+28
   \   000000F4   04D4               BMI.N    ??LowLevelInit_13
   \   000000F6   2000               MOVS     R0,R4
   \   000000F8   441C               ADDS     R4,R0,#+1
   \   000000FA   10F1010F           CMN      R0,#+1
   \   000000FE   F6D1               BNE.N    ??LowLevelInit_12
    150          
    151              AT91C_BASE_PMC->PMC_MCKR = BOARD_MCKR;
   \                     ??LowLevelInit_13:
   \   00000100   ....               LDR.N    R0,??DataTable2_10  ;; 0x400e0430
   \   00000102   1221               MOVS     R1,#+18
   \   00000104   0160               STR      R1,[R0, #+0]
    152              timeout = 0;
   \   00000106   0020               MOVS     R0,#+0
   \   00000108   0400               MOVS     R4,R0
    153              while (!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) && (timeout++ < CLOCK_TIMEOUT));
   \                     ??LowLevelInit_14:
   \   0000010A   ....               LDR.N    R0,??DataTable2_8  ;; 0x400e0468
   \   0000010C   0068               LDR      R0,[R0, #+0]
   \   0000010E   0007               LSLS     R0,R0,#+28
   \   00000110   04D4               BMI.N    ??LowLevelInit_15
   \   00000112   2000               MOVS     R0,R4
   \   00000114   441C               ADDS     R4,R0,#+1
   \   00000116   10F1010F           CMN      R0,#+1
   \   0000011A   F6D1               BNE.N    ??LowLevelInit_14
    154          
    155              /* Enable clock for UART
    156               ************************/
    157              AT91C_BASE_PMC->PMC_PCER = (1 << AT91C_ID_DBGU);
   \                     ??LowLevelInit_15:
   \   0000011C   ....               LDR.N    R0,??DataTable2_14  ;; 0x400e0410
   \   0000011E   4FF48071           MOV      R1,#+256
   \   00000122   0160               STR      R1,[R0, #+0]
    158          
    159              /* Optimize CPU setting for speed */
    160              SetDefaultMaster(1);
   \   00000124   0120               MOVS     R0,#+1
   \   00000126   ........           BL       SetDefaultMaster
    161          
    162          }
   \   0000012A   10BD               POP      {R4,PC}          ;; return
    163          
    164          //------------------------------------------------------------------------------
    165          /// Enable or disable default master access
    166          /// \param enalbe 1 enable defaultMaster settings, 0 disable it.
    167          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    168          void SetDefaultMaster(unsigned char enable)
    169          {
    170              AT91PS_HMATRIX2 pMatrix = AT91C_BASE_MATRIX;
   \                     SetDefaultMaster:
   \   00000000   ....               LDR.N    R1,??DataTable2_15  ;; 0x400e0200
    171          
    172              // Set default master
    173              if (enable == 1) {
   \   00000002   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0128               CMP      R0,#+1
   \   00000006   0CD1               BNE.N    ??SetDefaultMaster_0
    174          
    175                  // Set default master: SRAM0 -> Cortex-M3 System
    176                  pMatrix->HMATRIX2_SCFG0 |= AT91C_MATRIX_FIXED_DEFMSTR_SCFG0_ARMS |
    177                                             AT91C_MATRIX_DEFMSTR_TYPE_FIXED_DEFMSTR;
   \   00000008   0A6C               LDR      R2,[R1, #+64]
   \   0000000A   52F4C022           ORRS     R2,R2,#0x60000
   \   0000000E   0A64               STR      R2,[R1, #+64]
    178                  
    179                  // Set default master: SRAM1 -> Cortex-M3 System
    180                  pMatrix->HMATRIX2_SCFG1 |= AT91C_MATRIX_FIXED_DEFMSTR_SCFG1_ARMS |
    181                                             AT91C_MATRIX_DEFMSTR_TYPE_FIXED_DEFMSTR;
   \   00000010   4A6C               LDR      R2,[R1, #+68]
   \   00000012   52F4C022           ORRS     R2,R2,#0x60000
   \   00000016   4A64               STR      R2,[R1, #+68]
    182          
    183                  // Set default master: Internal flash0 -> Cortex-M3 Instruction/Data
    184                  pMatrix->HMATRIX2_SCFG3 |= AT91C_MATRIX_FIXED_DEFMSTR_SCFG3_ARMC |
    185                                             AT91C_MATRIX_DEFMSTR_TYPE_FIXED_DEFMSTR;
   \   00000018   CA6C               LDR      R2,[R1, #+76]
   \   0000001A   52F40032           ORRS     R2,R2,#0x20000
   \   0000001E   CA64               STR      R2,[R1, #+76]
   \   00000020   0BE0               B.N      ??SetDefaultMaster_1
    186              } else {
    187          
    188                  // Clear default master: SRAM0 -> Cortex-M3 System
    189                  pMatrix->HMATRIX2_SCFG0 &= (~AT91C_MATRIX_DEFMSTR_TYPE);
   \                     ??SetDefaultMaster_0:
   \   00000022   0A6C               LDR      R2,[R1, #+64]
   \   00000024   32F44032           BICS     R2,R2,#0x30000
   \   00000028   0A64               STR      R2,[R1, #+64]
    190                  
    191                  // Clear default master: SRAM1 -> Cortex-M3 System
    192                  pMatrix->HMATRIX2_SCFG1 &= (~AT91C_MATRIX_DEFMSTR_TYPE);
   \   0000002A   4A6C               LDR      R2,[R1, #+68]
   \   0000002C   32F44032           BICS     R2,R2,#0x30000
   \   00000030   4A64               STR      R2,[R1, #+68]
    193          
    194                  // Clear default master: Internal flash0 -> Cortex-M3 Instruction/Data
    195                  pMatrix->HMATRIX2_SCFG3 &= (~AT91C_MATRIX_DEFMSTR_TYPE);
   \   00000032   CA6C               LDR      R2,[R1, #+76]
   \   00000034   32F44032           BICS     R2,R2,#0x30000
   \   00000038   CA64               STR      R2,[R1, #+76]
    196              }
    197          }
   \                     ??SetDefaultMaster_1:
   \   0000003A   7047               BX       LR               ;; return
    198          
    199          //------------------------------------------------------------------------------
    200          /// Set flash wait state
    201          /// \param ws    Value of flash wait state
    202          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    203          void SetFlashWaitState(unsigned char ws)
    204          {
    205              // Set Wait State for Embedded Flash Access
    206          	AT91C_BASE_EFC0->EFC_FMR = ((ws << 8) & AT91C_EFC_FWS);
   \                     SetFlashWaitState:
   \   00000000   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0102               LSLS     R1,R0,#+8
   \   00000004   11F47061           ANDS     R1,R1,#0xF00
   \   00000008   ....               LDR.N    R2,??DataTable2  ;; 0x400e0800
   \   0000000A   1160               STR      R1,[R2, #+0]
    207          	AT91C_BASE_EFC1->EFC_FMR = ((ws << 8) & AT91C_EFC_FWS);
   \   0000000C   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0102               LSLS     R1,R0,#+8
   \   00000010   11F47061           ANDS     R1,R1,#0xF00
   \   00000014   ....               LDR.N    R2,??DataTable2_1  ;; 0x400e0a00
   \   00000016   1160               STR      R1,[R2, #+0]
    208          }
   \   00000018   7047               BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   00080E40           DC32     0x400e0800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   000A0E40           DC32     0x400e0a00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   54120E40           DC32     0x400e1254

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   24120E40           DC32     0x400e1224

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   10120E40           DC32     0x400e1210

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   080000A5           DC32     0xa5000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   20040E40           DC32     0x400e0420

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   093F3700           DC32     0x373f09

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   68040E40           DC32     0x400e0468

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   093F3701           DC32     0x1373f09

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   30040E40           DC32     0x400e0430

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   28040E40           DC32     0x400e0428

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   013F0720           DC32     0x20073f01

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   1C040E40           DC32     0x400e041c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   10040E40           DC32     0x400e0410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   00020E40           DC32     0x400e0200
    209          

   Maximum stack usage in bytes:

     Function          .cstack
     --------          -------
     LowLevelInit           8
     SetDefaultMaster       0
     SetFlashWaitState      0


   Section sizes:

     Function/Label    Bytes
     --------------    -----
     LowLevelInit       300
     SetDefaultMaster    60
     SetFlashWaitState   26
     ??DataTable2         4
     ??DataTable2_1       4
     ??DataTable2_2       4
     ??DataTable2_3       4
     ??DataTable2_4       4
     ??DataTable2_5       4
     ??DataTable2_6       4
     ??DataTable2_7       4
     ??DataTable2_8       4
     ??DataTable2_9       4
     ??DataTable2_10      4
     ??DataTable2_11      4
     ??DataTable2_12      4
     ??DataTable2_13      4
     ??DataTable2_14      4
     ??DataTable2_15      4

 
 450 bytes in section .text
 
 450 bytes of CODE memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
#                                                       22/May/2012  13:43:41 #
# IAR ANSI C/C++ Compiler V6.21.1.32794/W32 KICKSTART for ARM                 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\console.c                        #
#    Command line =  "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\console.c" -D at91sam3u4 -D      #
#                    flash -D TRACE_LEVEL=4 -D BC_ena=0 -D RT2_ena=0 -D       #
#                    RT1_ena=0 -D SMT_ena=0 -D IMT_ena=1 -lC "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\IMT_ONLY\List\" --remarks    #
#                    --diag_suppress Pe826,Pe1375,Pe068 -o "C:\Program        #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\IMT_ONLY\Obj\" --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/peripherals #
#                    \" -I "C:\Program Files\IAR Systems\Embedded Workbench   #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/components\ #
#                    " -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib\" -I        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\external_libs\" -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/boards/at91 #
#                    sam3u-ek\" --cpu_mode thumb -On --use_c++_inline         #
#    List file    =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\IMT_ONLY\List\console.lst    #
#    Object file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\IMT_ONLY\Obj\console.o       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Program Files\IAR Systems\Embedded Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt HI-6130-40 EBI Demo 1_0\console.c
      1          /* ----------------------------------------------------------------------------
      2           *                            HOLT Integrated Circuits 
      3           * ----------------------------------------------------------------------------
      4           *
      5           *    file	console.c
      6           *    object    HyperTerminal-style console I/O for reference design, Holt
      7                          HI-6130 or HI-6131 Evaluation Board based on the Atmel Cortex M-3
      8           
      9           *    brief     This file contains functions for UART initialization, console
     10           *              screen text display and keyboard input when using a program 
     11           *              like HyperTerminal. As a debug aid, this function is optional
     12           *              and is enabled or disabled in file 613x_initialization.h :
     13           *
     14           *		     CONSOLE_IO  YES  enables console I/O for debug.
     15           *                               NO   disables it, reducing program size
     16           *
     17           *              Settings: 115200 baud, 8 data bits, 1 stop bit, no parity, 
     18           *              hardware flow control OFF
     19           *
     20           *	   	HOLT DISCLAIMER
     21           *      	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY 
     22           *      	KIND, EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
     23           *      	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
     24           *      	PURPOSE AND NONINFRINGEMENT. 
     25           *      	IN NO EVENT SHALL HOLT, INC BE LIABLE FOR ANY CLAIM, DAMAGES
     26           *      	OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
     27           *      	OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
     28           *      	SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
     29           *
     30           *              Copyright (C) 2009-2011 by  HOLT, Inc.
     31           *              All Rights Reserved
     32           */
     33          
     34          // standard Atmel/IAR headers
     35          #include <usart/usart.h>
     36          #include <stdio.h>
     37          #include <pio/pio.h>
     38          #include <pmc/pmc.h>
     39          
     40          // Holt project headers
     41          #include "613x_regs.h"
     42          #include "board_613x.h"
     43          #include "613x_bc.h"
     44          #include "613x_mt.h"
     45          #include "613x_initialization.h"
     46          #include "console.h"
     47          /*
     48          #if (!HOST_BUS_INTERFACE) // spi
     49          #include "device_6131.h"
     50          #include "board_6131.h"
     51          
     52          #else // (HOST_BUS_INTERFACE)
     53          */
     54          #include "device_6130.h"
     55          #include "board_6130.h"
     56          extern const H6130 pH6130;
     57          
     58          ///#endif
     59          
     60          //------------------------------------------------------------------------------
     61          //         Global variables
     62          //------------------------------------------------------------------------------
     63          
     64          // not used for EBI but make the compiler happy
     65          ///#if (!HOST_BUS_INTERFACE) // spi

   \                                 In section .bss, align 2
     66          static unsigned short waddr = 0;
   \                     waddr:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     67          static unsigned char watch = 0;
   \                     watch:
   \   00000000                      DS8 1
     68          ///#endif
     69          
     70          
     71          
     72          //------------------------------------------------------------------------------
     73          //         Functions
     74          //------------------------------------------------------------------------------
     75          
     76          
     77          //------------------------------------------------------------------------------
     78          /// Configures USART: hardware flow control OFF, asynchronous, 8 bits, 1 stop
     79          /// bit, no parity, 115200 baud, then enables USART transmitter and receiver.
     80          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     81          void ConfigureUsart1(void)
     82          {
   \                     ConfigureUsart1:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   A0B0               SUB      SP,SP,#+128
     83            const Pin pins[] = {PINS_USART};
   \   00000004   00A8               ADD      R0,SP,#+0
   \   00000006   ........           LDR.W    R1,??DataTable3
   \   0000000A   8022               MOVS     R2,#+128
   \   0000000C   ........           BL       __aeabi_memcpy4
     84            
     85            unsigned int mode = AT91C_US_USMODE_NORMAL // USMODE_HWHSH enables RTS/CTS handshaking
     86                                  | AT91C_US_CLKS_CLOCK
     87                                  | AT91C_US_CHRL_8_BITS
     88                                  | AT91C_US_PAR_NONE
     89                                  | AT91C_US_NBSTOP_1_BIT
     90                                  | AT91C_US_CHMODE_NORMAL;
   \   00000010   4FF40C64           MOV      R4,#+2240
     91          
     92              // configure PIO pins used by USART1
     93              PIO_Configure(pins, PIO_LISTSIZE(pins));  
   \   00000014   0421               MOVS     R1,#+4
   \   00000016   00A8               ADD      R0,SP,#+0
   \   00000018   ........           BL       PIO_Configure
     94            
     95              // Enable the peripheral clock in the PMC
     96              PMC_EnablePeripheral(BOARD_ID_USART);
   \   0000001C   0E20               MOVS     R0,#+14
   \   0000001E   ........           BL       PMC_EnablePeripheral
     97          
     98              // Configure the USART in the desired mode @ 115200 baud
     99              USART_Configure(BOARD_USART_BASE, mode, 115200, BOARD_MCK);
   \   00000022   ........           LDR.W    R3,??DataTable3_1  ;; 0x2dc6c00
   \   00000026   5FF4E132           MOVS     R2,#+115200
   \   0000002A   2100               MOVS     R1,R4
   \   0000002C   ........           LDR.W    R0,??DataTable3_2  ;; 0x40094000
   \   00000030   ........           BL       USART_Configure
    100          
    101             // Enable USART receiver & transmitter
    102              USART_SetTransmitterEnabled(BOARD_USART_BASE, 1);
   \   00000034   0121               MOVS     R1,#+1
   \   00000036   ........           LDR.W    R0,??DataTable3_2  ;; 0x40094000
   \   0000003A   ........           BL       USART_SetTransmitterEnabled
    103              USART_SetReceiverEnabled(BOARD_USART_BASE, 1);
   \   0000003E   0121               MOVS     R1,#+1
   \   00000040   ........           LDR.W    R0,??DataTable3_2  ;; 0x40094000
   \   00000044   ........           BL       USART_SetReceiverEnabled
    104          }
   \   00000048   20B0               ADD      SP,SP,#+128
   \   0000004A   10BD               POP      {R4,PC}          ;; return
    105          
    106          
    107          //------------------------------------------------------------------------------
    108          //     function sends ASCII text header to screen
    109          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    110          void show_menu(void) {
   \                     show_menu:
   \   00000000   80B5               PUSH     {R7,LR}
    111            
    112            // Console Output via USART to user HyperTerminal
    113            
    114            putchar(12); // clear screen
   \   00000002   0C20               MOVS     R0,#+12
   \   00000004   ........           BL       putchar
    115          
    116            printf("\n\r*************************************************\n\r");
   \   00000008   ........           LDR.W    R0,??DataTable3_3
   \   0000000C   ........           BL       printf
    117            printf("   Holt Integrated Circuits HI-6130/31 Project   \n\r");
   \   00000010   ........           LDR.W    R0,??DataTable3_4
   \   00000014   ........           BL       printf
    118            printf("        Compiled: %s %s        \n\r", __DATE__, __TIME__);
   \   00000018   ........           LDR.W    R2,??DataTable3_5
   \   0000001C   ........           LDR.W    R1,??DataTable3_6
   \   00000020   ........           LDR.W    R0,??DataTable3_7
   \   00000024   ........           BL       printf
    119            printf("*************************************************\n\n\r");
   \   00000028   ........           LDR.W    R0,??DataTable3_8
   \   0000002C   ........           BL       printf
    120            #if(BC_ena) 
    121              printf("   BC On   "); 
    122            #else 
    123              printf("   BC Off  ");
   \   00000030   ........           LDR.W    R0,??DataTable3_9
   \   00000034   ........           BL       printf
    124            #endif
    125            #if(SMT_ena) 
    126              printf("SMT On    ");
    127            #elif(IMT_ena) 
    128              printf("IMT On    ");
   \   00000038   ........           LDR.W    R0,??DataTable3_10
   \   0000003C   ........           BL       printf
    129            #else 
    130              printf("MT Off   ");
    131            #endif
    132            #if(RT1_ena) 
    133              printf("RT1 On   ");
    134            #else 
    135              printf("RT1 Off  ");
   \   00000040   ........           LDR.W    R0,??DataTable3_11
   \   00000044   ........           BL       printf
    136            #endif
    137            #if(RT2_ena) 
    138              printf("RT2 On");
    139            #else 
    140              printf("RT2 Off");
   \   00000048   ........           LDR.W    R0,??DataTable3_12
   \   0000004C   ........           BL       printf
    141            #endif
    142              printf("\n\n\r");
   \   00000050   ....               ADR.N    R0,??DataTable1  ;; "\n\n\r"
   \   00000052   ........           BL       printf
    143            #if(BC_ena) 
    144              printf(" Press '1' to step BC and list results...\n\r");
    145              printf(" Press '2' to list BC configuration...\n\r");
    146              printf(" Press '3' to list BC condition codes & GP flags...\n\r");
    147            #endif
    148            #if(SMT_ena || IMT_ena)
    149              printf(" Press '4' to list MT configuration...\n\r");
   \   00000056   ........           LDR.W    R0,??DataTable3_14
   \   0000005A   ........           BL       printf
    150              printf(" Press '5' to list MT results, last msg...\n\r");
   \   0000005E   ........           LDR.W    R0,??DataTable3_15
   \   00000062   ........           BL       printf
    151            #endif
    152              printf(" Press '6' to list HW interrupt status...\n\r");
   \   00000066   ........           LDR.W    R0,??DataTable3_16
   \   0000006A   ........           BL       printf
    153            #if(BC_ena) 
    154              printf(" Press '7' to list BC interrupt status...\n\r");
    155            #endif
    156            #if(RT1_ena || RT2_ena)
    157              printf(" Press '8' to list RT interrupt status...\n\r");
    158            #endif
    159            #if(SMT_ena || IMT_ena)
    160              printf(" Press '9' to list MT interrupt status...\n\r");
   \   0000006E   ........           LDR.W    R0,??DataTable3_17
   \   00000072   ........           BL       printf
    161            #endif
    162              /*
    163            #if (!HOST_BUS_INTERFACE) // spi
    164              printf(" Press 'W' for HI-6131 Memory Watch window...\n\r");
    165            #endif
    166              */
    167              
    168              printf(" NOTE: Options 6-9 clear the accessed Pending Interrupt Register!\n\r"); 
   \   00000076   ........           LDR.W    R0,??DataTable3_19
   \   0000007A   ........           BL       printf
    169              print_line();
   \   0000007E   ........           BL       print_line
    170              printf("\n\r");
   \   00000082   ....               ADR.N    R0,??DataTable2  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000084   ........           BL       printf
    171              print_menuprompt();
   \   00000088   ........           BL       print_menuprompt
    172          
    173          } // end of show_menu()
   \   0000008C   01BD               POP      {R0,PC}          ;; return
    174          
    175          
    176          #if(BC_ena) 
    177          //------------------------------------------------------------------------------
    178          //	This function generates a BC external trigger pulse for the HI-613x. 
    179          //	The pin has a pull-down with a push button pulling high. This function
    180          //	provides an alternate, software-generated trigger. To avoid contention
    181          //	with the button, the PA0 GPIO rests in high-z input mode. The PAOUT
    182          //	register sets PA0 high, so this function simply pulses the pin in 
    183          //	output mode to generate trigger.
    184          //
    185          //	After triggering, an in-line delay provides adequate time for 
    186          //	worst case message completion, then console output displays 
    187          //	formatted message results
    188          //------------------------------------------------------------------------------
    189          void bc_last_msg_console(void) {
    190          
    191            unsigned short int i, j, k, addr, wordcount=8, mcsb[10], data[32];
    192            char rtrt=0,bcast=0,mcode=0,tx=0,nr=0,mtype=0; //,mcd=0;
    193          
    194            // formfeed 
    195            putchar(12); 	
    196            printf("\n\rResults From Last Message Issued by BC\n\r");
    197            print_line();
    198            printf("Message Type: ");
    199          
    200           /// #if (HOST_BUS_INTERFACE)
    201          	// read block address for the last message 
    202          	addr = pH6130->BC_LAST_MSG_BLOCK_ADDR_REG;
    203          	// read BC Control Word 
    204          	mcsb[0] = *((unsigned int *)(0x60000000 + (addr<<1)));
    205          	// read Command Word 
    206          	addr++;
    207          	mcsb[1] = *((unsigned int *)(0x60000000 + (addr<<1)));
    208          	/*
    209            #else // (HOST_SPI_INTERFACE)
    210              // enable Memory Address Pointer 1
    211              enaMAP(1);
    212          	// read block address for the last message, indirectly using MAP
    213          	Write_6131LowReg(MAP_1, BC_LAST_MSG_BLOCK_ADDR_REG, 1);
    214          	addr = Read_6131_1word(1);
    215          	// write block addr to MAP then read block's first 2 words
    216          	Write_6131LowReg(MAP_1, addr, 1);	
    217          	// read BC Control Word, MAP auto incrementts 
    218          	mcsb[0] = Read_6131_1word(1);
    219          	// read Command Word 
    220          	mcsb[1] = Read_6131_1word(1);
    221            #endif // (HOST_SPI_INTERFACE)
    222          */
    223                  
    224            if((mcsb[1] & 0xF800) == 0xF800) {
    225          	printf("Broadcast ");
    226          	bcast = 1;
    227            }
    228          
    229            // RT-RT message? 
    230            if(mcsb[0] & 1) {
    231          	rtrt=1;
    232          	printf("RT-RT Message, ");
    233          	wordcount = 10;
    234            }
    235          
    236            // read rest of control-status block 
    237           /// #if (HOST_BUS_INTERFACE)
    238          	for (i=2,addr++; i<wordcount; i++,addr++) {
    239          		mcsb[i] = *((unsigned int *)(0x60000000 + (addr<<1)));
    240          	}
    241          /* 
    242          #else // (HOST_SPI_INTERFACE)
    243          	for (i=2; i<wordcount; i++) {
    244          		mcsb[i] = Read_6131_1word(1);
    245          	}
    246            #endif // (HOST_SPI_INTERFACE)
    247           */
    248            
    249            if(!rtrt) {
    250          	if(mcsb[1] & (1<<10)) {
    251          	    printf("Tx ");
    252                      tx = 1;
    253                  }
    254          	else printf("Rx ");
    255            }
    256          
    257          //mtype = mcsb[0] & 7;
    258            // check CW subaddress field to detect mode code 
    259            j = mcsb[1] & 0x03E0;
    260            if((j == 0) || (j == 0x03E0)) {
    261                // mode code 
    262                mcode = 1;
    263                i = 0x1F & mcsb[1];
    264                if(i > 15) {
    265                    wordcount = 1;
    266                    addr = mcsb[2];
    267          	///	  #if (HOST_BUS_INTERFACE)
    268          			data[0] = *((unsigned int *)(0x60000000 + (addr<<1)));
    269                                  /*
    270          		  #else // (HOST_SPI_INTERFACE)
    271          			Write_6131LowReg(MAP_1, addr, 1);
    272          			data[0] = Read_6131_1word(1);
    273          		  #endif // (HOST_SPI_INTERFACE)	
    274                                  */
    275              //    mcd=1;
    276                    printf("Mode Code %02d With Data 0x%.2X%.2X\n\n\r", i, (char)(data[0]>>8), (char)data[0]);
    277                }
    278                else {
    279                    wordcount = 0;
    280                    if(mcsb[1] & (1<<10)) printf("Mode Code %02d w/o Data\n\n\r", i);
    281                    // undef Rx MC0-15 
    282                    else printf("Mode Code %02d w/o Data, Undefined\n\n\r", i);
    283                }
    284            }
    285            
    286            else {
    287                printf("Subaddress Command, ");
    288                wordcount = mcsb[1] & 0x1F;
    289                if (!wordcount) wordcount = 32;
    290                printf("%d data word",wordcount);
    291                if(wordcount!=1) printf("s");
    292                printf("\n\n\r"); 
    293            }                                     
    294          
    295            if (rtrt) {
    296              // validity check RT-RT 
    297              if(mcode) printf("RT-RT problem: RxCW mode code.\n\r");
    298              // CW1 = Rx? 
    299              if (tx) printf("RT-RT problem: RxCW is transmit.\n\r");
    300              // CW2 = Tx? 
    301              if(!(mcsb[8] & (1<<10))) printf("RT-RT problem: TxCW is receive.\n\r");
    302              // check CW2 mode code 
    303              j = mcsb[8] & 0x03E0;
    304              if((j == 0) || (j == 0x03E0)) printf("RT-RT problem: TxCW mode code.\n\r");
    305              // rule-out CW1 address = CW2 address 
    306              i = mcsb[1] & 0xF800;
    307              j = mcsb[8] & 0xF800;
    308              if(i == j) printf("RT-RT problem: RxCW & TxCW have same RT addr.\n\r");
    309              // rule-out different word counts 
    310              i = mcsb[8] & 0x001F;
    311              if(i != wordcount) printf("RT-RT problem: RxCW & TxCW word counts differ.\n\r");
    312              printf("\n\r");
    313          
    314              i = mcsb[1];
    315              printf("CW1: 0x%.2X%.2X", (char)(i>>8), (char)i);
    316              printf(" = %02d-%1d-%02d-%02d     ", i>>11, (0x0400 & i)>>10, (0x03E0 & i)>>5, (0x001F & i));
    317              if(bcast) printf("RSW not applicable\n\r");
    318              else {
    319                  i = mcsb[9];
    320                  printf("RxSW: 0x%.2X%.2X", (char)(i>>8), (char)i);
    321                  printf(" = RT%02d ", (char)(i>>11));
    322                  i &= 0x7FF;
    323                  if(!i) printf("CS\n\r");
    324                  else {
    325                      if(i & (1<<10)) printf("ME ");
    326                      if(i & (1<<9)) printf("INST ");
    327                      if(i & (1<<8)) printf("SRQ ");
    328                      if(i & (7<<5)) printf("RSV ");
    329                      if(i & 16) printf("BCR ");
    330                      if(i & 8) printf("BSY ");
    331                      if(i & 4) printf("SSF ");
    332                      if(i & 2) printf("DBCA ");
    333                      if(i & 1) printf("TF ");
    334                      printf("\n\r");
    335                  }
    336              }
    337              i = mcsb[8];
    338              printf("CW2: 0x%.2X%.2X", (char)(i>>8), (char)i);
    339              printf(" = %02d-%1d-%02d-%02d     ", (char)(i>>11), (char)((0x0400 & i)>>10), (char)((0x03E0 & i)>>5), (char)((0x001F & i)));
    340              i = mcsb[7];
    341              printf("TxSW: 0x%.2X%.2X", (char)(i>>8), (char)i);
    342              printf(" = RT%02d ", (char)(i>>11));
    343              i &= 0x7FF;
    344              if(!i) printf("CS\n\n\r");
    345              else {
    346                  if(i & (1<<10)) printf("ME ");
    347                  if(i & (1<<9)) printf("INST ");
    348                  if(i & (1<<8)) printf("SRQ ");
    349                  if(i & (7<<5)) printf("RSV ");
    350                  if(i & 16) printf("BCR ");
    351                  if(i & 8) printf("BSY ");
    352                  if(i & 4) printf("SSF ");
    353                  if(i & 2) printf("DBCA ");
    354                  if(i & 1) printf("TF ");
    355                  printf("\n\n\r");
    356              }
    357              
    358              // read Condition Code & General Purpose Flag register
    359          ///    #if (HOST_BUS_INTERFACE)
    360          	j = pH6130->BC_CCODE_AND_GPF_REG;
    361              /*
    362              #else // (HOST_SPI_INTERFACE)
    363          	Write_6131LowReg(MAP_1, BC_CCODE_AND_GPF_REG, 1);
    364          	j = Read_6131_1word(1);
    365              #endif
    366             */ 
    367            }       // end rtrt
    368                  
    369                  else { 	// not rtrt
    370          
    371          	    // display Command Word  
    372          	    i = mcsb[1];
    373          	    printf("CW: 0x%.2X%.2X", (char)(i>>8), (char)i);
    374          	    printf(" = %02d-%1d-%02d-%02d     ", (char)(i>>11), (char)((0x0400 & i)>>10), (char)((0x03E0 & i)>>5), (char)((0x001F & i)));
    375                      
    376                      // read Condition Code & General Purpose Flag register
    377                      
    378          	///    #if (HOST_BUS_INTERFACE)
    379          		j = pH6130->BC_CCODE_AND_GPF_REG;
    380                          /*
    381          	    #else // (HOST_SPI_INTERFACE)
    382          		Write_6131LowReg(MAP_1, BC_CCODE_AND_GPF_REG, 1);
    383          		j = Read_6131_1word(1);
    384          	    #endif
    385          */
    386                          
    387          	    // check broadcast 
    388          	    if (bcast) printf("SW not applicable\n\n\r");
    389          
    390          	    else {
    391          		// not broadcast, check if No Response timeout 
    392          		if(j & (1<<8)) {
    393          		    // normal subaddress msg without RT response, excl rt-rt                   
    394          		    printf("SW not received\n\n\r");
    395          		    nr = 1;
    396          		}
    397          		else {
    398          		    // normal subaddress msg with RT response, excl rt-rt 
    399          		    i = mcsb[7];
    400          		    // decode received RT status 
    401          		    printf("SW: 0x%.2X%.2X", (char)(i>>8), (char)i);
    402          		    printf(" = RT%02d ",i>>11);
    403          		    i &= 0x7FF;
    404          		    if(!i) printf("CS\n\n\r");
    405          		    else {
    406          			if(i & (1<<10)) printf("ME ");
    407          			if(i & (1<<9)) printf("INST ");
    408          			if(i & (1<<8)) printf("SRQ ");
    409          			if(i & (7<<5)) printf("RSV ");
    410          			if(i & 16) printf("BCR ");
    411          			if(i & 8) printf("BSY ");
    412          			if(i & 4) printf("SSF ");
    413          			if(i & 2) printf("DBCA ");
    414          			if(i & 1) printf("TF ");
    415          		        printf("\n\n\r");	
    416                              }
    417                          }
    418                      }
    419          	}	// end "not rtrt"
    420          
    421          	// BC Control Word for message 
    422          	i = mcsb[0];
    423          	printf("BC Control Word: 0x%.2X%.2X  \n\r", (char)(i>>8), (char)i);
    424          	if(i & (1<<15)) printf("MC17TTL ");
    425          	if(i & (1<<14)) printf("MEmask ");
    426          	if(i & (1<<13)) printf("SRQmask ");
    427          	if(i & (1<<12)) printf("BSYmask ");
    428          	if(i & (1<<11)) printf("SSFmask ");
    429          	if(i & (1<<10)) printf("TFmask ");
    430          	if(i & (1<<9)) printf("RSVmask ");
    431          	if(i & (1<<8)) printf("RetryEna ");
    432          	if(i & (1<<7)) printf("UseBusA ");
    433          	else           printf("UseBusB ");
    434          	if(i & (1<<6)) printf("SelfTest ");
    435          	if(i & (1<<5)) printf("maskBCR ");
    436          	if(i & (1<<4)) printf("EOMirq ");
    437          	if((i & 7) == 0) printf("NonBcstSA ");
    438          	if((i & 7) == 1) printf("RTRT ");
    439          	if((i & 7) == 2) printf("BcstSA ");
    440          	if((i & 7) == 3) printf("BcstRTRT ");
    441          	if((i & 7) == 4) printf("MC ");
    442          	if((i & 7) == 5) printf("RTRT_MC?? ");
    443          	if((i & 7) == 6) printf("BcstMC ");
    444          	if((i & 7) == 7) printf("BcstRTRT_MC?? ");
    445          	printf("\n\r");
    446          
    447          	k = (i & 2) >> 1;
    448          	// Block Control broadcast format bit 1 should agree w/ CW1 
    449          	if(k != bcast) printf("The Cmd Word and Control Word bit 1 disagree on broadcast format.\n\r");
    450          	k = (i & 4) >> 2;
    451          	// Block Control mode code format bit 2 should agree w/ CW1 
    452          	if(k != mcode) printf("The Cmd Word and Control Word bit 2 disagree on mode code format.\n\r");
    453          	printf("\n\r");
    454          
    455          
    456          	// Block Status Word 
    457          	i = mcsb[5];
    458          	printf("Block Status Word: 0x%.2X%.2X \n\r", (char)(i>>8), (char)i);
    459          	if(i & (1<<14)) printf("SOM  ");
    460          	if(i & (1<<15)) printf("EOM  ");
    461          	if(i & (1<<13)) printf("BusB  ");
    462          	else printf("Bus A  ");
    463          	if(i & (1<<12)) printf("ErrOcc ");
    464          	if(i & (1<<11)) printf("SSet  ");
    465          	if(i & (1<<9)) printf("NoResp  ");
    466          	if(i & (1<<8)) printf("LpBk  ");
    467          	if(i & (1<<6)) printf("2retry  ");
    468          	else if(i & (1<<5)) printf("1retry  ");
    469          	if(i & (1<<4)) printf("GDB  ");
    470          	if(i & (1<<3)) printf("WAG  ");
    471          	if(i & (1<<2)) printf("WdCt  ");
    472          	if(i & (1<<1)) printf("SyncErr  ");
    473          	if(i & (1<<0)) printf("InvWd  ");
    474          	if(i & (1<<10)) printf("FmtErr  ");
    475          	if(i & (1<<7)) printf("MSSet  ");
    476          	printf("\n\n\r");
    477          
    478          	// j = Condition Code Register value
    479          	printf("Condition Code Register: 0x%.2X%.2X\n\r", (char)(j>>8), (char)j);
    480          	if(j==0x0000) printf("BC Stopped: No Condition Codes or Gen Purpose Flags Are Set.");
    481          	else if(j==0x8000) printf("BC Running: No Condition Codes or Gen Purpose Flags Are Set.");
    482          	else if(j & (1<<15)) printf("BC Is Running.\n\r");
    483          	else printf("BC Not Running.\n\r");
    484          	if(j & (1<<14)) printf("2Retries  ");
    485          	if(j & (1<<13)) printf("1Retry  ");
    486          	if(j & (1<<12)) printf("BadMsg  ");
    487          	if(j & (1<<10)) printf("GdDataBlk  ");
    488          	if(j & (1<<9)) printf("FmtErr  ");
    489          	if(j & (1<<8)) printf("NoResp  ");
    490          	if(j & (1<<7)) printf("GPF7  ");
    491          	if(j & (1<<6)) printf("GPF6  ");
    492          	if(j & (1<<5)) printf("GPF5  ");
    493          	if(j & (1<<4)) printf("GPF4  ");
    494          	if(j & (1<<3)) printf("GPF3  ");
    495          	if(j & (1<<2)) printf("GPF2  ");
    496          	if(j & (1<<1)) printf("LT-GPF1  ");
    497          	if(j & (1<<0)) printf("EQ-GPF0  ");
    498          	if(j & (1<<11)) printf("MSSet  ");
    499          	printf("\n\n\r");
    500          
    501          	// if not a mode command, read data block then display it
    502          	if(!(mtype & 4)) {
    503          
    504          	    // rule out tx command with no response 
    505          	    if(tx & nr & !rtrt) printf("No RT response, no received data\n\n\r");
    506          
    507          	    else {
    508          	        // store data words as array 
    509          	        addr = mcsb[2];
    510          ///			#if (HOST_BUS_INTERFACE)
    511          			for (i=0; i<wordcount; i++,addr++) {
    512          				data[i] = *((unsigned int *)(0x60000000 + (addr<<1)));
    513                                  }
    514           /*                       
    515          			#else // (HOST_SPI_INTERFACE)
    516          			Write_6131LowReg(MAP_1, addr, 1);
    517          			for (i=0; i<wordcount; i++) {
    518          				data[i] = Read_6131_1word(1);
    519          			}
    520          			#endif
    521          	*/
    522                                  
    523          	        // print the Data Buffer start address 
    524          	        printf("Data Addr: 0x%.2X%.2X,      ",(char)(j>>8),(char)j);
    525          	///		#if (HOST_BUS_INTERFACE)
    526          			j = mcsb[2] << 1;
    527          			printf("Bus Addr: 0x6000%.2X%.2X\n\rData:",(char)(j>>8),(char)j);
    528          	///		#endif
    529          			printf("\n\r");
    530          
    531          	        // print data words, 8 words per line 
    532          	        for(i=0; (i<8)&&(i<wordcount); i++) {
    533          			j = data[i];
    534          			printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
    535                          }
    536          	        printf("\n\r");
    537          	        if(wordcount>7) {
    538          	    	    for(i=8; (i<16)&&(i<wordcount); i++) {
    539          					j = data[i];
    540          					printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
    541                          }
    542          				printf("\n\r");
    543                      }
    544          	        if(wordcount>15) {
    545          	    	    for(i=16; (i<24)&&(i<wordcount); i++) {
    546          					j = data[i];
    547          					printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
    548                          }
    549          				printf("\n\r");
    550                      }
    551          	        if(wordcount>23) {
    552          				for(i=24; (i<32)&&(i<wordcount); i++) {
    553          					j = data[i];
    554          	                printf("0x%.2X%.2X ",(char)(j>>8),(char)j);
    555                          }
    556          				printf("\n\r");
    557                      }
    558                  }	// end else "store data words"
    559              }	// end "not a mode command"
    560          
    561          	printf("\n\r");
    562          	print_line();
    563          	print_menuprompt();
    564          
    565          }	// end bc_last_msg_console()
    566          #endif //(BC_ena) 
    567          
    568          
    569          
    570          #if (BC_ena) 
    571          //--------------------------------------------------------------
    572          //  this function lists the BC Config reg 0x0032
    573          //	to the console via UART
    574          //--------------------------------------------------------------
    575          void list_bc_config (void) {
    576          
    577          	unsigned short int i, j;
    578          
    579          	///#if (HOST_BUS_INTERFACE)
    580          		i = pH6130->BC_CONFIG_REG;
    581                          /*
    582          	#else // (HOST_SPI_INTERFACE)
    583          		Write_6131LowReg(MAP_1, BC_CONFIG_REG, 1);
    584          		i = Read_6131_1word(1);
    585          	#endif
    586          	*/
    587                          
    588          	// formfeed 
    589          	putchar(12); 	
    590          	printf("\n\rBC Configuration Register: 0x%.2X%.2X\n\r",(char)(i>>8),(char)i);
    591          	print_line();
    592          	
    593          	j = (i & 0xC000) >> 14;
    594          	if(j == 1) printf("  20");
    595          	else if(j == 2) printf("  58");
    596          	else if(j == 3) printf(" 138");
    597          	else printf("  15");
    598          	printf("us Timeout (bus dead time)   ");
    599          
    600          	if(i & (1<<13)) printf("Check Control Word Format Bits");
    601          	else printf("Don't Check Control Word Format Bits");
    602          	printf("\n\n\r");
    603          
    604          	if(i & (1<<11)) {
    605          		j = (i & (3<<9)) >> 9;
    606          		if(j==0) printf(" 2 Retries, Same Bus, Same Bus   "); 
    607          		else if(j==2) printf("  2 Retries, Alt Bus, Same Bus   "); 
    608          		else if(j==1) printf("  2 Retries, Same Bus, Alt Bus   "); 
    609          		else printf("   2 Retries, Alt Bus, Alt Bus   "); 
    610          	}
    611          	else if(i & (1<<12)) {
    612          		if(i & (1<<10)) printf("  1 Retry if Msg Fail, Alt Bus   ");
    613          		else printf(" 1 Retry if Msg Fail, Same Bus   ");
    614          	}
    615          	else printf("    No Retries for Msg Failure   ");
    616          
    617          	if(i & (1<<8)) printf("Retry if RT status bit high");
    618          	else printf("No Retry if RT status bit high");
    619          	printf("\n\n\r");
    620          
    621          	if(i & (1<<7)) printf(    " RT status ME w/o data = Valid   ");
    622          	else printf(" RT status ME w/o data = Inval   ");
    623          	if(i & (1<<6)) printf("RT status BSY w/o data = Valid");
    624          	else printf("RT status BSY w/o data = Inval");
    625          	printf("\n\n\r");
    626          
    627          	if(i & (1<<5)) printf("            Msg Gap Timer = On   ");
    628          	else printf("           Msg Gap Timer = Off   ");
    629          	if(i & (1<<4)) printf("Watchdog Frame Timer = On");
    630          	else printf("Watchdog Frame Timer = Off");
    631          	printf("\n\n\r");
    632          
    633          	if(i & (1<<3)) printf("MC17 send Time Tag low 16 bits   ");
    634          	else printf("MC17 send data in msg data blk   ");
    635          	if(i & (1<<2)) printf("MC17 data word always even");
    636          	else printf("MC17 data may be even or odd");
    637          	printf("\n\n\r");
    638          
    639          	if(i & (1<<1)) printf("  Enable 4us Minimum Gap Check   ");
    640          	else printf("   No 4us Minimum Gap Checking   ");
    641          	if(i & (1<<0)) printf("BCR Mask Enabled, BCRME = 1");
    642          	else printf("BCR Mask Disabled, BCRME = 0");
    643          	printf("\n\n\r");
    644          
    645          /// #if (HOST_BUS_INTERFACE)
    646          		i = pH6130->TTAG_CONFIG_REG;
    647                          /*
    648          	#else // (HOST_SPI_INTERFACE)
    649          		Write_6131LowReg(MAP_1, TTAG_CONFIG_REG, 1);
    650          		i = Read_6131_1word(1);
    651          	#endif
    652          */
    653                          
    654          	printf("Timetag Config Register 0x%.2X%.2X  ",(char)(i>>8),(char)i);
    655          
    656          	if(i & (1<<3)) printf("32-bit timebase with ");
    657          	else printf("16-bit timebase with ");
    658          
    659          	i &= 7;
    660          	if(i == 0) printf("clock disabled! ");
    661          	else if(i == 1) printf("ext clock ");
    662          	else if(i == 2) printf("2us clock ");
    663          	else if(i == 3) printf("4us clock ");
    664          	else if(i == 4) printf("8us clock ");
    665          	else if(i == 5) printf("16us clock ");
    666          	else if(i == 6) printf("32us clock ");
    667          	else printf("64us clock ");
    668          	printf("\n\n\r");
    669          
    670          	print_line();
    671            	print_menuprompt();
    672          
    673          }	// end list_bc_config()
    674          #endif //(BC_ena) 
    675          
    676          
    677          #if (BC_ena) 
    678          //-------------------------------------------------------------------------
    679          //    brief	this function lists the BC's Cond Code / GP Flag reg
    680          //		to the console via UART
    681          //-------------------------------------------------------------------------
    682          void list_bc_ccgpf_reg(void) {
    683          
    684          	unsigned short int i;
    685          
    686          ///	#if (HOST_BUS_INTERFACE)
    687          		i = pH6130->BC_CCODE_AND_GPF_REG;
    688           /*               
    689          	#else // (HOST_SPI_INTERFACE)
    690          		Write_6131LowReg(MAP_1, BC_CCODE_AND_GPF_REG, 1);
    691          		i = Read_6131_1word(1);
    692          	#endif
    693          */
    694          	// formfeed
    695          	putchar(12); 	
    696          	printf("\n\rBC Condition Code & GP Flag Register: 0x%.2X%.2X\n\r", (char)(i>>8),(char)i);
    697          	print_line();
    698          
    699          	if(i==0x0000) printf("BC Stopped: No Condition Codes or Gen Purpose Flags Are Set.\n\r");
    700          	else if(i==0x8000) printf("BC Running: No Condition Codes or Gen Purpose Flags Are Set.\n\r");
    701          	else if(i & (1<<15)) printf("BC Is Running.\n\n\r");
    702          	else printf("BC Not Running.\n\n\r");
    703          	if(i & (1<<14)) printf("2Retries  ");
    704          	if(i & (1<<13)) printf("1Retry  ");
    705          	if(i & (1<<12)) printf("BadMsg  ");
    706          	if(i & (1<<10)) printf("GdDataBlk  ");
    707          	if(i & (1<<9)) printf("FmtErr  ");
    708          	if(i & (1<<8)) printf("NoResp  ");
    709          	if(i & (1<<7)) printf("GPF7  ");
    710          	if(i & (1<<6)) printf("GPF6  ");
    711          	if(i & (1<<5)) printf("GPF5  ");
    712          	if(i & (1<<4)) printf("GPF4  ");
    713          	if(i & (1<<3)) printf("GPF3  ");
    714          	if(i & (1<<2)) printf("GPF2  ");
    715          	if(i & (1<<1)) printf("LT-GPF1  ");
    716          	if(i & (1<<0)) printf("EQ-GPF0  ");
    717          	if(i & (1<<11)) printf("MSSet  ");
    718          	printf("\n\r");
    719                  
    720          	print_line();
    721             	print_menuprompt();
    722          
    723          }
    724          #endif //(BC_ena) 
    725          
    726          
    727          
    728          
    729          #if (BC_ena) 
    730          //-------------------------------------------------------------
    731          //      this function lists bus controller interrupt 
    732          //	configuration to the console via UART. if there
    733          //	are pending BC interrupts, these too are displayed.
    734          //	Function returns the value read from the BC pending
    735          //	interrupt register, since reading the reg clears it.
    736          //-------------------------------------------------------------
    737          unsigned short int list_bc_ints_console (void) {
    738          
    739          	unsigned short int i, j, k=0;
    740          
    741          	// formfeed 
    742          	putchar(12); 	
    743          
    744          	#if(!BC_ena) 
    745          	printf("Bus Controller Is Not Enabled!\n\n\r"); 
    746          	#endif
    747          
    748          	///#if (HOST_BUS_INTERFACE)
    749          		i = pH6130->BC_INT_ENABLE_REG;
    750          		j = pH6130->BC_INT_OUTPUT_ENABLE_REG;
    751          		k = pH6130->BC_PENDING_INT_REG;
    752                          /*
    753          	#else // (HOST_SPI_INTERFACE)
    754          		Write_6131LowReg(MAP_1, BC_INT_ENABLE_REG, 1);
    755          		i = Read_6131_1word(1);
    756          		Write_6131LowReg(MAP_1, BC_INT_OUTPUT_ENABLE_REG, 1);
    757          		j = Read_6131_1word(1);
    758          		Write_6131LowReg(MAP_1, BC_PENDING_INT_REG, 1);
    759          		k = Read_6131_1word(1);
    760          	#endif
    761          	*/
    762                          
    763          	printf("\n\r Bus Controller Ints   Enabled?   Pin Output?   Pending?\n\r");
    764          	print_line();
    765          
    766          	printf("BC Frame Timer Expired");
    767          	if(!(i & (1<<15))) {	
    768          		// int disabled 
    769          		print_null();
    770          	}
    771          	else {
    772          		// int enabled 
    773          		print_sp1sp();
    774          		// pin output? 
    775          		if(j & (1<<15)) print_b1sp();
    776          		else print_b0sp(); 
    777          		// pending? 
    778          		if(k & (1<<15)) printf("1\n\r");
    779          		else printf("0\n\r"); 
    780          	}
    781          
    782          	printf("Selected Msg Int,EOM=1");
    783          	if(!(i & (1<<14))) {	
    784          		// int disabled 
    785          		print_null();
    786          	}
    787          	else {
    788          		// int enabled 
    789          		print_sp1sp();
    790          		// pin output? 
    791          		if(j & (1<<14)) print_b1sp();
    792          		else print_b0sp(); 
    793          		// pending? 
    794          		if(k & (1<<14)) printf("1\n\r");
    795          		else printf("0\n\r"); 
    796          	}
    797          
    798          	printf("GenPurp Queue Rollover");
    799          	if(!(i & (1<<13))) {	
    800          		// int disabled 
    801          		print_null();
    802          	}
    803          	else {
    804          		// int enabled 
    805          		print_sp1sp();
    806          		// pin output? 
    807          		if(j & (1<<13)) print_b1sp();
    808          		else print_b0sp(); 
    809          		// pending? 
    810          		if(k & (1<<13)) printf("1\n\r");
    811          		else printf("0\n\r"); 
    812          	}
    813          
    814          	printf("   Message Was Retried");
    815          	if(!(i & (1<<12))) {	
    816          		// int disabled 
    817          		print_null();
    818          	}
    819          	else {
    820          		// int enabled 
    821          		print_sp1sp();
    822          		// pin output? 
    823          		if(j & (1<<12)) print_b1sp();
    824          		else print_b0sp(); 
    825          		// pending? 
    826          		if(k & (1<<12)) printf("1\n\r");
    827          		else printf("0\n\r"); 
    828          	}
    829          
    830          	printf("Call Stack Pointer Err");
    831          	if(!(i & (1<<11))) {	
    832          		// int disabled 
    833          		print_null();
    834          	}
    835          	else {
    836          		// int enabled 
    837          		print_sp1sp();
    838          		// pin output? 
    839          		if(j & (1<<11)) print_b1sp();
    840          		else print_b0sp(); 
    841          		// pending? 
    842          		if(k & (1<<11)) printf("1\n\r");
    843          		else printf("0\n\r"); 
    844          	}
    845          
    846          	printf("  Illegal Op Code Trap");
    847          	if(!(i & (1<<10))) {	
    848          		// int disabled 
    849          		print_null();
    850          	}
    851          	else {
    852          		// int enabled 
    853          		print_sp1sp();
    854          		// pin output? 
    855          		if(j & (1<<10)) print_b1sp();
    856          		else print_b0sp(); 
    857          		// pending? 
    858          		if(k & (1<<10)) printf("1\n\r");
    859          		else printf("0\n\r"); 
    860          	}
    861          
    862          	printf("Unexpected RT Stat Bit");
    863          	if(!(i & (1<<9))) {	
    864          		// int disabled 
    865          		print_null();
    866          	}
    867          	else {
    868          		// int enabled 
    869          		print_sp1sp();
    870          		// pin output? 
    871          		if(j & (1<<9)) print_b1sp();
    872          		else print_b0sp(); 
    873          		// pending? 
    874          		if(k & (1<<9)) printf("1\n\r");
    875          		else printf("0\n\r"); 
    876          	}
    877          
    878          	printf("User-Def Int Req Bit 3");
    879          	if(!(i & (1<<8))) {	
    880          		// int disabled 
    881          		print_null();
    882          	}
    883          	else {
    884          		// int enabled 
    885          		print_sp1sp();
    886          		// pin output? 
    887          		if(j & (1<<8)) print_b1sp();
    888          		else print_b0sp(); 
    889          		// pending? 
    890          		if(k & (1<<8)) printf("1\n\r");
    891          		else printf("0\n\r"); 
    892          	}
    893          
    894          	printf("User-Def Int Req Bit 2");
    895          	if(!(i & (1<<7))) {	
    896          		// int disabled 
    897          		print_null();
    898          	}
    899          	else {
    900          		// int enabled 
    901          		print_sp1sp();
    902          		// pin output? 
    903          		if(j & (1<<7)) print_b1sp();
    904          		else print_b0sp(); 
    905          		// pending? 
    906          		if(k & (1<<7)) printf("1\n\r");
    907          		else printf("0\n\r"); 
    908          	}
    909          
    910          	printf("User-Def Int Req Bit 1");
    911          	if(!(i & (1<<6))) {	
    912          		// int disabled 
    913          		print_null();
    914          	}
    915          	else {
    916          		// int enabled 
    917          		print_sp1sp();
    918          		// pin output? 
    919          		if(j & (1<<6)) print_b1sp();
    920          		else print_b0sp(); 
    921          		// pending? 
    922          		if(k & (1<<6)) printf("1\n\r");
    923          		else printf("0\n\r"); 
    924          	}
    925          
    926          	printf("User-Def Int Req Bit 0");
    927          	if(!(i & (1<<5))) {	
    928          		// int disabled 
    929          		print_null();
    930          	}
    931          	else {
    932          		// int enabled 
    933          		print_sp1sp();
    934          		// pin output? 
    935          		if(j & (1<<5)) print_b1sp();
    936          		else print_b0sp(); 
    937          		// pending? 
    938          		if(k & (1<<5)) printf("1\n\r");
    939          		else printf("0\n\r"); 
    940          	}
    941          
    942          	printf("RT Status is Msg Error");
    943          	if(!(i & (1<<4))) {	
    944          		// int disabled 
    945          		print_null();
    946          	}
    947          	else {
    948          		// int enabled 
    949          		print_sp1sp();
    950          		// pin output? 
    951          		if(j & (1<<4)) print_b1sp();
    952          		else print_b0sp(); 
    953          		// pending? 
    954          		if(k & (1<<4)) printf("1\n\r");
    955          		else printf("0\n\r"); 
    956          	}
    957          
    958          	printf("     BC End-of-Message");
    959          	if(!(i & (1<<3))) {	
    960          		// int disabled 
    961          		print_null();
    962          	}
    963          	else {
    964          		// int enabled 
    965          		print_sp1sp();
    966          		// pin output? 
    967          		if(j & (1<<3)) print_b1sp();
    968          		else print_b0sp(); 
    969          		// pending? 
    970          		if(k & (1<<3)) printf("1\n\r");
    971          		else printf("0\n\r"); 
    972          	}
    973          
    974          	printf("     Reserved Bits 2-0");
    975          	print_dddn();
    976          	print_line();
    977          	printf("Note: Reading the BC Pending Interrupt Register clears it!\n\r");
    978          	print_menuprompt();
    979          
    980          	// return value read from the BCW Pending Interrupt Register, now cleared 
    981          	return k;
    982          
    983          }	// end list_bc_ints_console()
    984          
    985          
    986          #endif //(BC_ena) 
    987          
    988          #if(SMT_ena || IMT_ena)
    989          
    990          //-----------------------------------------------------------------------
    991          //    this function lists the MT Config reg 0x0029
    992          //    to the console via UART
    993          //-----------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    994          void list_mt_config (void) {
   \                     list_mt_config:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    995          
    996          	unsigned short int i, j;
    997          	char smt = 0;
   \   00000002   0026               MOVS     R6,#+0
    998          
    999          ///	#if (HOST_BUS_INTERFACE)
   1000          		i = pH6130->MT_CONFIG_REG;
   \   00000004   ........           LDR.W    R0,??DataTable3_20
   \   00000008   0068               LDR      R0,[R0, #+0]
   \   0000000A   B0F85200           LDRH     R0,[R0, #+82]
   \   0000000E   0400               MOVS     R4,R0
   1001          /*
   1002                  #else // (HOST_SPI_INTERFACE)
   1003          		Write_6131LowReg(MAP_1, MT_CONFIG_REG, 1);
   1004          		i = Read_6131_1word(1);
   1005          	#endif
   1006          */
   1007                          
   1008          	// IRIG monitor (imt) or Simple monitor (smt)? 
   1009          	if(i & 1) smt = 1;
   \   00000010   E007               LSLS     R0,R4,#+31
   \   00000012   01D5               BPL.N    ??list_mt_config_0
   \   00000014   0120               MOVS     R0,#+1
   \   00000016   0600               MOVS     R6,R0
   1010          
   1011          	// formfeed 
   1012          	putchar(12); 	
   \                     ??list_mt_config_0:
   \   00000018   0C20               MOVS     R0,#+12
   \   0000001A   ........           BL       putchar
   1013          	if(smt) printf("\n\rS");
   \   0000001E   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000020   002E               CMP      R6,#+0
   \   00000022   03D0               BEQ.N    ??list_mt_config_1
   \   00000024   ....               ADR.N    R0,??DataTable2_1  ;; "\n\rS"
   \   00000026   ........           BL       printf
   \   0000002A   02E0               B.N      ??list_mt_config_2
   1014          	else    printf("\n\rI");
   \                     ??list_mt_config_1:
   \   0000002C   ....               ADR.N    R0,??DataTable2_2  ;; "\n\rI"
   \   0000002E   ........           BL       printf
   1015          	printf("MT monitor mode selected.\n\n\r");
   \                     ??list_mt_config_2:
   \   00000032   ........           LDR.W    R0,??DataTable3_22
   \   00000036   ........           BL       printf
   1016          
   1017          	printf("MT Configuration Register: 0x%.2X%.2X\n\r", (char)(i>>8),(char)i);
   \   0000003A   2200               MOVS     R2,R4
   \   0000003C   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000003E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000040   210A               LSRS     R1,R4,#+8
   \   00000042   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000044   ........           LDR.W    R0,??DataTable3_23
   \   00000048   ........           BL       printf
   1018          	print_line();
   \   0000004C   ........           BL       print_line
   1019          
   1020          	j = (i & 0xC000) >> 14;
   \   00000050   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000052   A00B               LSRS     R0,R4,#+14
   \   00000054   0500               MOVS     R5,R0
   1021          	if(j == 1) printf("  20us Timeout");
   \   00000056   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000058   012D               CMP      R5,#+1
   \   0000005A   04D1               BNE.N    ??list_mt_config_3
   \   0000005C   ........           LDR.W    R0,??DataTable3_24
   \   00000060   ........           BL       printf
   \   00000064   13E0               B.N      ??list_mt_config_4
   1022          	else if(j == 2) printf("  58us Timeout");
   \                     ??list_mt_config_3:
   \   00000066   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000068   022D               CMP      R5,#+2
   \   0000006A   04D1               BNE.N    ??list_mt_config_5
   \   0000006C   ........           LDR.W    R0,??DataTable3_25
   \   00000070   ........           BL       printf
   \   00000074   0BE0               B.N      ??list_mt_config_4
   1023          	else if(j == 3) printf(" 138us Timeout");
   \                     ??list_mt_config_5:
   \   00000076   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000078   032D               CMP      R5,#+3
   \   0000007A   04D1               BNE.N    ??list_mt_config_6
   \   0000007C   ........           LDR.W    R0,??DataTable3_26
   \   00000080   ........           BL       printf
   \   00000084   03E0               B.N      ??list_mt_config_4
   1024          	else printf("  15us Timeout");
   \                     ??list_mt_config_6:
   \   00000086   ........           LDR.W    R0,??DataTable3_27
   \   0000008A   ........           BL       printf
   1025          	printf(" (bus dead time)   ");
   \                     ??list_mt_config_4:
   \   0000008E   ........           LDR.W    R0,??DataTable3_28
   \   00000092   ........           BL       printf
   1026          	
   1027          	if(i & (1<<12)) printf("2us Gap Check ON");
   \   00000096   E004               LSLS     R0,R4,#+19
   \   00000098   04D5               BPL.N    ??list_mt_config_7
   \   0000009A   ........           LDR.W    R0,??DataTable3_29
   \   0000009E   ........           BL       printf
   \   000000A2   03E0               B.N      ??list_mt_config_8
   1028          	else printf("2us Gap Check OFF");
   \                     ??list_mt_config_7:
   \   000000A4   ........           LDR.W    R0,??DataTable3_30
   \   000000A8   ........           BL       printf
   1029          	printf("\n\n\r");
   \                     ??list_mt_config_8:
   \   000000AC   ....               ADR.N    R0,??DataTable2_3  ;; "\n\n\r"
   \   000000AE   ........           BL       printf
   1030          
   1031          	j = (i & 0x0300) >> 8;
   \   000000B2   C4F30120           UBFX     R0,R4,#+8,#+2
   \   000000B6   0500               MOVS     R5,R0
   1032          	if(j==0) printf("  Time Tag last word, last bit   "); 
   \   000000B8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000BA   002D               CMP      R5,#+0
   \   000000BC   04D1               BNE.N    ??list_mt_config_9
   \   000000BE   ........           LDR.W    R0,??DataTable3_32
   \   000000C2   ........           BL       printf
   \   000000C6   13E0               B.N      ??list_mt_config_10
   1033          	else if(j==1) printf("Time Tag first word, first bit   "); 
   \                     ??list_mt_config_9:
   \   000000C8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000CA   012D               CMP      R5,#+1
   \   000000CC   04D1               BNE.N    ??list_mt_config_11
   \   000000CE   ........           LDR.W    R0,??DataTable3_33
   \   000000D2   ........           BL       printf
   \   000000D6   0BE0               B.N      ??list_mt_config_10
   1034          	else if(j==2) printf(" Time Tag first word, last bit   "); 
   \                     ??list_mt_config_11:
   \   000000D8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000DA   022D               CMP      R5,#+2
   \   000000DC   04D1               BNE.N    ??list_mt_config_12
   \   000000DE   ........           LDR.W    R0,??DataTable3_34
   \   000000E2   ........           BL       printf
   \   000000E6   03E0               B.N      ??list_mt_config_10
   1035          	else printf("           Time Tagging is OFF   "); 
   \                     ??list_mt_config_12:
   \   000000E8   ........           LDR.W    R0,??DataTable3_35
   \   000000EC   ........           BL       printf
   1036          
   1037          	j = (i & 0x0060) >> 5;
   \                     ??list_mt_config_10:
   \   000000F0   C4F34110           UBFX     R0,R4,#+5,#+2
   \   000000F4   0500               MOVS     R5,R0
   1038          	printf("Start Rec: First Cmd ");
   \   000000F6   ........           LDR.W    R0,??DataTable3_36
   \   000000FA   ........           BL       printf
   1039          	if(j==0) printf("Word");
   \   000000FE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000100   002D               CMP      R5,#+0
   \   00000102   04D1               BNE.N    ??list_mt_config_13
   \   00000104   ........           LDR.W    R0,??DataTable3_37
   \   00000108   ........           BL       printf
   \   0000010C   13E0               B.N      ??list_mt_config_14
   1040          	else if(j==1) printf("or Data Word");
   \                     ??list_mt_config_13:
   \   0000010E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000110   012D               CMP      R5,#+1
   \   00000112   04D1               BNE.N    ??list_mt_config_15
   \   00000114   ........           LDR.W    R0,??DataTable3_38
   \   00000118   ........           BL       printf
   \   0000011C   0BE0               B.N      ??list_mt_config_14
   1041          	else if(j==2) printf("Sync + 2 bits");
   \                     ??list_mt_config_15:
   \   0000011E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000120   022D               CMP      R5,#+2
   \   00000122   04D1               BNE.N    ??list_mt_config_16
   \   00000124   ........           LDR.W    R0,??DataTable3_39
   \   00000128   ........           BL       printf
   \   0000012C   03E0               B.N      ??list_mt_config_14
   1042          	else printf("or Data Sync + 2 bits");
   \                     ??list_mt_config_16:
   \   0000012E   ........           LDR.W    R0,??DataTable3_40
   \   00000132   ........           BL       printf
   1043          	printf("\n\n\r");
   \                     ??list_mt_config_14:
   \   00000136   ....               ADR.N    R0,??DataTable2_3  ;; "\n\n\r"
   \   00000138   ........           BL       printf
   1044          
   1045          	printf("   Invalid Data Word");	
   \   0000013C   ........           LDR.W    R0,??DataTable3_41
   \   00000140   ........           BL       printf
   1046          	if(i & (1<<4)) printf("s recorded   ");
   \   00000144   E006               LSLS     R0,R4,#+27
   \   00000146   04D5               BPL.N    ??list_mt_config_17
   \   00000148   ........           LDR.W    R0,??DataTable3_42
   \   0000014C   ........           BL       printf
   \   00000150   03E0               B.N      ??list_mt_config_18
   1047          	else printf          (" ends mssg   ");
   \                     ??list_mt_config_17:
   \   00000152   ........           LDR.W    R0,??DataTable3_43
   \   00000156   ........           BL       printf
   1048          
   1049          	printf("Extended Status Flags ");
   \                     ??list_mt_config_18:
   \   0000015A   ........           LDR.W    R0,??DataTable3_44
   \   0000015E   ........           BL       printf
   1050          	if(i & (1<<2)) printf("ON");
   \   00000162   6007               LSLS     R0,R4,#+29
   \   00000164   03D5               BPL.N    ??list_mt_config_19
   \   00000166   ....               ADR.N    R0,??DataTable2_4  ;; 0x4F, 0x4E, 0x00, 0x00
   \   00000168   ........           BL       printf
   \   0000016C   02E0               B.N      ??list_mt_config_20
   1051          	else printf("OFF");
   \                     ??list_mt_config_19:
   \   0000016E   ....               ADR.N    R0,??DataTable2_5  ;; "OFF"
   \   00000170   ........           BL       printf
   1052          	printf("\n\n\r");
   \                     ??list_mt_config_20:
   \   00000174   ....               ADR.N    R0,??DataTable2_3  ;; "\n\n\r"
   \   00000176   ........           BL       printf
   1053          
   1054          	if(smt) {
   \   0000017A   F6B2               UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000017C   002E               CMP      R6,#+0
   \   0000017E   11D0               BEQ.N    ??list_mt_config_21
   1055          		printf(" SMT using ");
   \   00000180   ........           LDR.W    R0,??DataTable3_45
   \   00000184   ........           BL       printf
   1056          		if(i & 2) printf("48");
   \   00000188   A007               LSLS     R0,R4,#+30
   \   0000018A   03D5               BPL.N    ??list_mt_config_22
   \   0000018C   ....               ADR.N    R0,??DataTable2_6  ;; 0x34, 0x38, 0x00, 0x00
   \   0000018E   ........           BL       printf
   \   00000192   02E0               B.N      ??list_mt_config_23
   1057          		else printf("16");
   \                     ??list_mt_config_22:
   \   00000194   ....               ADR.N    R0,??DataTable2_7  ;; 0x31, 0x36, 0x00, 0x00
   \   00000196   ........           BL       printf
   1058          		printf("-bit Time Tag ");
   \                     ??list_mt_config_23:
   \   0000019A   ........           LDR.W    R0,??DataTable3_46
   \   0000019E   ........           BL       printf
   \   000001A2   50E0               B.N      ??list_mt_config_24
   1059          	}
   1060          	else {  // imt
   1061          		printf("IMT Pkt Timer starts ");
   \                     ??list_mt_config_21:
   \   000001A4   ........           LDR.W    R0,??DataTable3_47
   \   000001A8   ........           BL       printf
   1062          		if(i & (1<<7)) printf("at PktEnd   ");
   \   000001AC   2006               LSLS     R0,R4,#+24
   \   000001AE   04D5               BPL.N    ??list_mt_config_25
   \   000001B0   ........           LDR.W    R0,??DataTable3_48
   \   000001B4   ........           BL       printf
   \   000001B8   03E0               B.N      ??list_mt_config_26
   1063          		else printf("at Cmd Wd   ");
   \                     ??list_mt_config_25:
   \   000001BA   ........           LDR.W    R0,??DataTable3_49
   \   000001BE   ........           BL       printf
   1064          
   1065          		j = (i & 0x0C00) >> 10;
   \                     ??list_mt_config_26:
   \   000001C2   C4F38120           UBFX     R0,R4,#+10,#+2
   \   000001C6   0500               MOVS     R5,R0
   1066          		printf("IMT Hdr Data Type IRIG-106-");
   \   000001C8   ........           LDR.W    R0,??DataTable3_50
   \   000001CC   ........           BL       printf
   1067          		if(j==0) printf("09  "); 
   \   000001D0   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001D2   002D               CMP      R5,#+0
   \   000001D4   04D1               BNE.N    ??list_mt_config_27
   \   000001D6   ........           LDR.W    R0,??DataTable3_51
   \   000001DA   ........           BL       printf
   \   000001DE   13E0               B.N      ??list_mt_config_28
   1068          		else if(j==1) printf("04  "); 
   \                     ??list_mt_config_27:
   \   000001E0   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001E2   012D               CMP      R5,#+1
   \   000001E4   04D1               BNE.N    ??list_mt_config_29
   \   000001E6   ........           LDR.W    R0,??DataTable3_52
   \   000001EA   ........           BL       printf
   \   000001EE   0BE0               B.N      ??list_mt_config_28
   1069          		else if(j==2) printf("05  "); 
   \                     ??list_mt_config_29:
   \   000001F0   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000001F2   022D               CMP      R5,#+2
   \   000001F4   04D1               BNE.N    ??list_mt_config_30
   \   000001F6   ........           LDR.W    R0,??DataTable3_53
   \   000001FA   ........           BL       printf
   \   000001FE   03E0               B.N      ??list_mt_config_28
   1070          		else printf("07  "); 
   \                     ??list_mt_config_30:
   \   00000200   ........           LDR.W    R0,??DataTable3_54
   \   00000204   ........           BL       printf
   1071          		printf("\n\n\r");
   \                     ??list_mt_config_28:
   \   00000208   ....               ADR.N    R0,??DataTable2_3  ;; "\n\n\r"
   \   0000020A   ........           BL       printf
   1072          						 
   1073          		printf (" IMT Auto Header & Trailer ");
   \   0000020E   ........           LDR.W    R0,??DataTable3_55
   \   00000212   ........           BL       printf
   1074          		if(i & 8) printf ("OFF   ");
   \   00000216   2007               LSLS     R0,R4,#+28
   \   00000218   04D5               BPL.N    ??list_mt_config_31
   \   0000021A   ........           LDR.W    R0,??DataTable3_56
   \   0000021E   ........           BL       printf
   \   00000222   03E0               B.N      ??list_mt_config_32
   1075          		else printf      (" ON   ");
   \                     ??list_mt_config_31:
   \   00000224   ........           LDR.W    R0,??DataTable3_57
   \   00000228   ........           BL       printf
   1076          	
   1077          		printf ("IMT Data Packet Checksum ");
   \                     ??list_mt_config_32:
   \   0000022C   ........           LDR.W    R0,??DataTable3_58
   \   00000230   ........           BL       printf
   1078          		if(i & 2) printf ("ON");
   \   00000234   A007               LSLS     R0,R4,#+30
   \   00000236   03D5               BPL.N    ??list_mt_config_33
   \   00000238   ....               ADR.N    R0,??DataTable2_4  ;; 0x4F, 0x4E, 0x00, 0x00
   \   0000023A   ........           BL       printf
   \   0000023E   02E0               B.N      ??list_mt_config_24
   1079          		else printf("OFF"); 
   \                     ??list_mt_config_33:
   \   00000240   ....               ADR.N    R0,??DataTable2_5  ;; "OFF"
   \   00000242   ........           BL       printf
   1080          	} 
   1081          	printf("\n\n\r");
   \                     ??list_mt_config_24:
   \   00000246   ....               ADR.N    R0,??DataTable2_3  ;; "\n\n\r"
   \   00000248   ........           BL       printf
   1082          	print_line();
   \   0000024C   ........           BL       print_line
   1083          	print_menuprompt();
   \   00000250   ........           BL       print_menuprompt
   1084          
   1085          }	// end list_mt_config()
   \   00000254   70BD               POP      {R4-R6,PC}       ;; return
   1086          
   1087          
   1088          //-----------------------------------------------------------------------
   1089          //    this function lists the MT msg results, last message
   1090          //    to the console via UART
   1091          //-----------------------------------------------------------------------
   1092          

   \                                 In section .text, align 2, keep-with-next
   1093          void mt_last_msg_console(void) {
   \                     mt_last_msg_console:
   \   00000000   2DE9F04F           PUSH     {R4-R11,LR}
   \   00000004   83B0               SUB      SP,SP,#+12
   1094          
   1095          ///        #if (HOST_BUS_INTERFACE)    
   1096                  extern const H6130 pH6130; // HI-6130 register struct base address    
   1097           ///       #endif
   1098          	unsigned short int h,i,j,m,addr,dbp,ndw;
   1099          	char k,bswo=3,smt=0,xmf=0,ttag16=0,rtrt=1;
   \   00000006   0320               MOVS     R0,#+3
   \   00000008   8DF80200           STRB     R0,[SP, #+2]
   \   0000000C   5FF00008           MOVS     R8,#+0
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   8DF80000           STRB     R0,[SP, #+0]
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   8DF80100           STRB     R0,[SP, #+1]
   \   0000001C   0120               MOVS     R0,#+1
   \   0000001E   8DF80300           STRB     R0,[SP, #+3]
   1100          
   1101          	// formfeed 
   1102          	putchar(12); 	
   \   00000022   0C20               MOVS     R0,#+12
   \   00000024   ........           BL       putchar
   1103          
   1104          	if(SMT_ena||IMT_ena) {
   1105          
   1106          		printf("\n\rLast Message Recorded by ");
   \   00000028   ........           LDR.W    R0,??DataTable3_59
   \   0000002C   ........           BL       printf
   1107          
   1108          		// fetch Bus Monitor config word 
   1109          	///	#if (HOST_BUS_INTERFACE)
   1110          			i = pH6130->MT_CONFIG_REG;
   \   00000030   ........           LDR.W    R0,??DataTable3_20
   \   00000034   0068               LDR      R0,[R0, #+0]
   \   00000036   B0F85200           LDRH     R0,[R0, #+82]
   \   0000003A   0400               MOVS     R4,R0
   1111           /*                       
   1112          		#else // (HOST_SPI_INTERFACE)
   1113          			Write_6131LowReg(MAP_1, MT_CONFIG_REG, 1);
   1114          			i = Read_6131_1word(1);
   1115          		#endif
   1116                                  */
   1117                                  
   1118          		// extended message status flags enabled? 
   1119          		if(i & 2) xmf = 1;
   \   0000003C   A007               LSLS     R0,R4,#+30
   \   0000003E   02D5               BPL.N    ??mt_last_msg_console_0
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   8DF80000           STRB     R0,[SP, #+0]
   1120          		// Simple monitor (smt)? 
   1121          		if(i & 1) {
   \                     ??mt_last_msg_console_0:
   \   00000046   E007               LSLS     R0,R4,#+31
   \   00000048   6ED5               BPL.N    ??mt_last_msg_console_1
   1122          			printf("SMT:    ");
   \   0000004A   ........           LDR.W    R0,??DataTable4
   \   0000004E   ........           BL       printf
   1123          			smt = 1;
   \   00000052   0120               MOVS     R0,#+1
   \   00000054   8046               MOV      R8,R0
   1124          			//--------------------------------------------------------------
   1125          ///			#if (HOST_BUS_INTERFACE)
   1126          				// for smt, msg block start addr for last msg is in reg 0x31 
   1127          				addr = pH6130->MT_LAST_MSG_STACK_ADDR_REG;
   \   00000056   ........           LDR.W    R0,??DataTable3_20
   \   0000005A   0068               LDR      R0,[R0, #+0]
   \   0000005C   B0F86200           LDRH     R0,[R0, #+98]
   \   00000060   0600               MOVS     R6,R0
   1128          				// j = address list offset 
   1129          				j = pH6130->MT_ADDR_LIST_POINTER;
   \   00000062   ........           LDR.W    R0,??DataTable3_20
   \   00000066   0068               LDR      R0,[R0, #+0]
   \   00000068   B0F85E00           LDRH     R0,[R0, #+94]
   \   0000006C   0500               MOVS     R5,R0
   1130          
   1131          				if(!(i&2)) {
   \   0000006E   A007               LSLS     R0,R4,#+30
   \   00000070   0CD4               BMI.N    ??mt_last_msg_console_2
   1132          					// smt with 16-bit ttag 
   1133          					ttag16 = 1;
   \   00000072   0120               MOVS     R0,#+1
   \   00000074   8DF80100           STRB     R0,[SP, #+1]
   1134          					// bswo = block status word offset in cmd-stack msg block 
   1135          					bswo = 0;
   \   00000078   0020               MOVS     R0,#+0
   \   0000007A   8DF80200           STRB     R0,[SP, #+2]
   1136          					// data block pointer 
   1137          					dbp = *((unsigned int *)(0x60000000 + ((addr+2)<<1)));
   \   0000007E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000080   ........           LDR.W    R0,??DataTable4_1  ;; 0x60000004
   \   00000084   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   00000088   8246               MOV      R10,R0
   \   0000008A   08E0               B.N      ??mt_last_msg_console_3
   1138          				}
   1139          				else {
   1140          					// smt with 48-bit ttag
   1141          					// bswo = block status word offset in cmd-stack msg block 
   1142          					bswo = 3;
   \                     ??mt_last_msg_console_2:
   \   0000008C   0320               MOVS     R0,#+3
   \   0000008E   8DF80200           STRB     R0,[SP, #+2]
   1143          					// data block pointer 
   1144          					dbp = *((unsigned int *)(0x60000000 + ((addr+6)<<1)));
   \   00000092   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000094   ........           LDR.W    R0,??DataTable4_2  ;; 0x6000000c
   \   00000098   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   0000009C   8246               MOV      R10,R0
   1145          				}
   1146          
   1147          				// first msg only, last block start addr = stack start addr 
   1148          				if(addr == *((unsigned int *)(0x60000000 + (j<<1)))) {
   \                     ??mt_last_msg_console_3:
   \   0000009E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000000A0   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A2   6800               LSLS     R0,R5,#+1
   \   000000A4   10F1C040           ADDS     R0,R0,#+1610612736
   \   000000A8   0068               LDR      R0,[R0, #+0]
   \   000000AA   8642               CMP      R6,R0
   \   000000AC   0CD1               BNE.N    ??mt_last_msg_console_4
   1149          					// for first msg, the number of words stored in the
   1150          					// data stack = next data store addr - stack start addr 
   1151          					ndw = *((unsigned int *)(0x60000000 + ((j+5)<<1))) \
   1152          						- *((unsigned int *)(0x60000000 + ((j+4)<<1)));
   \   000000AE   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000B0   ........           LDR.W    R0,??DataTable4_3  ;; 0x6000000a
   \   000000B4   50F81500           LDR      R0,[R0, R5, LSL #+1]
   \   000000B8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000BA   ........           LDR.W    R1,??DataTable4_4  ;; 0x60000008
   \   000000BE   51F81510           LDR      R1,[R1, R5, LSL #+1]
   \   000000C2   401A               SUBS     R0,R0,R1
   \   000000C4   8146               MOV      R9,R0
   \   000000C6   6AE0               B.N      ??mt_last_msg_console_5
   1153          				}
   1154          				else {
   1155          					h = *((unsigned int *)(0x60000000 + ((j+1)<<1)));
   \                     ??mt_last_msg_console_4:
   \   000000C8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000CA   ........           LDR.W    R0,??DataTable4_5  ;; 0x60000002
   \   000000CE   50F81500           LDR      R0,[R0, R5, LSL #+1]
   \   000000D2   ADF80400           STRH     R0,[SP, #+4]
   1156          					// h = offset for next store addr in cmd stack block:
   1157          					// examine cmd word, detect both cases for broadcast mode codes 
   1158          					// w/o data, for these, no words are stored in the data stack
   1159          					m = *((unsigned int *)(0x60000000 + ((h-1)<<1)));
   \   000000D6   BDF80400           LDRH     R0,[SP, #+4]
   \   000000DA   ........           LDR.W    R1,??DataTable4_6  ;; 0x5ffffffe
   \   000000DE   51F81000           LDR      R0,[R1, R0, LSL #+1]
   \   000000E2   8346               MOV      R11,R0
   1160          					if     (( m & 0xFFE0) >> 5 == 0x7E0) ndw = 0;
   \   000000E4   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000000E8   5FEA5B10           LSRS     R0,R11,#+5
   \   000000EC   B0F5FC6F           CMP      R0,#+2016
   \   000000F0   02D1               BNE.N    ??mt_last_msg_console_6
   \   000000F2   0020               MOVS     R0,#+0
   \   000000F4   8146               MOV      R9,R0
   \   000000F6   52E0               B.N      ??mt_last_msg_console_5
   1161          					else if(( m & 0xFFE0) >> 5 == 0x7FF) ndw = 0;
   \                     ??mt_last_msg_console_6:
   \   000000F8   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000000FC   5FEA5B10           LSRS     R0,R11,#+5
   \   00000100   40F2FF71           MOVW     R1,#+2047
   \   00000104   8842               CMP      R0,R1
   \   00000106   02D1               BNE.N    ??mt_last_msg_console_7
   \   00000108   0020               MOVS     R0,#+0
   \   0000010A   8146               MOV      R9,R0
   \   0000010C   47E0               B.N      ??mt_last_msg_console_5
   1162          					else {
   1163          						// at least 1 word stored in data stack for last msg 
   1164          						// use next d-stack store address to determine number of d-stack words  
   1165          						h = *((unsigned int *)(0x60000000 + ((j+5)<<1)));
   \                     ??mt_last_msg_console_7:
   \   0000010E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000110   ........           LDR.W    R0,??DataTable4_3  ;; 0x6000000a
   \   00000114   50F81500           LDR      R0,[R0, R5, LSL #+1]
   \   00000118   ADF80400           STRH     R0,[SP, #+4]
   1166          						ndw = h - dbp;
   \   0000011C   BDF80400           LDRH     R0,[SP, #+4]
   \   00000120   B0EB0A00           SUBS     R0,R0,R10
   \   00000124   8146               MOV      R9,R0
   \   00000126   3AE0               B.N      ??mt_last_msg_console_5
   1167          					}
   1168          				}
   1169          			//--------------------------------------------------------------
   1170           /*                               
   1171          			#else // (HOST_SPI_INTERFACE)
   1172          				// for smt, msg block start addr for last msg is in reg 0x31 
   1173          				Write_6131LowReg(MAP_1, MT_LAST_MSG_STACK_ADDR_REG, 1);
   1174          				addr = Read_6131_1word(1);
   1175          				// j = address list offset 
   1176          				Write_6131LowReg(MAP_1, MT_ADDR_LIST_POINTER, 1);
   1177          				j = Read_6131_1word(1);
   1178          
   1179          				if(!(i&2)) {
   1180          					// smt with 16-bit ttag 
   1181          					ttag16 = 1;
   1182          					// bswo = block status word offset in cmd-stack msg block 
   1183          					bswo = 0;
   1184          					// data block pointer
   1185          					Write_6131LowReg(MAP_1, addr+2, 1);
   1186          					dbp = Read_6131_1word(1);
   1187          				}
   1188          				else {
   1189          					// smt with 48-bit ttag
   1190          					// bswo = block status word offset in cmd-stack msg block 
   1191          					bswo = 3;
   1192          					// data block pointer 
   1193          					Write_6131LowReg(MAP_1, addr+6, 1);
   1194          					dbp = Read_6131_1word(1);
   1195          				}
   1196          
   1197          				// first msg only, last block start addr "j" = stack start addr "addr"
   1198          				Write_6131LowReg(MAP_1, j, 1);
   1199          				if(addr == Read_6131_1word(1)) {
   1200          					// for first msg, the number of words stored in the
   1201          					// data stack = next data store addr - stack start addr 
   1202          					Write_6131LowReg(MAP_1, (j+4), 1);
   1203          					// read 
   1204          					h = Read_6131_1word(1);
   1205          					// read next word and subtract worg just read
   1206          					ndw = (Read_6131_1word(1)) - h;
   1207          				}
   1208          				else {
   1209          					Write_6131LowReg(MAP_1, (j+1), 1);
   1210          					h = Read_6131_1word(1);
   1211          					// h = offset for next store addr in cmd stack block:
   1212          					// examine cmd word, detect both cases for broadcast mode codes without data.
   1213          					// for these, no words are stored in the data stack 
   1214          					Write_6131LowReg(MAP_1, (h-1), 1);
   1215          					m = Read_6131_1word(1);
   1216          					if     (( m & 0xFFE0) >> 5 == 0x7E0) ndw = 0;
   1217          					else if(( m & 0xFFE0) >> 5 == 0x7FF) ndw = 0;
   1218          					else {
   1219          						// at least 1 word was stored in data stack for last msg 
   1220          						// use next data stack store address to determine number of d-stack words
   1221          						Write_6131LowReg(MAP_1, (j+5), 1);						
   1222          						h = Read_6131_1word(1);
   1223          						ndw = h - dbp;
   1224          					}
   1225          				}
   1226          			#endif // (HOST_SPI_INTERFACE)
   1227                                          */
   1228          			//--------------------------------------------------------------
   1229          		}	// end smt 
   1230          
   1231          
   1232          		else if(i & 8) {
   \                     ??mt_last_msg_console_1:
   \   00000128   2007               LSLS     R0,R4,#+28
   \   0000012A   1AD5               BPL.N    ??mt_last_msg_console_8
   1233          			// IMT with auto header/trailer OFF 
   1234          			printf("IMT:   ");
   \   0000012C   ........           LDR.W    R0,??DataTable4_7
   \   00000130   ........           BL       printf
   1235          			bswo = 4;
   \   00000134   0420               MOVS     R0,#+4
   \   00000136   8DF80200           STRB     R0,[SP, #+2]
   1236          			// the last msg block addr is in register 0x31 
   1237          ///			#if (HOST_BUS_INTERFACE)
   1238          				addr =pH6130->MT_LAST_MSG_STACK_ADDR_REG;
   \   0000013A   ........           LDR.W    R0,??DataTable3_20
   \   0000013E   0068               LDR      R0,[R0, #+0]
   \   00000140   B0F86200           LDRH     R0,[R0, #+98]
   \   00000144   0600               MOVS     R6,R0
   1239                                          /*
   1240          			#else // (HOST_SPI_INTERFACE)
   1241          				Write_6131LowReg(MAP_1, MT_LAST_MSG_STACK_ADDR_REG, 1);
   1242          				addr = Read_6131_1word(1);
   1243          			#endif
   1244                                          */
   1245                                          
   1246          			// the stored data starts at the 8th word  
   1247          			dbp = addr+7;
   \   00000146   F01D               ADDS     R0,R6,#+7
   \   00000148   8246               MOV      R10,R0
   1248          			// # of msg bytes in word 6
   1249          	///		#if (HOST_BUS_INTERFACE)
   1250          				ndw = *((unsigned int *)(0x60000000 + ((addr+6)<<1)));
   \   0000014A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000014C   ........           LDR.W    R0,??DataTable4_2  ;; 0x6000000c
   \   00000150   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   00000154   8146               MOV      R9,R0
   1251                                          /*
   1252          			#else // (HOST_SPI_INTERFACE)
   1253          				Write_6131LowReg(MAP_1, addr+6, 1);
   1254          				ndw = Read_6131_1word(1);
   1255          			#endif
   1256                                          */
   1257          			// convert bytes to words
   1258          			ndw = ndw/2;
   \   00000156   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000015A   0220               MOVS     R0,#+2
   \   0000015C   99FBF0F9           SDIV     R9,R9,R0
   \   00000160   1DE0               B.N      ??mt_last_msg_console_5
   1259          			
   1260          		}
   1261          		else  {  
   1262          			// IMT with auto header/trailer ON 
   1263          			printf("IMT:   ");
   \                     ??mt_last_msg_console_8:
   \   00000162   ........           LDR.W    R0,??DataTable4_7
   \   00000166   ........           BL       printf
   1264          			bswo = 4;
   \   0000016A   0420               MOVS     R0,#+4
   \   0000016C   8DF80200           STRB     R0,[SP, #+2]
   1265          			// last msg block addr is stored in 5th word of MT addr list 
   1266          ///			#if (HOST_BUS_INTERFACE)
   1267          				i = 4 + pH6130->MT_ADDR_LIST_POINTER;
   \   00000170   ........           LDR.W    R0,??DataTable3_20
   \   00000174   0068               LDR      R0,[R0, #+0]
   \   00000176   B0F85E00           LDRH     R0,[R0, #+94]
   \   0000017A   001D               ADDS     R0,R0,#+4
   \   0000017C   0400               MOVS     R4,R0
   1268          				addr = *((unsigned int *)(0x60000000 + (i<<1)));
   \   0000017E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000180   6000               LSLS     R0,R4,#+1
   \   00000182   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000186   0068               LDR      R0,[R0, #+0]
   \   00000188   0600               MOVS     R6,R0
   1269          				// the stored data starts at the 8th word  
   1270          				dbp = addr+7;
   \   0000018A   F01D               ADDS     R0,R6,#+7
   \   0000018C   8246               MOV      R10,R0
   1271          				// # of msg bytes in word 6, convert to words (div-by-2)
   1272          				ndw = (*((unsigned int *)(0x60000000 + (addr+6)<<1)))/2;
   \   0000018E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000190   06F1C040           ADD      R0,R6,#+1610612736
   \   00000194   801D               ADDS     R0,R0,#+6
   \   00000196   4000               LSLS     R0,R0,#+1
   \   00000198   0068               LDR      R0,[R0, #+0]
   \   0000019A   4008               LSRS     R0,R0,#+1
   \   0000019C   8146               MOV      R9,R0
   1273          	/*			
   1274          			#else // (HOST_SPI_INTERFACE)
   1275          				Write_6131LowReg(MAP_1, MT_ADDR_LIST_POINTER, 1);
   1276          				i = 4 + Read_6131_1word(1);
   1277          				Write_6131LowReg(MAP_1, i, 1);
   1278          				addr = Read_6131_1word(1);
   1279          				// the stored data starts at the 8th word  
   1280          				dbp = addr+7;
   1281          				// # of msg bytes in word 6, convert to words (div-by-2)
   1282          				Write_6131LowReg(MAP_1, addr+6, 1);
   1283          				ndw = (Read_6131_1word(1))/2;
   1284          			#endif
   1285                                          */
   1286          		}
   1287          
   1288          		// read Block Status Word 
   1289          	///	#if (HOST_BUS_INTERFACE)
   1290          			i = *((unsigned int *)(0x60000000 + ((addr+bswo)<<1)));
   \                     ??mt_last_msg_console_5:
   \   0000019E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000001A0   9DF80200           LDRB     R0,[SP, #+2]
   \   000001A4   8019               ADDS     R0,R0,R6
   \   000001A6   4000               LSLS     R0,R0,#+1
   \   000001A8   10F1C040           ADDS     R0,R0,#+1610612736
   \   000001AC   0068               LDR      R0,[R0, #+0]
   \   000001AE   0400               MOVS     R4,R0
   1291                          /*
   1292          		#else // (HOST_SPI_INTERFACE)
   1293          			Write_6131LowReg(MAP_1, (addr+bswo), 1);
   1294          			i = Read_6131_1word(1);
   1295          		#endif
   1296          */
   1297                          
   1298          		printf("Block Status Word = 0x%.2X%.2X...\n\n\r", (char)(i>>8),(char)i);
   \   000001B0   2200               MOVS     R2,R4
   \   000001B2   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000001B4   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000001B6   210A               LSRS     R1,R4,#+8
   \   000001B8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000001BA   ........           LDR.W    R0,??DataTable4_8
   \   000001BE   ........           BL       printf
   1299          		if(!smt) printf("* means IMT BSW reserved bit:\n\n\r");
   \   000001C2   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001C6   B8F1000F           CMP      R8,#+0
   \   000001CA   03D1               BNE.N    ??mt_last_msg_console_9
   \   000001CC   ........           LDR.W    R0,??DataTable4_9
   \   000001D0   ........           BL       printf
   1300          		printf("           * Start of Msg ");
   \                     ??mt_last_msg_console_9:
   \   000001D4   ........           LDR.W    R0,??DataTable4_10
   \   000001D8   ........           BL       printf
   1301          		if(!xmf || !smt) printf("n/a    ");
   \   000001DC   9DF80000           LDRB     R0,[SP, #+0]
   \   000001E0   0028               CMP      R0,#+0
   \   000001E2   04D0               BEQ.N    ??mt_last_msg_console_10
   \   000001E4   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000001E8   B8F1000F           CMP      R8,#+0
   \   000001EC   04D1               BNE.N    ??mt_last_msg_console_11
   \                     ??mt_last_msg_console_10:
   \   000001EE   ........           LDR.W    R0,??DataTable4_11
   \   000001F2   ........           BL       printf
   \   000001F6   0AE0               B.N      ??mt_last_msg_console_12
   1302          		else if(i & (1<<14)) printf("= 1    ");
   \                     ??mt_last_msg_console_11:
   \   000001F8   6004               LSLS     R0,R4,#+17
   \   000001FA   04D5               BPL.N    ??mt_last_msg_console_13
   \   000001FC   ........           LDR.W    R0,??DataTable4_12
   \   00000200   ........           BL       printf
   \   00000204   03E0               B.N      ??mt_last_msg_console_12
   1303          		else printf("= 0    ");
   \                     ??mt_last_msg_console_13:
   \   00000206   ........           LDR.W    R0,??DataTable4_14
   \   0000020A   ........           BL       printf
   1304          		printf("Bus Used = ");
   \                     ??mt_last_msg_console_12:
   \   0000020E   ........           LDR.W    R0,??DataTable4_15
   \   00000212   ........           BL       printf
   1305          		if(i & (1<<13)) printf("B\n\n\r");
   \   00000216   A004               LSLS     R0,R4,#+18
   \   00000218   04D5               BPL.N    ??mt_last_msg_console_14
   \   0000021A   ........           LDR.W    R0,??DataTable4_17
   \   0000021E   ........           BL       printf
   \   00000222   03E0               B.N      ??mt_last_msg_console_15
   1306          		else printf("A\n\n\r");
   \                     ??mt_last_msg_console_14:
   \   00000224   ........           LDR.W    R0,??DataTable4_18
   \   00000228   ........           BL       printf
   1307          
   1308          		printf("             * End of Msg ");
   \                     ??mt_last_msg_console_15:
   \   0000022C   ........           LDR.W    R0,??DataTable4_19
   \   00000230   ........           BL       printf
   1309          		if(!xmf || !smt) printf("n/a    ");
   \   00000234   9DF80000           LDRB     R0,[SP, #+0]
   \   00000238   0028               CMP      R0,#+0
   \   0000023A   04D0               BEQ.N    ??mt_last_msg_console_16
   \   0000023C   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   00000240   B8F1000F           CMP      R8,#+0
   \   00000244   04D1               BNE.N    ??mt_last_msg_console_17
   \                     ??mt_last_msg_console_16:
   \   00000246   ........           LDR.W    R0,??DataTable4_11
   \   0000024A   ........           BL       printf
   \   0000024E   0AE0               B.N      ??mt_last_msg_console_18
   1310          		else if(i & (1<<15)) printf("= 1    ");
   \                     ??mt_last_msg_console_17:
   \   00000250   2004               LSLS     R0,R4,#+16
   \   00000252   04D5               BPL.N    ??mt_last_msg_console_19
   \   00000254   ........           LDR.W    R0,??DataTable4_12
   \   00000258   ........           BL       printf
   \   0000025C   03E0               B.N      ??mt_last_msg_console_18
   1311          		else printf("= 0    ");
   \                     ??mt_last_msg_console_19:
   \   0000025E   ........           LDR.W    R0,??DataTable4_14
   \   00000262   ........           BL       printf
   1312          		printf("Error Occurred = ");
   \                     ??mt_last_msg_console_18:
   \   00000266   ........           LDR.W    R0,??DataTable4_20
   \   0000026A   ........           BL       printf
   1313          		if(i & (1<<12)) printf("1\n\n\r");
   \   0000026E   E004               LSLS     R0,R4,#+19
   \   00000270   04D5               BPL.N    ??mt_last_msg_console_20
   \   00000272   ........           LDR.W    R0,??DataTable4_21
   \   00000276   ........           BL       printf
   \   0000027A   03E0               B.N      ??mt_last_msg_console_21
   1314          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_20:
   \   0000027C   ........           LDR.W    R0,??DataTable4_22
   \   00000280   ........           BL       printf
   1315          
   1316          		printf("        * Good Data Block ");
   \                     ??mt_last_msg_console_21:
   \   00000284   ........           LDR.W    R0,??DataTable4_23
   \   00000288   ........           BL       printf
   1317          		if(!xmf) printf("n/a    ");
   \   0000028C   9DF80000           LDRB     R0,[SP, #+0]
   \   00000290   0028               CMP      R0,#+0
   \   00000292   04D1               BNE.N    ??mt_last_msg_console_22
   \   00000294   ........           LDR.W    R0,??DataTable4_11
   \   00000298   ........           BL       printf
   \   0000029C   0AE0               B.N      ??mt_last_msg_console_23
   1318          		else if(i & (1<<8)) printf("= 1    ");
   \                     ??mt_last_msg_console_22:
   \   0000029E   E005               LSLS     R0,R4,#+23
   \   000002A0   04D5               BPL.N    ??mt_last_msg_console_24
   \   000002A2   ........           LDR.W    R0,??DataTable4_12
   \   000002A6   ........           BL       printf
   \   000002AA   03E0               B.N      ??mt_last_msg_console_23
   1319          		else printf("= 0    ");
   \                     ??mt_last_msg_console_24:
   \   000002AC   ........           LDR.W    R0,??DataTable4_14
   \   000002B0   ........           BL       printf
   1320          		printf("Response Timeout = ");
   \                     ??mt_last_msg_console_23:
   \   000002B4   ........           LDR.W    R0,??DataTable4_24
   \   000002B8   ........           BL       printf
   1321          		if(i & (1<<9)) printf("1\n\n\r");
   \   000002BC   A005               LSLS     R0,R4,#+22
   \   000002BE   04D5               BPL.N    ??mt_last_msg_console_25
   \   000002C0   ........           LDR.W    R0,??DataTable4_21
   \   000002C4   ........           BL       printf
   \   000002C8   03E0               B.N      ??mt_last_msg_console_26
   1322          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_25:
   \   000002CA   ........           LDR.W    R0,??DataTable4_22
   \   000002CE   ........           BL       printf
   1323          
   1324          		printf("* SMT Data Stack Rollover ");
   \                     ??mt_last_msg_console_26:
   \   000002D2   ........           LDR.W    R0,??DataTable4_25
   \   000002D6   ........           BL       printf
   1325          		if(!xmf) printf("n/a    ");
   \   000002DA   9DF80000           LDRB     R0,[SP, #+0]
   \   000002DE   0028               CMP      R0,#+0
   \   000002E0   04D1               BNE.N    ??mt_last_msg_console_27
   \   000002E2   ........           LDR.W    R0,??DataTable4_11
   \   000002E6   ........           BL       printf
   \   000002EA   0AE0               B.N      ??mt_last_msg_console_28
   1326          		else if(i & (1<<7)) printf("= 1    ");
   \                     ??mt_last_msg_console_27:
   \   000002EC   2006               LSLS     R0,R4,#+24
   \   000002EE   04D5               BPL.N    ??mt_last_msg_console_29
   \   000002F0   ........           LDR.W    R0,??DataTable4_12
   \   000002F4   ........           BL       printf
   \   000002F8   03E0               B.N      ??mt_last_msg_console_28
   1327          		else printf("= 0    ");
   \                     ??mt_last_msg_console_29:
   \   000002FA   ........           LDR.W    R0,??DataTable4_14
   \   000002FE   ........           BL       printf
   1328          		printf("Illegal Gap Error = ");
   \                     ??mt_last_msg_console_28:
   \   00000302   ........           LDR.W    R0,??DataTable4_26
   \   00000306   ........           BL       printf
   1329          		if(i & (1<<10)) printf("1\n\n\r");
   \   0000030A   6005               LSLS     R0,R4,#+21
   \   0000030C   04D5               BPL.N    ??mt_last_msg_console_30
   \   0000030E   ........           LDR.W    R0,??DataTable4_21
   \   00000312   ........           BL       printf
   \   00000316   03E0               B.N      ??mt_last_msg_console_31
   1330          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_30:
   \   00000318   ........           LDR.W    R0,??DataTable4_22
   \   0000031C   ........           BL       printf
   1331          
   1332          		printf(" * Cmd Word Content Error ");
   \                     ??mt_last_msg_console_31:
   \   00000320   ........           LDR.W    R0,??DataTable4_27
   \   00000324   ........           BL       printf
   1333          		if(!xmf) printf("n/a    ");
   \   00000328   9DF80000           LDRB     R0,[SP, #+0]
   \   0000032C   0028               CMP      R0,#+0
   \   0000032E   04D1               BNE.N    ??mt_last_msg_console_32
   \   00000330   ........           LDR.W    R0,??DataTable4_11
   \   00000334   ........           BL       printf
   \   00000338   0AE0               B.N      ??mt_last_msg_console_33
   1334          		else if(i & 1) printf("= 1    ");
   \                     ??mt_last_msg_console_32:
   \   0000033A   E007               LSLS     R0,R4,#+31
   \   0000033C   04D5               BPL.N    ??mt_last_msg_console_34
   \   0000033E   ........           LDR.W    R0,??DataTable4_12
   \   00000342   ........           BL       printf
   \   00000346   03E0               B.N      ??mt_last_msg_console_33
   1335          		else printf("= 0    ");
   \                     ??mt_last_msg_console_34:
   \   00000348   ........           LDR.W    R0,??DataTable4_14
   \   0000034C   ........           BL       printf
   1336          		printf("Word Count Error = ");
   \                     ??mt_last_msg_console_33:
   \   00000350   ........           LDR.W    R0,??DataTable4_28
   \   00000354   ........           BL       printf
   1337          		if(i & (1<<5)) printf("1\n\n\r");
   \   00000358   A006               LSLS     R0,R4,#+26
   \   0000035A   04D5               BPL.N    ??mt_last_msg_console_35
   \   0000035C   ........           LDR.W    R0,??DataTable4_21
   \   00000360   ........           BL       printf
   \   00000364   03E0               B.N      ??mt_last_msg_console_36
   1338          		else printf("0\n\n\r");
   \                     ??mt_last_msg_console_35:
   \   00000366   ........           LDR.W    R0,??DataTable4_22
   \   0000036A   ........           BL       printf
   1339          
   1340          		printf("* RT-RT Gap,Sync,Addr Err ");
   \                     ??mt_last_msg_console_36:
   \   0000036E   ........           LDR.W    R0,??DataTable4_29
   \   00000372   ........           BL       printf
   1341          		if(!xmf) printf("n/a    ");
   \   00000376   9DF80000           LDRB     R0,[SP, #+0]
   \   0000037A   0028               CMP      R0,#+0
   \   0000037C   04D1               BNE.N    ??mt_last_msg_console_37
   \   0000037E   ........           LDR.W    R0,??DataTable4_11
   \   00000382   ........           BL       printf
   \   00000386   0AE0               B.N      ??mt_last_msg_console_38
   1342          		else if(i & 4) printf("= 1    ");
   \                     ??mt_last_msg_console_37:
   \   00000388   6007               LSLS     R0,R4,#+29
   \   0000038A   04D5               BPL.N    ??mt_last_msg_console_39
   \   0000038C   ........           LDR.W    R0,??DataTable4_12
   \   00000390   ........           BL       printf
   \   00000394   03E0               B.N      ??mt_last_msg_console_38
   1343          		else printf("= 0    ");
   \                     ??mt_last_msg_console_39:
   \   00000396   ........           LDR.W    R0,??DataTable4_14
   \   0000039A   ........           BL       printf
   1344          
   1345          		if(!(i & (1<<11))) {
   \                     ??mt_last_msg_console_38:
   \   0000039E   2005               LSLS     R0,R4,#+20
   \   000003A0   06D4               BMI.N    ??mt_last_msg_console_40
   1346          			rtrt = 0;
   \   000003A2   0020               MOVS     R0,#+0
   \   000003A4   8DF80300           STRB     R0,[SP, #+3]
   1347          			printf("Non-");
   \   000003A8   ........           LDR.W    R0,??DataTable4_30
   \   000003AC   ........           BL       printf
   1348          		}
   1349          		printf("RT-RT Cmd: ");
   \                     ??mt_last_msg_console_40:
   \   000003B0   ........           LDR.W    R0,??DataTable4_31
   \   000003B4   ........           BL       printf
   1350          		// fetch & printf CW1 
   1351          		if(!smt)        m = 7; 
   \   000003B8   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000003BC   B8F1000F           CMP      R8,#+0
   \   000003C0   02D1               BNE.N    ??mt_last_msg_console_41
   \   000003C2   0720               MOVS     R0,#+7
   \   000003C4   8346               MOV      R11,R0
   \   000003C6   08E0               B.N      ??mt_last_msg_console_42
   1352          		else if(ttag16) m = 3; 
   \                     ??mt_last_msg_console_41:
   \   000003C8   9DF80100           LDRB     R0,[SP, #+1]
   \   000003CC   0028               CMP      R0,#+0
   \   000003CE   02D0               BEQ.N    ??mt_last_msg_console_43
   \   000003D0   0320               MOVS     R0,#+3
   \   000003D2   8346               MOV      R11,R0
   \   000003D4   01E0               B.N      ??mt_last_msg_console_42
   1353          		else            m = 7;
   \                     ??mt_last_msg_console_43:
   \   000003D6   0720               MOVS     R0,#+7
   \   000003D8   8346               MOV      R11,R0
   1354          	///	#if (HOST_BUS_INTERFACE)
   1355          			j = *((unsigned int *)(0x60000000 + ((addr+m)<<1)));
   \                     ??mt_last_msg_console_42:
   \   000003DA   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000003DC   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000003E0   1BEB0600           ADDS     R0,R11,R6
   \   000003E4   4000               LSLS     R0,R0,#+1
   \   000003E6   10F1C040           ADDS     R0,R0,#+1610612736
   \   000003EA   0068               LDR      R0,[R0, #+0]
   \   000003EC   0500               MOVS     R5,R0
   1356                                  /*
   1357          		#else // (HOST_SPI_INTERFACE)
   1358          			Write_6131LowReg(MAP_1, addr+m, 1);
   1359          			j = Read_6131_1word(1);
   1360          		#endif
   1361                                  */
   1362          		printf("0x%.2X%.2X", (char)(j>>8),(char)j);
   \   000003EE   2A00               MOVS     R2,R5
   \   000003F0   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000003F2   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000003F4   290A               LSRS     R1,R5,#+8
   \   000003F6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000003F8   ........           LDR.W    R0,??DataTable6_2
   \   000003FC   ........           BL       printf
   1363          
   1364          		if(rtrt) {
   \   00000400   9DF80300           LDRB     R0,[SP, #+3]
   \   00000404   0028               CMP      R0,#+0
   \   00000406   1CD0               BEQ.N    ??mt_last_msg_console_44
   1365          			// fetch & printf CW2 
   1366          	///		#if (HOST_BUS_INTERFACE)
   1367          				if(!smt) j = *((unsigned int *)(0x60000000 + ((addr+8)<<1)));
   \   00000408   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000040C   B8F1000F           CMP      R8,#+0
   \   00000410   06D1               BNE.N    ??mt_last_msg_console_45
   \   00000412   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000414   ........           LDR.W    R0,??DataTable6_3  ;; 0x60000010
   \   00000418   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   0000041C   0500               MOVS     R5,R0
   \   0000041E   07E0               B.N      ??mt_last_msg_console_46
   1368          				else j = *((unsigned int *)(0x60000000 + (dbp<<1)));
   \                     ??mt_last_msg_console_45:
   \   00000420   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000424   5FEA4A00           LSLS     R0,R10,#+1
   \   00000428   10F1C040           ADDS     R0,R0,#+1610612736
   \   0000042C   0068               LDR      R0,[R0, #+0]
   \   0000042E   0500               MOVS     R5,R0
   1369                                          /*
   1370          			#else // (HOST_SPI_INTERFACE)
   1371          				if(!smt) Write_6131LowReg(MAP_1, addr+8, 1);
   1372          				else     Write_6131LowReg(MAP_1, dbp,    1);
   1373          				j = Read_6131_1word(1);
   1374          			#endif
   1375                                          */
   1376                                          
   1377          			printf("0x%.2X%.2X", (char)(j>>8),(char)j);
   \                     ??mt_last_msg_console_46:
   \   00000430   2A00               MOVS     R2,R5
   \   00000432   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000434   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000436   290A               LSRS     R1,R5,#+8
   \   00000438   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000043A   ........           LDR.W    R0,??DataTable6_2
   \   0000043E   ........           BL       printf
   1378          		}
   1379          
   1380          		printf("\n\n\r * RT-RT Cmd Word 2 Error ");
   \                     ??mt_last_msg_console_44:
   \   00000442   ........           LDR.W    R0,??DataTable6_4
   \   00000446   ........           BL       printf
   1381          		if(!xmf) printf("n/a    ");
   \   0000044A   9DF80000           LDRB     R0,[SP, #+0]
   \   0000044E   0028               CMP      R0,#+0
   \   00000450   04D1               BNE.N    ??mt_last_msg_console_47
   \   00000452   ........           LDR.W    R0,??DataTable4_11
   \   00000456   ........           BL       printf
   \   0000045A   0AE0               B.N      ??mt_last_msg_console_48
   1382          		else if(i & 2) printf("= 1    ");
   \                     ??mt_last_msg_console_47:
   \   0000045C   A007               LSLS     R0,R4,#+30
   \   0000045E   04D5               BPL.N    ??mt_last_msg_console_49
   \   00000460   ........           LDR.W    R0,??DataTable4_12
   \   00000464   ........           BL       printf
   \   00000468   03E0               B.N      ??mt_last_msg_console_48
   1383          		else printf("= 0    ");
   \                     ??mt_last_msg_console_49:
   \   0000046A   ........           LDR.W    R0,??DataTable4_14
   \   0000046E   ........           BL       printf
   1384          
   1385          		printf("Timetag = ");
   \                     ??mt_last_msg_console_48:
   \   00000472   ........           LDR.W    R0,??DataTable6_5
   \   00000476   ........           BL       printf
   1386          		if(smt & ttag16) {	// 16-bit ttag
   \   0000047A   9DF80110           LDRB     R1,[SP, #+1]
   \   0000047E   18EA010F           TST      R8,R1
   \   00000482   0FD0               BEQ.N    ??mt_last_msg_console_50
   1387          	///		#if (HOST_BUS_INTERFACE)
   1388          				i = *((unsigned int *)(0x60000000 + ((addr+1)<<1)));
   \   00000484   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000486   ........           LDR.W    R0,??DataTable4_5  ;; 0x60000002
   \   0000048A   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   0000048E   0400               MOVS     R4,R0
   1389                                          /*
   1390          			#else // (HOST_SPI_INTERFACE)
   1391          				Write_6131LowReg(MAP_1, addr+1, 1);
   1392          				i = Read_6131_1word(1);
   1393          			#endif
   1394                                          */
   1395          			printf("0x%.2X%.2X\n\n\r", (char)(i>>8),(char)i);
   \   00000490   2200               MOVS     R2,R4
   \   00000492   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000494   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000496   210A               LSRS     R1,R4,#+8
   \   00000498   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000049A   ........           LDR.W    R0,??DataTable6_6
   \   0000049E   ........           BL       printf
   \   000004A2   32E0               B.N      ??mt_last_msg_console_51
   1396          		}
   1397          		else {			// 48-bit ttag
   1398          	///		#if (HOST_BUS_INTERFACE)
   1399          				h = *((unsigned int *)(0x60000000 + ((addr+2)<<1)));
   \                     ??mt_last_msg_console_50:
   \   000004A4   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004A6   ........           LDR.W    R0,??DataTable4_1  ;; 0x60000004
   \   000004AA   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   000004AE   ADF80400           STRH     R0,[SP, #+4]
   1400          				i = *((unsigned int *)(0x60000000 + ((addr+1)<<1)));
   \   000004B2   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004B4   ........           LDR.W    R0,??DataTable4_5  ;; 0x60000002
   \   000004B8   50F81600           LDR      R0,[R0, R6, LSL #+1]
   \   000004BC   0400               MOVS     R4,R0
   1401          				m = *((unsigned int *)(0x60000000 + (addr<<1)));
   \   000004BE   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   000004C0   7000               LSLS     R0,R6,#+1
   \   000004C2   10F1C040           ADDS     R0,R0,#+1610612736
   \   000004C6   0068               LDR      R0,[R0, #+0]
   \   000004C8   8346               MOV      R11,R0
   1402                                          /*
   1403          			#else // (HOST_SPI_INTERFACE)
   1404          				// using MAP auto-increment
   1405          				Write_6131LowReg(MAP_1, addr, 1);
   1406          				m = Read_6131_1word(1);
   1407          				i = Read_6131_1word(1);
   1408          				h = Read_6131_1word(1);
   1409          			#endif
   1410                                          */
   1411          			printf("0x%.2X%.2X", (char)(h>>8),(char)h);
   \   000004CA   BDF80420           LDRH     R2,[SP, #+4]
   \   000004CE   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004D0   BDF80400           LDRH     R0,[SP, #+4]
   \   000004D4   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   000004D6   010A               LSRS     R1,R0,#+8
   \   000004D8   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000004DA   ........           LDR.W    R0,??DataTable6_2
   \   000004DE   ........           BL       printf
   1412          			printf("%.2X%.2X", (char)(i>>8),(char)i);
   \   000004E2   2200               MOVS     R2,R4
   \   000004E4   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004E6   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000004E8   210A               LSRS     R1,R4,#+8
   \   000004EA   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000004EC   ........           LDR.W    R0,??DataTable7
   \   000004F0   ........           BL       printf
   1413          			printf("%.2X%.2X\n\n\r", (char)(m>>8),(char)m);
   \   000004F4   5A46               MOV      R2,R11
   \   000004F6   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000004F8   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   000004FC   5FEA1B21           LSRS     R1,R11,#+8
   \   00000500   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000502   ........           LDR.W    R0,??DataTable8
   \   00000506   ........           BL       printf
   1414          		}
   1415          		
   1416          		if(smt) {
   \                     ??mt_last_msg_console_51:
   \   0000050A   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   0000050E   B8F1000F           CMP      R8,#+0
   \   00000512   21D0               BEQ.N    ??mt_last_msg_console_52
   1417          			if(!ndw) printf("No Words Stored in Data Stack    (Broadcast Mode Code w/o Data)\n\n\r");
   \   00000514   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000518   B9F1000F           CMP      R9,#+0
   \   0000051C   04D1               BNE.N    ??mt_last_msg_console_53
   \   0000051E   ........           LDR.W    R0,??DataTable10
   \   00000522   ........           BL       printf
   \   00000526   39E0               B.N      ??mt_last_msg_console_54
   1418          			else {
   1419          				if(ndw<9) printf(" ");
   \                     ??mt_last_msg_console_53:
   \   00000528   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000052C   B9F1090F           CMP      R9,#+9
   \   00000530   02D2               BCS.N    ??mt_last_msg_console_55
   \   00000532   ....               ADR.N    R0,??DataTable3_13  ;; " "
   \   00000534   ........           BL       printf
   1420          				printf("Msg Words 2-%d at Addr 0x%.2X%.2X   ", ndw+1, (char)(dbp>>8),(char)dbp);
   \                     ??mt_last_msg_console_55:
   \   00000538   5346               MOV      R3,R10
   \   0000053A   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000053C   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   00000540   5FEA1A22           LSRS     R2,R10,#+8
   \   00000544   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000546   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000054A   19F10101           ADDS     R1,R9,#+1
   \   0000054E   ........           LDR.W    R0,??DataTable12
   \   00000552   ........           BL       printf
   \   00000556   21E0               B.N      ??mt_last_msg_console_54
   1421          			}
   1422          		}
   1423          
   1424          		else {
   1425          			if(ndw<10) printf("  %d",ndw);
   \                     ??mt_last_msg_console_52:
   \   00000558   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000055C   B9F10A0F           CMP      R9,#+10
   \   00000560   07D2               BCS.N    ??mt_last_msg_console_56
   \   00000562   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000566   4946               MOV      R1,R9
   \   00000568   ........           LDR.W    R0,??DataTable14
   \   0000056C   ........           BL       printf
   \   00000570   05E0               B.N      ??mt_last_msg_console_57
   1426          			else printf(" %d",ndw);
   \                     ??mt_last_msg_console_56:
   \   00000572   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   00000576   4946               MOV      R1,R9
   \   00000578   ....               ADR.N    R0,??DataTable3_18  ;; " %d"
   \   0000057A   ........           BL       printf
   1427          			printf(" Msg Words at Addr: ");
   \                     ??mt_last_msg_console_57:
   \   0000057E   ........           LDR.W    R0,??DataTable15
   \   00000582   ........           BL       printf
   1428          			printf("0x%.2X%.2X   ", (char)(dbp>>8),(char)dbp);
   \   00000586   5246               MOV      R2,R10
   \   00000588   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000058A   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   0000058E   5FEA1A21           LSRS     R1,R10,#+8
   \   00000592   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000594   ........           LDR.W    R0,??DataTable16
   \   00000598   ........           BL       printf
   1429          		}
   1430          		if(ndw) {
   \                     ??mt_last_msg_console_54:
   \   0000059C   1FFA89F9           UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   000005A0   B9F1000F           CMP      R9,#+0
   \   000005A4   0FD0               BEQ.N    ??mt_last_msg_console_58
   1431          		///	#if (HOST_BUS_INTERFACE)
   1432          				dbp = dbp<<1;
   \   000005A6   5FEA4A0A           LSLS     R10,R10,#+1
   1433          				printf("Bus Debug Addr: 0x6000%.2X%.2X", (char)(dbp>>8),(char)(dbp));
   \   000005AA   5246               MOV      R2,R10
   \   000005AC   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   000005AE   1FFA8AFA           UXTH     R10,R10          ;; ZeroExt  R10,R10,#+16,#+16
   \   000005B2   5FEA1A21           LSRS     R1,R10,#+8
   \   000005B6   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000005B8   ........           LDR.W    R0,??DataTable16_1
   \   000005BC   ........           BL       printf
   1434          		///	#endif
   1435          			printf("\n\n\r");
   \   000005C0   ....               ADR.N    R0,??DataTable3_21  ;; "\n\n\r"
   \   000005C2   ........           BL       printf
   1436          		}
   1437          
   1438          		// only for imt, or smt using 48-bit ttag option
   1439          		// (smt using 16-bit ttag option does not store gap time word):
   1440          		// get gap time word, the upper and lower bytes 
   1441          		// express both TxRT and RxRT gap times for RT-RT messages... 
   1442          		if(!smt || (smt & !ttag16)) {
   \                     ??mt_last_msg_console_58:
   \   000005C6   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000005CA   B8F1000F           CMP      R8,#+0
   \   000005CE   0AD0               BEQ.N    ??mt_last_msg_console_59
   \   000005D0   9DF80100           LDRB     R0,[SP, #+1]
   \   000005D4   0028               CMP      R0,#+0
   \   000005D6   01D1               BNE.N    ??mt_last_msg_console_60
   \   000005D8   0121               MOVS     R1,#+1
   \   000005DA   00E0               B.N      ??mt_last_msg_console_61
   \                     ??mt_last_msg_console_60:
   \   000005DC   0021               MOVS     R1,#+0
   \                     ??mt_last_msg_console_61:
   \   000005DE   18F00100           ANDS     R0,R8,#0x1
   \   000005E2   0842               TST      R0,R1
   \   000005E4   69D0               BEQ.N    ??mt_last_msg_console_62
   1443          			if(!smt) m = 5;
   \                     ??mt_last_msg_console_59:
   \   000005E6   5FFA88F8           UXTB     R8,R8            ;; ZeroExt  R8,R8,#+24,#+24
   \   000005EA   B8F1000F           CMP      R8,#+0
   \   000005EE   02D1               BNE.N    ??mt_last_msg_console_63
   \   000005F0   0520               MOVS     R0,#+5
   \   000005F2   8346               MOV      R11,R0
   \   000005F4   05E0               B.N      ??mt_last_msg_console_64
   1444          			else if(!ttag16) m = 4;
   \                     ??mt_last_msg_console_63:
   \   000005F6   9DF80100           LDRB     R0,[SP, #+1]
   \   000005FA   0028               CMP      R0,#+0
   \   000005FC   01D1               BNE.N    ??mt_last_msg_console_64
   \   000005FE   0420               MOVS     R0,#+4
   \   00000600   8346               MOV      R11,R0
   1445          	///		#if (HOST_BUS_INTERFACE)
   1446          				j = *((unsigned int *)(0x60000000 + ((addr+m)<<1)));
   \                     ??mt_last_msg_console_64:
   \   00000602   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000604   1FFA8BFB           UXTH     R11,R11          ;; ZeroExt  R11,R11,#+16,#+16
   \   00000608   1BEB0600           ADDS     R0,R11,R6
   \   0000060C   4000               LSLS     R0,R0,#+1
   \   0000060E   10F1C040           ADDS     R0,R0,#+1610612736
   \   00000612   0068               LDR      R0,[R0, #+0]
   \   00000614   0500               MOVS     R5,R0
   1447                                          /*
   1448          			#else // (HOST_SPI_INTERFACE)
   1449          				Write_6131LowReg(MAP_1, addr+m, 1);
   1450          				j = Read_6131_1word(1);
   1451          			#endif
   1452          			*/
   1453                                          
   1454          			// lower byte gives gap time for non-RT-RT msgs,
   1455          			// and gives the TxRT gap for RT-RT msgs 
   1456          			k = 0;
   \   00000616   0020               MOVS     R0,#+0
   \   00000618   0700               MOVS     R7,R0
   1457          			i = j&0xFF;
   \   0000061A   E8B2               UXTB     R0,R5            ;; ZeroExt  R0,R5,#+24,#+24
   \   0000061C   0400               MOVS     R4,R0
   1458          			// expressed in 0.1us increments, parse byte into 
   1459          			// whole number k and tenths digit i for display 
   1460          			while (i >= 10) {
   \                     ??mt_last_msg_console_65:
   \   0000061E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000620   0A2C               CMP      R4,#+10
   \   00000622   02D3               BCC.N    ??mt_last_msg_console_66
   1461          				i -= 10;
   \   00000624   0A3C               SUBS     R4,R4,#+10
   1462          				k += 1;
   \   00000626   7F1C               ADDS     R7,R7,#+1
   \   00000628   F9E7               B.N      ??mt_last_msg_console_65
   1463          			}
   1464          			if(k<10) printf(" ");
   \                     ??mt_last_msg_console_66:
   \   0000062A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000062C   0A2F               CMP      R7,#+10
   \   0000062E   02D2               BCS.N    ??mt_last_msg_console_67
   \   00000630   ....               ADR.N    R0,??DataTable3_13  ;; " "
   \   00000632   ........           BL       printf
   1465          			if(rtrt) printf("       Tx");
   \                     ??mt_last_msg_console_67:
   \   00000636   9DF80300           LDRB     R0,[SP, #+3]
   \   0000063A   0028               CMP      R0,#+0
   \   0000063C   03D0               BEQ.N    ??mt_last_msg_console_68
   \   0000063E   ........           LDR.W    R0,??DataTable16_2
   \   00000642   ........           BL       printf
   1466          			//else printf("         ");
   1467          			printf("RT Response = %d.%dus    ", k,i);
   \                     ??mt_last_msg_console_68:
   \   00000646   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000648   2200               MOVS     R2,R4
   \   0000064A   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000064C   3900               MOVS     R1,R7
   \   0000064E   ........           LDR.W    R0,??DataTable16_3
   \   00000652   ........           BL       printf
   1468          			if(!k && !i) printf("(Broadcast?)");
   \   00000656   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000658   002F               CMP      R7,#+0
   \   0000065A   06D1               BNE.N    ??mt_last_msg_console_69
   \   0000065C   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000065E   002C               CMP      R4,#+0
   \   00000660   03D1               BNE.N    ??mt_last_msg_console_69
   \   00000662   ........           LDR.W    R0,??DataTable16_4
   \   00000666   ........           BL       printf
   1469          			if(!rtrt) printf("\n\r");
   \                     ??mt_last_msg_console_69:
   \   0000066A   9DF80300           LDRB     R0,[SP, #+3]
   \   0000066E   0028               CMP      R0,#+0
   \   00000670   03D1               BNE.N    ??mt_last_msg_console_70
   \   00000672   ....               ADR.N    R0,??DataTable3_31  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000674   ........           BL       printf
   \   00000678   1FE0               B.N      ??mt_last_msg_console_62
   1470          
   1471          			// upper byte is non-zero for RT-RT only,
   1472          			// gives the RxRT gap if not broadcast msg 
   1473          			else {
   1474          				k = 0;
   \                     ??mt_last_msg_console_70:
   \   0000067A   0020               MOVS     R0,#+0
   \   0000067C   0700               MOVS     R7,R0
   1475          				i = (j>>8) & 0xFF;
   \   0000067E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000680   280A               LSRS     R0,R5,#+8
   \   00000682   0400               MOVS     R4,R0
   1476          				while (i >= 10) {
   \                     ??mt_last_msg_console_71:
   \   00000684   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000686   0A2C               CMP      R4,#+10
   \   00000688   02D3               BCC.N    ??mt_last_msg_console_72
   1477          					i -= 10;
   \   0000068A   0A3C               SUBS     R4,R4,#+10
   1478          					k += 1;
   \   0000068C   7F1C               ADDS     R7,R7,#+1
   \   0000068E   F9E7               B.N      ??mt_last_msg_console_71
   1479          				}
   1480          				printf("RxRT Response = %d.%dus ", k,i);
   \                     ??mt_last_msg_console_72:
   \   00000690   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000692   2200               MOVS     R2,R4
   \   00000694   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000696   3900               MOVS     R1,R7
   \   00000698   ........           LDR.W    R0,??DataTable16_5
   \   0000069C   ........           BL       printf
   1481          				if(!k && !i) printf("(Broadcast?)");
   \   000006A0   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000006A2   002F               CMP      R7,#+0
   \   000006A4   06D1               BNE.N    ??mt_last_msg_console_73
   \   000006A6   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   000006A8   002C               CMP      R4,#+0
   \   000006AA   03D1               BNE.N    ??mt_last_msg_console_73
   \   000006AC   ........           LDR.W    R0,??DataTable16_4
   \   000006B0   ........           BL       printf
   1482          				printf("\n\r");
   \                     ??mt_last_msg_console_73:
   \   000006B4   ....               ADR.N    R0,??DataTable3_31  ;; 0x0A, 0x0D, 0x00, 0x00
   \   000006B6   ........           BL       printf
   1483          			}
   1484          		}
   1485          	}	
   1486          	print_line();
   \                     ??mt_last_msg_console_62:
   \   000006BA   ........           BL       print_line
   1487          	print_menuprompt();
   \   000006BE   ........           BL       print_menuprompt
   1488          
   1489          }	// end mt_last_msg_console()
   \   000006C2   BDE8F78F           POP      {R0-R2,R4-R11,PC}  ;; return
   1490          
   1491          
   1492          //-----------------------------------------------------------------------
   1493          //	this function lists bus monitor interrupt 
   1494          //	configuration to the console via UART. if there
   1495          //	are pending MT interrupts, these too are displayed.
   1496          //	Function returns the value read from the MT pending
   1497          //	interrupt register, since reading the reg clears it.
   1498          //-----------------------------------------------------------------------

   \                                 In section .text, align 4, keep-with-next
   1499          unsigned short int list_mt_ints_console(void) {
   \                     list_mt_ints_console:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   1500          
   1501           ///       #if (HOST_BUS_INTERFACE)    
   1502                  extern const H6130 pH6130; // HI-6130 register struct base address    
   1503           ///       #endif
   1504          	unsigned short i, j, k=0;
   \   00000002   0026               MOVS     R6,#+0
   1505          	char smt = 0;
   \   00000004   0027               MOVS     R7,#+0
   1506          
   1507          ///	#if (HOST_BUS_INTERFACE)
   1508          		i = pH6130->MT_CONFIG_REG;
   \   00000006   ........           LDR.W    R0,??DataTable16_6
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   B0F85200           LDRH     R0,[R0, #+82]
   \   00000010   0400               MOVS     R4,R0
   1509          		if(i & 1) smt = 1;
   \   00000012   E007               LSLS     R0,R4,#+31
   \   00000014   01D5               BPL.N    ??list_mt_ints_console_0
   \   00000016   0120               MOVS     R0,#+1
   \   00000018   0700               MOVS     R7,R0
   1510          		i = pH6130->MT_INT_ENABLE_REG;
   \                     ??list_mt_ints_console_0:
   \   0000001A   ........           LDR.W    R0,??DataTable16_6
   \   0000001E   0068               LDR      R0,[R0, #+0]
   \   00000020   408C               LDRH     R0,[R0, #+34]
   \   00000022   0400               MOVS     R4,R0
   1511          		j = pH6130->MT_INT_OUTPUT_ENABLE_REG;
   \   00000024   ........           LDR.W    R0,??DataTable16_6
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   408D               LDRH     R0,[R0, #+42]
   \   0000002C   0500               MOVS     R5,R0
   1512          		k = pH6130->MT_PENDING_INT_REG;
   \   0000002E   ........           LDR.W    R0,??DataTable16_6
   \   00000032   0068               LDR      R0,[R0, #+0]
   \   00000034   008A               LDRH     R0,[R0, #+16]
   \   00000036   0600               MOVS     R6,R0
   1513                          /*
   1514          	#else // (HOST_SPI_INTERFACE)
   1515          		Write_6131LowReg(MAP_1, MT_CONFIG_REG, 1);
   1516          		i = Read_6131_1word(1);
   1517          		if(i & 1) smt = 1;
   1518          		Write_6131LowReg(MAP_1, MT_INT_ENABLE_REG, 1);
   1519          		i = Read_6131_1word(1);
   1520          		Write_6131LowReg(MAP_1, MT_INT_OUTPUT_ENABLE_REG, 1);
   1521          		j = Read_6131_1word(1);
   1522          		Write_6131LowReg(MAP_1, MT_PENDING_INT_REG, 1);
   1523          		k = Read_6131_1word(1);
   1524          	#endif
   1525          	*/
   1526                          
   1527          
   1528          	// formfeed 
   1529          	putchar(12); 	
   \   00000038   0C20               MOVS     R0,#+12
   \   0000003A   ........           BL       putchar
   1530          	// IRIG monitor (imt) or Simple monitor (smt)? 
   1531                  printf("\n\r");
   \   0000003E   B6A0               ADR.N    R0,??list_mt_ints_console_1  ;; 0x0A, 0x0D, 0x00, 0x00
   \   00000040   ........           BL       printf
   1532          	if(smt) printf("SMT mode is selected by MT Config Register bit 0.\n\n\r");
   \   00000044   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000046   002F               CMP      R7,#+0
   \   00000048   04D0               BEQ.N    ??list_mt_ints_console_2
   \   0000004A   ........           LDR.W    R0,??DataTable16_7
   \   0000004E   ........           BL       printf
   \   00000052   03E0               B.N      ??list_mt_ints_console_3
   1533          	else    printf("IMT mode is selected by MT Config Register bit 0.\n\n\r");
   \                     ??list_mt_ints_console_2:
   \   00000054   ........           LDR.W    R0,??DataTable16_8
   \   00000058   ........           BL       printf
   1534          	printf("   Bus Monitor Ints    Enabled?   Pin Output?   Pending?\n\r");
   \                     ??list_mt_ints_console_3:
   \   0000005C   ........           LDR.W    R0,??DataTable16_9
   \   00000060   ........           BL       printf
   1535          	print_line();
   \   00000064   ........           BL       print_line
   1536          
   1537          	if(!smt) {
   \   00000068   FFB2               UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   0000006A   002F               CMP      R7,#+0
   \   0000006C   40F03081           BNE.W    ??list_mt_ints_console_4
   1538          		// IRIG-106 mode, disregard bits 7,4,2,1,0 
   1539          		printf("End of Pkt,Buffer Full");
   \   00000070   ........           LDR.W    R0,??DataTable16_10
   \   00000074   ........           BL       printf
   1540          		if(!(i & FULL_EOP)) {	
   \   00000078   2004               LSLS     R0,R4,#+16
   \   0000007A   02D4               BMI.N    ??list_mt_ints_console_5
   1541          			// int disabled 
   1542          			print_null();
   \   0000007C   ........           BL       print_null
   \   00000080   11E0               B.N      ??list_mt_ints_console_6
   1543          		}
   1544          		else {
   1545          			// int enabled 
   1546          			print_sp1sp();
   \                     ??list_mt_ints_console_5:
   \   00000082   ........           BL       print_sp1sp
   1547          			// pin output? 
   1548          			if(j & FULL_EOP) print_b1sp();
   \   00000086   2804               LSLS     R0,R5,#+16
   \   00000088   02D5               BPL.N    ??list_mt_ints_console_7
   \   0000008A   ........           BL       print_b1sp
   \   0000008E   01E0               B.N      ??list_mt_ints_console_8
   1549          			else print_b0sp(); 
   \                     ??list_mt_ints_console_7:
   \   00000090   ........           BL       print_b0sp
   1550          			// pending? 
   1551          			if(k & FULL_EOP) printf("1\n\r");
   \                     ??list_mt_ints_console_8:
   \   00000094   3004               LSLS     R0,R6,#+16
   \   00000096   03D5               BPL.N    ??list_mt_ints_console_9
   \   00000098   BBA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000009A   ........           BL       printf
   \   0000009E   02E0               B.N      ??list_mt_ints_console_6
   1552          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_9:
   \   000000A0   BAA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000000A2   ........           BL       printf
   1553          		}
   1554          
   1555          		printf("Offset before FULL_EOP");
   \                     ??list_mt_ints_console_6:
   \   000000A6   ........           LDR.W    R0,??DataTable16_11
   \   000000AA   ........           BL       printf
   1556          		if(!(i & FULL_OFS)) {	
   \   000000AE   A006               LSLS     R0,R4,#+26
   \   000000B0   02D4               BMI.N    ??list_mt_ints_console_11
   1557          			// int disabled 
   1558          			print_null();
   \   000000B2   ........           BL       print_null
   \   000000B6   11E0               B.N      ??list_mt_ints_console_12
   1559          		}
   1560          		else {
   1561          			// int enabled 
   1562          			print_sp1sp();
   \                     ??list_mt_ints_console_11:
   \   000000B8   ........           BL       print_sp1sp
   1563          			// pin output? 
   1564          			if(j & FULL_OFS) print_b1sp();
   \   000000BC   A806               LSLS     R0,R5,#+26
   \   000000BE   02D5               BPL.N    ??list_mt_ints_console_13
   \   000000C0   ........           BL       print_b1sp
   \   000000C4   01E0               B.N      ??list_mt_ints_console_14
   1565          			else print_b0sp(); 
   \                     ??list_mt_ints_console_13:
   \   000000C6   ........           BL       print_b0sp
   1566          			// pending? 
   1567          			if(k & FULL_OFS) printf("1\n\r");
   \                     ??list_mt_ints_console_14:
   \   000000CA   B006               LSLS     R0,R6,#+26
   \   000000CC   03D5               BPL.N    ??list_mt_ints_console_15
   \   000000CE   AEA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000000D0   ........           BL       printf
   \   000000D4   02E0               B.N      ??list_mt_ints_console_12
   1568          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_15:
   \   000000D6   ADA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000000D8   ........           BL       printf
   1569          		}
   1570          
   1571          		printf("Pkt Max 1553 Msg Words");
   \                     ??list_mt_ints_console_12:
   \   000000DC   ........           LDR.W    R0,??DataTable16_12
   \   000000E0   ........           BL       printf
   1572          		if(!(i & MAXWORDS)) {	
   \   000000E4   6004               LSLS     R0,R4,#+17
   \   000000E6   02D4               BMI.N    ??list_mt_ints_console_16
   1573          			// int disabled 
   1574          			print_null();
   \   000000E8   ........           BL       print_null
   \   000000EC   11E0               B.N      ??list_mt_ints_console_17
   1575          		}
   1576          		else {
   1577          			// int enabled 
   1578          			print_sp1sp();
   \                     ??list_mt_ints_console_16:
   \   000000EE   ........           BL       print_sp1sp
   1579          			// pin output? 
   1580          			if(j & MAXWORDS) print_b1sp();
   \   000000F2   6804               LSLS     R0,R5,#+17
   \   000000F4   02D5               BPL.N    ??list_mt_ints_console_18
   \   000000F6   ........           BL       print_b1sp
   \   000000FA   01E0               B.N      ??list_mt_ints_console_19
   1581          			else print_b0sp(); 
   \                     ??list_mt_ints_console_18:
   \   000000FC   ........           BL       print_b0sp
   1582          			// pending? 
   1583          			if(k & MAXWORDS) printf("1\n\r");
   \                     ??list_mt_ints_console_19:
   \   00000100   7004               LSLS     R0,R6,#+17
   \   00000102   03D5               BPL.N    ??list_mt_ints_console_20
   \   00000104   A0A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000106   ........           BL       printf
   \   0000010A   02E0               B.N      ??list_mt_ints_console_17
   1584          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_20:
   \   0000010C   9FA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000010E   ........           BL       printf
   1585          		}
   1586          
   1587          		printf("Pkt Max 1553 Msg Count");
   \                     ??list_mt_ints_console_17:
   \   00000112   ........           LDR.W    R0,??DataTable16_13
   \   00000116   ........           BL       printf
   1588          		if(!(i & MAXMSGS)) {	
   \   0000011A   A004               LSLS     R0,R4,#+18
   \   0000011C   02D4               BMI.N    ??list_mt_ints_console_21
   1589          			// int disabled 
   1590          			print_null();
   \   0000011E   ........           BL       print_null
   \   00000122   11E0               B.N      ??list_mt_ints_console_22
   1591          		}
   1592          		else {
   1593          			// int enabled 
   1594          			print_sp1sp();
   \                     ??list_mt_ints_console_21:
   \   00000124   ........           BL       print_sp1sp
   1595          			// pin output? 
   1596          			if(j & MAXMSGS) print_b1sp();
   \   00000128   A804               LSLS     R0,R5,#+18
   \   0000012A   02D5               BPL.N    ??list_mt_ints_console_23
   \   0000012C   ........           BL       print_b1sp
   \   00000130   01E0               B.N      ??list_mt_ints_console_24
   1597          			else print_b0sp(); 
   \                     ??list_mt_ints_console_23:
   \   00000132   ........           BL       print_b0sp
   1598          			// pending? 
   1599          			if(k & MAXMSGS) printf("1\n\r");
   \                     ??list_mt_ints_console_24:
   \   00000136   B004               LSLS     R0,R6,#+18
   \   00000138   03D5               BPL.N    ??list_mt_ints_console_25
   \   0000013A   93A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000013C   ........           BL       printf
   \   00000140   02E0               B.N      ??list_mt_ints_console_22
   1600          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_25:
   \   00000142   92A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000144   ........           BL       printf
   1601          		}
   1602          	
   1603          		printf(" Max Gap Time Exceeded");
   \                     ??list_mt_ints_console_22:
   \   00000148   ........           LDR.W    R0,??DataTable16_14
   \   0000014C   ........           BL       printf
   1604          		if(!(i & MAXGAP)) {	
   \   00000150   E004               LSLS     R0,R4,#+19
   \   00000152   02D4               BMI.N    ??list_mt_ints_console_26
   1605          			// int disabled 
   1606          			print_null();
   \   00000154   ........           BL       print_null
   \   00000158   11E0               B.N      ??list_mt_ints_console_27
   1607          		}
   1608          		else {
   1609          			// int enabled 
   1610          			print_sp1sp();
   \                     ??list_mt_ints_console_26:
   \   0000015A   ........           BL       print_sp1sp
   1611          			// pin output? 
   1612          			if(j & MAXGAP) print_b1sp();
   \   0000015E   E804               LSLS     R0,R5,#+19
   \   00000160   02D5               BPL.N    ??list_mt_ints_console_28
   \   00000162   ........           BL       print_b1sp
   \   00000166   01E0               B.N      ??list_mt_ints_console_29
   1613          			else print_b0sp(); 
   \                     ??list_mt_ints_console_28:
   \   00000168   ........           BL       print_b0sp
   1614          			// pending? 
   1615          			if(k & MAXGAP) printf("1\n\r");
   \                     ??list_mt_ints_console_29:
   \   0000016C   F004               LSLS     R0,R6,#+19
   \   0000016E   03D5               BPL.N    ??list_mt_ints_console_30
   \   00000170   85A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000172   ........           BL       printf
   \   00000176   02E0               B.N      ??list_mt_ints_console_27
   1616          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_30:
   \   00000178   84A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000017A   ........           BL       printf
   1617          		}
   1618          	
   1619          		printf("Max Pkt Recording Time");
   \                     ??list_mt_ints_console_27:
   \   0000017E   ........           LDR.W    R0,??DataTable16_15
   \   00000182   ........           BL       printf
   1620          		if(!(i & MAXTIME)) {	
   \   00000186   2005               LSLS     R0,R4,#+20
   \   00000188   02D4               BMI.N    ??list_mt_ints_console_31
   1621          			// int disabled 
   1622          			print_null();
   \   0000018A   ........           BL       print_null
   \   0000018E   11E0               B.N      ??list_mt_ints_console_32
   1623          		}
   1624          		else {
   1625          			// int enabled 
   1626          			print_sp1sp();
   \                     ??list_mt_ints_console_31:
   \   00000190   ........           BL       print_sp1sp
   1627          			// pin output? 
   1628          			if(j & MAXTIME) print_b1sp();
   \   00000194   2805               LSLS     R0,R5,#+20
   \   00000196   02D5               BPL.N    ??list_mt_ints_console_33
   \   00000198   ........           BL       print_b1sp
   \   0000019C   01E0               B.N      ??list_mt_ints_console_34
   1629          			else print_b0sp(); 
   \                     ??list_mt_ints_console_33:
   \   0000019E   ........           BL       print_b0sp
   1630          			// pending? 
   1631          			if(k & MAXTIME) printf("1\n\r");
   \                     ??list_mt_ints_console_34:
   \   000001A2   3005               LSLS     R0,R6,#+20
   \   000001A4   03D5               BPL.N    ??list_mt_ints_console_35
   \   000001A6   78A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000001A8   ........           BL       printf
   \   000001AC   02E0               B.N      ??list_mt_ints_console_32
   1632          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_35:
   \   000001AE   77A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000001B0   ........           BL       printf
   1633          		}
   1634          	
   1635          		printf("      Host Packet Stop");
   \                     ??list_mt_ints_console_32:
   \   000001B4   ........           LDR.W    R0,??DataTable16_16
   \   000001B8   ........           BL       printf
   1636          		if(!(i & HPKTSTOP)) {	
   \   000001BC   6005               LSLS     R0,R4,#+21
   \   000001BE   02D4               BMI.N    ??list_mt_ints_console_36
   1637          			// int disabled 
   1638          			print_null();
   \   000001C0   ........           BL       print_null
   \   000001C4   11E0               B.N      ??list_mt_ints_console_37
   1639          		}
   1640          		else {
   1641          			// int enabled 
   1642          			print_sp1sp();
   \                     ??list_mt_ints_console_36:
   \   000001C6   ........           BL       print_sp1sp
   1643          			// pin output? 
   1644          			if(j & HPKTSTOP) print_b1sp();
   \   000001CA   6805               LSLS     R0,R5,#+21
   \   000001CC   02D5               BPL.N    ??list_mt_ints_console_38
   \   000001CE   ........           BL       print_b1sp
   \   000001D2   01E0               B.N      ??list_mt_ints_console_39
   1645          			else print_b0sp(); 
   \                     ??list_mt_ints_console_38:
   \   000001D4   ........           BL       print_b0sp
   1646          			// pending? 
   1647          			if(k & HPKTSTOP) printf("1\n\r");
   \                     ??list_mt_ints_console_39:
   \   000001D8   7005               LSLS     R0,R6,#+21
   \   000001DA   03D5               BPL.N    ??list_mt_ints_console_40
   \   000001DC   6AA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000001DE   ........           BL       printf
   \   000001E2   02E0               B.N      ??list_mt_ints_console_37
   1648          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_40:
   \   000001E4   69A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000001E6   ........           BL       printf
   1649          		}
   1650          				 
   1651          		printf("Stack End Addr Written");
   \                     ??list_mt_ints_console_37:
   \   000001EA   ........           LDR.W    R0,??DataTable16_17
   \   000001EE   ........           BL       printf
   1652          		if(!(i & STKROVR)) {	
   \   000001F2   E005               LSLS     R0,R4,#+23
   \   000001F4   02D4               BMI.N    ??list_mt_ints_console_41
   1653          			// int disabled 
   1654          			print_null();
   \   000001F6   ........           BL       print_null
   \   000001FA   11E0               B.N      ??list_mt_ints_console_42
   1655          		}
   1656          		else {
   1657          			// int enabled 
   1658          			print_sp1sp();
   \                     ??list_mt_ints_console_41:
   \   000001FC   ........           BL       print_sp1sp
   1659          			// pin output? 
   1660          			if(j & STKROVR) print_b1sp();
   \   00000200   E805               LSLS     R0,R5,#+23
   \   00000202   02D5               BPL.N    ??list_mt_ints_console_43
   \   00000204   ........           BL       print_b1sp
   \   00000208   01E0               B.N      ??list_mt_ints_console_44
   1661          			else print_b0sp(); 
   \                     ??list_mt_ints_console_43:
   \   0000020A   ........           BL       print_b0sp
   1662          			// pending? 
   1663          			if(k & STKROVR) printf("1\n\r");
   \                     ??list_mt_ints_console_44:
   \   0000020E   F005               LSLS     R0,R6,#+23
   \   00000210   03D5               BPL.N    ??list_mt_ints_console_45
   \   00000212   5DA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000214   ........           BL       printf
   \   00000218   02E0               B.N      ??list_mt_ints_console_42
   1664          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_45:
   \   0000021A   5CA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000021C   ........           BL       printf
   1665          		}
   1666          
   1667          		printf(" Hit Cmd Stack Address");
   \                     ??list_mt_ints_console_42:
   \   00000220   ........           LDR.W    R0,??DataTable16_18
   \   00000224   ........           BL       printf
   1668          		if(!(i & STKADRSS)) {	
   \   00000228   6006               LSLS     R0,R4,#+25
   \   0000022A   02D4               BMI.N    ??list_mt_ints_console_46
   1669          			// int disabled 
   1670          			print_null();
   \   0000022C   ........           BL       print_null
   \   00000230   11E0               B.N      ??list_mt_ints_console_47
   1671          		}
   1672          		else {
   1673          			// int enabled 
   1674          			print_sp1sp();
   \                     ??list_mt_ints_console_46:
   \   00000232   ........           BL       print_sp1sp
   1675          			// pin output? 
   1676          			if(j & STKADRSS) print_b1sp();
   \   00000236   6806               LSLS     R0,R5,#+25
   \   00000238   02D5               BPL.N    ??list_mt_ints_console_48
   \   0000023A   ........           BL       print_b1sp
   \   0000023E   01E0               B.N      ??list_mt_ints_console_49
   1677          			else print_b0sp(); 
   \                     ??list_mt_ints_console_48:
   \   00000240   ........           BL       print_b0sp
   1678          			// pending? 
   1679          			if(k & STKADRSS) printf("1\n\r");
   \                     ??list_mt_ints_console_49:
   \   00000244   7006               LSLS     R0,R6,#+25
   \   00000246   03D5               BPL.N    ??list_mt_ints_console_50
   \   00000248   4FA0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000024A   ........           BL       printf
   \   0000024E   02E0               B.N      ??list_mt_ints_console_47
   1680          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_50:
   \   00000250   4EA0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000252   ........           BL       printf
   1681          		}
   1682          
   1683          		printf(" IRIG-106 Packet Ready");
   \                     ??list_mt_ints_console_47:
   \   00000256   ........           LDR.W    R0,??DataTable16_19
   \   0000025A   ........           BL       printf
   1684          		if(!(i & PKTREADY)) {	
   \   0000025E   A005               LSLS     R0,R4,#+22
   \   00000260   02D4               BMI.N    ??list_mt_ints_console_51
   1685          			// int disabled 
   1686          			print_null();
   \   00000262   ........           BL       print_null
   \   00000266   11E0               B.N      ??list_mt_ints_console_52
   1687          		}
   1688          		else {
   1689          			// int enabled 
   1690          			print_sp1sp();
   \                     ??list_mt_ints_console_51:
   \   00000268   ........           BL       print_sp1sp
   1691          			// pin output? 
   1692          			if(j & PKTREADY) print_b1sp();
   \   0000026C   A805               LSLS     R0,R5,#+22
   \   0000026E   02D5               BPL.N    ??list_mt_ints_console_53
   \   00000270   ........           BL       print_b1sp
   \   00000274   01E0               B.N      ??list_mt_ints_console_54
   1693          			else print_b0sp(); 
   \                     ??list_mt_ints_console_53:
   \   00000276   ........           BL       print_b0sp
   1694          			// pending? 
   1695          			if(k & PKTREADY) printf("1\n\r");
   \                     ??list_mt_ints_console_54:
   \   0000027A   B005               LSLS     R0,R6,#+22
   \   0000027C   03D5               BPL.N    ??list_mt_ints_console_55
   \   0000027E   42A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000280   ........           BL       printf
   \   00000284   02E0               B.N      ??list_mt_ints_console_52
   1696          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_55:
   \   00000286   41A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000288   ........           BL       printf
   1697          		}
   1698          
   1699          		printf("Monitor End-of-Message");
   \                     ??list_mt_ints_console_52:
   \   0000028C   ........           LDR.W    R0,??DataTable16_20
   \   00000290   ........           BL       printf
   1700          		if(!(i & (1<<3))) {	
   \   00000294   2007               LSLS     R0,R4,#+28
   \   00000296   02D4               BMI.N    ??list_mt_ints_console_56
   1701          			// int disabled 
   1702          			print_null();
   \   00000298   ........           BL       print_null
   \   0000029C   11E0               B.N      ??list_mt_ints_console_57
   1703          		}
   1704          		else {
   1705          			// int enabled 
   1706          			print_sp1sp();
   \                     ??list_mt_ints_console_56:
   \   0000029E   ........           BL       print_sp1sp
   1707          			// pin output? 
   1708          			if(j & (1<<3)) print_b1sp();
   \   000002A2   2807               LSLS     R0,R5,#+28
   \   000002A4   02D5               BPL.N    ??list_mt_ints_console_58
   \   000002A6   ........           BL       print_b1sp
   \   000002AA   01E0               B.N      ??list_mt_ints_console_59
   1709          			else print_b0sp(); 
   \                     ??list_mt_ints_console_58:
   \   000002AC   ........           BL       print_b0sp
   1710          			// pending? 
   1711          			if(k & (1<<3)) printf("1\n\r");
   \                     ??list_mt_ints_console_59:
   \   000002B0   3007               LSLS     R0,R6,#+28
   \   000002B2   03D5               BPL.N    ??list_mt_ints_console_60
   \   000002B4   34A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000002B6   ........           BL       printf
   \   000002BA   02E0               B.N      ??list_mt_ints_console_57
   1712          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_60:
   \   000002BC   33A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   000002BE   ........           BL       printf
   1713          		}
   1714          
   1715          		printf("\nIMT Skips Bits 4,2,1,0");
   \                     ??list_mt_ints_console_57:
   \   000002C2   ........           LDR.W    R0,??DataTable16_21
   \   000002C6   ........           BL       printf
   1716          		print_dddn();
   \   000002CA   ........           BL       print_dddn
   \   000002CE   A7E0               B.N      ??list_mt_ints_console_61
   1717          
   1718          	}		// end if(!smt)
   1719          
   1720          	else {
   1721          		// Simple Monitor mode, disregard bits 15-9 and 2-0 
   1722          
   1723          		printf("SMT Cmd Stack Rollover");
   \                     ??list_mt_ints_console_4:
   \   000002D0   ........           LDR.W    R0,??DataTable16_22
   \   000002D4   ........           BL       printf
   1724          		if(!(i & STKROVR)) {	
   \   000002D8   E005               LSLS     R0,R4,#+23
   \   000002DA   02D4               BMI.N    ??list_mt_ints_console_62
   1725          			// int disabled 
   1726          			print_null();
   \   000002DC   ........           BL       print_null
   \   000002E0   11E0               B.N      ??list_mt_ints_console_63
   1727          		}
   1728          		else {
   1729          			// int enabled 
   1730          			print_sp1sp();
   \                     ??list_mt_ints_console_62:
   \   000002E2   ........           BL       print_sp1sp
   1731          			// pin output? 
   1732          			if(j & STKROVR) print_b1sp();
   \   000002E6   E805               LSLS     R0,R5,#+23
   \   000002E8   02D5               BPL.N    ??list_mt_ints_console_64
   \   000002EA   ........           BL       print_b1sp
   \   000002EE   01E0               B.N      ??list_mt_ints_console_65
   1733          			else print_b0sp(); 
   \                     ??list_mt_ints_console_64:
   \   000002F0   ........           BL       print_b0sp
   1734          			// pending? 
   1735          			if(k & STKROVR) printf("1\n\r");
   \                     ??list_mt_ints_console_65:
   \   000002F4   F005               LSLS     R0,R6,#+23
   \   000002F6   03D5               BPL.N    ??list_mt_ints_console_66
   \   000002F8   23A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   000002FA   ........           BL       printf
   \   000002FE   02E0               B.N      ??list_mt_ints_console_63
   1736          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_66:
   \   00000300   22A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000302   ........           BL       printf
   1737          		}
   1738          	
   1739          		printf("SMT DataStack Rollover");
   \                     ??list_mt_ints_console_63:
   \   00000306   ........           LDR.W    R0,??DataTable16_23
   \   0000030A   ........           BL       printf
   1740          		if(!(i & DSTKROVR)) {	
   \   0000030E   2006               LSLS     R0,R4,#+24
   \   00000310   04D4               BMI.N    ??list_mt_ints_console_67
   1741          			// int disabled 
   1742          			print_null();
   \   00000312   ........           BL       print_null
   \   00000316   13E0               B.N      ??list_mt_ints_console_68
   \                     ??list_mt_ints_console_1:
   \   00000318   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00
   1743          		}
   1744          		else {
   1745          			// int enabled 
   1746          			print_sp1sp();
   \                     ??list_mt_ints_console_67:
   \   0000031C   ........           BL       print_sp1sp
   1747          			// pin output? 
   1748          			if(j & DSTKROVR) print_b1sp();
   \   00000320   2806               LSLS     R0,R5,#+24
   \   00000322   02D5               BPL.N    ??list_mt_ints_console_69
   \   00000324   ........           BL       print_b1sp
   \   00000328   01E0               B.N      ??list_mt_ints_console_70
   1749          			else print_b0sp(); 
   \                     ??list_mt_ints_console_69:
   \   0000032A   ........           BL       print_b0sp
   1750          			// pending? 
   1751          			if(k & STKROVR) printf("1\n\r");
   \                     ??list_mt_ints_console_70:
   \   0000032E   F005               LSLS     R0,R6,#+23
   \   00000330   03D5               BPL.N    ??list_mt_ints_console_71
   \   00000332   15A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   00000334   ........           BL       printf
   \   00000338   02E0               B.N      ??list_mt_ints_console_68
   1752          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_71:
   \   0000033A   14A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   0000033C   ........           BL       printf
   1753          		}
   1754          
   1755          		printf("SMT  Cmd Stack Address");
   \                     ??list_mt_ints_console_68:
   \   00000340   ........           LDR.W    R0,??DataTable16_24
   \   00000344   ........           BL       printf
   1756          		if(!(i & STKADRSS)) {	
   \   00000348   6006               LSLS     R0,R4,#+25
   \   0000034A   02D4               BMI.N    ??list_mt_ints_console_72
   1757          			// int disabled 
   1758          			print_null();
   \   0000034C   ........           BL       print_null
   \   00000350   11E0               B.N      ??list_mt_ints_console_73
   1759          		}
   1760          		else {
   1761          			// int enabled 
   1762          			print_sp1sp();
   \                     ??list_mt_ints_console_72:
   \   00000352   ........           BL       print_sp1sp
   1763          			// pin output? 
   1764          			if(j & STKADRSS) print_b1sp();
   \   00000356   6806               LSLS     R0,R5,#+25
   \   00000358   02D5               BPL.N    ??list_mt_ints_console_74
   \   0000035A   ........           BL       print_b1sp
   \   0000035E   01E0               B.N      ??list_mt_ints_console_75
   1765          			else print_b0sp(); 
   \                     ??list_mt_ints_console_74:
   \   00000360   ........           BL       print_b0sp
   1766          			// pending? 
   1767          			if(k & STKADRSS) printf("1\n\r");
   \                     ??list_mt_ints_console_75:
   \   00000364   7006               LSLS     R0,R6,#+25
   \   00000366   03D5               BPL.N    ??list_mt_ints_console_76
   \   00000368   07A0               ADR.N    R0,??list_mt_ints_console_10  ;; "1\n\r"
   \   0000036A   ........           BL       printf
   \   0000036E   02E0               B.N      ??list_mt_ints_console_73
   1768          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_76:
   \   00000370   06A0               ADR.N    R0,??list_mt_ints_console_10+0x4  ;; "0\n\r"
   \   00000372   ........           BL       printf
   1769          		}
   1770          
   1771          		printf("SMT Data Stack Address");
   \                     ??list_mt_ints_console_73:
   \   00000376   ........           LDR.W    R0,??DataTable16_25
   \   0000037A   ........           BL       printf
   1772          		if(!(i & DSTKADRSS)) {	
   \   0000037E   A006               LSLS     R0,R4,#+26
   \   00000380   06D4               BMI.N    ??list_mt_ints_console_77
   1773          			// int disabled 
   1774          			print_null();
   \   00000382   ........           BL       print_null
   \   00000386   15E0               B.N      ??list_mt_ints_console_78
   \                     ??list_mt_ints_console_10:
   \   00000388   310A0D00           DC8      "1\n\r"
   \   0000038C   300A0D00           DC8      "0\n\r"
   1775          		}
   1776          		else {
   1777          			// int enabled 
   1778          			print_sp1sp();
   \                     ??list_mt_ints_console_77:
   \   00000390   ........           BL       print_sp1sp
   1779          			// pin output? 
   1780          			if(j & DSTKADRSS) print_b1sp();
   \   00000394   A806               LSLS     R0,R5,#+26
   \   00000396   02D5               BPL.N    ??list_mt_ints_console_79
   \   00000398   ........           BL       print_b1sp
   \   0000039C   01E0               B.N      ??list_mt_ints_console_80
   1781          			else print_b0sp(); 
   \                     ??list_mt_ints_console_79:
   \   0000039E   ........           BL       print_b0sp
   1782          				// pending? 
   1783          			if(k & DSTKADRSS) printf("1\n\r");
   \                     ??list_mt_ints_console_80:
   \   000003A2   B006               LSLS     R0,R6,#+26
   \   000003A4   03D5               BPL.N    ??list_mt_ints_console_81
   \   000003A6   ....               ADR.N    R0,??DataTable4_13  ;; "1\n\r"
   \   000003A8   ........           BL       printf
   \   000003AC   02E0               B.N      ??list_mt_ints_console_78
   1784          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_81:
   \   000003AE   ....               ADR.N    R0,??DataTable4_16  ;; "0\n\r"
   \   000003B0   ........           BL       printf
   1785          		}
   1786          
   1787          		printf("RT Status is Msg Error");
   \                     ??list_mt_ints_console_78:
   \   000003B4   ........           LDR.W    R0,??DataTable16_26
   \   000003B8   ........           BL       printf
   1788          		if(!(i & MSG_ERR)) {	
   \   000003BC   E006               LSLS     R0,R4,#+27
   \   000003BE   02D4               BMI.N    ??list_mt_ints_console_82
   1789          			// int disabled 
   1790          			print_null();
   \   000003C0   ........           BL       print_null
   \   000003C4   11E0               B.N      ??list_mt_ints_console_83
   1791          		}
   1792          		else {
   1793          			// int enabled 
   1794          			print_sp1sp();
   \                     ??list_mt_ints_console_82:
   \   000003C6   ........           BL       print_sp1sp
   1795          			// pin output? 
   1796          			if(j & MSG_ERR) print_b1sp();
   \   000003CA   E806               LSLS     R0,R5,#+27
   \   000003CC   02D5               BPL.N    ??list_mt_ints_console_84
   \   000003CE   ........           BL       print_b1sp
   \   000003D2   01E0               B.N      ??list_mt_ints_console_85
   1797          			else print_b0sp(); 
   \                     ??list_mt_ints_console_84:
   \   000003D4   ........           BL       print_b0sp
   1798          			// pending? 
   1799          			if(k & MSG_ERR) printf("1\n\r");
   \                     ??list_mt_ints_console_85:
   \   000003D8   F006               LSLS     R0,R6,#+27
   \   000003DA   03D5               BPL.N    ??list_mt_ints_console_86
   \   000003DC   ....               ADR.N    R0,??DataTable4_13  ;; "1\n\r"
   \   000003DE   ........           BL       printf
   \   000003E2   02E0               B.N      ??list_mt_ints_console_83
   1800          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_86:
   \   000003E4   ....               ADR.N    R0,??DataTable4_16  ;; "0\n\r"
   \   000003E6   ........           BL       printf
   1801          		}
   1802          
   1803          		printf("     MT End-of-Message");
   \                     ??list_mt_ints_console_83:
   \   000003EA   ........           LDR.W    R0,??DataTable16_27
   \   000003EE   ........           BL       printf
   1804          		if(!(i & MT_EOM)) {	
   \   000003F2   2007               LSLS     R0,R4,#+28
   \   000003F4   02D4               BMI.N    ??list_mt_ints_console_87
   1805          			// int disabled 
   1806          			print_null();
   \   000003F6   ........           BL       print_null
   \   000003FA   11E0               B.N      ??list_mt_ints_console_61
   1807          		}
   1808          		else {
   1809          			// int enabled 
   1810          			print_sp1sp();
   \                     ??list_mt_ints_console_87:
   \   000003FC   ........           BL       print_sp1sp
   1811          			// pin output? 
   1812          			if(j & MT_EOM) print_b1sp();
   \   00000400   2807               LSLS     R0,R5,#+28
   \   00000402   02D5               BPL.N    ??list_mt_ints_console_88
   \   00000404   ........           BL       print_b1sp
   \   00000408   01E0               B.N      ??list_mt_ints_console_89
   1813          			else print_b0sp(); 
   \                     ??list_mt_ints_console_88:
   \   0000040A   ........           BL       print_b0sp
   1814          			// pending? 
   1815          			if(k & MT_EOM) printf("1\n\r");
   \                     ??list_mt_ints_console_89:
   \   0000040E   3007               LSLS     R0,R6,#+28
   \   00000410   03D5               BPL.N    ??list_mt_ints_console_90
   \   00000412   ....               ADR.N    R0,??DataTable4_13  ;; "1\n\r"
   \   00000414   ........           BL       printf
   \   00000418   02E0               B.N      ??list_mt_ints_console_61
   1816          			else printf("0\n\r"); 
   \                     ??list_mt_ints_console_90:
   \   0000041A   ....               ADR.N    R0,??DataTable4_16  ;; "0\n\r"
   \   0000041C   ........           BL       printf
   1817          		}
   1818          	}		// end else .... SMT mode
   1819                    
   1820          	print_line();
   \                     ??list_mt_ints_console_61:
   \   00000420   ........           BL       print_line
   1821          	printf("Note: Reading the MT Pending Interrupt Register clears it!\n\r");
   \   00000424   ........           LDR.W    R0,??DataTable16_28
   \   00000428   ........           BL       printf
   1822          
   1823          	print_menuprompt();
   \   0000042C   ........           BL       print_menuprompt
   1824          
   1825          	// return value read from the MT Pending Interrupt Register, now cleared 
   1826          	return k;
   \   00000430   3000               MOVS     R0,R6
   \   00000432   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000434   F2BD               POP      {R1,R4-R7,PC}    ;; return
   1827           
   1828          }	// end list_mt_ints_console()
   1829          
   1830          
   1831          #endif  // (SMT_ena || IMT_ena)
   1832          
   1833          
   1834          //-------------------------------------------------------------------------
   1835          //  this function lists hardware interrupt configuration
   1836          //	to the console via UART. if there are pending
   1837          //	hardware interrupts, these too are displayed.
   1838          //	Function returns the value read from the HW pending
   1839          //	interrupt register, since reading the reg clears it.
   1840          //-------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   1841          unsigned short int list_hw_ints_console (void) {
   \                     list_hw_ints_console:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1842          
   1843          	unsigned short i, j, k;
   1844                  
   1845           ///       #if (HOST_BUS_INTERFACE)
   1846                  extern const H6130 pH6130; // HI-6130 register struct base address  
   1847          ///        #endif
   1848                  
   1849          	// formfeed 
   1850          	putchar(12); 	
   \   00000002   0C20               MOVS     R0,#+12
   \   00000004   ........           BL       putchar
   1851          	printf("\n\r Hardware Interrupts   Enabled?   Pin Output?   Pending?\n\r");
   \   00000008   ........           LDR.W    R0,??DataTable16_29
   \   0000000C   ........           BL       printf
   1852          	print_line();
   \   00000010   ........           BL       print_line
   1853          
   1854          ///	#if (HOST_BUS_INTERFACE)
   1855          		i = pH6130->HDW_INT_ENABLE_REG;
   \   00000014   ........           LDR.W    R0,??DataTable16_6
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   C08B               LDRH     R0,[R0, #+30]
   \   0000001C   0400               MOVS     R4,R0
   1856          		j = pH6130->HDW_INT_OUTPUT_ENABLE_REG;
   \   0000001E   ........           LDR.W    R0,??DataTable16_6
   \   00000022   0068               LDR      R0,[R0, #+0]
   \   00000024   C08C               LDRH     R0,[R0, #+38]
   \   00000026   0500               MOVS     R5,R0
   1857          		k = pH6130->HDW_PENDING_INT_REG;
   \   00000028   ........           LDR.W    R0,??DataTable16_6
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   8089               LDRH     R0,[R0, #+12]
   \   00000030   0600               MOVS     R6,R0
   1858          		printf("HI-6131 Host SPI Error    n/a         n/a         n/a\n\r");
   \   00000032   ........           LDR.W    R0,??DataTable16_30
   \   00000036   ........           BL       printf
   1859          	/*	
   1860          	#else // (HOST_SPI_INTERFACE)
   1861          		Write_6131LowReg(MAP_1, HDW_INT_ENABLE_REG, 1);
   1862          		i = Read_6131_1word(1);
   1863          		Write_6131LowReg(MAP_1, HDW_INT_OUTPUT_ENABLE_REG, 1);
   1864          		j = Read_6131_1word(1);
   1865          		Write_6131LowReg(MAP_1, HDW_PENDING_INT_REG, 1);
   1866          		k = Read_6131_1word(1);
   1867          		printf("HI-6131 Host SPI Error");
   1868          		if(!(i & (1<<15))) {	
   1869          			// int disabled 
   1870          			print_null();
   1871          		}
   1872          		else {
   1873          			// int enabled 
   1874          			print_sp1sp();
   1875          			// pin output? 
   1876          			if(j & (1<<15)) print_b1sp();
   1877          			else print_b0sp(); 
   1878          			// pending? 
   1879          			if(k & (1<<15)) printf("1\n\r");
   1880          			else printf("0\n\r"); 
   1881          		}
   1882          	#endif
   1883          */
   1884                          
   1885          	printf("EE Chksum/Corr RAM Err");
   \   0000003A   ........           LDR.W    R0,??DataTable16_31
   \   0000003E   ........           BL       printf
   1886          	if(!(i & (1<<14))) {	
   \   00000042   6004               LSLS     R0,R4,#+17
   \   00000044   02D4               BMI.N    ??list_hw_ints_console_0
   1887          		// int disabled 
   1888          		print_null();
   \   00000046   ........           BL       print_null
   \   0000004A   11E0               B.N      ??list_hw_ints_console_1
   1889          	}
   1890          	else {
   1891          		// int enabled 
   1892          		print_sp1sp();
   \                     ??list_hw_ints_console_0:
   \   0000004C   ........           BL       print_sp1sp
   1893          		// pin output? 
   1894          		if(j & (1<<14)) print_b1sp();
   \   00000050   6804               LSLS     R0,R5,#+17
   \   00000052   02D5               BPL.N    ??list_hw_ints_console_2
   \   00000054   ........           BL       print_b1sp
   \   00000058   01E0               B.N      ??list_hw_ints_console_3
   1895          		else print_b0sp(); 
   \                     ??list_hw_ints_console_2:
   \   0000005A   ........           BL       print_b0sp
   1896          		// pending? 
   1897          		if(k & (1<<14)) printf("1\n\r");
   \                     ??list_hw_ints_console_3:
   \   0000005E   7004               LSLS     R0,R6,#+17
   \   00000060   03D5               BPL.N    ??list_hw_ints_console_4
   \   00000062   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000064   ........           BL       printf
   \   00000068   02E0               B.N      ??list_hw_ints_console_1
   1898          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_4:
   \   0000006A   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   0000006C   ........           BL       printf
   1899          	}
   1900          
   1901          	printf("RAM Init/UncorrRAM Err");
   \                     ??list_hw_ints_console_1:
   \   00000070   ........           LDR.W    R0,??DataTable16_32
   \   00000074   ........           BL       printf
   1902          	if(!(i & (1<<13))) {	
   \   00000078   A004               LSLS     R0,R4,#+18
   \   0000007A   02D4               BMI.N    ??list_hw_ints_console_5
   1903          		// int disabled 
   1904          		print_null();
   \   0000007C   ........           BL       print_null
   \   00000080   11E0               B.N      ??list_hw_ints_console_6
   1905          	}
   1906          	else {
   1907          		// int enabled 
   1908          		print_sp1sp();
   \                     ??list_hw_ints_console_5:
   \   00000082   ........           BL       print_sp1sp
   1909          		// pin output? 
   1910          		if(j & (1<<13)) print_b1sp();
   \   00000086   A804               LSLS     R0,R5,#+18
   \   00000088   02D5               BPL.N    ??list_hw_ints_console_7
   \   0000008A   ........           BL       print_b1sp
   \   0000008E   01E0               B.N      ??list_hw_ints_console_8
   1911          		else print_b0sp(); 
   \                     ??list_hw_ints_console_7:
   \   00000090   ........           BL       print_b0sp
   1912          		// pending? 
   1913          		if(k & (1<<13)) printf("1\n\r");
   \                     ??list_hw_ints_console_8:
   \   00000094   B004               LSLS     R0,R6,#+18
   \   00000096   03D5               BPL.N    ??list_hw_ints_console_9
   \   00000098   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   0000009A   ........           BL       printf
   \   0000009E   02E0               B.N      ??list_hw_ints_console_6
   1914          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_9:
   \   000000A0   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000000A2   ........           BL       printf
   1915          	}
   1916          
   1917          	printf("Loopback Fail on Bus A");
   \                     ??list_hw_ints_console_6:
   \   000000A6   ........           LDR.W    R0,??DataTable16_33
   \   000000AA   ........           BL       printf
   1918          	if(!(i & (1<<12))) {	
   \   000000AE   E004               LSLS     R0,R4,#+19
   \   000000B0   02D4               BMI.N    ??list_hw_ints_console_10
   1919          		// int disabled 
   1920          		print_null();
   \   000000B2   ........           BL       print_null
   \   000000B6   11E0               B.N      ??list_hw_ints_console_11
   1921          	}
   1922          	else {
   1923          		// int enabled 
   1924          		print_sp1sp();
   \                     ??list_hw_ints_console_10:
   \   000000B8   ........           BL       print_sp1sp
   1925          		// pin output? 
   1926          		if(j & (1<<12)) print_b1sp();
   \   000000BC   E804               LSLS     R0,R5,#+19
   \   000000BE   02D5               BPL.N    ??list_hw_ints_console_12
   \   000000C0   ........           BL       print_b1sp
   \   000000C4   01E0               B.N      ??list_hw_ints_console_13
   1927          		else print_b0sp(); 
   \                     ??list_hw_ints_console_12:
   \   000000C6   ........           BL       print_b0sp
   1928          		// pending? 
   1929          		if(k & (1<<12)) printf("1\n\r");
   \                     ??list_hw_ints_console_13:
   \   000000CA   F004               LSLS     R0,R6,#+19
   \   000000CC   03D5               BPL.N    ??list_hw_ints_console_14
   \   000000CE   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000000D0   ........           BL       printf
   \   000000D4   02E0               B.N      ??list_hw_ints_console_11
   1930          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_14:
   \   000000D6   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000000D8   ........           BL       printf
   1931          	}
   1932          
   1933          	printf("Loopback Fail on Bus B");
   \                     ??list_hw_ints_console_11:
   \   000000DC   ........           LDR.W    R0,??DataTable16_34
   \   000000E0   ........           BL       printf
   1934          	if(!(i & (1<<11))) {	
   \   000000E4   2005               LSLS     R0,R4,#+20
   \   000000E6   02D4               BMI.N    ??list_hw_ints_console_15
   1935          		// int disabled 
   1936          		print_null();
   \   000000E8   ........           BL       print_null
   \   000000EC   11E0               B.N      ??list_hw_ints_console_16
   1937          	}
   1938          	else {
   1939          		// int enabled 
   1940          		print_sp1sp();
   \                     ??list_hw_ints_console_15:
   \   000000EE   ........           BL       print_sp1sp
   1941          		// pin output? 
   1942          		if(j & (1<<11)) print_b1sp();
   \   000000F2   2805               LSLS     R0,R5,#+20
   \   000000F4   02D5               BPL.N    ??list_hw_ints_console_17
   \   000000F6   ........           BL       print_b1sp
   \   000000FA   01E0               B.N      ??list_hw_ints_console_18
   1943          		else print_b0sp(); 
   \                     ??list_hw_ints_console_17:
   \   000000FC   ........           BL       print_b0sp
   1944          		// pending? 
   1945          		if(k & (1<<11)) printf("1\n\r");
   \                     ??list_hw_ints_console_18:
   \   00000100   3005               LSLS     R0,R6,#+20
   \   00000102   03D5               BPL.N    ??list_hw_ints_console_19
   \   00000104   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000106   ........           BL       printf
   \   0000010A   02E0               B.N      ??list_hw_ints_console_16
   1946          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_19:
   \   0000010C   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   0000010E   ........           BL       printf
   1947          	}
   1948          
   1949          	printf("MT Timetag Ct Rollover");
   \                     ??list_hw_ints_console_16:
   \   00000112   ........           LDR.W    R0,??DataTable16_35
   \   00000116   ........           BL       printf
   1950          	if(!(i & (1<<10))) {	
   \   0000011A   6005               LSLS     R0,R4,#+21
   \   0000011C   02D4               BMI.N    ??list_hw_ints_console_20
   1951          		// int disabled 
   1952          		print_null();
   \   0000011E   ........           BL       print_null
   \   00000122   11E0               B.N      ??list_hw_ints_console_21
   1953          	}
   1954          	else {
   1955          		// int enabled 
   1956          		print_sp1sp();
   \                     ??list_hw_ints_console_20:
   \   00000124   ........           BL       print_sp1sp
   1957          		// pin output? 
   1958          		if(j & (1<<10)) print_b1sp();
   \   00000128   6805               LSLS     R0,R5,#+21
   \   0000012A   02D5               BPL.N    ??list_hw_ints_console_22
   \   0000012C   ........           BL       print_b1sp
   \   00000130   01E0               B.N      ??list_hw_ints_console_23
   1959          		else print_b0sp(); 
   \                     ??list_hw_ints_console_22:
   \   00000132   ........           BL       print_b0sp
   1960          		// pending? 
   1961          		if(k & (1<<10)) printf("1\n\r");
   \                     ??list_hw_ints_console_23:
   \   00000136   7005               LSLS     R0,R6,#+21
   \   00000138   03D5               BPL.N    ??list_hw_ints_console_24
   \   0000013A   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   0000013C   ........           BL       printf
   \   00000140   02E0               B.N      ??list_hw_ints_console_21
   1962          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_24:
   \   00000142   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000144   ........           BL       printf
   1963          	}
   1964          
   1965          	printf("BC Timetag Ct Rollover");
   \                     ??list_hw_ints_console_21:
   \   00000148   ........           LDR.W    R0,??DataTable16_36
   \   0000014C   ........           BL       printf
   1966          	if(!(i & (1<<9))) {	
   \   00000150   A005               LSLS     R0,R4,#+22
   \   00000152   02D4               BMI.N    ??list_hw_ints_console_25
   1967          		// int disabled 
   1968          		print_null();
   \   00000154   ........           BL       print_null
   \   00000158   11E0               B.N      ??list_hw_ints_console_26
   1969          	}
   1970          	else {
   1971          		// int enabled 
   1972          		print_sp1sp();
   \                     ??list_hw_ints_console_25:
   \   0000015A   ........           BL       print_sp1sp
   1973          		// pin output? 
   1974          		if(j & (1<<9)) print_b1sp();
   \   0000015E   A805               LSLS     R0,R5,#+22
   \   00000160   02D5               BPL.N    ??list_hw_ints_console_27
   \   00000162   ........           BL       print_b1sp
   \   00000166   01E0               B.N      ??list_hw_ints_console_28
   1975          		else print_b0sp(); 
   \                     ??list_hw_ints_console_27:
   \   00000168   ........           BL       print_b0sp
   1976          		// pending? 
   1977          		if(k & (1<<9)) printf("1\n\r");
   \                     ??list_hw_ints_console_28:
   \   0000016C   B005               LSLS     R0,R6,#+22
   \   0000016E   03D5               BPL.N    ??list_hw_ints_console_29
   \   00000170   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000172   ........           BL       printf
   \   00000176   02E0               B.N      ??list_hw_ints_console_26
   1978          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_29:
   \   00000178   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   0000017A   ........           BL       printf
   1979          	}
   1980          
   1981          	printf("RT2 Timetag Valu Match");
   \                     ??list_hw_ints_console_26:
   \   0000017E   ........           LDR.W    R0,??DataTable16_37
   \   00000182   ........           BL       printf
   1982          	if(!(i & (1<<8))) {	
   \   00000186   E005               LSLS     R0,R4,#+23
   \   00000188   02D4               BMI.N    ??list_hw_ints_console_30
   1983          		// int disabled 
   1984          		print_null();
   \   0000018A   ........           BL       print_null
   \   0000018E   11E0               B.N      ??list_hw_ints_console_31
   1985          	}
   1986          	else {
   1987          		// int enabled 
   1988          		print_sp1sp();
   \                     ??list_hw_ints_console_30:
   \   00000190   ........           BL       print_sp1sp
   1989          		// pin output? 
   1990          		if(j & (1<<8)) print_b1sp();
   \   00000194   E805               LSLS     R0,R5,#+23
   \   00000196   02D5               BPL.N    ??list_hw_ints_console_32
   \   00000198   ........           BL       print_b1sp
   \   0000019C   01E0               B.N      ??list_hw_ints_console_33
   1991          		else print_b0sp(); 
   \                     ??list_hw_ints_console_32:
   \   0000019E   ........           BL       print_b0sp
   1992          		// pending? 
   1993          		if(k & (1<<8)) printf("1\n\r");
   \                     ??list_hw_ints_console_33:
   \   000001A2   F005               LSLS     R0,R6,#+23
   \   000001A4   03D5               BPL.N    ??list_hw_ints_console_34
   \   000001A6   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000001A8   ........           BL       printf
   \   000001AC   02E0               B.N      ??list_hw_ints_console_31
   1994          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_34:
   \   000001AE   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000001B0   ........           BL       printf
   1995          	}
   1996          
   1997          	printf("RT1 Timetag Valu Match");
   \                     ??list_hw_ints_console_31:
   \   000001B4   ........           LDR.W    R0,??DataTable16_38
   \   000001B8   ........           BL       printf
   1998          	if(!(i & (1<<7))) {	
   \   000001BC   2006               LSLS     R0,R4,#+24
   \   000001BE   02D4               BMI.N    ??list_hw_ints_console_35
   1999          		// int disabled 
   2000          		print_null();
   \   000001C0   ........           BL       print_null
   \   000001C4   11E0               B.N      ??list_hw_ints_console_36
   2001          	}
   2002          	else {
   2003          		// int enabled 
   2004          		print_sp1sp();
   \                     ??list_hw_ints_console_35:
   \   000001C6   ........           BL       print_sp1sp
   2005          		// pin output? 
   2006          		if(j & (1<<7)) print_b1sp();
   \   000001CA   2806               LSLS     R0,R5,#+24
   \   000001CC   02D5               BPL.N    ??list_hw_ints_console_37
   \   000001CE   ........           BL       print_b1sp
   \   000001D2   01E0               B.N      ??list_hw_ints_console_38
   2007          		else print_b0sp(); 
   \                     ??list_hw_ints_console_37:
   \   000001D4   ........           BL       print_b0sp
   2008          		// pending? 
   2009          		if(k & (1<<7)) printf("1\n\r");
   \                     ??list_hw_ints_console_38:
   \   000001D8   3006               LSLS     R0,R6,#+24
   \   000001DA   03D5               BPL.N    ??list_hw_ints_console_39
   \   000001DC   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000001DE   ........           BL       printf
   \   000001E2   02E0               B.N      ??list_hw_ints_console_36
   2010          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_39:
   \   000001E4   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000001E6   ........           BL       printf
   2011          	}
   2012          
   2013          	printf("MT Timetag Value Match");
   \                     ??list_hw_ints_console_36:
   \   000001EA   ........           LDR.W    R0,??DataTable16_39
   \   000001EE   ........           BL       printf
   2014          	if(!(i & (1<<6))) {	
   \   000001F2   6006               LSLS     R0,R4,#+25
   \   000001F4   02D4               BMI.N    ??list_hw_ints_console_40
   2015          		// int disabled 
   2016          		print_null();
   \   000001F6   ........           BL       print_null
   \   000001FA   11E0               B.N      ??list_hw_ints_console_41
   2017          	}
   2018          	else {
   2019          		// int enabled 
   2020          		print_sp1sp();
   \                     ??list_hw_ints_console_40:
   \   000001FC   ........           BL       print_sp1sp
   2021          		// pin output? 
   2022          		if(j & (1<<6)) print_b1sp();
   \   00000200   6806               LSLS     R0,R5,#+25
   \   00000202   02D5               BPL.N    ??list_hw_ints_console_42
   \   00000204   ........           BL       print_b1sp
   \   00000208   01E0               B.N      ??list_hw_ints_console_43
   2023          		else print_b0sp(); 
   \                     ??list_hw_ints_console_42:
   \   0000020A   ........           BL       print_b0sp
   2024          		// pending? 
   2025          		if(k & (1<<6)) printf("1\n\r");
   \                     ??list_hw_ints_console_43:
   \   0000020E   7006               LSLS     R0,R6,#+25
   \   00000210   03D5               BPL.N    ??list_hw_ints_console_44
   \   00000212   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000214   ........           BL       printf
   \   00000218   02E0               B.N      ??list_hw_ints_console_41
   2026          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_44:
   \   0000021A   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   0000021C   ........           BL       printf
   2027          	}
   2028          
   2029          	printf("BC Timetag Value Match");
   \                     ??list_hw_ints_console_41:
   \   00000220   ....               LDR.N    R0,??DataTable16_40
   \   00000222   ........           BL       printf
   2030          	if(!(i & (1<<5))) {	
   \   00000226   A006               LSLS     R0,R4,#+26
   \   00000228   02D4               BMI.N    ??list_hw_ints_console_45
   2031          		// int disabled 
   2032          		print_null();
   \   0000022A   ........           BL       print_null
   \   0000022E   11E0               B.N      ??list_hw_ints_console_46
   2033          	}
   2034          	else {
   2035          		// int enabled 
   2036          		print_sp1sp();
   \                     ??list_hw_ints_console_45:
   \   00000230   ........           BL       print_sp1sp
   2037          		// pin output? 
   2038          		if(j & (1<<5)) print_b1sp();
   \   00000234   A806               LSLS     R0,R5,#+26
   \   00000236   02D5               BPL.N    ??list_hw_ints_console_47
   \   00000238   ........           BL       print_b1sp
   \   0000023C   01E0               B.N      ??list_hw_ints_console_48
   2039          		else print_b0sp(); 
   \                     ??list_hw_ints_console_47:
   \   0000023E   ........           BL       print_b0sp
   2040          		// pending? 
   2041          		if(k & (1<<5)) printf("1\n\r");
   \                     ??list_hw_ints_console_48:
   \   00000242   B006               LSLS     R0,R6,#+26
   \   00000244   03D5               BPL.N    ??list_hw_ints_console_49
   \   00000246   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   00000248   ........           BL       printf
   \   0000024C   02E0               B.N      ??list_hw_ints_console_46
   2042          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_49:
   \   0000024E   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000250   ........           BL       printf
   2043          	}
   2044          
   2045          	printf("  RT2 Addr Parity Fail");
   \                     ??list_hw_ints_console_46:
   \   00000254   ....               LDR.N    R0,??DataTable16_41
   \   00000256   ........           BL       printf
   2046          	if(!(i & (1<<4))) {	
   \   0000025A   E006               LSLS     R0,R4,#+27
   \   0000025C   02D4               BMI.N    ??list_hw_ints_console_50
   2047          		// int disabled 
   2048          		print_null();
   \   0000025E   ........           BL       print_null
   \   00000262   11E0               B.N      ??list_hw_ints_console_51
   2049          	}
   2050          	else {
   2051          		// int enabled 
   2052          		print_sp1sp();
   \                     ??list_hw_ints_console_50:
   \   00000264   ........           BL       print_sp1sp
   2053          		// pin output? 
   2054          		if(j & (1<<4)) print_b1sp();
   \   00000268   E806               LSLS     R0,R5,#+27
   \   0000026A   02D5               BPL.N    ??list_hw_ints_console_52
   \   0000026C   ........           BL       print_b1sp
   \   00000270   01E0               B.N      ??list_hw_ints_console_53
   2055          		else print_b0sp(); 
   \                     ??list_hw_ints_console_52:
   \   00000272   ........           BL       print_b0sp
   2056          		// pending? 
   2057          		if(k & (1<<4)) printf("1\n\r");
   \                     ??list_hw_ints_console_53:
   \   00000276   F006               LSLS     R0,R6,#+27
   \   00000278   03D5               BPL.N    ??list_hw_ints_console_54
   \   0000027A   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   0000027C   ........           BL       printf
   \   00000280   02E0               B.N      ??list_hw_ints_console_51
   2058          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_54:
   \   00000282   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   00000284   ........           BL       printf
   2059          	}
   2060          
   2061          	printf("  RT1 Addr Parity Fail");
   \                     ??list_hw_ints_console_51:
   \   00000288   ....               LDR.N    R0,??DataTable16_42
   \   0000028A   ........           BL       printf
   2062          	if(!(i & (1<<3))) {	
   \   0000028E   2007               LSLS     R0,R4,#+28
   \   00000290   02D4               BMI.N    ??list_hw_ints_console_55
   2063          		// int disabled 
   2064          		print_null();
   \   00000292   ........           BL       print_null
   \   00000296   11E0               B.N      ??list_hw_ints_console_56
   2065          	}
   2066          	else {
   2067          		// int enabled 
   2068          		print_sp1sp();
   \                     ??list_hw_ints_console_55:
   \   00000298   ........           BL       print_sp1sp
   2069          		// pin output? 
   2070          		if(j & (1<<3)) print_b1sp();
   \   0000029C   2807               LSLS     R0,R5,#+28
   \   0000029E   02D5               BPL.N    ??list_hw_ints_console_57
   \   000002A0   ........           BL       print_b1sp
   \   000002A4   01E0               B.N      ??list_hw_ints_console_58
   2071          		else print_b0sp(); 
   \                     ??list_hw_ints_console_57:
   \   000002A6   ........           BL       print_b0sp
   2072          		// pending? 
   2073          		if(k & (1<<3)) printf("1\n\r");
   \                     ??list_hw_ints_console_58:
   \   000002AA   3007               LSLS     R0,R6,#+28
   \   000002AC   03D5               BPL.N    ??list_hw_ints_console_59
   \   000002AE   ....               ADR.N    R0,??DataTable6  ;; "1\n\r"
   \   000002B0   ........           BL       printf
   \   000002B4   02E0               B.N      ??list_hw_ints_console_56
   2074          		else printf("0\n\r"); 
   \                     ??list_hw_ints_console_59:
   \   000002B6   ....               ADR.N    R0,??DataTable6_1  ;; "0\n\r"
   \   000002B8   ........           BL       printf
   2075          	}
   2076          
   2077          	printf(" Check Pending RT Ints");
   \                     ??list_hw_ints_console_56:
   \   000002BC   ....               LDR.N    R0,??DataTable16_43
   \   000002BE   ........           BL       printf
   2078          	if(!(i & (1<<2))) print_dd0n(); // int disabled 
   \   000002C2   6007               LSLS     R0,R4,#+29
   \   000002C4   02D4               BMI.N    ??list_hw_ints_console_60
   \   000002C6   ........           BL       print_dd0n
   \   000002CA   01E0               B.N      ??list_hw_ints_console_61
   2079          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_60:
   \   000002CC   ........           BL       print_dd1n
   2080          
   2081          	printf(" Check Pending MT Ints");
   \                     ??list_hw_ints_console_61:
   \   000002D0   ....               LDR.N    R0,??DataTable16_44
   \   000002D2   ........           BL       printf
   2082          	if(!(i & (1<<1))) print_dd0n(); // int disabled 
   \   000002D6   A007               LSLS     R0,R4,#+30
   \   000002D8   02D4               BMI.N    ??list_hw_ints_console_62
   \   000002DA   ........           BL       print_dd0n
   \   000002DE   01E0               B.N      ??list_hw_ints_console_63
   2083          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_62:
   \   000002E0   ........           BL       print_dd1n
   2084          
   2085          	printf(" Check Pending BC Ints");
   \                     ??list_hw_ints_console_63:
   \   000002E4   ....               LDR.N    R0,??DataTable16_45
   \   000002E6   ........           BL       printf
   2086          	if(!(i & (1<<0))) print_dd0n(); // int disabled 
   \   000002EA   E007               LSLS     R0,R4,#+31
   \   000002EC   02D4               BMI.N    ??list_hw_ints_console_64
   \   000002EE   ........           BL       print_dd0n
   \   000002F2   01E0               B.N      ??list_hw_ints_console_65
   2087          	else print_dd1n();				// int enabled 
   \                     ??list_hw_ints_console_64:
   \   000002F4   ........           BL       print_dd1n
   2088          
   2089          	print_line();
   \                     ??list_hw_ints_console_65:
   \   000002F8   ........           BL       print_line
   2090          	printf("Note: Reading the HW Pending Interrupt Register clears it!\n\r");
   \   000002FC   ....               LDR.N    R0,??DataTable16_46
   \   000002FE   ........           BL       printf
   2091          	printf("Press 'M' for menu, or press any valid menu key.   ");
   \   00000302   ....               LDR.N    R0,??DataTable16_47
   \   00000304   ........           BL       printf
   2092          
   2093          	// return value read from the HW Pending Interrupt Register, now cleared 
   2094          	return k;
   \   00000308   3000               MOVS     R0,R6
   \   0000030A   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000030C   70BD               POP      {R4-R6,PC}       ;; return
   2095          
   2096          }	// end list_hw_ints_console()
   2097          
   2098          
   2099          //---------------------------------------------------------------
   2100          //  this function lists remote terminal interrupt 
   2101          //	configuration to the console via UART. if there
   2102          //	are pending RT interrupts, these too are displayed.
   2103          //	Function returns the value read from the RT pending
   2104          //	interrupt register, since reading the reg clears it.
   2105          //---------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2106          unsigned short int list_rt_ints_console (void) {
   \                     list_rt_ints_console:
   \   00000000   10B5               PUSH     {R4,LR}
   2107            
   2108                  unsigned short k=0;
   \   00000002   0024               MOVS     R4,#+0
   2109          
   2110          	#if(!(RT1_ena||RT2_ena)) 
   2111          	printf("\n\rNeither Remote Terminal Is Enabled!\n\n\r"); 
   \   00000004   ....               LDR.N    R0,??DataTable16_48
   \   00000006   ........           BL       printf
   2112          	#else // (RT1_ena||RT2_ena)
   2113                  
   2114                      unsigned short i,j;
   2115              
   2116           ///           #if (HOST_BUS_INTERFACE)
   2117                      extern const H6130 pH6130; // HI-6130 register struct base address  
   2118           ///           #endif
   2119                      
   2120                      // formfeed 
   2121                      putchar(12); 	
   2122              
   2123           ///           #if (HOST_BUS_INTERFACE)
   2124                              i = pH6130->RT_INT_ENABLE_REG;
   2125                              j = pH6130->RT_INT_OUTPUT_ENABLE_REG;
   2126                              k = pH6130->RT_PENDING_INT_REG;
   2127                              /*
   2128                      #else // (HOST_SPI_INTERFACE)
   2129                              Write_6131LowReg(MAP_1, RT_INT_ENABLE_REG, 1);
   2130                              i = Read_6131_1word(1);
   2131                              Write_6131LowReg(MAP_1, RT_INT_OUTPUT_ENABLE_REG, 1);
   2132                              j = Read_6131_1word(1);
   2133                              Write_6131LowReg(MAP_1, RT_PENDING_INT_REG, 1);
   2134                              k = Read_6131_1word(1);
   2135                      #endif
   2136              */
   2137                              
   2138                      printf("\n\r Remote Terminal Ints  Enabled?   Pin Output?   Pending?\n\r");
   2139                      print_line();
   2140              
   2141                      printf("RT2  Reset RT mode cmd");
   2142                      if(!(i & (1<<15))) {	
   2143                              // int disabled 
   2144                              print_null();
   2145                      }
   2146                      else {
   2147                              // int enabled 
   2148                              print_sp1sp();
   2149                              // pin output? 
   2150                              if(j & (1<<15)) print_b1sp();
   2151                              else print_b0sp(); 
   2152                              // pending? 
   2153                              if(k & (1<<15)) printf("1\n\r");
   2154                              else printf("0\n\r"); 
   2155                      }
   2156              
   2157                      printf("RT2  Index Equals Zero");
   2158                      if(!(i & (1<<14))) {	
   2159                              // int disabled 
   2160                              print_null();
   2161                      }
   2162                      else {
   2163                              // int enabled 
   2164                              print_sp1sp();
   2165                              // pin output? 
   2166                              if(j & (1<<14)) print_b1sp();
   2167                              else print_b0sp(); 
   2168                              // pending? 
   2169                              if(k & (1<<14)) printf("1\n\r");
   2170                              else printf("0\n\r"); 
   2171                      }
   2172              
   2173                      printf("RT2    Illegal Command");
   2174                      if(!(i & (1<<13))) {	
   2175                              // int disabled 
   2176                              print_null();
   2177                      }
   2178                      else {
   2179                              // int enabled 
   2180                              print_sp1sp();
   2181                              // pin output? 
   2182                              if(j & (1<<13)) print_b1sp();
   2183                              else print_b0sp(); 
   2184                              // pending? 
   2185                              if(k & (1<<13)) printf("1\n\r");
   2186                              else printf("0\n\r"); 
   2187                      }
   2188              
   2189                      printf("RT2 Broadcast Msg Rcvd");
   2190                      if(!(i & (1<<12))) {	
   2191                              // int disabled 
   2192                              print_null();
   2193                      }
   2194                      else {
   2195                              // int enabled 
   2196                              print_sp1sp();
   2197                              // pin output? 
   2198                              if(j & (1<<12)) print_b1sp();
   2199                              else print_b0sp(); 
   2200                              // pending? 
   2201                              if(k & (1<<12)) printf("1\n\r");
   2202                              else printf("0\n\r"); 
   2203                      }
   2204              
   2205                      printf("RT2 MessageErrorStatus");
   2206                      if(!(i & (1<<11))) {	
   2207                              // int disabled 
   2208                              print_null();
   2209                      }
   2210                      else {
   2211                              // int enabled 
   2212                              print_sp1sp();
   2213                              // pin output? 
   2214                              if(j & (1<<11)) print_b1sp();
   2215                              else print_b0sp(); 
   2216                              // pending? 
   2217                              if(k & (1<<11)) printf("1\n\r");
   2218                              else printf("0\n\r"); 
   2219                      }
   2220              
   2221                      printf("RT2  Int When Accessed");
   2222                      if(!(i & (1<<10))) {	
   2223                              // int disabled 
   2224                              print_null();
   2225                      }
   2226                      else {
   2227                              // int enabled 
   2228                              print_sp1sp();
   2229                              // pin output? 
   2230                              if(j & (1<<10)) print_b1sp();
   2231                              else print_b0sp(); 
   2232                              // pending? 
   2233                              if(k & (1<<10)) printf("1\n\r");
   2234                              else printf("0\n\r"); 
   2235                      }
   2236              
   2237                      printf("        Reserved Bit 9");
   2238                      print_dddn();
   2239              
   2240                      printf("RT1  Reset RT mode cmd");
   2241                      if(!(i & (1<<8))) {	
   2242                              // int disabled 
   2243                              print_null();
   2244                      }
   2245                      else {
   2246                              // int enabled 
   2247                              print_sp1sp();
   2248                              // pin output? 
   2249                              if(j & (1<<8)) print_b1sp();
   2250                              else print_b0sp(); 
   2251                              // pending? 
   2252                              if(k & (1<<8)) printf("1\n\r");
   2253                              else printf("0\n\r"); 
   2254                      }
   2255              
   2256                      printf("RT1  Index Equals Zero");
   2257                      if(!(i & (1<<7))) {	
   2258                              // int disabled 
   2259                              print_null();
   2260                      }
   2261                      else {
   2262                              // int enabled 
   2263                              print_sp1sp();
   2264                              // pin output? 
   2265                              if(j & (1<<7)) print_b1sp();
   2266                              else print_b0sp(); 
   2267                              // pending? 
   2268                              if(k & (1<<7)) printf("1\n\r");
   2269                              else printf("0\n\r"); 
   2270                      }
   2271              
   2272                      printf("RT1    Illegal Command");
   2273                      if(!(i & (1<<6))) {	
   2274                              // int disabled 
   2275                              print_null();
   2276                      }
   2277                      else {
   2278                              // int enabled 
   2279                              print_sp1sp();
   2280                              // pin output? 
   2281                              if(j & (1<<6)) print_b1sp();
   2282                              else print_b0sp(); 
   2283                              // pending? 
   2284                              if(k & (1<<6)) printf("1\n\r");
   2285                              else printf("0\n\r"); 
   2286                      }
   2287              
   2288                      printf("RT1 Broadcast Msg Rcvd");
   2289                      if(!(i & (1<<5))) {	
   2290                              // int disabled 
   2291                              print_null();
   2292                      }
   2293                      else {
   2294                              // int enabled 
   2295                              print_sp1sp();
   2296                              // pin output? 
   2297                              if(j & (1<<5)) print_b1sp();
   2298                              else print_b0sp(); 
   2299                              // pending? 
   2300                              if(k & (1<<5)) printf("1\n\r");
   2301                              else printf("0\n\r"); 
   2302                      }
   2303              
   2304                      printf("RT1 MessageErrorStatus");
   2305                      if(!(i & (1<<4))) {	
   2306                              // int disabled 
   2307                              print_null();
   2308                      }
   2309                      else {
   2310                              // int enabled 
   2311                              print_sp1sp();
   2312                              // pin output? 
   2313                              if(j & (1<<4)) print_b1sp();
   2314                              else print_b0sp(); 
   2315                              // pending? 
   2316                              if(k & (1<<4)) printf("1\n\r");
   2317                              else printf("0\n\r"); 
   2318                      }
   2319              
   2320                      printf("RT1  Int When Accessed");
   2321                      if(!(i & (1<<3))) {	
   2322                              // int disabled 
   2323                              print_null();
   2324                      }
   2325                      else {
   2326                              // int enabled 
   2327                              print_sp1sp();
   2328                              // pin output? 
   2329                              if(j & (1<<3)) print_b1sp();
   2330                              else print_b0sp(); 
   2331                              // pending? 
   2332                              if(k & (1<<3)) printf("1\n\r");
   2333                              else printf("0\n\r"); 
   2334                      }
   2335              
   2336                      printf("     Reserved Bits 2-0");
   2337                      print_dddn();
   2338                      print_line();
   2339                      printf("Note: Reading the RT Pending Interrupt Register clears it!\n\r");
   2340                      
   2341          	#endif // (RT1_ena||RT2_ena)
   2342          	print_menuprompt();
   \   0000000A   ........           BL       print_menuprompt
   2343          
   2344          	// return value read from the RT Pending Interrupt Register, now cleared 
   2345          	return k;
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000012   10BD               POP      {R4,PC}          ;; return
   2346          
   2347          }	// end list_rt_ints_console()
   2348          
   2349          
   2350          
   2351          
   2352          //---------------------------------------------------------------------------
   2353          //   brief	this function checks for keyboard input and
   2354          //		decodes it, acts on it, when it occurs
   2355          //---------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2356          void chk_key_input(void) {
   \                     chk_key_input:
   \   00000000   10B5               PUSH     {R4,LR}
   2357          
   2358              char key;
   2359              /*
   2360              #if (!HOST_BUS_INTERFACE)
   2361              unsigned short i;
   2362              #endif
   2363            */
   2364              
   2365              // poll USART Channel Status Reg for Rx Ready 
   2366              if(USART_IsRxReady(BOARD_USART_BASE)) {
   \   00000002   ....               LDR.N    R0,??DataTable16_49  ;; 0x40094000
   \   00000004   ........           BL       USART_IsRxReady
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   4DD0               BEQ.N    ??chk_key_input_0
   2367                  // got key press at computer keyboard,
   2368                  // read USART Receive Holding register
   2369                  key = USART_GetChar(BOARD_USART_BASE);
   \   0000000C   ....               LDR.N    R0,??DataTable16_49  ;; 0x40094000
   \   0000000E   ........           BL       USART_GetChar
   \   00000012   0400               MOVS     R4,R0
   2370                
   2371                  //-----------------------------------
   2372                  
   2373                  if (watch) {
   \   00000014   ....               LDR.N    R0,??DataTable16_50
   \   00000016   0078               LDRB     R0,[R0, #+0]
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   45D1               BNE.N    ??chk_key_input_0
   2374                      // Memory Watch mode enabled
   2375                /*    
   2376                      #if (!HOST_BUS_INTERFACE)
   2377                          switch(key) {
   2378                
   2379                              case 'm':
   2380                              case 'M':
   2381                              case 'w':
   2382                              case 'W':
   2383                                  // either M or W turns off Memory Watch mode, restores Menu display
   2384                                  watch = 0;
   2385                                  show_menu();
   2386                              break;
   2387                             
   2388                              case 'r':
   2389                              case 'R':
   2390                                  // refresh
   2391                                  Memory_watch(waddr);
   2392                              break;
   2393                  
   2394                              case 'd':
   2395                              case 'D':
   2396                                  if(waddr == 0x7F00) {
   2397                                      waddr = 0;
   2398                                      Memory_watch(waddr);
   2399                                  }
   2400                                  else { // waddr != 0x7F00
   2401                                      waddr += 0x100;
   2402                                      // top RAM address window = 0x7F00 to 0x7FFF
   2403                                      if(waddr > 0x7F00) waddr = 0x7F00;
   2404                                      Memory_watch(waddr);
   2405                                  }  
   2406                              break;
   2407                                
   2408                              case 'u':
   2409                              case 'U':
   2410                                  if(waddr == 0) {
   2411                                      waddr = 0x7F00;
   2412                                      Memory_watch(waddr);
   2413                                  }
   2414                                  else { // waddr != 0
   2415                                      // bottom RAM address window = 0x0000 to 0x01FF
   2416                                      if (waddr < 0x100) waddr = 0x100;
   2417                                      waddr -= 0x100;
   2418                                      Memory_watch(waddr);
   2419                                  } 
   2420                              break;
   2421                                         
   2422                              case 'a':
   2423                              case 'A':
   2424                                  i=0;
   2425                                  printf("Type 4 hex char address 0000 through 7E00: ");
   2426                                  key = USART_GetChar(BOARD_USART_BASE);
   2427                                  i = ascii2int(key) << 12;
   2428                                  printf("%c", key);
   2429                                      
   2430                                  key = USART_GetChar(BOARD_USART_BASE);
   2431                                  i += ascii2int(key) << 8;
   2432                                  printf("%c", key);
   2433                  
   2434                                  key = USART_GetChar(BOARD_USART_BASE);
   2435                                  i += ascii2int(key) << 4;
   2436                                  printf("%c", key);
   2437                  
   2438                                  key = USART_GetChar(BOARD_USART_BASE);
   2439                                  i += ascii2int(key);
   2440                                  printf("%c", key);
   2441                  
   2442                                  if (i < 0x100) i = 0x000;
   2443                                  if (i > 0x7E00) i = 0x7E00;
   2444                                  waddr = i;
   2445                                  Memory_watch(waddr);
   2446                              break;
   2447              
   2448                              default:
   2449                                  // ignore unrecognized keys
   2450                              break;
   2451                                  
   2452                          } // end switch(key)  
   2453                                  
   2454                      #endif // !HOST_BUS_INTERFACE
   2455          */
   2456                    
   2457                  } // end if(watch)
   2458                  
   2459                  else { // Memory Watch mode disabled, normal menu mode...
   2460                    
   2461                      switch(key) {
   \   0000001C   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   3428               CMP      R0,#+52
   \   00000022   2BD0               BEQ.N    ??chk_key_input_1
   \   00000024   3528               CMP      R0,#+53
   \   00000026   2CD0               BEQ.N    ??chk_key_input_2
   \   00000028   3628               CMP      R0,#+54
   \   0000002A   2DD0               BEQ.N    ??chk_key_input_3
   \   0000002C   3928               CMP      R0,#+57
   \   0000002E   2ED0               BEQ.N    ??chk_key_input_4
   \   00000030   4128               CMP      R0,#+65
   \   00000032   1CD0               BEQ.N    ??chk_key_input_5
   \   00000034   4428               CMP      R0,#+68
   \   00000036   1AD0               BEQ.N    ??chk_key_input_5
   \   00000038   4D28               CMP      R0,#+77
   \   0000003A   12D0               BEQ.N    ??chk_key_input_6
   \   0000003C   5228               CMP      R0,#+82
   \   0000003E   16D0               BEQ.N    ??chk_key_input_5
   \   00000040   5528               CMP      R0,#+85
   \   00000042   14D0               BEQ.N    ??chk_key_input_5
   \   00000044   5728               CMP      R0,#+87
   \   00000046   12D0               BEQ.N    ??chk_key_input_5
   \   00000048   6128               CMP      R0,#+97
   \   0000004A   10D0               BEQ.N    ??chk_key_input_5
   \   0000004C   6428               CMP      R0,#+100
   \   0000004E   0ED0               BEQ.N    ??chk_key_input_5
   \   00000050   6D28               CMP      R0,#+109
   \   00000052   06D0               BEQ.N    ??chk_key_input_6
   \   00000054   7228               CMP      R0,#+114
   \   00000056   0AD0               BEQ.N    ??chk_key_input_5
   \   00000058   7528               CMP      R0,#+117
   \   0000005A   08D0               BEQ.N    ??chk_key_input_5
   \   0000005C   7728               CMP      R0,#+119
   \   0000005E   06D0               BEQ.N    ??chk_key_input_5
   \   00000060   18E0               B.N      ??chk_key_input_7
   2462                          
   2463                          case 'm':
   2464                          case 'M':
   2465                              watch = 0;
   \                     ??chk_key_input_6:
   \   00000062   ....               LDR.N    R0,??DataTable16_50
   \   00000064   0021               MOVS     R1,#+0
   \   00000066   0170               STRB     R1,[R0, #+0]
   2466                              show_menu();
   \   00000068   ........           BL       show_menu
   2467                          break;
   \   0000006C   18E0               B.N      ??chk_key_input_8
   2468            /*              
   2469                          #if (!HOST_BUS_INTERFACE)
   2470                          case 'w':
   2471                          case 'W':
   2472                              // disable menu mode, enable Memory Watch mode
   2473                              watch = 1;
   2474                              Memory_watch(waddr);
   2475                          break;
   2476                          #endif // (!HOST_BUS_INTERFACE)
   2477           */                 
   2478                          // the W keys are only recognized if HI-6131
   2479           ///               #if (HOST_BUS_INTERFACE)
   2480                          case 'w':
   2481                          case 'W':
   2482           ///               #endif // (HOST_BUS_INTERFACE)
   2483                              
   2484                          // these keys are only recognized in Memory Watch mode
   2485                          case 'r':
   2486                          case 'R':
   2487                          case 'u':
   2488                          case 'U':
   2489                          case 'd':
   2490                          case 'D':
   2491                          case 'a':
   2492                          case 'A':
   2493                              // formfeed
   2494                              putchar(12); 	
   \                     ??chk_key_input_5:
   \   0000006E   0C20               MOVS     R0,#+12
   \   00000070   ........           BL       putchar
   2495                              printf("\n\r Invalid Choice. Press 'M' for menu, or press any valid menu key. >> ");
   \   00000074   ....               LDR.N    R0,??DataTable16_51
   \   00000076   ........           BL       printf
   2496                          break;
   \   0000007A   11E0               B.N      ??chk_key_input_8
   2497                                
   2498                           #if(BC_ena) 
   2499                                case '1':	
   2500                                    // Generate a BC external trigger pulse for the HI-613x
   2501                                    bc_trigger();
   2502                                    // message completion delay, 1.5ms
   2503                                    Delay_us(1500);
   2504                                    // console output reg and RAM info for last completed msg
   2505                                    bc_last_msg_console();
   2506                                break;
   2507                        
   2508                                case '2': 		
   2509                                    list_bc_config();
   2510                                break;
   2511                            
   2512                                case '3': 
   2513                                    // output Cond Code / GP Flag reg to console via UART
   2514                                    list_bc_ccgpf_reg();
   2515                                break;
   2516                                
   2517                                case '7':
   2518                                    // display bc interrupt status
   2519                                    list_bc_ints_console();
   2520                                break;
   2521                                
   2522                            #endif // (BC_ena) 
   2523                            
   2524                            #if(SMT_ena || IMT_ena)
   2525                                case '4': 		
   2526                                    list_mt_config();
   \                     ??chk_key_input_1:
   \   0000007C   ........           BL       list_mt_config
   2527                                break;
   \   00000080   0EE0               B.N      ??chk_key_input_8
   2528                
   2529                                case '5': 		
   2530                                    mt_last_msg_console();
   \                     ??chk_key_input_2:
   \   00000082   ........           BL       mt_last_msg_console
   2531                                break;
   \   00000086   0BE0               B.N      ??chk_key_input_8
   2532                            #endif // (SMT_ena || IMT_ena)
   2533                            
   2534                            case '6':
   2535                                // display hw interrupt status
   2536                                list_hw_ints_console();
   \                     ??chk_key_input_3:
   \   00000088   ........           BL       list_hw_ints_console
   2537                            break;
   \   0000008C   08E0               B.N      ??chk_key_input_8
   2538                            
   2539                            #if(RT1_ena || RT2_ena)
   2540                                case '8':
   2541                                    // display rt interrupt status
   2542                                    list_rt_ints_console();
   2543                                break;
   2544                            #endif // (RT1_ena || RT2_ena)
   2545                            
   2546                            #if(SMT_ena || IMT_ena)
   2547                                case '9':
   2548                                    // display mt interrupt status
   2549                                    list_mt_ints_console();
   \                     ??chk_key_input_4:
   \   0000008E   ........           BL       list_mt_ints_console
   2550                                break;
   \   00000092   05E0               B.N      ??chk_key_input_8
   2551                            #endif // (SMT_ena || IMT_ena)
   2552                            
   2553                            
   2554                            default:
   2555                                // ignore unrecognized keys
   2556                                // formfeed
   2557                                putchar(12); 	
   \                     ??chk_key_input_7:
   \   00000094   0C20               MOVS     R0,#+12
   \   00000096   ........           BL       putchar
   2558                                printf("\n\r Invalid Choice. Press 'M' for menu, or press any valid menu key. >> ");
   \   0000009A   ....               LDR.N    R0,??DataTable16_51
   \   0000009C   ........           BL       printf
   2559                            break;
   2560                            
   2561                      } // end switch(key)
   2562                      
   2563                      // prevent warning: waddr as declared but never referenced
   2564                      waddr = waddr;
   \                     ??chk_key_input_8:
   \   000000A0   ....               LDR.N    R0,??DataTable16_52
   \   000000A2   ....               LDR.N    R1,??DataTable16_52
   \   000000A4   0988               LDRH     R1,[R1, #+0]
   \   000000A6   0180               STRH     R1,[R0, #+0]
   2565                                                    
   2566                  }  // end else !watch
   2567                  
   2568              }  // end if(USART_IsRxReady(BOARD_USART_BASE))
   2569                              
   2570          } // end chk_key_input()
   \                     ??chk_key_input_0:
   \   000000A8   10BD               POP      {R4,PC}          ;; return
   2571                              
   2572                                                                                                           
   2573                                                 
   2574          //----------------------------------------------------------------------------
   2575          //    used by above function, this function converts a char 0-15 into 0x0-0xF
   2576          //----------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2577          unsigned char ascii2int(char ch) {
   \                     ascii2int:
   \   00000000   0100               MOVS     R1,R0
   2578              unsigned char hex;
   2579              if((ch >='0') && (ch<='9')) hex = ch - '0';
   \   00000002   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   3029               CMP      R1,#+48
   \   00000006   06D3               BCC.N    ??ascii2int_0
   \   00000008   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   3A29               CMP      R1,#+58
   \   0000000C   03D2               BCS.N    ??ascii2int_0
   \   0000000E   B1F13002           SUBS     R2,R1,#+48
   \   00000012   1000               MOVS     R0,R2
   \   00000014   15E0               B.N      ??ascii2int_1
   2580              else if ((ch >='A') && (ch<='F')) hex = ch - 'A' + 10;
   \                     ??ascii2int_0:
   \   00000016   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000018   4129               CMP      R1,#+65
   \   0000001A   06D3               BCC.N    ??ascii2int_2
   \   0000001C   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001E   4729               CMP      R1,#+71
   \   00000020   03D2               BCS.N    ??ascii2int_2
   \   00000022   B1F13702           SUBS     R2,R1,#+55
   \   00000026   1000               MOVS     R0,R2
   \   00000028   0BE0               B.N      ??ascii2int_1
   2581              else if ((ch >='a') && (ch<='f')) hex = ch - 'a' + 10;
   \                     ??ascii2int_2:
   \   0000002A   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   6129               CMP      R1,#+97
   \   0000002E   06D3               BCC.N    ??ascii2int_3
   \   00000030   C9B2               UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   6729               CMP      R1,#+103
   \   00000034   03D2               BCS.N    ??ascii2int_3
   \   00000036   B1F15702           SUBS     R2,R1,#+87
   \   0000003A   1000               MOVS     R0,R2
   \   0000003C   01E0               B.N      ??ascii2int_1
   2582              else hex = 0;
   \                     ??ascii2int_3:
   \   0000003E   0022               MOVS     R2,#+0
   \   00000040   1000               MOVS     R0,R2
   2583              return hex;
   \                     ??ascii2int_1:
   \   00000042   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000044   7047               BX       LR               ;; return
   2584          }
   2585                                                 
   2586                                                 
   2587                                                 
   2588                                                 
   2589                                                 
   2590          //-----------------------------------------------------------------
   2591          //    these functions give printf for text strings used
   2592          //    many times. reduces ROM needed for text storage
   2593          //-----------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
   2594          void print_null(void) {
   \                     print_null:
   \   00000000   80B5               PUSH     {R7,LR}
   2595          	printf("    0           -           -\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable16_53
   \   00000004   ........           BL       printf
   2596          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2597          
   2598          

   \                                 In section .text, align 2, keep-with-next
   2599          void print_sp1sp(void) {
   \                     print_sp1sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2600          	printf("    1           ");
   \   00000002   ....               LDR.N    R0,??DataTable16_54
   \   00000004   ........           BL       printf
   2601          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2602          
   2603          

   \                                 In section .text, align 2, keep-with-next
   2604          void print_b1sp(void) {
   \                     print_b1sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2605          	printf("1           ");
   \   00000002   ....               LDR.N    R0,??DataTable16_55
   \   00000004   ........           BL       printf
   2606          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2607          
   2608          

   \                                 In section .text, align 2, keep-with-next
   2609          void print_b0sp(void) {
   \                     print_b0sp:
   \   00000000   80B5               PUSH     {R7,LR}
   2610          	printf("0           ");
   \   00000002   ....               LDR.N    R0,??DataTable16_56
   \   00000004   ........           BL       printf
   2611          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2612          
   2613          

   \                                 In section .text, align 2, keep-with-next
   2614          void print_dddn(void) {
   \                     print_dddn:
   \   00000000   80B5               PUSH     {R7,LR}
   2615          	printf("    -           -           -\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable16_57
   \   00000004   ........           BL       printf
   2616          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2617          
   2618          

   \                                 In section .text, align 2, keep-with-next
   2619          void print_dd0n(void) {
   \                     print_dd0n:
   \   00000000   80B5               PUSH     {R7,LR}
   2620          	printf("    -           -           0\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable16_58
   \   00000004   ........           BL       printf
   2621          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2622          
   2623          

   \                                 In section .text, align 2, keep-with-next
   2624          void print_dd1n(void) {
   \                     print_dd1n:
   \   00000000   80B5               PUSH     {R7,LR}
   2625          	printf("    -           -           1\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable16_59
   \   00000004   ........           BL       printf
   2626          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2627          

   \                                 In section .text, align 2, keep-with-next
   2628          void print_menuprompt(void) {
   \                     print_menuprompt:
   \   00000000   80B5               PUSH     {R7,LR}
   2629          	printf("Press 'M' for menu, or press any valid menu key. >> ");
   \   00000002   ....               LDR.N    R0,??DataTable16_60
   \   00000004   ........           BL       printf
   2630          }
   \   00000008   01BD               POP      {R0,PC}          ;; return
   2631          

   \                                 In section .text, align 2, keep-with-next
   2632          void print_line(void) {
   \                     print_line:
   \   00000000   80B5               PUSH     {R7,LR}
   2633          	printf("===========================================================\n\r");
   \   00000002   ....               LDR.N    R0,??DataTable16_61
   \   00000004   ........           BL       printf
   2634          }
   \   00000008   01BD               POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0A0D5300           DC8      "\n\rS"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0A0D4900           DC8      "\n\rI"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   4F4E0000           DC8      0x4F, 0x4E, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   4F464600           DC8      "OFF"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   34380000           DC8      0x34, 0x38, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   31360000           DC8      0x31, 0x36, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   ........           DC32     `?<Constant {{2097152, (AT91S_PIO *)1074662400,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   006CDC02           DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   00400940           DC32     0x40094000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   ........           DC32     `?<Constant "\\n\\r*******************...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   ........           DC32     `?<Constant "   Holt Integrated Ci...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   ........           DC32     `?<Constant "13:43:41">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   ........           DC32     `?<Constant "May 22 2012">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   ........           DC32     `?<Constant "        Compiled: %s ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   ........           DC32     `?<Constant "*********************...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   ........           DC32     `?<Constant "   BC Off  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   ........           DC32     `?<Constant "IMT On    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   ........           DC32     `?<Constant "RT1 Off  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   ........           DC32     `?<Constant "RT2 Off">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   20000000           DC8      " ",0x0,0x0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   ........           DC32     `?<Constant " Press \\'4\\' to list MT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   ........           DC32     `?<Constant " Press \\'5\\' to list MT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   ........           DC32     `?<Constant " Press \\'6\\' to list HW...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   ........           DC32     `?<Constant " Press \\'9\\' to list MT...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   20256400           DC8      " %d"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   ........           DC32     `?<Constant " NOTE: Options 6-9 cl...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0A0A0D00           DC8      "\n\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   ........           DC32     `?<Constant "MT monitor mode selec...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   ........           DC32     `?<Constant "MT Configuration Regi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   ........           DC32     `?<Constant "  20us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   ........           DC32     `?<Constant "  58us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_26:
   \   00000000   ........           DC32     `?<Constant " 138us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_27:
   \   00000000   ........           DC32     `?<Constant "  15us Timeout">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_28:
   \   00000000   ........           DC32     `?<Constant " (bus dead time)   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_29:
   \   00000000   ........           DC32     `?<Constant "2us Gap Check ON">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_30:
   \   00000000   ........           DC32     `?<Constant "2us Gap Check OFF">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_31:
   \   00000000   0A0D0000           DC8      0x0A, 0x0D, 0x00, 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_32:
   \   00000000   ........           DC32     `?<Constant "  Time Tag last word,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_33:
   \   00000000   ........           DC32     `?<Constant "Time Tag first word, ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_34:
   \   00000000   ........           DC32     `?<Constant " Time Tag first word,...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_35:
   \   00000000   ........           DC32     `?<Constant "           Time Taggi...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_36:
   \   00000000   ........           DC32     `?<Constant "Start Rec: First Cmd ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_37:
   \   00000000   ........           DC32     `?<Constant "Word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_38:
   \   00000000   ........           DC32     `?<Constant "or Data Word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_39:
   \   00000000   ........           DC32     `?<Constant "Sync + 2 bits">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_40:
   \   00000000   ........           DC32     `?<Constant "or Data Sync + 2 bits">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_41:
   \   00000000   ........           DC32     `?<Constant "   Invalid Data Word">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_42:
   \   00000000   ........           DC32     `?<Constant "s recorded   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_43:
   \   00000000   ........           DC32     `?<Constant " ends mssg   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_44:
   \   00000000   ........           DC32     `?<Constant "Extended Status Flags ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_45:
   \   00000000   ........           DC32     `?<Constant " SMT using ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_46:
   \   00000000   ........           DC32     `?<Constant "-bit Time Tag ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_47:
   \   00000000   ........           DC32     `?<Constant "IMT Pkt Timer starts ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_48:
   \   00000000   ........           DC32     `?<Constant "at PktEnd   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_49:
   \   00000000   ........           DC32     `?<Constant "at Cmd Wd   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_50:
   \   00000000   ........           DC32     `?<Constant "IMT Hdr Data Type IRI...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_51:
   \   00000000   ........           DC32     `?<Constant "09  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_52:
   \   00000000   ........           DC32     `?<Constant "04  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_53:
   \   00000000   ........           DC32     `?<Constant "05  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_54:
   \   00000000   ........           DC32     `?<Constant "07  ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_55:
   \   00000000   ........           DC32     `?<Constant " IMT Auto Header & Tr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_56:
   \   00000000   ........           DC32     `?<Constant "OFF   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_57:
   \   00000000   ........           DC32     `?<Constant " ON   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_58:
   \   00000000   ........           DC32     `?<Constant "IMT Data Packet Check...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_59:
   \   00000000   ........           DC32     `?<Constant "\\n\\rLast Message Record...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     `?<Constant "SMT:    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   04000060           DC32     0x60000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0C000060           DC32     0x6000000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0A000060           DC32     0x6000000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   08000060           DC32     0x60000008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   02000060           DC32     0x60000002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   FEFFFF5F           DC32     0x5ffffffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   ........           DC32     `?<Constant "IMT:   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   ........           DC32     `?<Constant "Block Status Word = 0...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   ........           DC32     `?<Constant "* means IMT BSW reser...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   ........           DC32     `?<Constant "           * Start of...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   ........           DC32     `?<Constant "n/a    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   ........           DC32     `?<Constant "= 1    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_14:
   \   00000000   ........           DC32     `?<Constant "= 0    ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_15:
   \   00000000   ........           DC32     `?<Constant "Bus Used = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_16:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_17:
   \   00000000   ........           DC32     `?<Constant "B\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_18:
   \   00000000   ........           DC32     `?<Constant "A\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_19:
   \   00000000   ........           DC32     `?<Constant "             * End of...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_20:
   \   00000000   ........           DC32     `?<Constant "Error Occurred = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_21:
   \   00000000   ........           DC32     `?<Constant "1\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_22:
   \   00000000   ........           DC32     `?<Constant "0\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_23:
   \   00000000   ........           DC32     `?<Constant "        * Good Data B...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_24:
   \   00000000   ........           DC32     `?<Constant "Response Timeout = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_25:
   \   00000000   ........           DC32     `?<Constant "* SMT Data Stack Roll...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_26:
   \   00000000   ........           DC32     `?<Constant "Illegal Gap Error = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_27:
   \   00000000   ........           DC32     `?<Constant " * Cmd Word Content E...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_28:
   \   00000000   ........           DC32     `?<Constant "Word Count Error = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_29:
   \   00000000   ........           DC32     `?<Constant "* RT-RT Gap,Sync,Addr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_30:
   \   00000000   ........           DC32     `?<Constant "Non-">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_31:
   \   00000000   ........           DC32     `?<Constant "RT-RT Cmd: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   310A0D00           DC8      "1\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   300A0D00           DC8      "0\n\r"

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   10000060           DC32     0x60000010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   ........           DC32     `?<Constant "\\n\\n\\r * RT-RT Cmd Word ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   ........           DC32     `?<Constant "Timetag = ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     `?<Constant "%.2X%.2X">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant "%.2X%.2X\\n\\n\\r">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   ........           DC32     `?<Constant "No Words Stored in Da...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     `?<Constant "Msg Words 2-%d at Add...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     `?<Constant "  %d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     `?<Constant " Msg Words at Addr: ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     `?<Constant "0x%.2X%.2X   ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \   00000000   ........           DC32     `?<Constant "Bus Debug Addr: 0x600...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_2:
   \   00000000   ........           DC32     `?<Constant "       Tx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_3:
   \   00000000   ........           DC32     `?<Constant "RT Response = %d.%dus...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_4:
   \   00000000   ........           DC32     `?<Constant "(Broadcast?)">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_5:
   \   00000000   ........           DC32     `?<Constant "RxRT Response = %d.%dus ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_6:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_7:
   \   00000000   ........           DC32     `?<Constant "SMT mode is selected ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_8:
   \   00000000   ........           DC32     `?<Constant "IMT mode is selected ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_9:
   \   00000000   ........           DC32     `?<Constant "   Bus Monitor Ints  ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_10:
   \   00000000   ........           DC32     `?<Constant "End of Pkt,Buffer Full">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_11:
   \   00000000   ........           DC32     `?<Constant "Offset before FULL_EOP">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_12:
   \   00000000   ........           DC32     `?<Constant "Pkt Max 1553 Msg Words">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_13:
   \   00000000   ........           DC32     `?<Constant "Pkt Max 1553 Msg Count">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_14:
   \   00000000   ........           DC32     `?<Constant " Max Gap Time Exceeded">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_15:
   \   00000000   ........           DC32     `?<Constant "Max Pkt Recording Time">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_16:
   \   00000000   ........           DC32     `?<Constant "      Host Packet Stop">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_17:
   \   00000000   ........           DC32     `?<Constant "Stack End Addr Written">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_18:
   \   00000000   ........           DC32     `?<Constant " Hit Cmd Stack Address">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_19:
   \   00000000   ........           DC32     `?<Constant " IRIG-106 Packet Ready">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_20:
   \   00000000   ........           DC32     `?<Constant "Monitor End-of-Message">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_21:
   \   00000000   ........           DC32     `?<Constant "\\nIMT Skips Bits 4,2,1,0">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_22:
   \   00000000   ........           DC32     `?<Constant "SMT Cmd Stack Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_23:
   \   00000000   ........           DC32     `?<Constant "SMT DataStack Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_24:
   \   00000000   ........           DC32     `?<Constant "SMT  Cmd Stack Address">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_25:
   \   00000000   ........           DC32     `?<Constant "SMT Data Stack Address">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_26:
   \   00000000   ........           DC32     `?<Constant "RT Status is Msg Error">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_27:
   \   00000000   ........           DC32     `?<Constant "     MT End-of-Message">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_28:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the MT ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_29:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Hardware Interrupt...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_30:
   \   00000000   ........           DC32     `?<Constant "HI-6131 Host SPI Erro...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_31:
   \   00000000   ........           DC32     `?<Constant "EE Chksum/Corr RAM Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_32:
   \   00000000   ........           DC32     `?<Constant "RAM Init/UncorrRAM Err">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_33:
   \   00000000   ........           DC32     `?<Constant "Loopback Fail on Bus A">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_34:
   \   00000000   ........           DC32     `?<Constant "Loopback Fail on Bus B">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_35:
   \   00000000   ........           DC32     `?<Constant "MT Timetag Ct Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_36:
   \   00000000   ........           DC32     `?<Constant "BC Timetag Ct Rollover">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_37:
   \   00000000   ........           DC32     `?<Constant "RT2 Timetag Valu Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_38:
   \   00000000   ........           DC32     `?<Constant "RT1 Timetag Valu Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_39:
   \   00000000   ........           DC32     `?<Constant "MT Timetag Value Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_40:
   \   00000000   ........           DC32     `?<Constant "BC Timetag Value Match">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_41:
   \   00000000   ........           DC32     `?<Constant "  RT2 Addr Parity Fail">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_42:
   \   00000000   ........           DC32     `?<Constant "  RT1 Addr Parity Fail">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_43:
   \   00000000   ........           DC32     `?<Constant " Check Pending RT Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_44:
   \   00000000   ........           DC32     `?<Constant " Check Pending MT Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_45:
   \   00000000   ........           DC32     `?<Constant " Check Pending BC Ints">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_46:
   \   00000000   ........           DC32     `?<Constant "Note: Reading the HW ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_47:
   \   00000000   ........           DC32     `?<Constant "Press \\'M\\' for menu, o...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_48:
   \   00000000   ........           DC32     `?<Constant "\\n\\rNeither Remote Term...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_49:
   \   00000000   00400940           DC32     0x40094000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_50:
   \   00000000   ........           DC32     watch

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_51:
   \   00000000   ........           DC32     `?<Constant "\\n\\r Invalid Choice. Pr...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_52:
   \   00000000   ........           DC32     waddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_53:
   \   00000000   ........           DC32     `?<Constant "    0           -    ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_54:
   \   00000000   ........           DC32     `?<Constant "    1           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_55:
   \   00000000   ........           DC32     `?<Constant "1           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_56:
   \   00000000   ........           DC32     `?<Constant "0           ">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_57:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_58:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_59:
   \   00000000   ........           DC32     `?<Constant "    -           -    ...">_2`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_60:
   \   00000000   ........           DC32     `?<Constant "Press \\'M\\' for menu, o...">_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_61:
   \   00000000   ........           DC32     `?<Constant "=====================...">`

   \                                 In section .rodata, align 4
   \                     `?<Constant {{2097152, (AT91S_PIO *)1074662400,`:
   \   00000000   00002000000C       DC32 2097152, 400E0C00H
   \              0E40        
   \   00000008   0A0000000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000001B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000020   00001000000C       DC32 1048576, 400E0C00H
   \              0E40        
   \   00000028   0A0000000000       DC8 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000003B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000040   00008000000C       DC32 8388608, 400E0C00H
   \              0E40        
   \   00000048   0A0100000000       DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000005B   0000000000         DC8 0, 0, 0, 0, 0
   \   00000060   00004000000C       DC32 4194304, 400E0C00H
   \              0E40        
   \   00000068   0A0100000000       DC8 10, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000007B   0000000000         DC8 0, 0, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r*******************...">`:
   \   00000000   0A0D2A2A2A2A       DC8 0AH, 0DH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000008   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000010   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000018   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000020   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000028   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000030   2A2A2A0A0D00       DC8 2AH, 2AH, 2AH, 0AH, 0DH, 0
   \   00000036   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Holt Integrated Ci...">`:
   \   00000000   202020486F6C       DC8 20H, 20H, 20H, 48H, 6FH, 6CH, 74H, 20H
   \              7420        
   \   00000008   496E74656772       DC8 49H, 6EH, 74H, 65H, 67H, 72H, 61H, 74H
   \              6174        
   \   00000010   656420436972       DC8 65H, 64H, 20H, 43H, 69H, 72H, 63H, 75H
   \              6375        
   \   00000018   697473204849       DC8 69H, 74H, 73H, 20H, 48H, 49H, 2DH, 36H
   \              2D36        
   \   00000020   3133302F3331       DC8 31H, 33H, 30H, 2FH, 33H, 31H, 20H, 50H
   \              2050        
   \   00000028   726F6A656374       DC8 72H, 6FH, 6AH, 65H, 63H, 74H, 20H, 20H
   \              2020        
   \   00000030   200A0D00           DC8 20H, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "        Compiled: %s ...">`:
   \   00000000   202020202020       DC8 "        Compiled: %s %s        \012\015"
   \              2020436F6D70
   \              696C65643A20
   \              257320257320
   \              202020202020
   \              200A0D00    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "May 22 2012">`:
   \   00000000   4D6179203232       DC8 "May 22 2012"
   \              203230313200

   \                                 In section .rodata, align 4
   \                     `?<Constant "13:43:41">`:
   \   00000000   31333A34333A       DC8 "13:43:41"
   \              343100      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "*********************...">`:
   \   00000000   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000008   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000010   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000018   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000020   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000028   2A2A2A2A2A2A       DC8 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH, 2AH
   \              2A2A        
   \   00000030   2A0A0A0D00         DC8 2AH, 0AH, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   BC Off  ">`:
   \   00000000   202020424320       DC8 "   BC Off  "
   \              4F6666202000

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT On    ">`:
   \   00000000   494D54204F6E       DC8 "IMT On    "
   \              2020202000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 Off  ">`:
   \   00000000   525431204F66       DC8 "RT1 Off  "
   \              66202000    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 Off">`:
   \   00000000   525432204F66       DC8 "RT2 Off"
   \              6600        

   \                                 In section .rodata, align 4
   \   00000000   0A0A0D00           DC8 "\012\012\015"

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'4\\' to list MT...">`:
   \   00000000   205072657373       DC8 " Press '4' to list MT configuration...\012\015"
   \              202734272074
   \              6F206C697374
   \              204D5420636F
   \              6E6669677572
   \              6174696F6E2E
   \              2E2E0A0D00  
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'5\\' to list MT...">`:
   \   00000000   205072657373       DC8 " Press '5' to list MT results, last msg...\012\015"
   \              202735272074
   \              6F206C697374
   \              204D54207265
   \              73756C74732C
   \              206C61737420
   \              6D73672E2E2E
   \              0A0D00      
   \   0000002D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'6\\' to list HW...">`:
   \   00000000   205072657373       DC8 " Press '6' to list HW interrupt status...\012\015"
   \              202736272074
   \              6F206C697374
   \              20485720696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " Press \\'9\\' to list MT...">`:
   \   00000000   205072657373       DC8 " Press '9' to list MT interrupt status...\012\015"
   \              202739272074
   \              6F206C697374
   \              204D5420696E
   \              746572727570
   \              742073746174
   \              75732E2E2E0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant " NOTE: Options 6-9 cl...">`:
   \   00000000   204E4F54453A       DC8 20H, 4EH, 4FH, 54H, 45H, 3AH, 20H, 4FH
   \              204F        
   \   00000008   7074696F6E73       DC8 70H, 74H, 69H, 6FH, 6EH, 73H, 20H, 36H
   \              2036        
   \   00000010   2D3920636C65       DC8 2DH, 39H, 20H, 63H, 6CH, 65H, 61H, 72H
   \              6172        
   \   00000018   207468652061       DC8 20H, 74H, 68H, 65H, 20H, 61H, 63H, 63H
   \              6363        
   \   00000020   657373656420       DC8 65H, 73H, 73H, 65H, 64H, 20H, 50H, 65H
   \              5065        
   \   00000028   6E64696E6720       DC8 6EH, 64H, 69H, 6EH, 67H, 20H, 49H, 6EH
   \              496E        
   \   00000030   746572727570       DC8 74H, 65H, 72H, 72H, 75H, 70H, 74H, 20H
   \              7420        
   \   00000038   526567697374       DC8 52H, 65H, 67H, 69H, 73H, 74H, 65H, 72H
   \              6572        
   \   00000040   210A0D00           DC8 21H, 0AH, 0DH, 0

   \                                 In section .rodata, align 4
   \   00000000   0A0D00             DC8 "\012\015"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0A0D5300           DC8 "\012\015S"

   \                                 In section .rodata, align 4
   \   00000000   0A0D4900           DC8 "\012\015I"

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT monitor mode selec...">`:
   \   00000000   4D54206D6F6E       DC8 "MT monitor mode selected.\012\012\015"
   \              69746F72206D
   \              6F6465207365
   \              6C6563746564
   \              2E0A0A0D00  
   \   0000001D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Configuration Regi...">`:
   \   00000000   4D5420436F6E       DC8 "MT Configuration Register: 0x%.2X%.2X\012\015"
   \              666967757261
   \              74696F6E2052
   \              656769737465
   \              723A20307825
   \              2E3258252E32
   \              580A0D00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "  20us Timeout">`:
   \   00000000   202032307573       DC8 "  20us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  58us Timeout">`:
   \   00000000   202035387573       DC8 "  58us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " 138us Timeout">`:
   \   00000000   203133387573       DC8 " 138us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  15us Timeout">`:
   \   00000000   202031357573       DC8 "  15us Timeout"
   \              2054696D656F
   \              757400      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " (bus dead time)   ">`:
   \   00000000   202862757320       DC8 " (bus dead time)   "
   \              646561642074
   \              696D65292020
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "2us Gap Check ON">`:
   \   00000000   327573204761       DC8 "2us Gap Check ON"
   \              702043686563
   \              6B204F4E00  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "2us Gap Check OFF">`:
   \   00000000   327573204761       DC8 "2us Gap Check OFF"
   \              702043686563
   \              6B204F464600
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  Time Tag last word,...">`:
   \   00000000   202054696D65       DC8 "  Time Tag last word, last bit   "
   \              20546167206C
   \              61737420776F
   \              72642C206C61
   \              737420626974
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Time Tag first word, ...">`:
   \   00000000   54696D652054       DC8 "Time Tag first word, first bit   "
   \              616720666972
   \              737420776F72
   \              642C20666972
   \              737420626974
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Time Tag first word,...">`:
   \   00000000   2054696D6520       DC8 " Time Tag first word, last bit   "
   \              546167206669
   \              72737420776F
   \              72642C206C61
   \              737420626974
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "           Time Taggi...">`:
   \   00000000   202020202020       DC8 "           Time Tagging is OFF   "
   \              202020202054
   \              696D65205461
   \              6767696E6720
   \              6973204F4646
   \              20202000    
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Start Rec: First Cmd ">`:
   \   00000000   537461727420       DC8 "Start Rec: First Cmd "
   \              5265633A2046
   \              697273742043
   \              6D642000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Word">`:
   \   00000000   576F726400         DC8 "Word"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "or Data Word">`:
   \   00000000   6F7220446174       DC8 "or Data Word"
   \              6120576F7264
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Sync + 2 bits">`:
   \   00000000   53796E63202B       DC8 "Sync + 2 bits"
   \              203220626974
   \              7300        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "or Data Sync + 2 bits">`:
   \   00000000   6F7220446174       DC8 "or Data Sync + 2 bits"
   \              612053796E63
   \              202B20322062
   \              69747300    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Invalid Data Word">`:
   \   00000000   202020496E76       DC8 "   Invalid Data Word"
   \              616C69642044
   \              61746120576F
   \              726400      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "s recorded   ">`:
   \   00000000   73207265636F       DC8 "s recorded   "
   \              726465642020
   \              2000        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " ends mssg   ">`:
   \   00000000   20656E647320       DC8 " ends mssg   "
   \              6D7373672020
   \              2000        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Extended Status Flags ">`:
   \   00000000   457874656E64       DC8 "Extended Status Flags "
   \              656420537461
   \              74757320466C
   \              6167732000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   4F4E00             DC8 "ON"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   4F464600           DC8 "OFF"

   \                                 In section .rodata, align 4
   \                     `?<Constant " SMT using ">`:
   \   00000000   20534D542075       DC8 " SMT using "
   \              73696E672000

   \                                 In section .rodata, align 4
   \   00000000   343800             DC8 "48"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   313600             DC8 "16"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "-bit Time Tag ">`:
   \   00000000   2D6269742054       DC8 "-bit Time Tag "
   \              696D65205461
   \              672000      
   \   0000000F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT Pkt Timer starts ">`:
   \   00000000   494D5420506B       DC8 "IMT Pkt Timer starts "
   \              742054696D65
   \              722073746172
   \              74732000    
   \   00000016   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at PktEnd   ">`:
   \   00000000   617420506B74       DC8 "at PktEnd   "
   \              456E64202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "at Cmd Wd   ">`:
   \   00000000   617420436D64       DC8 "at Cmd Wd   "
   \              205764202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT Hdr Data Type IRI...">`:
   \   00000000   494D54204864       DC8 "IMT Hdr Data Type IRIG-106-"
   \              722044617461
   \              205479706520
   \              495249472D31
   \              30362D00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "09  ">`:
   \   00000000   3039202000         DC8 "09  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "04  ">`:
   \   00000000   3034202000         DC8 "04  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "05  ">`:
   \   00000000   3035202000         DC8 "05  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "07  ">`:
   \   00000000   3037202000         DC8 "07  "
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " IMT Auto Header & Tr...">`:
   \   00000000   20494D542041       DC8 " IMT Auto Header & Trailer "
   \              75746F204865
   \              616465722026
   \              20547261696C
   \              65722000    

   \                                 In section .rodata, align 4
   \                     `?<Constant "OFF   ">`:
   \   00000000   4F4646202020       DC8 "OFF   "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " ON   ">`:
   \   00000000   204F4E202020       DC8 " ON   "
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT Data Packet Check...">`:
   \   00000000   494D54204461       DC8 "IMT Data Packet Checksum "
   \              746120506163
   \              6B6574204368
   \              65636B73756D
   \              2000        
   \   0000001A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rLast Message Record...">`:
   \   00000000   0A0D4C617374       DC8 "\012\015Last Message Recorded by "
   \              204D65737361
   \              676520526563
   \              6F7264656420
   \              62792000    

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT:    ">`:
   \   00000000   534D543A2020       DC8 "SMT:    "
   \              202000      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT:   ">`:
   \   00000000   494D543A2020       DC8 "IMT:   "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Block Status Word = 0...">`:
   \   00000000   426C6F636B20       DC8 "Block Status Word = 0x%.2X%.2X...\012\012\015"
   \              537461747573
   \              20576F726420
   \              3D203078252E
   \              3258252E3258
   \              2E2E2E0A0A0D
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "* means IMT BSW reser...">`:
   \   00000000   2A206D65616E       DC8 "* means IMT BSW reserved bit:\012\012\015"
   \              7320494D5420
   \              425357207265
   \              736572766564
   \              206269743A0A
   \              0A0D00      
   \   00000021   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "           * Start of...">`:
   \   00000000   202020202020       DC8 "           * Start of Msg "
   \              20202020202A
   \              205374617274
   \              206F66204D73
   \              672000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "n/a    ">`:
   \   00000000   6E2F61202020       DC8 "n/a    "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "= 1    ">`:
   \   00000000   3D2031202020       DC8 "= 1    "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "= 0    ">`:
   \   00000000   3D2030202020       DC8 "= 0    "
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus Used = ">`:
   \   00000000   427573205573       DC8 "Bus Used = "
   \              6564203D2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "B\\n\\n\\r">`:
   \   00000000   420A0A0D00         DC8 "B\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "A\\n\\n\\r">`:
   \   00000000   410A0A0D00         DC8 "A\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "             * End of...">`:
   \   00000000   202020202020       DC8 "             * End of Msg "
   \              202020202020
   \              202A20456E64
   \              206F66204D73
   \              672000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Error Occurred = ">`:
   \   00000000   4572726F7220       DC8 "Error Occurred = "
   \              4F6363757272
   \              6564203D2000
   \   00000012   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1\\n\\n\\r">`:
   \   00000000   310A0A0D00         DC8 "1\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0\\n\\n\\r">`:
   \   00000000   300A0A0D00         DC8 "0\012\012\015"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "        * Good Data B...">`:
   \   00000000   202020202020       DC8 "        * Good Data Block "
   \              20202A20476F
   \              6F6420446174
   \              6120426C6F63
   \              6B2000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Response Timeout = ">`:
   \   00000000   526573706F6E       DC8 "Response Timeout = "
   \              73652054696D
   \              656F7574203D
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "* SMT Data Stack Roll...">`:
   \   00000000   2A20534D5420       DC8 "* SMT Data Stack Rollover "
   \              446174612053
   \              7461636B2052
   \              6F6C6C6F7665
   \              722000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Illegal Gap Error = ">`:
   \   00000000   496C6C656761       DC8 "Illegal Gap Error = "
   \              6C2047617020
   \              4572726F7220
   \              3D2000      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " * Cmd Word Content E...">`:
   \   00000000   202A20436D64       DC8 " * Cmd Word Content Error "
   \              20576F726420
   \              436F6E74656E
   \              74204572726F
   \              722000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Word Count Error = ">`:
   \   00000000   576F72642043       DC8 "Word Count Error = "
   \              6F756E742045
   \              72726F72203D
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "* RT-RT Gap,Sync,Addr...">`:
   \   00000000   2A2052542D52       DC8 "* RT-RT Gap,Sync,Addr Err "
   \              54204761702C
   \              53796E632C41
   \              646472204572
   \              722000      
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Non-">`:
   \   00000000   4E6F6E2D00         DC8 "Non-"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT-RT Cmd: ">`:
   \   00000000   52542D525420       DC8 "RT-RT Cmd: "
   \              436D643A2000

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X"
   \              252E325800  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\n\\r * RT-RT Cmd Word ...">`:
   \   00000000   0A0A0D202A20       DC8 "\012\012\015 * RT-RT Cmd Word 2 Error "
   \              52542D525420
   \              436D6420576F
   \              726420322045
   \              72726F722000
   \   0000001E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Timetag = ">`:
   \   00000000   54696D657461       DC8 "Timetag = "
   \              67203D2000  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X\\n\\n\\r">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X\012\012\015"
   \              252E32580A0A
   \              0D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%.2X%.2X">`:
   \   00000000   252E3258252E       DC8 "%.2X%.2X"
   \              325800      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "%.2X%.2X\\n\\n\\r">`:
   \   00000000   252E3258252E       DC8 "%.2X%.2X\012\012\015"
   \              32580A0A0D00

   \                                 In section .rodata, align 4
   \                     `?<Constant "No Words Stored in Da...">`:
   \   00000000   4E6F20576F72       DC8 4EH, 6FH, 20H, 57H, 6FH, 72H, 64H, 73H
   \              6473        
   \   00000008   2053746F7265       DC8 20H, 53H, 74H, 6FH, 72H, 65H, 64H, 20H
   \              6420        
   \   00000010   696E20446174       DC8 69H, 6EH, 20H, 44H, 61H, 74H, 61H, 20H
   \              6120        
   \   00000018   537461636B20       DC8 53H, 74H, 61H, 63H, 6BH, 20H, 20H, 20H
   \              2020        
   \   00000020   202842726F61       DC8 20H, 28H, 42H, 72H, 6FH, 61H, 64H, 63H
   \              6463        
   \   00000028   617374204D6F       DC8 61H, 73H, 74H, 20H, 4DH, 6FH, 64H, 65H
   \              6465        
   \   00000030   20436F646520       DC8 20H, 43H, 6FH, 64H, 65H, 20H, 77H, 2FH
   \              772F        
   \   00000038   6F2044617461       DC8 6FH, 20H, 44H, 61H, 74H, 61H, 29H, 0AH
   \              290A        
   \   00000040   0A0D00             DC8 0AH, 0DH, 0
   \   00000043   00                 DC8 0

   \                                 In section .rodata, align 2
   \   00000000   2000               DC8 " "

   \                                 In section .rodata, align 4
   \                     `?<Constant "Msg Words 2-%d at Add...">`:
   \   00000000   4D736720576F       DC8 "Msg Words 2-%d at Addr 0x%.2X%.2X   "
   \              72647320322D
   \              256420617420
   \              416464722030
   \              78252E325825
   \              2E3258202020
   \              00          
   \   00000025   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  %d">`:
   \   00000000   2020256400         DC8 "  %d"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   20256400           DC8 " %d"

   \                                 In section .rodata, align 4
   \                     `?<Constant " Msg Words at Addr: ">`:
   \   00000000   204D73672057       DC8 " Msg Words at Addr: "
   \              6F7264732061
   \              742041646472
   \              3A2000      
   \   00000015   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0x%.2X%.2X   ">`:
   \   00000000   3078252E3258       DC8 "0x%.2X%.2X   "
   \              252E32582020
   \              2000        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bus Debug Addr: 0x600...">`:
   \   00000000   427573204465       DC8 "Bus Debug Addr: 0x6000%.2X%.2X"
   \              627567204164
   \              64723A203078
   \              36303030252E
   \              3258252E3258
   \              00          
   \   0000001F   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "       Tx">`:
   \   00000000   202020202020       DC8 "       Tx"
   \              20547800    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT Response = %d.%dus...">`:
   \   00000000   525420526573       DC8 "RT Response = %d.%dus    "
   \              706F6E736520
   \              3D2025642E25
   \              647573202020
   \              2000        
   \   0000001A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "(Broadcast?)">`:
   \   00000000   2842726F6164       DC8 "(Broadcast?)"
   \              636173743F29
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RxRT Response = %d.%dus ">`:
   \   00000000   527852542052       DC8 "RxRT Response = %d.%dus "
   \              6573706F6E73
   \              65203D202564
   \              2E2564757320
   \              00          
   \   00000019   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT mode is selected ...">`:
   \   00000000   534D54206D6F       DC8 53H, 4DH, 54H, 20H, 6DH, 6FH, 64H, 65H
   \              6465        
   \   00000008   206973207365       DC8 20H, 69H, 73H, 20H, 73H, 65H, 6CH, 65H
   \              6C65        
   \   00000010   637465642062       DC8 63H, 74H, 65H, 64H, 20H, 62H, 79H, 20H
   \              7920        
   \   00000018   4D5420436F6E       DC8 4DH, 54H, 20H, 43H, 6FH, 6EH, 66H, 69H
   \              6669        
   \   00000020   672052656769       DC8 67H, 20H, 52H, 65H, 67H, 69H, 73H, 74H
   \              7374        
   \   00000028   657220626974       DC8 65H, 72H, 20H, 62H, 69H, 74H, 20H, 30H
   \              2030        
   \   00000030   2E0A0A0D00         DC8 2EH, 0AH, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "IMT mode is selected ...">`:
   \   00000000   494D54206D6F       DC8 49H, 4DH, 54H, 20H, 6DH, 6FH, 64H, 65H
   \              6465        
   \   00000008   206973207365       DC8 20H, 69H, 73H, 20H, 73H, 65H, 6CH, 65H
   \              6C65        
   \   00000010   637465642062       DC8 63H, 74H, 65H, 64H, 20H, 62H, 79H, 20H
   \              7920        
   \   00000018   4D5420436F6E       DC8 4DH, 54H, 20H, 43H, 6FH, 6EH, 66H, 69H
   \              6669        
   \   00000020   672052656769       DC8 67H, 20H, 52H, 65H, 67H, 69H, 73H, 74H
   \              7374        
   \   00000028   657220626974       DC8 65H, 72H, 20H, 62H, 69H, 74H, 20H, 30H
   \              2030        
   \   00000030   2E0A0A0D00         DC8 2EH, 0AH, 0AH, 0DH, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "   Bus Monitor Ints  ...">`:
   \   00000000   202020427573       DC8 20H, 20H, 20H, 42H, 75H, 73H, 20H, 4DH
   \              204D        
   \   00000008   6F6E69746F72       DC8 6FH, 6EH, 69H, 74H, 6FH, 72H, 20H, 49H
   \              2049        
   \   00000010   6E7473202020       DC8 6EH, 74H, 73H, 20H, 20H, 20H, 20H, 45H
   \              2045        
   \   00000018   6E61626C6564       DC8 6EH, 61H, 62H, 6CH, 65H, 64H, 3FH, 20H
   \              3F20        
   \   00000020   202050696E20       DC8 20H, 20H, 50H, 69H, 6EH, 20H, 4FH, 75H
   \              4F75        
   \   00000028   747075743F20       DC8 74H, 70H, 75H, 74H, 3FH, 20H, 20H, 20H
   \              2020        
   \   00000030   50656E64696E       DC8 50H, 65H, 6EH, 64H, 69H, 6EH, 67H, 3FH
   \              673F        
   \   00000038   0A0D00             DC8 0AH, 0DH, 0
   \   0000003B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "End of Pkt,Buffer Full">`:
   \   00000000   456E64206F66       DC8 "End of Pkt,Buffer Full"
   \              20506B742C42
   \              756666657220
   \              46756C6C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   310A0D00           DC8 "1\012\015"

   \                                 In section .rodata, align 4
   \   00000000   300A0D00           DC8 "0\012\015"

   \                                 In section .rodata, align 4
   \                     `?<Constant "Offset before FULL_EOP">`:
   \   00000000   4F6666736574       DC8 "Offset before FULL_EOP"
   \              206265666F72
   \              652046554C4C
   \              5F454F5000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Pkt Max 1553 Msg Words">`:
   \   00000000   506B74204D61       DC8 "Pkt Max 1553 Msg Words"
   \              782031353533
   \              204D73672057
   \              6F72647300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Pkt Max 1553 Msg Count">`:
   \   00000000   506B74204D61       DC8 "Pkt Max 1553 Msg Count"
   \              782031353533
   \              204D73672043
   \              6F756E7400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Max Gap Time Exceeded">`:
   \   00000000   204D61782047       DC8 " Max Gap Time Exceeded"
   \              61702054696D
   \              652045786365
   \              6564656400  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Max Pkt Recording Time">`:
   \   00000000   4D617820506B       DC8 "Max Pkt Recording Time"
   \              74205265636F
   \              7264696E6720
   \              54696D6500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "      Host Packet Stop">`:
   \   00000000   202020202020       DC8 "      Host Packet Stop"
   \              486F73742050
   \              61636B657420
   \              53746F7000  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Stack End Addr Written">`:
   \   00000000   537461636B20       DC8 "Stack End Addr Written"
   \              456E64204164
   \              647220577269
   \              7474656E00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Hit Cmd Stack Address">`:
   \   00000000   204869742043       DC8 " Hit Cmd Stack Address"
   \              6D6420537461
   \              636B20416464
   \              7265737300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " IRIG-106 Packet Ready">`:
   \   00000000   20495249472D       DC8 " IRIG-106 Packet Ready"
   \              313036205061
   \              636B65742052
   \              6561647900  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Monitor End-of-Message">`:
   \   00000000   4D6F6E69746F       DC8 "Monitor End-of-Message"
   \              7220456E642D
   \              6F662D4D6573
   \              7361676500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\nIMT Skips Bits 4,2,1,0">`:
   \   00000000   0A494D542053       DC8 "\012IMT Skips Bits 4,2,1,0"
   \              6B6970732042
   \              69747320342C
   \              322C312C3000

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT Cmd Stack Rollover">`:
   \   00000000   534D5420436D       DC8 "SMT Cmd Stack Rollover"
   \              642053746163
   \              6B20526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT DataStack Rollover">`:
   \   00000000   534D54204461       DC8 "SMT DataStack Rollover"
   \              746153746163
   \              6B20526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT  Cmd Stack Address">`:
   \   00000000   534D54202043       DC8 "SMT  Cmd Stack Address"
   \              6D6420537461
   \              636B20416464
   \              7265737300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "SMT Data Stack Address">`:
   \   00000000   534D54204461       DC8 "SMT Data Stack Address"
   \              746120537461
   \              636B20416464
   \              7265737300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT Status is Msg Error">`:
   \   00000000   525420537461       DC8 "RT Status is Msg Error"
   \              747573206973
   \              204D73672045
   \              72726F7200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "     MT End-of-Message">`:
   \   00000000   20202020204D       DC8 "     MT End-of-Message"
   \              5420456E642D
   \              6F662D4D6573
   \              7361676500  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the MT ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   65204D542050       DC8 65H, 20H, 4DH, 54H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Hardware Interrupt...">`:
   \   00000000   0A0D20486172       DC8 0AH, 0DH, 20H, 48H, 61H, 72H, 64H, 77H
   \              6477        
   \   00000008   61726520496E       DC8 61H, 72H, 65H, 20H, 49H, 6EH, 74H, 65H
   \              7465        
   \   00000010   727275707473       DC8 72H, 72H, 75H, 70H, 74H, 73H, 20H, 20H
   \              2020        
   \   00000018   20456E61626C       DC8 20H, 45H, 6EH, 61H, 62H, 6CH, 65H, 64H
   \              6564        
   \   00000020   3F2020205069       DC8 3FH, 20H, 20H, 20H, 50H, 69H, 6EH, 20H
   \              6E20        
   \   00000028   4F7574707574       DC8 4FH, 75H, 74H, 70H, 75H, 74H, 3FH, 20H
   \              3F20        
   \   00000030   202050656E64       DC8 20H, 20H, 50H, 65H, 6EH, 64H, 69H, 6EH
   \              696E        
   \   00000038   673F0A0D00         DC8 67H, 3FH, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "HI-6131 Host SPI Erro...">`:
   \   00000000   48492D363133       DC8 48H, 49H, 2DH, 36H, 31H, 33H, 31H, 20H
   \              3120        
   \   00000008   486F73742053       DC8 48H, 6FH, 73H, 74H, 20H, 53H, 50H, 49H
   \              5049        
   \   00000010   204572726F72       DC8 20H, 45H, 72H, 72H, 6FH, 72H, 20H, 20H
   \              2020        
   \   00000018   20206E2F6120       DC8 20H, 20H, 6EH, 2FH, 61H, 20H, 20H, 20H
   \              2020        
   \   00000020   202020202020       DC8 20H, 20H, 20H, 20H, 20H, 20H, 6EH, 2FH
   \              6E2F        
   \   00000028   612020202020       DC8 61H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              2020        
   \   00000030   20206E2F610A       DC8 20H, 20H, 6EH, 2FH, 61H, 0AH, 0DH, 0
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "EE Chksum/Corr RAM Err">`:
   \   00000000   45452043686B       DC8 "EE Chksum/Corr RAM Err"
   \              73756D2F436F
   \              72722052414D
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RAM Init/UncorrRAM Err">`:
   \   00000000   52414D20496E       DC8 "RAM Init/UncorrRAM Err"
   \              69742F556E63
   \              6F727252414D
   \              2045727200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Loopback Fail on Bus A">`:
   \   00000000   4C6F6F706261       DC8 "Loopback Fail on Bus A"
   \              636B20466169
   \              6C206F6E2042
   \              7573204100  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Loopback Fail on Bus B">`:
   \   00000000   4C6F6F706261       DC8 "Loopback Fail on Bus B"
   \              636B20466169
   \              6C206F6E2042
   \              7573204200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Timetag Ct Rollover">`:
   \   00000000   4D542054696D       DC8 "MT Timetag Ct Rollover"
   \              657461672043
   \              7420526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Timetag Ct Rollover">`:
   \   00000000   42432054696D       DC8 "BC Timetag Ct Rollover"
   \              657461672043
   \              7420526F6C6C
   \              6F76657200  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT2 Timetag Valu Match">`:
   \   00000000   525432205469       DC8 "RT2 Timetag Valu Match"
   \              6D6574616720
   \              56616C75204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "RT1 Timetag Valu Match">`:
   \   00000000   525431205469       DC8 "RT1 Timetag Valu Match"
   \              6D6574616720
   \              56616C75204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "MT Timetag Value Match">`:
   \   00000000   4D542054696D       DC8 "MT Timetag Value Match"
   \              657461672056
   \              616C7565204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "BC Timetag Value Match">`:
   \   00000000   42432054696D       DC8 "BC Timetag Value Match"
   \              657461672056
   \              616C7565204D
   \              6174636800  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  RT2 Addr Parity Fail">`:
   \   00000000   202052543220       DC8 "  RT2 Addr Parity Fail"
   \              416464722050
   \              617269747920
   \              4661696C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "  RT1 Addr Parity Fail">`:
   \   00000000   202052543120       DC8 "  RT1 Addr Parity Fail"
   \              416464722050
   \              617269747920
   \              4661696C00  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending RT Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending RT Ints"
   \              2050656E6469
   \              6E6720525420
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending MT Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending MT Ints"
   \              2050656E6469
   \              6E67204D5420
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant " Check Pending BC Ints">`:
   \   00000000   20436865636B       DC8 " Check Pending BC Ints"
   \              2050656E6469
   \              6E6720424320
   \              496E747300  
   \   00000017   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Note: Reading the HW ...">`:
   \   00000000   4E6F74653A20       DC8 4EH, 6FH, 74H, 65H, 3AH, 20H, 52H, 65H
   \              5265        
   \   00000008   6164696E6720       DC8 61H, 64H, 69H, 6EH, 67H, 20H, 74H, 68H
   \              7468        
   \   00000010   652048572050       DC8 65H, 20H, 48H, 57H, 20H, 50H, 65H, 6EH
   \              656E        
   \   00000018   64696E672049       DC8 64H, 69H, 6EH, 67H, 20H, 49H, 6EH, 74H
   \              6E74        
   \   00000020   657272757074       DC8 65H, 72H, 72H, 75H, 70H, 74H, 20H, 52H
   \              2052        
   \   00000028   656769737465       DC8 65H, 67H, 69H, 73H, 74H, 65H, 72H, 20H
   \              7220        
   \   00000030   636C65617273       DC8 63H, 6CH, 65H, 61H, 72H, 73H, 20H, 69H
   \              2069        
   \   00000038   74210A0D00         DC8 74H, 21H, 0AH, 0DH, 0
   \   0000003D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Press \\'M\\' for menu, o...">`:
   \   00000000   507265737320       DC8 50H, 72H, 65H, 73H, 73H, 20H, 27H, 4DH
   \              274D        
   \   00000008   2720666F7220       DC8 27H, 20H, 66H, 6FH, 72H, 20H, 6DH, 65H
   \              6D65        
   \   00000010   6E752C206F72       DC8 6EH, 75H, 2CH, 20H, 6FH, 72H, 20H, 70H
   \              2070        
   \   00000018   726573732061       DC8 72H, 65H, 73H, 73H, 20H, 61H, 6EH, 79H
   \              6E79        
   \   00000020   2076616C6964       DC8 20H, 76H, 61H, 6CH, 69H, 64H, 20H, 6DH
   \              206D        
   \   00000028   656E75206B65       DC8 65H, 6EH, 75H, 20H, 6BH, 65H, 79H, 2EH
   \              792E        
   \   00000030   20202000           DC8 20H, 20H, 20H, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\rNeither Remote Term...">`:
   \   00000000   0A0D4E656974       DC8 "\012\015Neither Remote Terminal Is Enabled!\012\012\015"
   \              686572205265
   \              6D6F74652054
   \              65726D696E61
   \              6C2049732045
   \              6E61626C6564
   \              210A0A0D00  
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\n\\r Invalid Choice. Pr...">`:
   \   00000000   0A0D20496E76       DC8 0AH, 0DH, 20H, 49H, 6EH, 76H, 61H, 6CH
   \              616C        
   \   00000008   69642043686F       DC8 69H, 64H, 20H, 43H, 68H, 6FH, 69H, 63H
   \              6963        
   \   00000010   652E20507265       DC8 65H, 2EH, 20H, 50H, 72H, 65H, 73H, 73H
   \              7373        
   \   00000018   20274D272066       DC8 20H, 27H, 4DH, 27H, 20H, 66H, 6FH, 72H
   \              6F72        
   \   00000020   206D656E752C       DC8 20H, 6DH, 65H, 6EH, 75H, 2CH, 20H, 6FH
   \              206F        
   \   00000028   722070726573       DC8 72H, 20H, 70H, 72H, 65H, 73H, 73H, 20H
   \              7320        
   \   00000030   616E79207661       DC8 61H, 6EH, 79H, 20H, 76H, 61H, 6CH, 69H
   \              6C69        
   \   00000038   64206D656E75       DC8 64H, 20H, 6DH, 65H, 6EH, 75H, 20H, 6BH
   \              206B        
   \   00000040   65792E203E3E       DC8 65H, 79H, 2EH, 20H, 3EH, 3EH, 20H, 0
   \              2000        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    0           -    ...">`:
   \   00000000   202020203020       DC8 "    0           -           -\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              202020202D0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    1           ">`:
   \   00000000   202020203120       DC8 "    1           "
   \              202020202020
   \              2020202000  
   \   00000011   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "1           ">`:
   \   00000000   312020202020       DC8 "1           "
   \              202020202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "0           ">`:
   \   00000000   302020202020       DC8 "0           "
   \              202020202020
   \              00          
   \   0000000D   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">`:
   \   00000000   202020202D20       DC8 "    -           -           -\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              202020202D0A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">_1`:
   \   00000000   202020202D20       DC8 "    -           -           0\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              20202020300A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "    -           -    ...">_2`:
   \   00000000   202020202D20       DC8 "    -           -           1\012\015"
   \              202020202020
   \              202020202D20
   \              202020202020
   \              20202020310A
   \              0D00        

   \                                 In section .rodata, align 4
   \                     `?<Constant "Press \\'M\\' for menu, o...">_1`:
   \   00000000   507265737320       DC8 50H, 72H, 65H, 73H, 73H, 20H, 27H, 4DH
   \              274D        
   \   00000008   2720666F7220       DC8 27H, 20H, 66H, 6FH, 72H, 20H, 6DH, 65H
   \              6D65        
   \   00000010   6E752C206F72       DC8 6EH, 75H, 2CH, 20H, 6FH, 72H, 20H, 70H
   \              2070        
   \   00000018   726573732061       DC8 72H, 65H, 73H, 73H, 20H, 61H, 6EH, 79H
   \              6E79        
   \   00000020   2076616C6964       DC8 20H, 76H, 61H, 6CH, 69H, 64H, 20H, 6DH
   \              206D        
   \   00000028   656E75206B65       DC8 65H, 6EH, 75H, 20H, 6BH, 65H, 79H, 2EH
   \              792E        
   \   00000030   203E3E2000         DC8 20H, 3EH, 3EH, 20H, 0
   \   00000035   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "=====================...">`:
   \   00000000   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000008   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000010   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000018   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000020   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000028   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000030   3D3D3D3D3D3D       DC8 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH, 3DH
   \              3D3D        
   \   00000038   3D3D3D0A0D00       DC8 3DH, 3DH, 3DH, 0AH, 0DH, 0
   \   0000003E   0000               DC8 0, 0
   2635          
   2636          

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     ConfigureUsart1         136
     ascii2int                 0
     chk_key_input             8
     list_hw_ints_console     16
     list_mt_config           16
     list_mt_ints_console     24
     list_rt_ints_console      8
     mt_last_msg_console      48
     print_b0sp                8
     print_b1sp                8
     print_dd0n                8
     print_dd1n                8
     print_dddn                8
     print_line                8
     print_menuprompt          8
     print_null                8
     print_sp1sp               8
     show_menu                 8


   Section sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     waddr                                             2
     watch                                             1
     ConfigureUsart1                                  76
     show_menu                                       142
     list_mt_config                                  598
     mt_last_msg_console                            1734
     list_mt_ints_console                           1078
     list_hw_ints_console                            782
     list_rt_ints_console                             20
     chk_key_input                                   170
     ascii2int                                        70
     print_null                                       10
     print_sp1sp                                      10
     print_b1sp                                       10
     print_b0sp                                       10
     print_dddn                                       10
     print_dd0n                                       10
     print_dd1n                                       10
     print_menuprompt                                 10
     print_line                                       10
     ??DataTable1                                      4
     ??DataTable2                                      4
     ??DataTable2_1                                    4
     ??DataTable2_2                                    4
     ??DataTable2_3                                    4
     ??DataTable2_4                                    4
     ??DataTable2_5                                    4
     ??DataTable2_6                                    4
     ??DataTable2_7                                    4
     ??DataTable3                                      4
     ??DataTable3_1                                    4
     ??DataTable3_2                                    4
     ??DataTable3_3                                    4
     ??DataTable3_4                                    4
     ??DataTable3_5                                    4
     ??DataTable3_6                                    4
     ??DataTable3_7                                    4
     ??DataTable3_8                                    4
     ??DataTable3_9                                    4
     ??DataTable3_10                                   4
     ??DataTable3_11                                   4
     ??DataTable3_12                                   4
     ??DataTable3_13                                   4
     ??DataTable3_14                                   4
     ??DataTable3_15                                   4
     ??DataTable3_16                                   4
     ??DataTable3_17                                   4
     ??DataTable3_18                                   4
     ??DataTable3_19                                   4
     ??DataTable3_20                                   4
     ??DataTable3_21                                   4
     ??DataTable3_22                                   4
     ??DataTable3_23                                   4
     ??DataTable3_24                                   4
     ??DataTable3_25                                   4
     ??DataTable3_26                                   4
     ??DataTable3_27                                   4
     ??DataTable3_28                                   4
     ??DataTable3_29                                   4
     ??DataTable3_30                                   4
     ??DataTable3_31                                   4
     ??DataTable3_32                                   4
     ??DataTable3_33                                   4
     ??DataTable3_34                                   4
     ??DataTable3_35                                   4
     ??DataTable3_36                                   4
     ??DataTable3_37                                   4
     ??DataTable3_38                                   4
     ??DataTable3_39                                   4
     ??DataTable3_40                                   4
     ??DataTable3_41                                   4
     ??DataTable3_42                                   4
     ??DataTable3_43                                   4
     ??DataTable3_44                                   4
     ??DataTable3_45                                   4
     ??DataTable3_46                                   4
     ??DataTable3_47                                   4
     ??DataTable3_48                                   4
     ??DataTable3_49                                   4
     ??DataTable3_50                                   4
     ??DataTable3_51                                   4
     ??DataTable3_52                                   4
     ??DataTable3_53                                   4
     ??DataTable3_54                                   4
     ??DataTable3_55                                   4
     ??DataTable3_56                                   4
     ??DataTable3_57                                   4
     ??DataTable3_58                                   4
     ??DataTable3_59                                   4
     ??DataTable4                                      4
     ??DataTable4_1                                    4
     ??DataTable4_2                                    4
     ??DataTable4_3                                    4
     ??DataTable4_4                                    4
     ??DataTable4_5                                    4
     ??DataTable4_6                                    4
     ??DataTable4_7                                    4
     ??DataTable4_8                                    4
     ??DataTable4_9                                    4
     ??DataTable4_10                                   4
     ??DataTable4_11                                   4
     ??DataTable4_12                                   4
     ??DataTable4_13                                   4
     ??DataTable4_14                                   4
     ??DataTable4_15                                   4
     ??DataTable4_16                                   4
     ??DataTable4_17                                   4
     ??DataTable4_18                                   4
     ??DataTable4_19                                   4
     ??DataTable4_20                                   4
     ??DataTable4_21                                   4
     ??DataTable4_22                                   4
     ??DataTable4_23                                   4
     ??DataTable4_24                                   4
     ??DataTable4_25                                   4
     ??DataTable4_26                                   4
     ??DataTable4_27                                   4
     ??DataTable4_28                                   4
     ??DataTable4_29                                   4
     ??DataTable4_30                                   4
     ??DataTable4_31                                   4
     ??DataTable6                                      4
     ??DataTable6_1                                    4
     ??DataTable6_2                                    4
     ??DataTable6_3                                    4
     ??DataTable6_4                                    4
     ??DataTable6_5                                    4
     ??DataTable6_6                                    4
     ??DataTable7                                      4
     ??DataTable8                                      4
     ??DataTable10                                     4
     ??DataTable12                                     4
     ??DataTable14                                     4
     ??DataTable15                                     4
     ??DataTable16                                     4
     ??DataTable16_1                                   4
     ??DataTable16_2                                   4
     ??DataTable16_3                                   4
     ??DataTable16_4                                   4
     ??DataTable16_5                                   4
     ??DataTable16_6                                   4
     ??DataTable16_7                                   4
     ??DataTable16_8                                   4
     ??DataTable16_9                                   4
     ??DataTable16_10                                  4
     ??DataTable16_11                                  4
     ??DataTable16_12                                  4
     ??DataTable16_13                                  4
     ??DataTable16_14                                  4
     ??DataTable16_15                                  4
     ??DataTable16_16                                  4
     ??DataTable16_17                                  4
     ??DataTable16_18                                  4
     ??DataTable16_19                                  4
     ??DataTable16_20                                  4
     ??DataTable16_21                                  4
     ??DataTable16_22                                  4
     ??DataTable16_23                                  4
     ??DataTable16_24                                  4
     ??DataTable16_25                                  4
     ??DataTable16_26                                  4
     ??DataTable16_27                                  4
     ??DataTable16_28                                  4
     ??DataTable16_29                                  4
     ??DataTable16_30                                  4
     ??DataTable16_31                                  4
     ??DataTable16_32                                  4
     ??DataTable16_33                                  4
     ??DataTable16_34                                  4
     ??DataTable16_35                                  4
     ??DataTable16_36                                  4
     ??DataTable16_37                                  4
     ??DataTable16_38                                  4
     ??DataTable16_39                                  4
     ??DataTable16_40                                  4
     ??DataTable16_41                                  4
     ??DataTable16_42                                  4
     ??DataTable16_43                                  4
     ??DataTable16_44                                  4
     ??DataTable16_45                                  4
     ??DataTable16_46                                  4
     ??DataTable16_47                                  4
     ??DataTable16_48                                  4
     ??DataTable16_49                                  4
     ??DataTable16_50                                  4
     ??DataTable16_51                                  4
     ??DataTable16_52                                  4
     ??DataTable16_53                                  4
     ??DataTable16_54                                  4
     ??DataTable16_55                                  4
     ??DataTable16_56                                  4
     ??DataTable16_57                                  4
     ??DataTable16_58                                  4
     ??DataTable16_59                                  4
     ??DataTable16_60                                  4
     ??DataTable16_61                                  4
     ?<Constant {{2097152, (AT91S_PIO *)1074662400,  128
     ?<Constant "\n\r*******************...">         56
     ?<Constant "   Holt Integrated Ci...">           52
     ?<Constant "        Compiled: %s ...">           36
     ?<Constant "May 22 2012">                        12
     ?<Constant "13:43:41">                           12
     ?<Constant "*********************...">           56
     ?<Constant "   BC Off  ">                        12
     ?<Constant "IMT On    ">                         12
     ?<Constant "RT1 Off  ">                          12
     ?<Constant "RT2 Off">                             8
     ?<Constant "\n\n\r">                              4
     ?<Constant " Press \'4\' to list MT...">         44
     ?<Constant " Press \'5\' to list MT...">         48
     ?<Constant " Press \'6\' to list HW...">         44
     ?<Constant " Press \'9\' to list MT...">         44
     ?<Constant " NOTE: Options 6-9 cl...">           68
     ?<Constant "\n\r">                                4
     ?<Constant "\n\rS">                               4
     ?<Constant "\n\rI">                               4
     ?<Constant "MT monitor mode selec...">           32
     ?<Constant "MT Configuration Regi...">           40
     ?<Constant "  20us Timeout">                     16
     ?<Constant "  58us Timeout">                     16
     ?<Constant " 138us Timeout">                     16
     ?<Constant "  15us Timeout">                     16
     ?<Constant " (bus dead time)   ">                20
     ?<Constant "2us Gap Check ON">                   20
     ?<Constant "2us Gap Check OFF">                  20
     ?<Constant "  Time Tag last word,...">           36
     ?<Constant "Time Tag first word, ...">           36
     ?<Constant " Time Tag first word,...">           36
     ?<Constant "           Time Taggi...">           36
     ?<Constant "Start Rec: First Cmd ">              24
     ?<Constant "Word">                                8
     ?<Constant "or Data Word">                       16
     ?<Constant "Sync + 2 bits">                      16
     ?<Constant "or Data Sync + 2 bits">              24
     ?<Constant "   Invalid Data Word">               24
     ?<Constant "s recorded   ">                      16
     ?<Constant " ends mssg   ">                      16
     ?<Constant "Extended Status Flags ">             24
     ?<Constant "ON">                                  4
     ?<Constant "OFF">                                 4
     ?<Constant " SMT using ">                        12
     ?<Constant "48">                                  4
     ?<Constant "16">                                  4
     ?<Constant "-bit Time Tag ">                     16
     ?<Constant "IMT Pkt Timer starts ">              24
     ?<Constant "at PktEnd   ">                       16
     ?<Constant "at Cmd Wd   ">                       16
     ?<Constant "IMT Hdr Data Type IRI...">           28
     ?<Constant "09  ">                                8
     ?<Constant "04  ">                                8
     ?<Constant "05  ">                                8
     ?<Constant "07  ">                                8
     ?<Constant " IMT Auto Header & Tr...">           28
     ?<Constant "OFF   ">                              8
     ?<Constant " ON   ">                              8
     ?<Constant "IMT Data Packet Check...">           28
     ?<Constant "\n\rLast Message Record...">         28
     ?<Constant "SMT:    ">                           12
     ?<Constant "IMT:   ">                             8
     ?<Constant "Block Status Word = 0...">           40
     ?<Constant "* means IMT BSW reser...">           36
     ?<Constant "           * Start of...">           28
     ?<Constant "n/a    ">                             8
     ?<Constant "= 1    ">                             8
     ?<Constant "= 0    ">                             8
     ?<Constant "Bus Used = ">                        12
     ?<Constant "B\n\n\r">                             8
     ?<Constant "A\n\n\r">                             8
     ?<Constant "             * End of...">           28
     ?<Constant "Error Occurred = ">                  20
     ?<Constant "1\n\n\r">                             8
     ?<Constant "0\n\n\r">                             8
     ?<Constant "        * Good Data B...">           28
     ?<Constant "Response Timeout = ">                20
     ?<Constant "* SMT Data Stack Roll...">           28
     ?<Constant "Illegal Gap Error = ">               24
     ?<Constant " * Cmd Word Content E...">           28
     ?<Constant "Word Count Error = ">                20
     ?<Constant "* RT-RT Gap,Sync,Addr...">           28
     ?<Constant "Non-">                                8
     ?<Constant "RT-RT Cmd: ">                        12
     ?<Constant "0x%.2X%.2X">                         12
     ?<Constant "\n\n\r * RT-RT Cmd Word ...">        32
     ?<Constant "Timetag = ">                         12
     ?<Constant "0x%.2X%.2X\n\n\r">                   16
     ?<Constant "%.2X%.2X">                           12
     ?<Constant "%.2X%.2X\n\n\r">                     12
     ?<Constant "No Words Stored in Da...">           68
     ?<Constant " ">                                   2
     ?<Constant "Msg Words 2-%d at Add...">           40
     ?<Constant "  %d">                                8
     ?<Constant " %d">                                 4
     ?<Constant " Msg Words at Addr: ">               24
     ?<Constant "0x%.2X%.2X   ">                      16
     ?<Constant "Bus Debug Addr: 0x600...">           32
     ?<Constant "       Tx">                          12
     ?<Constant "RT Response = %d.%dus...">           28
     ?<Constant "(Broadcast?)">                       16
     ?<Constant "RxRT Response = %d.%dus ">           28
     ?<Constant "SMT mode is selected ...">           56
     ?<Constant "IMT mode is selected ...">           56
     ?<Constant "   Bus Monitor Ints  ...">           60
     ?<Constant "End of Pkt,Buffer Full">             24
     ?<Constant "1\n\r">                               4
     ?<Constant "0\n\r">                               4
     ?<Constant "Offset before FULL_EOP">             24
     ?<Constant "Pkt Max 1553 Msg Words">             24
     ?<Constant "Pkt Max 1553 Msg Count">             24
     ?<Constant " Max Gap Time Exceeded">             24
     ?<Constant "Max Pkt Recording Time">             24
     ?<Constant "      Host Packet Stop">             24
     ?<Constant "Stack End Addr Written">             24
     ?<Constant " Hit Cmd Stack Address">             24
     ?<Constant " IRIG-106 Packet Ready">             24
     ?<Constant "Monitor End-of-Message">             24
     ?<Constant "\nIMT Skips Bits 4,2,1,0">           24
     ?<Constant "SMT Cmd Stack Rollover">             24
     ?<Constant "SMT DataStack Rollover">             24
     ?<Constant "SMT  Cmd Stack Address">             24
     ?<Constant "SMT Data Stack Address">             24
     ?<Constant "RT Status is Msg Error">             24
     ?<Constant "     MT End-of-Message">             24
     ?<Constant "Note: Reading the MT ...">           64
     ?<Constant "\n\r Hardware Interrupt...">         64
     ?<Constant "HI-6131 Host SPI Erro...">           56
     ?<Constant "EE Chksum/Corr RAM Err">             24
     ?<Constant "RAM Init/UncorrRAM Err">             24
     ?<Constant "Loopback Fail on Bus A">             24
     ?<Constant "Loopback Fail on Bus B">             24
     ?<Constant "MT Timetag Ct Rollover">             24
     ?<Constant "BC Timetag Ct Rollover">             24
     ?<Constant "RT2 Timetag Valu Match">             24
     ?<Constant "RT1 Timetag Valu Match">             24
     ?<Constant "MT Timetag Value Match">             24
     ?<Constant "BC Timetag Value Match">             24
     ?<Constant "  RT2 Addr Parity Fail">             24
     ?<Constant "  RT1 Addr Parity Fail">             24
     ?<Constant " Check Pending RT Ints">             24
     ?<Constant " Check Pending MT Ints">             24
     ?<Constant " Check Pending BC Ints">             24
     ?<Constant "Note: Reading the HW ...">           64
     ?<Constant "Press \'M\' for menu, o...">         52
     ?<Constant "\n\rNeither Remote Term...">         44
     ?<Constant "\n\r Invalid Choice. Pr...">         72
     ?<Constant "    0           -    ...">           32
     ?<Constant "    1           ">                   20
     ?<Constant "1           ">                       16
     ?<Constant "0           ">                       16
     ?<Constant "    -           -    ...">           32
     ?<Constant "    -           -    ...">_1         32
     ?<Constant "    -           -    ...">_2         32
     ?<Constant "Press \'M\' for menu, o...">_1       56
     ?<Constant "=====================...">           64

 
     3 bytes in section .bss
 3 926 bytes in section .rodata
 5 464 bytes in section .text
 
 5 464 bytes of CODE  memory
 3 926 bytes of CONST memory
     3 bytes of DATA  memory

Errors: none
Warnings: none

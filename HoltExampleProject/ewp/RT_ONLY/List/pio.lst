###############################################################################
#                                                                             #
#                                                       22/May/2012  13:43:22 #
# IAR ANSI C/C++ Compiler V6.21.1.32794/W32 KICKSTART for ARM                 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91lib\peripherals\pio\p #
#                    io.c                                                     #
#    Command line =  "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91lib\peripherals\pio\p #
#                    io.c" -D at91sam3u4 -D flash -D TRACE_LEVEL=4 -D         #
#                    BC_ena=0 -D RT2_ena=1 -D RT1_ena=1 -D SMT_ena=0 -D       #
#                    IMT_ena=0 -lC "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-e #
#                    k\_Holt HI-6130-40 EBI Demo 1_0\ewp\RT_ONLY\List\"       #
#                    --remarks --diag_suppress Pe826,Pe1375,Pe068 -o          #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\RT_ONLY\Obj\" --no_cse       #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/peripherals #
#                    \" -I "C:\Program Files\IAR Systems\Embedded Workbench   #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/components\ #
#                    " -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib\" -I        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\external_libs\" -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/boards/at91 #
#                    sam3u-ek\" --cpu_mode thumb -On --use_c++_inline         #
#    List file    =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\RT_ONLY\List\pio.lst         #
#    Object file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\RT_ONLY\Obj\pio.o            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Program Files\IAR Systems\Embedded Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91lib\peripherals\pio\pio.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support 
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2008, Atmel Corporation
      5           *
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaimer below.
     13           *
     14           * Atmel's name may not be used to endorse or promote products derived from
     15           * this software without specific prior written permission.
     16           *
     17           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     18           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     19           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     20           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     21           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     22           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     23           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     24           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     25           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     26           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     27           * ----------------------------------------------------------------------------
     28           */
     29          
     30          //------------------------------------------------------------------------------
     31          //         Headers
     32          //------------------------------------------------------------------------------
     33          
     34          #include "pio.h"
     35          #include <board.h>
     36          
     37          //------------------------------------------------------------------------------
     38          //         Local Functions
     39          //------------------------------------------------------------------------------
     40          
     41          //------------------------------------------------------------------------------
     42          /// Configures one or more pin(s) of a PIO controller as being controlled by
     43          /// peripheral A. Optionally, the corresponding internal pull-up(s) can be
     44          /// enabled.
     45          /// \param pio  Pointer to a PIO controller.
     46          /// \param mask  Bitmask of one or more pin(s) to configure.
     47          /// \param enablePullUp  Indicates if the pin(s) internal pull-up shall be
     48          ///                      configured.
     49          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     50          static void PIO_SetPeripheralA(
     51              AT91S_PIO *pio,
     52              unsigned int mask,
     53              unsigned char enablePullUp)
     54          {
   \                     PIO_SetPeripheralA:
   \   00000000   30B4               PUSH     {R4,R5}
     55          #if !defined(AT91C_PIOA_ASR)
     56              unsigned int abmr;
     57          #endif
     58          
     59              // Disable interrupts on the pin(s)
     60              pio->PIO_IDR = mask;
   \   00000002   4164               STR      R1,[R0, #+68]
     61          
     62              // Enable the pull-up(s) if necessary
     63              if (enablePullUp) {
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   002A               CMP      R2,#+0
   \   00000008   01D0               BEQ.N    ??PIO_SetPeripheralA_0
     64          
     65                  pio->PIO_PPUER = mask;
   \   0000000A   4166               STR      R1,[R0, #+100]
   \   0000000C   00E0               B.N      ??PIO_SetPeripheralA_1
     66              }
     67              else {
     68          
     69                  pio->PIO_PPUDR = mask;
   \                     ??PIO_SetPeripheralA_0:
   \   0000000E   0166               STR      R1,[R0, #+96]
     70              }
     71          
     72              // Configure pin
     73          #if defined(AT91C_PIOA_ASR)
     74              pio->PIO_ASR = mask;
     75          #else
     76              abmr = pio->PIO_ABSR;
   \                     ??PIO_SetPeripheralA_1:
   \   00000010   046F               LDR      R4,[R0, #+112]
   \   00000012   2300               MOVS     R3,R4
     77              pio->PIO_ABSR &= (~mask & abmr);
   \   00000014   046F               LDR      R4,[R0, #+112]
   \   00000016   33EA0105           BICS     R5,R3,R1
   \   0000001A   2C40               ANDS     R4,R5,R4
   \   0000001C   0467               STR      R4,[R0, #+112]
     78          #endif
     79              pio->PIO_PDR = mask;
   \   0000001E   4160               STR      R1,[R0, #+4]
     80          }
   \   00000020   30BC               POP      {R4,R5}
   \   00000022   7047               BX       LR               ;; return
     81          
     82          //------------------------------------------------------------------------------
     83          /// Configures one or more pin(s) of a PIO controller as being controlled by
     84          /// peripheral B. Optionally, the corresponding internal pull-up(s) can be
     85          /// enabled.
     86          /// \param pio  Pointer to a PIO controller.
     87          /// \param mask  Bitmask of one or more pin(s) to configure.
     88          /// \param enablePullUp  Indicates if the pin(s) internal pull-up shall be
     89          ///                      configured.
     90          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
     91          static void PIO_SetPeripheralB(
     92              AT91S_PIO *pio,
     93              unsigned int mask,
     94              unsigned char enablePullUp)
     95          {
   \                     PIO_SetPeripheralB:
   \   00000000   10B4               PUSH     {R4}
     96          #if !defined(AT91C_PIOA_BSR)
     97              unsigned int abmr;
     98          #endif
     99          
    100              // Disable interrupts on the pin(s)
    101              pio->PIO_IDR = mask;
   \   00000002   4164               STR      R1,[R0, #+68]
    102          
    103              // Enable the pull-up(s) if necessary
    104              if (enablePullUp) {
   \   00000004   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000006   002A               CMP      R2,#+0
   \   00000008   01D0               BEQ.N    ??PIO_SetPeripheralB_0
    105          
    106                  pio->PIO_PPUER = mask;
   \   0000000A   4166               STR      R1,[R0, #+100]
   \   0000000C   00E0               B.N      ??PIO_SetPeripheralB_1
    107              }
    108              else {
    109          
    110                  pio->PIO_PPUDR = mask;
   \                     ??PIO_SetPeripheralB_0:
   \   0000000E   0166               STR      R1,[R0, #+96]
    111              }
    112          
    113              // Configure pin
    114          #if defined(AT91C_PIOA_BSR)
    115              pio->PIO_BSR = mask;
    116          #else
    117              abmr = pio->PIO_ABSR;
   \                     ??PIO_SetPeripheralB_1:
   \   00000010   046F               LDR      R4,[R0, #+112]
   \   00000012   2300               MOVS     R3,R4
    118              pio->PIO_ABSR = mask | abmr;
   \   00000014   53EA0104           ORRS     R4,R3,R1
   \   00000018   0467               STR      R4,[R0, #+112]
    119          #endif
    120              pio->PIO_PDR = mask;
   \   0000001A   4160               STR      R1,[R0, #+4]
    121          }
   \   0000001C   10BC               POP      {R4}
   \   0000001E   7047               BX       LR               ;; return
    122          
    123          #if defined(AT91C_PIOA_IFDGSR) //Glitch or Debouncing filter selection supported
    124          //------------------------------------------------------------------------------
    125          /// Configures Glitch or Debouncing filter for input
    126          /// \param pio      Pointer to a PIO controller.
    127          /// \param mask   Bitmask for filter selection.
    128          ///                     each of 32 bit field, 0 is Glitch, 1 is Debouncing
    129          /// \param clkDiv  Clock divider if Debouncing select, using the lowest 14 bits
    130          ///                     common for all PIO line of selecting deboucing filter
    131          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    132          static void PIO_SetFilter(
    133              AT91S_PIO *pio,
    134              unsigned int filterSel,
    135              unsigned int clkDiv)
    136          {
    137              pio->PIO_DIFSR = filterSel;//set Debouncing, 0 bit field no effect
   \                     PIO_SetFilter:
   \   00000000   C0F88410           STR      R1,[R0, #+132]
    138              pio->PIO_SCIFSR = ~filterSel;//set Glitch, 0 bit field no effect
   \   00000004   CB43               MVNS     R3,R1
   \   00000006   C0F88030           STR      R3,[R0, #+128]
    139          
    140              pio->PIO_SCDR = clkDiv & 0x3FFF;//the lowest 14 bits work
   \   0000000A   9304               LSLS     R3,R2,#+18       ;; ZeroExtS R3,R2,#+18,#+18
   \   0000000C   9B0C               LSRS     R3,R3,#+18
   \   0000000E   C0F88C30           STR      R3,[R0, #+140]
    141          }
   \   00000012   7047               BX       LR               ;; return
    142          #endif
    143          
    144          //------------------------------------------------------------------------------
    145          /// Configures one or more pin(s) or a PIO controller as inputs. Optionally,
    146          /// the corresponding internal pull-up(s) and glitch filter(s) can be
    147          /// enabled.
    148          /// \param pio  Pointer to a PIO controller.
    149          /// \param mask  Bitmask indicating which pin(s) to configure as input(s).
    150          /// \param enablePullUp  Indicates if the internal pull-up(s) must be enabled.
    151          /// \param enableFilter  Indicates if the glitch filter(s) must be enabled.
    152          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    153          static void PIO_SetInput(
    154              AT91S_PIO *pio,
    155              unsigned int mask,
    156              unsigned char enablePullUp,
    157              unsigned char enableFilter)
    158          {
    159              // Disable interrupts
    160              pio->PIO_IDR = mask;
   \                     PIO_SetInput:
   \   00000000   4164               STR      R1,[R0, #+68]
    161          
    162              // Enable pull-up(s) if necessary
    163              if (enablePullUp) {
   \   00000002   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000004   002A               CMP      R2,#+0
   \   00000006   01D0               BEQ.N    ??PIO_SetInput_0
    164              
    165                  pio->PIO_PPUER = mask;
   \   00000008   4166               STR      R1,[R0, #+100]
   \   0000000A   00E0               B.N      ??PIO_SetInput_1
    166              }
    167              else {
    168              
    169                  pio->PIO_PPUDR = mask;
   \                     ??PIO_SetInput_0:
   \   0000000C   0166               STR      R1,[R0, #+96]
    170              }
    171          
    172              // Enable filter(s) if necessary
    173              if (enableFilter) {
   \                     ??PIO_SetInput_1:
   \   0000000E   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000010   002B               CMP      R3,#+0
   \   00000012   01D0               BEQ.N    ??PIO_SetInput_2
    174              
    175                  pio->PIO_IFER = mask;
   \   00000014   0162               STR      R1,[R0, #+32]
   \   00000016   00E0               B.N      ??PIO_SetInput_3
    176              }
    177              else {
    178              
    179                  pio->PIO_IFDR = mask;
   \                     ??PIO_SetInput_2:
   \   00000018   4162               STR      R1,[R0, #+36]
    180              }
    181          
    182              // Configure pin as input
    183              pio->PIO_ODR = mask;
   \                     ??PIO_SetInput_3:
   \   0000001A   4161               STR      R1,[R0, #+20]
    184              pio->PIO_PER = mask;
   \   0000001C   0160               STR      R1,[R0, #+0]
    185          }
   \   0000001E   7047               BX       LR               ;; return
    186          
    187          //------------------------------------------------------------------------------
    188          /// Configures one or more pin(s) of a PIO controller as outputs, with the
    189          /// given default value. Optionally, the multi-drive feature can be enabled
    190          /// on the pin(s).
    191          /// \param pio  Pointer to a PIO controller.
    192          /// \param mask  Bitmask indicating which pin(s) to configure.
    193          /// \param defaultValue  Default level on the pin(s).
    194          /// \param enableMultiDrive  Indicates if the pin(s) shall be configured as
    195          ///                          open-drain.
    196          /// \param enablePullUp  Indicates if the pin shall have its pull-up activated.
    197          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    198          static void PIO_SetOutput(
    199              AT91S_PIO *pio,
    200              unsigned int mask,
    201              unsigned char defaultValue,
    202              unsigned char enableMultiDrive,
    203              unsigned char enablePullUp)
    204          {
   \                     PIO_SetOutput:
   \   00000000   10B4               PUSH     {R4}
   \   00000002   019C               LDR      R4,[SP, #+4]
    205              // Disable interrupts
    206              pio->PIO_IDR = mask;
   \   00000004   4164               STR      R1,[R0, #+68]
    207          
    208              // Enable pull-up(s) if necessary
    209              if (enablePullUp) {
   \   00000006   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000008   002C               CMP      R4,#+0
   \   0000000A   01D0               BEQ.N    ??PIO_SetOutput_0
    210              
    211                  pio->PIO_PPUER = mask;
   \   0000000C   4166               STR      R1,[R0, #+100]
   \   0000000E   00E0               B.N      ??PIO_SetOutput_1
    212              }
    213              else {
    214              
    215                  pio->PIO_PPUDR = mask;
   \                     ??PIO_SetOutput_0:
   \   00000010   0166               STR      R1,[R0, #+96]
    216              }
    217          
    218              // Enable multi-drive if necessary
    219              if (enableMultiDrive) {
   \                     ??PIO_SetOutput_1:
   \   00000012   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000014   002B               CMP      R3,#+0
   \   00000016   01D0               BEQ.N    ??PIO_SetOutput_2
    220              
    221                  pio->PIO_MDER = mask;
   \   00000018   0165               STR      R1,[R0, #+80]
   \   0000001A   00E0               B.N      ??PIO_SetOutput_3
    222              }
    223              else {
    224              
    225                  pio->PIO_MDDR = mask;
   \                     ??PIO_SetOutput_2:
   \   0000001C   4165               STR      R1,[R0, #+84]
    226              }
    227          
    228              // Set default value
    229              if (defaultValue) {
   \                     ??PIO_SetOutput_3:
   \   0000001E   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000020   002A               CMP      R2,#+0
   \   00000022   01D0               BEQ.N    ??PIO_SetOutput_4
    230          
    231                  pio->PIO_SODR = mask;
   \   00000024   0163               STR      R1,[R0, #+48]
   \   00000026   00E0               B.N      ??PIO_SetOutput_5
    232              }
    233              else {
    234          
    235                  pio->PIO_CODR = mask;
   \                     ??PIO_SetOutput_4:
   \   00000028   4163               STR      R1,[R0, #+52]
    236              }
    237          
    238              // Configure pin(s) as output(s)
    239              pio->PIO_OER = mask;
   \                     ??PIO_SetOutput_5:
   \   0000002A   0161               STR      R1,[R0, #+16]
    240              pio->PIO_PER = mask;
   \   0000002C   0160               STR      R1,[R0, #+0]
    241          }
   \   0000002E   10BC               POP      {R4}
   \   00000030   7047               BX       LR               ;; return
    242          
    243          //------------------------------------------------------------------------------
    244          //         Global Functions
    245          //------------------------------------------------------------------------------
    246          
    247          //------------------------------------------------------------------------------
    248          /// Configures a list of Pin instances, each of which can either hold a single
    249          /// pin or a group of pins, depending on the mask value; all pins are configured
    250          /// by this function. The size of the array must also be provided and is easily
    251          /// computed using PIO_LISTSIZE whenever its length is not known in advance.
    252          /// \param list  Pointer to a list of Pin instances.
    253          /// \param size  Size of the Pin list (calculated using PIO_LISTSIZE).
    254          /// \return 1 if the pins have been configured properly; otherwise 0.
    255          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    256          unsigned char PIO_Configure(const Pin *list, unsigned int size)
    257          {
   \                     PIO_Configure:
   \   00000000   38B5               PUSH     {R3-R5,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
    258              // Configure pins
    259              while (size > 0) {
   \                     ??PIO_Configure_0:
   \   00000006   002D               CMP      R5,#+0
   \   00000008   52D0               BEQ.N    ??PIO_Configure_1
    260              
    261                  switch (list->type) {
   \   0000000A   607A               LDRB     R0,[R4, #+9]
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   06D0               BEQ.N    ??PIO_Configure_2
   \   00000010   0228               CMP      R0,#+2
   \   00000012   14D0               BEQ.N    ??PIO_Configure_3
   \   00000014   0BD3               BCC.N    ??PIO_Configure_4
   \   00000016   0428               CMP      R0,#+4
   \   00000018   2ED0               BEQ.N    ??PIO_Configure_5
   \   0000001A   2DD3               BCC.N    ??PIO_Configure_5
   \   0000001C   43E0               B.N      ??PIO_Configure_6
    262              
    263                      case PIO_PERIPH_A:
    264                          PIO_SetPeripheralA(list->pio,
    265                                             list->mask,
    266                                             (list->attribute & PIO_PULLUP) ? 1 : 0);
   \                     ??PIO_Configure_2:
   \   0000001E   A07A               LDRB     R0,[R4, #+10]
   \   00000020   10F00102           ANDS     R2,R0,#0x1
   \   00000024   2168               LDR      R1,[R4, #+0]
   \   00000026   6068               LDR      R0,[R4, #+4]
   \   00000028   ........           BL       PIO_SetPeripheralA
    267                          break;
   \   0000002C   3DE0               B.N      ??PIO_Configure_7
    268              
    269                      case PIO_PERIPH_B:
    270                          PIO_SetPeripheralB(list->pio,
    271                                             list->mask,
    272                                             (list->attribute & PIO_PULLUP) ? 1 : 0);
   \                     ??PIO_Configure_4:
   \   0000002E   A07A               LDRB     R0,[R4, #+10]
   \   00000030   10F00102           ANDS     R2,R0,#0x1
   \   00000034   2168               LDR      R1,[R4, #+0]
   \   00000036   6068               LDR      R0,[R4, #+4]
   \   00000038   ........           BL       PIO_SetPeripheralB
    273                          break;
   \   0000003C   35E0               B.N      ??PIO_Configure_7
    274              
    275                      case PIO_INPUT:
    276                          AT91C_BASE_PMC->PMC_PCER = 1 << list->id;
   \                     ??PIO_Configure_3:
   \   0000003E   0120               MOVS     R0,#+1
   \   00000040   94F90810           LDRSB    R1,[R4, #+8]
   \   00000044   8840               LSLS     R0,R0,R1
   \   00000046   ....               LDR.N    R1,??DataTable0  ;; 0x400e0410
   \   00000048   0860               STR      R0,[R1, #+0]
    277                          PIO_SetInput(list->pio,
    278                                       list->mask,
    279                                       (list->attribute & PIO_PULLUP) ? 1 : 0,
    280                                       (list->attribute & PIO_DEGLITCH)? 1 : 0);
   \   0000004A   A07A               LDRB     R0,[R4, #+10]
   \   0000004C   C0F34000           UBFX     R0,R0,#+1,#+1
   \   00000050   10F00103           ANDS     R3,R0,#0x1
   \   00000054   A07A               LDRB     R0,[R4, #+10]
   \   00000056   10F00102           ANDS     R2,R0,#0x1
   \   0000005A   2168               LDR      R1,[R4, #+0]
   \   0000005C   6068               LDR      R0,[R4, #+4]
   \   0000005E   ........           BL       PIO_SetInput
    281          
    282                          #if defined(AT91C_PIOA_IFDGSR) //PIO3 with Glitch or Debouncing selection
    283                          //if glitch input filter enabled, set it
    284                          if(list->attribute & PIO_DEGLITCH)//Glitch input filter enabled
   \   00000062   A07A               LDRB     R0,[R4, #+10]
   \   00000064   8007               LSLS     R0,R0,#+30
   \   00000066   06D5               BPL.N    ??PIO_Configure_8
    285                              PIO_SetFilter(list->pio,
    286                                  list->inFilter.filterSel,
    287                                  list->inFilter.clkDivider);
   \   00000068   E069               LDR      R0,[R4, #+28]
   \   0000006A   8204               LSLS     R2,R0,#+18       ;; ZeroExtS R2,R0,#+18,#+18
   \   0000006C   920C               LSRS     R2,R2,#+18
   \   0000006E   A169               LDR      R1,[R4, #+24]
   \   00000070   6068               LDR      R0,[R4, #+4]
   \   00000072   ........           BL       PIO_SetFilter
    288                          #endif
    289                          break;
   \                     ??PIO_Configure_8:
   \   00000076   18E0               B.N      ??PIO_Configure_7
    290              
    291                      case PIO_OUTPUT_0:
    292                      case PIO_OUTPUT_1:
    293                          PIO_SetOutput(list->pio,
    294                                        list->mask,
    295                                        (list->type == PIO_OUTPUT_1),
    296                                        (list->attribute & PIO_OPENDRAIN) ? 1 : 0,
    297                                        (list->attribute & PIO_PULLUP) ? 1 : 0);
   \                     ??PIO_Configure_5:
   \   00000078   A07A               LDRB     R0,[R4, #+10]
   \   0000007A   10F00100           ANDS     R0,R0,#0x1
   \   0000007E   A17A               LDRB     R1,[R4, #+10]
   \   00000080   C1F38001           UBFX     R1,R1,#+2,#+1
   \   00000084   11F00103           ANDS     R3,R1,#0x1
   \   00000088   617A               LDRB     R1,[R4, #+9]
   \   0000008A   0429               CMP      R1,#+4
   \   0000008C   01D1               BNE.N    ??PIO_Configure_9
   \   0000008E   0122               MOVS     R2,#+1
   \   00000090   00E0               B.N      ??PIO_Configure_10
   \                     ??PIO_Configure_9:
   \   00000092   0022               MOVS     R2,#+0
   \                     ??PIO_Configure_10:
   \   00000094   C0B2               UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000096   0090               STR      R0,[SP, #+0]
   \   00000098   DBB2               UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000009A   D2B2               UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   0000009C   2168               LDR      R1,[R4, #+0]
   \   0000009E   6068               LDR      R0,[R4, #+4]
   \   000000A0   ........           BL       PIO_SetOutput
    298                          break;
   \   000000A4   01E0               B.N      ??PIO_Configure_7
    299              
    300                      default: return 0;
   \                     ??PIO_Configure_6:
   \   000000A6   0020               MOVS     R0,#+0
   \   000000A8   03E0               B.N      ??PIO_Configure_11
    301                  }
    302          
    303                  list++;
   \                     ??PIO_Configure_7:
   \   000000AA   2034               ADDS     R4,R4,#+32
    304                  size--;
   \   000000AC   6D1E               SUBS     R5,R5,#+1
   \   000000AE   AAE7               B.N      ??PIO_Configure_0
    305              }
    306          
    307              return 1;
   \                     ??PIO_Configure_1:
   \   000000B0   0120               MOVS     R0,#+1
   \                     ??PIO_Configure_11:
   \   000000B2   32BD               POP      {R1,R4,R5,PC}    ;; return
    308          }
    309          
    310          //------------------------------------------------------------------------------
    311          /// Sets a high output level on all the PIOs defined in the given Pin instance.
    312          /// This has no immediate effects on PIOs that are not output, but the PIO
    313          /// controller will memorize the value they are changed to outputs.
    314          /// \param pin  Pointer to a Pin instance describing one or more pins.
    315          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    316          void PIO_Set(const Pin *pin)
    317          {
    318              pin->pio->PIO_SODR = pin->mask;
   \                     PIO_Set:
   \   00000000   4168               LDR      R1,[R0, #+4]
   \   00000002   0268               LDR      R2,[R0, #+0]
   \   00000004   0A63               STR      R2,[R1, #+48]
    319          }
   \   00000006   7047               BX       LR               ;; return
    320          
    321          //------------------------------------------------------------------------------
    322          /// Sets a low output level on all the PIOs defined in the given Pin instance.
    323          /// This has no immediate effects on PIOs that are not output, but the PIO
    324          /// controller will memorize the value they are changed to outputs.
    325          /// \param pin  Pointer to a Pin instance describing one or more pins.
    326          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    327          void PIO_Clear(const Pin *pin)
    328          {
    329              pin->pio->PIO_CODR = pin->mask;
   \                     PIO_Clear:
   \   00000000   4168               LDR      R1,[R0, #+4]
   \   00000002   0268               LDR      R2,[R0, #+0]
   \   00000004   4A63               STR      R2,[R1, #+52]
    330          }
   \   00000006   7047               BX       LR               ;; return
    331          
    332          //------------------------------------------------------------------------------
    333          /// Returns 1 if one or more PIO of the given Pin instance currently have a high
    334          /// level; otherwise returns 0. This method returns the actual value that is
    335          /// being read on the pin. To return the supposed output value of a pin, use
    336          /// PIO_GetOutputDataStatus() instead.
    337          /// \param pin  Pointer to a Pin instance describing one or more pins.
    338          /// \return 1 if the Pin instance contains at least one PIO that currently has
    339          /// a high level; otherwise 0.
    340          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    341          unsigned char PIO_Get(const Pin *pin)
    342          {
   \                     PIO_Get:
   \   00000000   0100               MOVS     R1,R0
    343              unsigned int reg;
    344              if ((pin->type == PIO_OUTPUT_0) || (pin->type == PIO_OUTPUT_1)) {
   \   00000002   487A               LDRB     R0,[R1, #+9]
   \   00000004   0328               CMP      R0,#+3
   \   00000006   02D0               BEQ.N    ??PIO_Get_0
   \   00000008   487A               LDRB     R0,[R1, #+9]
   \   0000000A   0428               CMP      R0,#+4
   \   0000000C   03D1               BNE.N    ??PIO_Get_1
    345          
    346                  reg = pin->pio->PIO_ODSR;
   \                     ??PIO_Get_0:
   \   0000000E   4868               LDR      R0,[R1, #+4]
   \   00000010   806B               LDR      R0,[R0, #+56]
   \   00000012   0200               MOVS     R2,R0
   \   00000014   02E0               B.N      ??PIO_Get_2
    347              }
    348              else {
    349          
    350                  reg = pin->pio->PIO_PDSR;
   \                     ??PIO_Get_1:
   \   00000016   4868               LDR      R0,[R1, #+4]
   \   00000018   C06B               LDR      R0,[R0, #+60]
   \   0000001A   0200               MOVS     R2,R0
    351              }
    352          
    353              if ((reg & pin->mask) == 0) {
   \                     ??PIO_Get_2:
   \   0000001C   0868               LDR      R0,[R1, #+0]
   \   0000001E   0242               TST      R2,R0
   \   00000020   01D1               BNE.N    ??PIO_Get_3
    354          
    355                  return 0;
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   00E0               B.N      ??PIO_Get_4
    356              }
    357              else {
    358          
    359                  return 1;
   \                     ??PIO_Get_3:
   \   00000026   0120               MOVS     R0,#+1
   \                     ??PIO_Get_4:
   \   00000028   7047               BX       LR               ;; return
    360              }
    361          }
    362          
    363          
    364          //------------------------------------------------------------------------------
    365          /// Returns 1 if one or more PIO of the given Pin are configured to output a
    366          /// high level (even if they are not output).
    367          /// To get the actual value of the pin, use PIO_Get() instead.
    368          /// \param pin  Pointer to a Pin instance describing one or more pins.
    369          /// \return 1 if the Pin instance contains at least one PIO that is configured
    370          /// to output a high level; otherwise 0.
    371          //------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    372          unsigned char PIO_GetOutputDataStatus(const Pin *pin)
    373          {
   \                     PIO_GetOutputDataStatus:
   \   00000000   0100               MOVS     R1,R0
    374              if ((pin->pio->PIO_ODSR & pin->mask) == 0) {
   \   00000002   4868               LDR      R0,[R1, #+4]
   \   00000004   806B               LDR      R0,[R0, #+56]
   \   00000006   0A68               LDR      R2,[R1, #+0]
   \   00000008   1042               TST      R0,R2
   \   0000000A   01D1               BNE.N    ??PIO_GetOutputDataStatus_0
    375          
    376                  return 0;
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   00E0               B.N      ??PIO_GetOutputDataStatus_1
    377              }
    378              else {
    379          
    380                  return 1;
   \                     ??PIO_GetOutputDataStatus_0:
   \   00000010   0120               MOVS     R0,#+1
   \                     ??PIO_GetOutputDataStatus_1:
   \   00000012   7047               BX       LR               ;; return
    381              }
    382          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   10040E40           DC32     0x400e0410

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     PIO_Clear                    0
     PIO_Configure               16
     PIO_Get                      0
     PIO_GetOutputDataStatus      0
     PIO_Set                      0
     PIO_SetFilter                0
     PIO_SetInput                 0
     PIO_SetOutput                4
     PIO_SetPeripheralA           8
     PIO_SetPeripheralB           4


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     PIO_SetPeripheralA        36
     PIO_SetPeripheralB        32
     PIO_SetFilter             20
     PIO_SetInput              32
     PIO_SetOutput             50
     PIO_Configure            180
     PIO_Set                    8
     PIO_Clear                  8
     PIO_Get                   42
     PIO_GetOutputDataStatus   20
     ??DataTable0               4

 
 432 bytes in section .text
 
 432 bytes of CODE memory

Errors: none
Warnings: none

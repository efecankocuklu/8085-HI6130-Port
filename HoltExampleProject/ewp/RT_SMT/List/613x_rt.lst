###############################################################################
#                                                                             #
#                                                       04/Jun/2012  08:49:06 #
# IAR ANSI C/C++ Compiler V6.21.1.32794/W32 KICKSTART for ARM                 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\613x_rt.c                        #
#    Command line =  "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\613x_rt.c" -D at91sam3u4 -D      #
#                    flash -D TRACE_LEVEL=4 -D BC_ena=0 -D RT2_ena=1 -D       #
#                    RT1_ena=1 -D SMT_ena=1 -D IMT_ena=0 -lC "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\RT_SMT\List\" --remarks      #
#                    --diag_suppress Pe826,Pe1375,Pe068 -o "C:\Program        #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\RT_SMT\Obj\" --no_cse        #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 6.0                 #
#                    Kickstart_2\arm\INC\c\DLib_Config_Full.h" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/peripherals #
#                    \" -I "C:\Program Files\IAR Systems\Embedded Workbench   #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/components\ #
#                    " -I "C:\Program Files\IAR Systems\Embedded Workbench    #
#                    6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt    #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib\" -I        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\external_libs\" -I  #
#                    "C:\Program Files\IAR Systems\Embedded Workbench 6.0     #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\..\..\..\at91lib/boards/at91 #
#                    sam3u-ek\" --cpu_mode thumb -On --use_c++_inline         #
#    List file    =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\RT_SMT\List\613x_rt.lst      #
#    Object file  =  C:\Program Files\IAR Systems\Embedded Workbench 6.0      #
#                    Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt        #
#                    HI-6130-40 EBI Demo 1_0\ewp\RT_SMT\Obj\613x_rt.o         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Program Files\IAR Systems\Embedded Workbench 6.0 Kickstart_2\arm\examples\Atmel\at91sam3u-ek\_Holt HI-6130-40 EBI Demo 1_0\613x_rt.c
      1          // 
      2          // file	613x_rt.c
      3          //
      4          //      This file contains initialization functions and arrays for 
      5          //	initializing RT1 and RT2 register and RAM tables inside the 
      6          //	HI-6130 or HI-6131 device. 
      7          //
      8          //
      9          //	IMPORTANT: Edit file 613x_initialization.h to define either:
     10          //
     11          //	HOST_BUS_INTERFACE  YES  sets compilation for HI-6130 (bus)
     12          //			NO   sets compilation for HI-6131 (SPI)
     13          //
     14          //	Most functional procedures in this project are written for
     15          //	both parallel bus or SPI host interface schemes, this runtime 
     16          //	switch determines which are procedures are compiled.
     17          // 
     18          //
     19          //	HOLT DISCLAIMER
     20          //
     21          //	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     22          //	EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
     23          //	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     24          //	NONINFRINGEMENT. 
     25          //	IN NO EVENT SHALL HOLT, INC BE LIABLE FOR ANY CLAIM, DAMAGES
     26          //	OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
     27          //	OTHERWISE,ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
     28          //			SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     29          //
     30          //			Copyright (C) 2010 by  HOLT, Inc.
     31          //			All Rights Reserved.
     32          //
     33          //
     34          
     35          
     36          // standard Atmel/IAR headers
     37          #include <pio/pio.h>
     38          #include <intrinsics.h>
     39          
     40          // Holt project headers
     41          #include "613x_initialization.h"
     42          #include "613x_regs.h"
     43          #include "613x_rt.h"
     44          #include "board_613x.h"
     45          
     46              #include "board_6130.h"
     47              #include "device_6130.h"
     48              extern const H6130 pH6130;
     49              
     50              #if(RT1_ena)
     51              extern const RT1d pRT1d;
     52              extern const RT1i pRT1i;
     53              #endif // (RT1_ena)
     54              
     55              #if(RT2_ena)
     56              extern const RT2d pRT2d;
     57              extern const RT2i pRT2i;
     58              #endif // (RT2_ena)
     59          
     60            
     61          #if (RT1_ena||RT2_ena)    
     62          
     63          // this function applies for HI-6130 only

   \                                 In section .text, align 2, keep-with-next
     64          void RT_bus_addressing_examples(void) {
   \                     RT_bus_addressing_examples:
   \   00000000   10B4               PUSH     {R4}
     65              
     66              unsigned short j,k;
     67              volatile unsigned short *address;
     68                  
     69              // ----------------------------------------------------------------
     70              // RT1 or RT2 Command Illegalization Table bus addressing examples
     71              // ----------------------------------------------------------------
     72              // see the full breakdown of bus addressing options for this table near the end of file 613x_rt.h
     73              // The illegalization table base addresses are declared in file 613x_rt.h
     74              
     75              // RT command illegalization table addressing examples using nested structure definitions
     76              #if(RT1_ena)
     77              j = pRT1i->BTx.SA22._3words;   // read RT1 illegal bit: for broadcast Tx subaddress 22, 3 data words
   \   00000002   ........           LDR.W    R3,??DataTable7
   \   00000006   1B68               LDR      R3,[R3, #+0]
   \   00000008   D3F8D830           LDR      R3,[R3, #+216]
   \   0000000C   C3F3C003           UBFX     R3,R3,#+3,#+1
   \   00000010   1800               MOVS     R0,R3
     78              k = pRT1i->Rx.SA31._mcode21;   // read RT1 illegal bit: non-broadcast Tx subaddress 31, mode code 21
   \   00000012   ........           LDR.W    R3,??DataTable7
   \   00000016   1B68               LDR      R3,[R3, #+0]
   \   00000018   D3F87C31           LDR      R3,[R3, #+380]
   \   0000001C   5B0D               LSRS     R3,R3,#+21
   \   0000001E   13F00103           ANDS     R3,R3,#0x1
   \   00000022   1900               MOVS     R1,R3
     79              #endif // (RT1_ena)
     80              
     81              #if(RT2_ena)
     82              j = pRT2i->BTx.SA5._32words;   // read RT2 illegal bit: for broadcast Tx subaddress 5, 32 data words
   \   00000024   ........           LDR.W    R3,??DataTable7_1
   \   00000028   1B68               LDR      R3,[R3, #+0]
   \   0000002A   93F89430           LDRB     R3,[R3, #+148]
   \   0000002E   13F00103           ANDS     R3,R3,#0x1
   \   00000032   1800               MOVS     R0,R3
     83              k = pRT2i->Rx.SA0._mcode2;     // read RT2 illegal bit: non-broadcast Tx subaddress 31, mode code 2
   \   00000034   ........           LDR.W    R3,??DataTable7_1
   \   00000038   1B68               LDR      R3,[R3, #+0]
   \   0000003A   D3F80031           LDR      R3,[R3, #+256]
   \   0000003E   C3F38003           UBFX     R3,R3,#+2,#+1
   \   00000042   1900               MOVS     R1,R3
     84              #endif // (RT2_ena)
     85              
     86              // ----------------------------------------------------
     87              // RT1 or RT2 Descriptor Table bus addressing examples
     88              // ----------------------------------------------------
     89              // see the full breakdown of bus addressing options for this table near the end of file 613x_rt.h
     90              // The descriptor table base addresses are declared in file 613x_rt.h
     91              
     92              // RT descriptor table addressing examples using nested structure definitions                              
     93              #if(RT1_ena)
     94              j = pRT1d->RxS.A0.ctrlWord;           // read descriptor table Control Word for RT1 Rx subaddress 0
   \   00000044   ........           LDR.W    R3,??DataTable7_2
   \   00000048   1B68               LDR      R3,[R3, #+0]
   \   0000004A   1B88               LDRH     R3,[R3, #+0]
   \   0000004C   1800               MOVS     R0,R3
     95              k = pRT1d->RxS.A4.ctrlWord;           // read descriptor table Control Word for RT1 Rx subaddress 4
   \   0000004E   ........           LDR.W    R3,??DataTable7_2
   \   00000052   1B68               LDR      R3,[R3, #+0]
   \   00000054   1B8C               LDRH     R3,[R3, #+32]
   \   00000056   1900               MOVS     R1,R3
     96              pRT1d->RxS.A4.descWord3 = 0x1234;     // write descriptor word 3 for RT1 Rx subaddress 4
   \   00000058   ........           LDR.W    R3,??DataTable7_2
   \   0000005C   1B68               LDR      R3,[R3, #+0]
   \   0000005E   41F23424           MOVW     R4,#+4660
   \   00000062   9C84               STRH     R4,[R3, #+36]
     97              address = &(pRT1d->RxS.A0.descWord4); // get address for descriptor word 4 for RT1 Rx subaddress 0
   \   00000064   ........           LDR.W    R3,??DataTable7_2
   \   00000068   1B68               LDR      R3,[R3, #+0]
   \   0000006A   03F20603           ADDW     R3,R3,#+6
   \   0000006E   1A00               MOVS     R2,R3
     98              *address = 0x5A5A;                    // write addressed descriptor table location
   \   00000070   45F65A23           MOVW     R3,#+23130
   \   00000074   1380               STRH     R3,[R2, #+0]
     99              #endif // (RT1_ena)
    100              
    101              #if(RT2_ena)
    102              pRT2d->RxM.C21.descWord2 = 0x1234;    // write descriptor word 2 for RT2 Rx mode code 21
   \   00000076   ........           LDR.W    R3,??DataTable7_3
   \   0000007A   1B68               LDR      R3,[R3, #+0]
   \   0000007C   41F23424           MOVW     R4,#+4660
   \   00000080   A3F8AA42           STRH     R4,[R3, #+682]
    103              pRT2d->TxM.C3.descWord2 = 0x5678;     // write descriptor word 2 for RT2 Tx mode code 2    
   \   00000084   ........           LDR.W    R3,??DataTable7_3
   \   00000088   1B68               LDR      R3,[R3, #+0]
   \   0000008A   45F27864           MOVW     R4,#+22136
   \   0000008E   A3F81A43           STRH     R4,[R3, #+794]
    104              #endif // (RT2_ena)
    105                  
    106              // preempt warnings: variable was set but never used
    107              j=j;
    108              k=k;
    109              
    110          }   // end RT_bus_addressing_examples()
   \   00000092   10BC               POP      {R4}
   \   00000094   7047               BX       LR               ;; return
    111          
    112          #endif // (RT1_ena||RT2_ena)    
    113             
    114          
    115          
    116          
    117          // the initialization functions below do not use the addressing methods shown above.
    118          // instead, they demonstrate alternative addressing methods...
    119          
    120          
    121          #if (RT1_ena)    //------------ RT1 ENABLED ------------
    122          
    123          
    124          // 	This function initializes the Holt HI-613x RT1 by writing 
    125          //	configuration registers in the device. Only RT1 mode option 
    126          //	bits are affected. The program has already called function 
    127          // 	initialize_613x_shared() to initialize the common parameters
    128          //	shared by BC, RT1, RT2 and/or Bus Monitor
    129          //

   \                                 In section .text, align 2, keep-with-next
    130          void initialize_613x_RT1(void) {
   \                     initialize_613x_RT1:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   ADF5C06D           SUB      SP,SP,#+1536
    131          	
    132             
    133          	unsigned int k;
    134          	unsigned short i,j;
    135                          
    136          	unsigned short descr_table_RT1[512] = {
    137          	/* this array is used to initialize the Descriptor Table. For subaddress-
    138          	receive and subaddress-transmit commands, the array sets the desired data 
    139          	buffer style and initializes data pointer values. 
    140          	
    141          	For mode code commands, use of the "Simplified Mode Command Processing" 
    142          	option is assumed, so the only potential initialization in the mode 
    143          	command half of the table is loading mode data word values for transmit 
    144          	mode commands. 
    145          	
    146          	Only 3 defined mode commands actually transmit a mode data word; MC16, 
    147          	M18 and MC19 decimal. For mode commands MC18 and MC19, the device 
    148          	automatically transmits the correct data word value, NOT fetched from 
    149          	this table. The transmitted value is copied into the table after transmit.
    150          	For MC16, the transmitted value comes from this table.
    151          	
    152          	Only 3 defined mode commands actually receive a mode data word: MC17, 
    153          	MC20 and MC21 decimal. If the terminal is not using "illegal command 
    154          	detection" it will respond "in form" to all valid undefined, reserved or 
    155          	unimplemented mode commands. By providing storage for all possible mode
    156          	commands, the Descriptor Table provides predictable command response to
    157          	all valid mode code commands, as well as a repository for received data. */
    158          
    159          	/* ===================================================================== */
    160          	/*  R T 1   R E C E I V E    S U B A D D R E S S   C O M M A N D S       */
    161          	/* ===================================================================== */
    162          	/*  Note:Subaddresses    ControlWord  DescrWord2  DescrWord3  DescrWord4 */
    163          	/*  0,31 are not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD, // Ctrl Word offset = 0x0000
    164          	/*  Rx Subaddress 01  */   0x0004,     0x0800,     0x0822,     0x0844, // ping-pong
    165          	/*  Rx Subaddress 02  */   0x8000,     0x0A00,     0x0020,     0x0D10, // idx-32 ixeqz  @@ 08D0
    166          	/*  Rx Subaddress 03  */   0x8001,     0x1176,     0x1176,     0x15B6, // cir1 ixeqz (32 MSG BUFFER)
    167          	/*  Rx Subaddress 04  */   0x8042,     0x1E00,     0x1E00,     0x1C00, // cir2-8 ixeqz (256 MSG MAX!)
    168          	/*  Rx Subaddress 05  */   0x0000,     0x1A36,     0x0000,     0x1A36, // ----   
    169          	/*  Rx Subaddress 06  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    170          	/*  Rx Subaddress 07  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    171          	/*  Rx Subaddress 08  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    172          	/*  Rx Subaddress 09  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    173          	/*  Rx Subaddress 10  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    174          	/*  Rx Subaddress 11  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    175          	/*  Rx Subaddress 12  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    176          	/*  Rx Subaddress 13  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    177          	/*  Rx Subaddress 14  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    178          	/*  Rx Subaddress 15  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    179          	/*  Rx Subaddress 16  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    180          	/*  Rx Subaddress 17  */   0x0000,     0x1A36,     0x0000,     0x1A36, // shared index sgl-msg
    181          	/*  Rx Subaddress 18  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    182          	/*  Rx Subaddress 19  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    183          	/*  Rx Subaddress 20  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    184          	/*  Rx Subaddress 21  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    185          	/*  Rx Subaddress 22  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    186          	/*  Rx Subaddress 23  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    187          	/*  Rx Subaddress 24  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    188          	/*  Rx Subaddress 25  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    189          	/*  Rx Subaddress 26  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    190          	/*  Rx Subaddress 27  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    191          	/*  Rx Subaddress 28  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    192          	/*  Rx Subaddress 29  */   0x0000,     0x1A36,     0x0000,     0x1A36, // ----
    193          	/*  Rx Subaddress 30  */   0x4000,     0x08AE,     0x0000,     0x08AE, // idx sgl-msg IWA irq
    194          	/*  This row not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD, 
    195          	/*                                                                       */
    196          	/* ===================================================================== */
    197          	/*  R T 1  T R A N S M I T   S U B A D D R E S S   C O M M A N D S       */
    198          	/* ===================================================================== */
    199          	/*  NOTE: IF BROADCAST COMMANDS ARE SUPPORTED, ACCIDENTAL BROADCAST-     */
    200          	/*  TRANSMIT COMMANDS WILL UPDATE MIW + TT WORDS AT THE BROADCAST DATA   */
    201          	/*  POINTER LOCATION (PING-PONG & INDEXED MODES) SO INITIALIZE B'CAST    */
    202          	/*  POINTERS TO PREDICTABLE ADDRESSES, BUT NOT 0x0000 (CONFIG.REG 1!)    */
    203          	/*                                                                       */
    204          	/*  Note:Subaddresses    ControlWord  DescrWord2  DescrWord3  DescrWord4 */
    205          	/*  0,31 are not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD, // Ctrl Word offset = 0x0080
    206          	/*  Tx Subaddress 01  */   0x0004,     0x0866,     0x0888,     0x08AA, // ping-pong
    207          	/*  Tx Subaddress 02  */   0x8000,     0x0D32,     0x0020,     0x1172, // idx-32 ixeqz
    208          	/*  Tx Subaddress 03  */   0x8001,     0x15D6,     0x15D6,     0x1A16, // cir1 ixeqz
    209          	/*  Tx Subaddress 04  */   0x8052,     0x1E00,     0x1E00,     0x1C00, // cir2-16 ixeqz
    210          	/*  Tx Subaddress 05  */   0x0000,     0x1A58,     0x0000,     0x1A58, // ----
    211          	/*  Tx Subaddress 06  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    212          	/*  Tx Subaddress 07  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    213          	/*  Tx Subaddress 08  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    214          	/*  Tx Subaddress 09  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    215          	/*  Tx Subaddress 10  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    216          	/*  Tx Subaddress 11  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    217          	/*  Tx Subaddress 12  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    218          	/*  Tx Subaddress 13  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    219          	/*  Tx Subaddress 14  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    220          	/*  Tx Subaddress 15  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    221          	/*  Tx Subaddress 16  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    222          	/*  Tx Subaddress 17  */   0x0000,     0x1A58,     0x0000,     0x1A58, // shared index sgl-msg
    223          	/*  Tx Subaddress 18  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    224          	/*  Tx Subaddress 19  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    225          	/*  Tx Subaddress 20  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    226          	/*  Tx Subaddress 21  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    227          	/*  Tx Subaddress 22  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    228          	/*  Tx Subaddress 23  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    229          	/*  Tx Subaddress 24  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    230          	/*  Tx Subaddress 25  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    231          	/*  Tx Subaddress 26  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    232          	/*  Tx Subaddress 27  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    233          	/*  Tx Subaddress 28  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
    234          	/*  Tx Subaddress 29  */   0x0000,     0x1A58,     0x0000,     0x1A58, // ----
    235          	/*  Tx Subaddress 30  */   0x0000,     0x08AE,     0x0000,     0x08AE, // idx sgl-msg
    236          	/*  This row not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD,
    237          	/*                                                                       */
    238          	/* ===================================================================== */
    239          	/*  R T 1   R E C E I V E   M O D E   C O D E   C O M M A N D S          */
    240          	/* ===================================================================== */
    241          	/*                       ControlWord MsgInfoWord  TimeTagWord DataWord   */
    242          	/* undefined Rx MC 00 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, // ----  // Ctrl Word offset = 0x0100
    243          	/*     "     Rx MC 01 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    244          	/*     "     Rx MC 02 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    245          	/*     "     Rx MC 03 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |     
    246          	/*     "     Rx MC 04 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    247          	/*     "     Rx MC 05 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    248          	/*     "     Rx MC 06 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    249          	/*     "     Rx MC 07 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    250          	/*     "     Rx MC 08 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, // shared index sgl-msg
    251          	/*     "     Rx MC 09 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    252          	/*     "     Rx MC 10 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    253          	/*     "     Rx MC 11 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    254          	/*     "     Rx MC 12 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    255          	/*     "     Rx MC 13 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    256          	/*     "     Rx MC 14 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    257          	/*     "     Rx MC 15 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
    258          	/*     "     Rx MC 16 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // ----
    259          	/*  DEFINED  Rx MC 17 */   0x0004,     0x1AE4,     0x1AE8,     0x1AEC, /* synchronize with data */
    260          	/* undefined Rx MC 18 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // shared index sgl-msg
    261          	/*     "     Rx MC 19 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // shared index sgl-msg
    262          	/*  DEFINED  Rx MC 20 */   0x0004,     0x1AF0,     0x1AF4,     0x1AF8, /* shutdown selected bus*/
    263          	/*  DEFINED  Rx MC 21 */   0x0004,     0x1AFC,     0x1B00,     0x1B04, /* override sel bus shutdown*/
    264          	/*  reserved Rx MC 22 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // ----
    265          	/*     "     Rx MC 23 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
    266          	/*     "     Rx MC 24 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
    267          	/*     "     Rx MC 25 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
    268          	/*     "     Rx MC 26 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // shared index sgl-msg
    269          	/*     "     Rx MC 27 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
    270          	/*     "     Rx MC 28 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
    271          	/*     "     Rx MC 29 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
    272          	/*     "     Rx MC 30 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
    273          	/*     "     Rx MC 31 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // ----
    274          	/*                                                                       */
    275          	/* ===================================================================== */
    276          	/*  R T 1  T R A N S M I T   M O D E   C O D E   C O M M A N D S         */
    277          	/*         using the "Simplified Mode Command Processing" option         */
    278          	/* ===================================================================== */
    279          	/*                       ControlWord MsgInfoWord  TimeTagWord DataWord   */ // Ctrl Word offset = 0x0180
    280          	/*  DEFINED  Tx MC 00 */   0x4004,     0x1ABA,     0x1ABC,     0x1ABE, /* dynamic bus control,, IWA interrupt */
    281          	/*     "     Tx MC 01 */   0x0004,     0x1A90,     0x1A92,     0x1A94, /* synchronize */
    282          	/*     "     Tx MC 02 */   0x0004,     0x1A96,     0x1A98,     0x1A9A, /* transmit status */
    283          	/*     "     Tx MC 03 */   0x0004,     0x1A9C,     0x1A9E,     0x1AA0, /* initiate self test */
    284          	/*     "     Tx MC 04 */   0x0004,     0x1AA2,     0x1AA4,     0x1AA6, /* shutdown bus */
    285          	/*     "     Tx MC 05 */   0x0004,     0x1AA8,     0x1AAA,     0x1AAC, /* overrride shutdown bus */
    286          	/*     "     Tx MC 06 */   0x0004,     0x1AAE,     0x1AB0,     0x1AB2, /* inhibit terminal flag */
    287          	/*     "     Tx MC 07 */   0x0004,     0x1AB4,     0x1AB6,     0x1AB8, /* override inhibit term flag */
    288          	/*     "     Tx MC 08 */   0x6004,     0x1ABA,     0x1ABC,     0x1ABE, /* reset terminal */
    289          	/*  reserved Tx MC 09 */   0x0000,     0x1A82,     0x0000,     0x1A82, // ----
    290          	/*     "     Tx MC 10 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     |
    291          	/*     "     Tx MC 11 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     |
    292          	/*     "     Tx MC 12 */   0x0000,     0x1A82,     0x0000,     0x1A82, // shared index sgl-msg
    293          	/*     "     Tx MC 13 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     |
    294          	/*     "     Tx MC 14 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     | 
    295          	/*     "     Tx MC 15 */   0x0000,     0x1A82,     0x0000,     0x1A82, // ----
    296          	/*  DEFINED  Tx MC 16 */   0x0004,     0x1AC0,     0x1AC4,     0x1AC8, /* transmit vector word */
    297          	/* undefined Tx MC 17 */   0x0000,     0x1A86,     0x0000,     0x1A86, // shared index sgl-msg
    298          	/*  DEFINED  Tx MC 18 */   0x0004,     0x1ACC,     0x1AD0,     0x1AD4, /* transmit last command */
    299          	/*  DEFINED  Tx MC 19 */   0x0004,     0x1AD8,     0x1ADC,     0x1AE0, /* transmit BIT word */
    300          	/* undefined Tx MC 20 */   0x0000,     0x1A86,     0x0000,     0x1A86, // ----
    301          	/*     "     Tx MC 21 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    302          	/*  reserved Tx MC 22 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    303          	/*     "     Tx MC 23 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    304          	/*     "     Tx MC 24 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    305          	/*     "     Tx MC 25 */   0x0000,     0x1A86,     0x0000,     0x1A86, // shared index sgl-msg
    306          	/*     "     Tx MC 26 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    307          	/*     "     Tx MC 27 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    308          	/*     "     Tx MC 28 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    309          	/*     "     Tx MC 29 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
    310          	/*     "     Tx MC 30 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     | 
    311          	/*     "     Tx MC 31 */   0x0000,     0x1A86,     0x0000,     0x1A86 }; // -- 
   \   00000006   80A8               ADD      R0,SP,#+512
   \   00000008   ........           LDR.W    R1,??DataTable7_4
   \   0000000C   4FF48062           MOV      R2,#+1024
   \   00000010   ........           BL       __aeabi_memcpy4
    312           
    313          	/* end of descr_table_RT1[512] declaration */
    314          
    315          
    316          	unsigned short illegal_table[256] = {
    317          	/* This array is loaded by the initialization function only when the terminal
    318          	uses "illegal command detection", that is, when the macro ILLEGAL_CMD_DETECT 
    319          	= YES in the header file 613x_initialization.h. 
    320          	
    321          	When macro ILLEGAL_CMD_DETECT = NO, the default all-zeros table value after 
    322          	/MR master reset is retained, so all valid commands	get an "in form" response.
    323          	Terminals not using "illegal command detection" should preserve the RAM's 
    324          	(all 0x0000) reset state for the table address range to provide consistent 
    325          	"in form" response for all valid commands. This function call provides this.
    326             
    327          	This template illegalizes all mode code commands that are either undefined 
    328          	or reserved in MIL-STD-1553B. Also, the 3 transmit mode codes that have a 
    329          	mode data word are made illegal when broadcast. Mode code 0 (dynamic bus 
    330          	control) cannot be implemented by the HI-613X and is also made illegal.
    331          	
    332          	If using this example as a template, please note that the array below 
    333          	renders the following list of commands illegal:
    334          
    335          	  * All undefined and reserved mode code commands
    336          	  * Broadcast versions of these transmit mode cmds: MC0 MC2 MC16 MC18 MC19
    337          	  * All broadcast transmit subaddress commands 
    338          	  * Tx mode code MC0 "dynamic bus control" because BC switch-over not programmed
    339          	  * Tx mode code MC3 "initiate self test," entirely application specific 
    340          	  
    341          	  ******************** PLEASE NOTE NEXT 2 LINES ! *************************
    342          	  *    All non-broacast receive commands to subaddress 16, and all        *
    343          	  * transmit commands to subaddress 17 are illegal for demonstration only *
    344          	  *************************************************************************/
    345          
    346          	/* ====================================================================== */
    347          	/*       RT1 BROADCAST RECEIVE MODE CODE AND SUBADDRESS COMMANDS          */
    348          	/* ====================================================================== */
    349          	/*    Setting legal/illegal mode code commands for subaddresses           */
    350          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
    351          	/*                                                                        */
    352          	/*       _____________________ MC15 - MC12 Rx (undefined)                 */
    353          	/*      |  ____________________ MC11 - MC8 Rx (undefined)                 */
    354          	/*      | |  ___________________ MC7 - MC4 Rx (undefined)                 */
    355          	/*      | | |  __________________ MC3 - MC0 Rx (undefined)                */
    356          	/*      | | | |  _________________ MC31 - MC28 Rx (reserved)              */
    357          	/*      | | | | |  ________________ MC27 - MC24 Rx (reserved)             */
    358          	/*      | | | | | |                                                       */
    359          	/*      | | | | | |       __________ MC23 Rx (reserved)                   */
    360          	/*      | | | | | |      |  _________ MC22 Rx (reserved)                  */
    361          	/*      | | | | | |      | |  ________ MC21 Rx (override sel tx shutdown) */ 
    362          	/*      | | | | | |      | | |  _______ MC20 Rx (selected tx shutdown)    */
    363          	/*      | | | | | |      | | | |                                          */
    364          	/*      | | | | | |      | | | |    ____ MC19 Rx (undefined)              */
    365          	/*      | | | | | |      | | | |   |  ___ MC18 Rx (undefined)             */
    366          	/*      | | | | | |      | | | |   | |  __ MC17 Rx (sync with data)       */
    367          	/*      | | | | | |      | | | |   | | |  _ MC16 Rx (undefined)           */
    368          	/*      | | | | | |      | | | |   | | | |                                */
    369          	/*      | | | | | |  bin 1 1 0 0   1 1 0 1                                */
    370          	/*      | | | | | |      -------   -------                                */
    371          	/*   0x F F F F F F         C         D                                   */
    372          	/*                                                                        */
    373          	/*   Broadcast                                                            */
    374          	/* Rx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
    375          	/*                 mode codes   word counts   word counts   word counts   */
    376          	/*                Low    High   Low    High   Low    High   Low    High   */
    377          	/*  RAM address  0x0100 0x0101 0x0102 0x0103 0x0104 0x0105 0x0106 0x0107  */
    378                                   0xFFFF,0xFFCD,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    379          	/*   Broadcast                                                            */
    380          	/* Rx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
    381          	/*                word counts   word counts   word counts   word counts   */
    382          	/*                Low    High   Low    High   Low    High   Low    High   */
    383          	/*  RAM address	 0x0108 0x0109 0x010A 0x010B 0x010C 0x010D 0x010E 0x010F  */
    384                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    385          	/*   Broadcast                                                            */
    386          	/* Rx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
    387          	/*                word counts   word counts   word counts   word counts   */
    388          	/*                Low    High   Low    High   Low    High   Low    High   */
    389          	/*  RAM address	 0x0110 0x0111 0x0112 0x0113 0x0114 0x0115 0x0116 0x0117  */
    390                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    391          	/*   Broadcast                                                            */
    392          	/* Rx Subaddress -----12-----  -----13-----  -----14-----  -----15-----   */
    393          	/*                word counts   word counts   word counts   word counts   */
    394          	/*                Low    High   Low    High   Low    High   Low    High   */
    395          	/*  RAM address	 0x0118 0x0119 0x011A 0x011B 0x011C 0x011D 0x011E 0x011F  */
    396                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    397          	/*   Broadcast                                                            */
    398          	/* Rx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
    399          	/*                word counts   word counts   word counts   word counts   */
    400          	/*                Low    High   Low    High   Low    High   Low    High   */
    401          	/*  RAM address	 0x0120 0x0121 0x0122 0x0123 0x0124 0x0125 0x0126 0x0127  */
    402                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    403          	/*   Broadcast                                                            */
    404          	/* Rx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
    405          	/*                word counts   word counts   word counts   word counts   */
    406          	/*                Low    High   Low    High   Low    High   Low    High   */
    407          	/*  RAM address	 0x0128 0x0129 0x012A 0x012B 0x012C 0x012D 0x012E 0x012F  */
    408                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    409          	/*   Broadcast                                                            */
    410          	/* Rx Subaddress -----24-----  -----25-----  -----26-----  -----27-----   */
    411          	/*                word counts   word counts   word counts   word counts   */
    412          	/*                Low    High   Low    High   Low    High   Low    High   */
    413          	/*  RAM address	 0x0130 0x0131 0x0132 0x0133 0x0134 0x0135 0x0136 0x0137  */
    414                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    415          	/*   Broadcast                                              SA31 = SA0    */
    416          	/* Rx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
    417          	/*                word counts   word counts   word counts   mode codes    */
    418          	/*                Low    High   Low    High   Low    High   Low    High   */
    419          	/*  RAM address	 0x0138 0x0139 0x013A 0x013B 0x013C 0x013D 0x013E 0x013F  */
    420                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0xFFCD,
    421          				 	
    422          	/* ====================================================================== */
    423          	/*       RT1 BROADCAST TRANSMIT MODE CODE AND SUBADDRESS COMMANDS         */
    424          	/* ====================================================================== */
    425          	/*    Setting legal/illegal mode code commands for subaddresses           */
    426          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
    427          	/*                                                                        */
    428          	/*    _________________ MC15 - MC12 Tx (reserved)                         */
    429          	/*   |                                                                    */
    430          	/*   |   ________________ MC11 Tx (reserved)                              */
    431          	/*   |  |  _______________ MC10 Tx (reserved)                             */
    432          	/*   |  | |  ______________ MC9 Tx (reserved)                             */
    433          	/*   |  | | |  _____________ MC8 Tx (reset remote terminal)               */
    434          	/*   |  | | | |                                                           */
    435          	/*   |  | | | |   ____________ MC7 Tx (override inhibit term flag bit)    */
    436          	/*   |  | | | |  |  ___________ MC6 Tx (inhibit term flag bit)            */
    437          	/*   |  | | | |  | |  __________ MC5 Tx (override transmitter shutdown)   */
    438          	/*   |  | | | |  | | |  _________ MC4 Tx (transmitter shutdown)           */
    439          	/*   |  | | | |  | | | |                                                  */
    440          	/*   |  | | | |  | | | |   _______ MC3 Tx (init self test) NOT IN DEMO PGM*/
    441          	/*   |  | | | |  | | | |  |  ______ MC2 Tx (transmit status) NO BROADCAST */
    442          	/*   |  | | | |  | | | |  | |  _____ MC1 Tx (synchronize)                 */
    443          	/*   |  | | | |  | | | |  | | |  ____ MC0 Tx (dyn bus control)NO BROADCAST*/
    444          	/*   |  | | | |  | | | |  | | | |                      and NOT IMPLEMENTED*/
    445          	/*   |  | | | |  | | | |  | | | |   __ MC31 - MC28 Tx (reserved)          */
    446          	/*   |  | | | |  | | | |  | | | |  |  __ MC27 - MC24 Tx (reserved)        */
    447          	/*   |  | | | |  | | | |  | | | |  | |  __ MC23-22 (res) & MC21-20 (undef)*/ 
    448          	/*   |  | | | |  | | | |  | | | |  | | |                                  */
    449          	/*   |  | | | |  | | | |  | | | |  | | |   ____ MC19 Tx NO BROADCAST      */
    450          	/*   |  | | | |  | | | |  | | | |  | | |  |  ___ MC18 Tx NO BROADCAST     */
    451          	/*   |  | | | |  | | | |  | | | |  | | |  | |  __ MC17 Tx (undefined)     */
    452          	/*   |  | | | |  | | | |  | | | |  | | |  | | |  _ MC16 Tx NO BROADCAST   */
    453          	/*   |  | | | |  | | | |  | | | |  | | |  | | | |                         */
    454          	/*   |  1 1 1 0  0 0 0 0  1 1 0 1  | | |  1 1 1 1                         */
    455          	/*   |  -------  -------  -------  | | |  -------                         */
    456          	/*  0xF    E        0        D     F F F     F                            */
    457          	/*                                                                        */
    458                  /*   Broadcast                                                            */
    459          	/* Tx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
    460          	/*                 mode codes   word counts   word counts   word counts   */
    461          	/*                Low    High   Low    High   Low    High   Low    High   */
    462          	/*  RAM address  0x0140 0x0141 0x0102 0x0143 0x0144 0x0145 0x0146 0x0147  */
    463                                   0xFE0D,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
    464          	/*   Broadcast                                                            */
    465          	/* Tx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
    466          	/*                word counts   word counts   word counts   word counts   */
    467          	/*                Low    High   Low    High   Low    High   Low    High   */
    468          	/*  RAM address	 0x0148 0x0149 0x014A 0x014B 0x014C 0x014D 0x014E 0x014F  */
    469                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
    470          	/*   Broadcast                                                            */
    471          	/* Tx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
    472          	/*                word counts   word counts   word counts   word counts   */
    473          	/*                Low    High   Low    High   Low    High   Low    High   */
    474          	/*  RAM address	 0x0150 0x0151 0x0152 0x0153 0x0154 0x0155 0x0156 0x0157  */
    475                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
    476          	/*   Broadcast                                                            */
    477          	/* Tx Subaddress -----12-----  -----13-----  -----14-----  -----15-----   */
    478          	/*                word counts   word counts   word counts   word counts   */
    479          	/*                Low    High   Low    High   Low    High   Low    High   */
    480          	/*  RAM address	 0x0158 0x0159 0x015A 0x015B 0x015C 0x015D 0x015E 0x015F  */
    481                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
    482          	/*   Broadcast                                                            */
    483          	/* Tx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
    484          	/*                word counts   word counts   word counts   word counts   */
    485          	/*                Low    High   Low    High   Low    High   Low    High   */
    486          	/*  RAM address	 0x0160 0x0161 0x0162 0x0163 0x0164 0x0165 0x0166 0x0167  */
    487                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
    488          	/*   Broadcast                                                            */
    489          	/* Tx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
    490          	/*                word counts   word counts   word counts   word counts   */
    491          	/*                Low    High   Low    High   Low    High   Low    High   */
    492          	/*  RAM address	 0x0168 0x0169 0x016A 0x016B 0x016C 0x016D 0x016E 0x016F  */
    493                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
    494          	/*   Broadcast                                                            */
    495          	/* Tx Subaddress -----24-----  -----25-----  -----26-----  -----27-----   */
    496          	/*                word counts   word counts   word counts   word counts   */
    497          	/*                Low    High   Low    High   Low    High   Low    High   */
    498          	/*  RAM address	 0x0170 0x0171 0x0172 0x0173 0x0174 0x0175 0x0176 0x0177  */
    499                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
    500          	/*   Broadcast                                              SA31 = SA0    */
    501          	/* Tx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
    502          	/*                word counts   word counts   word counts   mode codes    */
    503          	/*                Low    High   Low    High   Low    High   Low    High   */
    504          	/*  RAM address	 0x0178 0x0179 0x017A 0x017B 0x017C 0x017D 0x017E 0x017F  */
    505                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFE0D,0xFFFF,	
    506          
    507          	/* ====================================================================== */
    508          	/* RT1 "OWN ADDRESS" NON-BROADCAST RECEIVE MODE CODE & SUBADDRESS COMMANDS*/
    509          	/* ====================================================================== */
    510          	/*    Setting legal/illegal mode code commands for subaddresses           */
    511          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
    512          	/*                                                                        */
    513          	/*       _____________________ MC15 - MC12 Rx (undefined)                 */
    514          	/*      |  ____________________ MC11 - MC8 Rx (undefined)                 */
    515          	/*      | |  ___________________ MC7 - MC4 Rx (undefined)                 */
    516          	/*      | | |  __________________ MC3 - MC0 Rx (undefined)                */
    517          	/*      | | | |  _________________ MC31 - MC28 Rx (reserved)              */
    518          	/*      | | | | |  ________________ MC27 - MC24 Rx (reserved)             */
    519          	/*      | | | | | |                                                       */
    520          	/*      | | | | | |       __________ MC23 Rx (reserved)                   */
    521          	/*      | | | | | |      |  _________ MC22 Rx (reserved)                  */
    522          	/*      | | | | | |      | |  ________ MC21 Rx (override sel tx shutdown) */ 
    523          	/*      | | | | | |      | | |  _______ MC20 Rx (selected tx shutdown)    */
    524          	/*      | | | | | |      | | | |                                          */
    525          	/*      | | | | | |      | | | |    ____ MC19 Rx (undefined)              */
    526          	/*      | | | | | |      | | | |   |  ___ MC18 Rx (undefined)             */
    527          	/*      | | | | | |      | | | |   | |  __ MC17 Rx (sync with data)       */
    528          	/*      | | | | | |      | | | |   | | |  _ MC16 Rx (undefined)           */
    529          	/*      | | | | | |      | | | |   | | | |                                */
    530          	/*      | | | | | |  bin 1 1 0 0   1 1 0 1                                */
    531          	/*      | | | | | |      -------   -------                                */
    532          	/*   0x F F F F F F         C         D                                   */
    533          	/*                                                                        */
    534          	/*  Own Address                                                           */
    535          	/* Rx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
    536          	/*                 mode codes   word counts   word counts   word counts   */
    537          	/*                Low    High   Low    High   Low    High   Low    High   */
    538          	/*  RAM address  0x0180 0x0181 0x0182 0x0183 0x0184 0x0185 0x0186 0x0187  */
    539                                   0xFFFF,0xFFCD,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    540          	/*  Own Address                                                           */
    541          	/* Rx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
    542          	/*                word counts   word counts   word counts   word counts   */
    543          	/*                Low    High   Low    High   Low    High   Low    High   */
    544          	/*  RAM address	 0x0188 0x0189 0x018A 0x018B 0x018C 0x018D 0x018E 0x018F  */
    545                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    546          	/*  Own Address                                                           */
    547          	/* Rx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
    548          	/*                word counts   word counts   word counts   word counts   */
    549          	/*                Low    High   Low    High   Low    High   Low    High   */
    550          	/*  RAM address	 0x0190 0x0191 0x0192 0x0193 0x0194 0x0195 0x0196 0x0197  */
    551                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    552          	/*  Own Address                                                           */
    553          	/* Rx Subaddress -----12-----  -----13-----  -----14-----  -----15-----   */
    554          	/*                word counts   word counts   word counts   word counts   */
    555          	/*                Low    High   Low    High   Low    High   Low    High   */
    556          	/*  RAM address	 0x0198 0x0199 0x019A 0x019B 0x019C 0x019D 0x019E 0x019F  */
    557                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    558          	/*  Own Address                                                           */
    559          	/* Rx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
    560          	/*                word counts   word counts   word counts   word counts   */
    561          	/*                Low    High   Low    High   Low    High   Low    High   */
    562          	/*  RAM address	 0x01A0 0x01A1 0x01A2 0x01A3 0x01A4 0x01A5 0x01A6 0x01A7  */
    563                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    564          	/*  Own Address                                                           */
    565          	/* Rx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
    566          	/*                word counts   word counts   word counts   word counts   */
    567          	/*                Low    High   Low    High   Low    High   Low    High   */
    568          	/*  RAM address	 0x01A8 0x01A9 0x01AA 0x01AB 0x01AC 0x01AD 0x01AE 0x01AF  */
    569                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    570          	/*  Own Address                                                           */
    571          	/* Rx Subaddress -----24-----  -----25-----  -----26-----  -----27-----   */
    572          	/*                word counts   word counts   word counts   word counts   */
    573          	/*                Low    High   Low    High   Low    High   Low    High   */
    574          	/*  RAM address	 0x01B0 0x01B1 0x01B2 0x01B3 0x01B4 0x01B5 0x01B6 0x01B7  */
    575                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    576          	/*  Own Address                                             SA31 = SA0    */
    577          	/* Rx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
    578          	/*                word counts   word counts   word counts   mode codes    */
    579          	/*                Low    High   Low    High   Low    High   Low    High   */
    580          	/*  RAM address	 0x01B8 0x01B9 0x01BA 0x01BB 0x01BC 0x01BD 0x01BE 0x01BF  */
    581                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0xFFCD,
    582          				 	
    583          	/* ====================================================================== */
    584          	/* RT1 "OWN ADDRESS" NON-BROADCAST TRANSMIT MODECODE & SUBADDRESS CMMANDS */
    585          	/* ====================================================================== */
    586          	/*    Setting legal/illegal mode code commands for subaddresses           */
    587          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
    588          	/*                                                                        */
    589          	/*    _________________ MC15 - MC12 Tx (reserved)                         */
    590          	/*   |                                                                    */
    591          	/*   |   ________________ MC11 Tx (reserved)                              */
    592          	/*   |  |  _______________ MC10 Tx (reserved)                             */
    593          	/*   |  | |  ______________ MC9 Tx (reserved)                             */
    594          	/*   |  | | |  _____________ MC8 Tx (reset remote terminal)               */
    595          	/*   |  | | | |                                                           */
    596          	/*   |  | | | |   ____________ MC7 Tx (override inhibit term flag bit)    */
    597          	/*   |  | | | |  |  ___________ MC6 Tx (inhibit term flag bit)            */
    598          	/*   |  | | | |  | |  __________ MC5 Tx (override transmitter shutdown)   */
    599          	/*   |  | | | |  | | |  _________ MC4 Tx (transmitter shutdown)           */
    600          	/*   |  | | | |  | | | |                                                  */
    601          	/*   |  | | | |  | | | |   _______ MC3 Tx (init self test) NOT IN DEMO PGM*/
    602          	/*   |  | | | |  | | | |  |  ______ MC2 Tx (transmit status)              */
    603          	/*   |  | | | |  | | | |  | |  _____ MC1 Tx (synchronize)                 */
    604          	/*   |  | | | |  | | | |  | | |  ____ MC0 Tx (dyn bus control) CANNOT DO! */
    605          	/*   |  | | | |  | | | |  | | | |                                         */
    606          	/*   |  | | | |  | | | |  | | | |   __ MC31 - MC28 Tx (reserved)          */
    607          	/*   |  | | | |  | | | |  | | | |  |  __ MC27 - MC24 Tx (reserved)        */
    608          	/*   |  | | | |  | | | |  | | | |  | |  __ MC23-22 (res) & MC21-20 (undef)*/ 
    609          	/*   |  | | | |  | | | |  | | | |  | | |                                  */
    610          	/*   |  | | | |  | | | |  | | | |  | | |   ____ MC19 Tx (tx BIT word)     */
    611          	/*   |  | | | |  | | | |  | | | |  | | |  |  ___ MC18 Tx (tx last command)*/
    612          	/*   |  | | | |  | | | |  | | | |  | | |  | |  __ MC17 Tx (undefined)     */
    613          	/*   |  | | | |  | | | |  | | | |  | | |  | | |  _ MC16 (tx vector word)  */
    614          	/*   |  | | | |  | | | |  | | | |  | | |  | | | |                         */
    615          	/*   |  1 1 1 0  0 0 0 0  1 0 0 1  | | |  0 0 1 0                         */
    616          	/*   |  -------  -------  -------  | | |  -------                         */
    617          	/*  0xF    E        0        9     F F F     2                            */
    618          	/*                                                                        */
    619          	/*  Own Address                                                           */
    620          	/* Tx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
    621          	/*                 mode codes   word counts   word counts   word counts   */
    622          	/*                Low    High   Low    High   Low    High   Low    High   */
    623          	/*  RAM address  0x01C0 0x01C1 0x0102 0x01C3 0x01C4 0x01C5 0x01C6 0x01C7  */
    624                                   0xFE09,0xFFF2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    625          	/*  Own Address                                                           */
    626          	/* Tx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
    627          	/*                word counts   word counts   word counts   word counts   */
    628          	/*                Low    High   Low    High   Low    High   Low    High   */
    629          	/*  RAM address	 0x01C8 0x01C9 0x01CA 0x01CB 0x01CC 0x01CD 0x01CE 0x01CF  */
    630                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    631          	/*  Own Address                                                           */
    632          	/* Tx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
    633          	/*                word counts   word counts   word counts   word counts   */
    634          	/*                Low    High   Low    High   Low    High   Low    High   */
    635          	/*  RAM address	 0x01D0 0x01D1 0x01D2 0x01D3 0x01D4 0x01D5 0x01D6 0x01D7  */
    636                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    637          	/*  Own Address                                                           */
    638          	/* Tx Subaddress  -----12-----  -----13-----  -----14-----  -----15-----  */
    639          	/*                word counts   word counts   word counts   word counts   */
    640          	/*                Low    High   Low    High   Low    High   Low    High   */
    641          	/*  RAM address	 0x01D8 0x01D9 0x01DA 0x01DB 0x01DC 0x01DD 0x01DE 0x01DF  */
    642                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    643          	/*  Own Address                                                           */
    644          	/* Tx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
    645          	/*                word counts   word counts   word counts   word counts   */
    646          	/*                Low    High   Low    High   Low    High   Low    High   */
    647          	/*  RAM address	 0x01E0 0x01E1 0x01E2 0x01E3 0x01E4 0x01E5 0x01E6 0x01E7  */
    648                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    649          	/*  Own Address                                                           */
    650          	/* Tx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
    651          	/*                word counts   word counts   word counts   word counts   */
    652          	/*                Low    High   Low    High   Low    High   Low    High   */
    653          	/*  RAM address	 0x01E8 0x01E9 0x01EA 0x01EB 0x01EC 0x01ED 0x01EE 0x01EF  */
    654                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    655          	/*  Own Address                                                           */
    656          	/* Tx Subaddress  -----24-----  -----25-----  -----26-----  -----27-----  */
    657          	/*                word counts   word counts   word counts   word counts   */
    658          	/*                Low    High   Low    High   Low    High   Low    High   */
    659          	/*  RAM address	 0x01F0 0x01F1 0x01F2 0x01F3 0x01F4 0x01F5 0x01F6 0x01F7  */
    660                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
    661          	/*  Own Address                                             SA31 = SA0    */
    662          	/* Tx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
    663          	/*                word counts   word counts   word counts   mode codes    */
    664          	/*                Low    High   Low    High   Low    High   Low    High   */
    665          	/*  RAM address	 0x01F8 0x01F9 0x01FA 0x01FB 0x01FC 0x01FD 0x01FE 0x01FF  */
    666                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFE09,0xFFF2 };	
   \   00000014   00A8               ADD      R0,SP,#+0
   \   00000016   ........           LDR.W    R1,??DataTable7_5
   \   0000001A   4FF40072           MOV      R2,#+512
   \   0000001E   ........           BL       __aeabi_memcpy4
    667          
    668          	//  End of illegal_table[256] declaration
    669          
    670          
    671          
    672          	// ======================================================================================
    673          
    674            	// These  parameters are defined in 613x_initialization.h
    675          
    676          	i = RTTO_15U|NOTICE2|TRXDB|AUTO_SHUTDN|AUTO_SYNC|MC16OPT|AUTO_MC8_RESET;
   \   00000022   4FF4A770           MOV      R0,#+334
   \   00000026   0600               MOVS     R6,R0
    677          
    678          	#if (!SUPPORT_BROADCAST)
    679            	i |= BCASTINV;
    680            	#endif
    681          
    682          	#if (!UNDEF_MCODES_VALID)
    683            	i |= UMCINV;
    684            	#endif
    685          
    686          	#if (USE_SMCP)
    687            	i |= SMCP;
   \   00000028   56F08006           ORRS     R6,R6,#0x80
    688          	#endif
    689          
    690          	// HI-6130 uses host bus interface, HI-6131 uses host SPI interface. From 
    691          	// here, we use bus interface to initialize HI-6130 registers and RAM tables,
    692          	// or we use SPI to initialize HI-6131 registers and RAM tables
    693          
    694          	// ======================================================================================
    695          
    696          	    pH6130->RT1_CONFIG_REG = i;
   \   0000002C   ........           LDR.W    R0,??DataTable7_6
   \   00000030   0068               LDR      R0,[R0, #+0]
   \   00000032   C685               STRH     R6,[R0, #+46]
    697          
    698          	    // do not overwrite previously initialized common features
    699          	    j = pH6130->MASTER_CONFIG_REG & ~(RT1STEX);
   \   00000034   ........           LDR.W    R0,??DataTable7_6
   \   00000038   0068               LDR      R0,[R0, #+0]
   \   0000003A   0088               LDRH     R0,[R0, #+0]
   \   0000003C   4FF6EF71           MOVW     R1,#+65519
   \   00000040   0840               ANDS     R0,R1,R0
   \   00000042   0500               MOVS     R5,R0
    700          
    701          	    // if "bus shutdown" mode codes 4 & 20 disable Tx only but Rx still operates 
    702                      // normally (NOT RECOMMENDED) then OR in BSDTXO, affecting Remote Terminals:
    703          	    // pH6130->MASTER_CONFIG_REG = j|RT1ENA|BSDTXO; 
    704                      // otherwise use this...
    705          	    pH6130->MASTER_CONFIG_REG = j|RT1ENA;
   \   00000044   55F04000           ORRS     R0,R5,#0x40
   \   00000048   ........           LDR.W    R1,??DataTable7_6
   \   0000004C   0968               LDR      R1,[R1, #+0]
   \   0000004E   0880               STRH     R0,[R1, #+0]
    706          
    707          	    j = pH6130->HDW_INT_ENABLE_REG & ~(RT1TTM);
   \   00000050   ........           LDR.W    R0,??DataTable7_6
   \   00000054   0068               LDR      R0,[R0, #+0]
   \   00000056   C08B               LDRH     R0,[R0, #+30]
   \   00000058   4FF67F71           MOVW     R1,#+65407
   \   0000005C   0840               ANDS     R0,R1,R0
   \   0000005E   0500               MOVS     R5,R0
    708          	    // enable RT1 address parity fail interrupt, but not time tag match interrupt
    709          	    pH6130->HDW_INT_ENABLE_REG = j|RT1APF;
   \   00000060   ........           LDR.W    R0,??DataTable7_6
   \   00000064   0068               LDR      R0,[R0, #+0]
   \   00000066   55F00801           ORRS     R1,R5,#0x8
   \   0000006A   C183               STRH     R1,[R0, #+30]
    710          		
    711          	    j = pH6130->HDW_INT_OUTPUT_ENABLE_REG & ~(RT1TTM);
   \   0000006C   ........           LDR.W    R0,??DataTable7_6
   \   00000070   0068               LDR      R0,[R0, #+0]
   \   00000072   C08C               LDRH     R0,[R0, #+38]
   \   00000074   4FF67F71           MOVW     R1,#+65407
   \   00000078   0840               ANDS     R0,R1,R0
   \   0000007A   0500               MOVS     R5,R0
    712          	    // enable pin output for selected interrupts 
    713          	    pH6130->HDW_INT_OUTPUT_ENABLE_REG = j|RT1APF;
   \   0000007C   ........           LDR.W    R0,??DataTable7_6
   \   00000080   0068               LDR      R0,[R0, #+0]
   \   00000082   55F00801           ORRS     R1,R5,#0x8
   \   00000086   C184               STRH     R1,[R0, #+38]
    714          		
    715          	    // for demo, mode code 8 (reset RT) is handled differently for RT1 and RT2.
    716          	    // When MC8 occurs for RT1, the RT1_MC8 interrupt is decoded by this program's
    717          	    // interrupt handler, which asserts RT1RESET in reg 0x0002. When MC8 occurs for 
    718          	    // RT2, that terminal is configured for AUTO_MC8_RESET to automatically assert 
    719          	    // the RT2RESET in reg 0x0002 without host intervention.  
    720          	    j = pH6130->RT_INT_ENABLE_REG & 0xFC00;
   \   00000088   ........           LDR.W    R0,??DataTable7_6
   \   0000008C   0068               LDR      R0,[R0, #+0]
   \   0000008E   808C               LDRH     R0,[R0, #+36]
   \   00000090   10F47C40           ANDS     R0,R0,#0xFC00
   \   00000094   0500               MOVS     R5,R0
    721          	    // enable RT1 interrupts, except the Message Error interrupt 
    722          	    pH6130->RT_INT_ENABLE_REG = j|RT1_IXEQZ|RT1_IWA|RT1_IBR|RT1_MC8;
   \   00000096   ........           LDR.W    R0,??DataTable7_6
   \   0000009A   0068               LDR      R0,[R0, #+0]
   \   0000009C   4FF4D471           MOV      R1,#+424
   \   000000A0   2943               ORRS     R1,R1,R5
   \   000000A2   8184               STRH     R1,[R0, #+36]
    723          
    724          	    j = pH6130->RT_INT_OUTPUT_ENABLE_REG & 0xFC00;
   \   000000A4   ........           LDR.W    R0,??DataTable7_6
   \   000000A8   0068               LDR      R0,[R0, #+0]
   \   000000AA   808D               LDRH     R0,[R0, #+44]
   \   000000AC   10F47C40           ANDS     R0,R0,#0xFC00
   \   000000B0   0500               MOVS     R5,R0
    725          	    // enable pin output for selected RT1 interrupts
    726          	    pH6130->RT_INT_OUTPUT_ENABLE_REG = j|RT1_IXEQZ|RT1_IWA|RT1_IBR|RT1_MC8;
   \   000000B2   ........           LDR.W    R0,??DataTable7_6
   \   000000B6   0068               LDR      R0,[R0, #+0]
   \   000000B8   4FF4D471           MOV      R1,#+424
   \   000000BC   2943               ORRS     R1,R1,R5
   \   000000BE   8185               STRH     R1,[R0, #+44]
    727          		
    728          	    pH6130->RT1_DESC_TBL_BASE_ADDR_REG = 0x0400; 
   \   000000C0   ........           LDR.W    R0,??DataTable7_6
   \   000000C4   0068               LDR      R0,[R0, #+0]
   \   000000C6   4FF48061           MOV      R1,#+1024
   \   000000CA   4186               STRH     R1,[R0, #+50]
    729          	    pH6130->RT1_1553_STATUS_BITS_REG = 0x0000;	 
   \   000000CC   ........           LDR.W    R0,??DataTable7_6
   \   000000D0   0068               LDR      R0,[R0, #+0]
   \   000000D2   0021               MOVS     R1,#+0
   \   000000D4   8186               STRH     R1,[R0, #+52]
    730          	    pH6130->RT1_TTAG_UTILITY_REG = 0x0000;	 
   \   000000D6   ........           LDR.W    R0,??DataTable7_6
   \   000000DA   0068               LDR      R0,[R0, #+0]
   \   000000DC   0021               MOVS     R1,#+0
   \   000000DE   A0F89410           STRH     R1,[R0, #+148]
    731          	    pH6130->RT1_BUSA_SELECT_REG = 0xAAAA;		 
   \   000000E2   ........           LDR.W    R0,??DataTable7_6
   \   000000E6   0068               LDR      R0,[R0, #+0]
   \   000000E8   4AF6AA21           MOVW     R1,#+43690
   \   000000EC   0187               STRH     R1,[R0, #+56]
    732          	    pH6130->RT1_BUSB_SELECT_REG = 0xBBBB;		 
   \   000000EE   ........           LDR.W    R0,??DataTable7_6
   \   000000F2   0068               LDR      R0,[R0, #+0]
   \   000000F4   4BF6BB31           MOVW     R1,#+48059
   \   000000F8   4187               STRH     R1,[R0, #+58]
    733          	    pH6130->RT1_BIT_WORD_REG = 0x0000;			 
   \   000000FA   ........           LDR.W    R0,??DataTable7_6
   \   000000FE   0068               LDR      R0,[R0, #+0]
   \   00000100   0021               MOVS     R1,#+0
   \   00000102   8187               STRH     R1,[R0, #+60]
    734          	    pH6130->RT1_ALT_BIT_WORD_REG = 0xABCD;			 
   \   00000104   ........           LDR.W    R0,??DataTable7_6
   \   00000108   0068               LDR      R0,[R0, #+0]
   \   0000010A   4AF6CD31           MOVW     R1,#+43981
   \   0000010E   C187               STRH     R1,[R0, #+62]
    735          
    736          
    737          	    // load the RT1 Descriptor Table
    738          	    // Starting at the table base address written above, copy the RT1 Descriptor 
    739          	    // Table array (declared above) into HI-6130 RAM.
    740          		
    741          	    j = pH6130->RT1_DESC_TBL_BASE_ADDR_REG << 1;	// left-shift offset
   \   00000110   ........           LDR.W    R0,??DataTable7_6
   \   00000114   0068               LDR      R0,[R0, #+0]
   \   00000116   408E               LDRH     R0,[R0, #+50]
   \   00000118   4000               LSLS     R0,R0,#+1
   \   0000011A   0500               MOVS     R5,R0
    742          
    743          	    // If using simplified mode command processing (SMCP), the program is only 
    744          	    // required to initialize Descriptor Word 1 (Control Words) for each mode command 
    745          	    // in the 2nd half of the descriptor table. It is not necessary to initialize 
    746          	    // Descriptor Words 2,3,4 in the 2nd (mode code) half of the Descriptor Table.
    747          	    // THE FIRST HALF OF THE TABLE FOR SUBADDRESS COMMANDS MUST BE FULLY INITIALIZED. 
    748          
    749          	    #if (USE_SMCP)
    750           
    751          		// in subaddress command half of table, every word is written
    752          		for ( i = 0, k = (0x60000000 + j); i < 256; i++) {
   \   0000011C   0020               MOVS     R0,#+0
   \   0000011E   0600               MOVS     R6,R0
   \   00000120   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000122   15F1C040           ADDS     R0,R5,#+1610612736
   \   00000126   0400               MOVS     R4,R0
   \                     ??initialize_613x_RT1_0:
   \   00000128   4FF48070           MOV      R0,#+256
   \   0000012C   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000012E   8642               CMP      R6,R0
   \   00000130   07D2               BCS.N    ??initialize_613x_RT1_1
    753          		    *((volatile unsigned short *)(k)) = descr_table_RT1[i];
   \   00000132   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000134   80A8               ADD      R0,SP,#+512
   \   00000136   30F81600           LDRH     R0,[R0, R6, LSL #+1]
   \   0000013A   2080               STRH     R0,[R4, #+0]
    754          		    k += 2;
   \   0000013C   A41C               ADDS     R4,R4,#+2
    755          		}
   \   0000013E   761C               ADDS     R6,R6,#+1
   \   00000140   F2E7               B.N      ??initialize_613x_RT1_0
    756          		// in mode command half of table, just write Control Words, every 4th word
    757          		for ( ; i < 512; i++) {
   \                     ??initialize_613x_RT1_1:
   \   00000142   4FF40070           MOV      R0,#+512
   \   00000146   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000148   8642               CMP      R6,R0
   \   0000014A   13D2               BCS.N    ??initialize_613x_RT1_2
    758          		    //  just write 4 host-maintained Control Word bits
    759          		    *((volatile unsigned short *)(k)) = descr_table_RT1[i] & 0xF000; // desc word 1
   \   0000014C   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000014E   80A8               ADD      R0,SP,#+512
   \   00000150   30F81600           LDRH     R0,[R0, R6, LSL #+1]
   \   00000154   10F47040           ANDS     R0,R0,#0xF000
   \   00000158   2080               STRH     R0,[R4, #+0]
    760          		    k += 2;
   \   0000015A   A41C               ADDS     R4,R4,#+2
    761          		    *((volatile unsigned short *)(k)) = 0; // desc word 2 = 0
   \   0000015C   0020               MOVS     R0,#+0
   \   0000015E   2080               STRH     R0,[R4, #+0]
    762          		    k += 2;
   \   00000160   A41C               ADDS     R4,R4,#+2
    763          		    *((volatile unsigned short *)(k)) = 0; // desc word 3 = 0
   \   00000162   0020               MOVS     R0,#+0
   \   00000164   2080               STRH     R0,[R4, #+0]
    764          		    k += 2;
   \   00000166   A41C               ADDS     R4,R4,#+2
    765          		    *((volatile unsigned short *)(k)) = 0; // desc word 4 = 0
   \   00000168   0020               MOVS     R0,#+0
   \   0000016A   2080               STRH     R0,[R4, #+0]
    766          		    k += 2;
   \   0000016C   A41C               ADDS     R4,R4,#+2
    767          		    i += 3;
   \   0000016E   F61C               ADDS     R6,R6,#+3
    768                          }		
   \   00000170   761C               ADDS     R6,R6,#+1
   \   00000172   E6E7               B.N      ??initialize_613x_RT1_1
    769          
    770          	    #else // not using SMCP
    771          
    772          		// every word in table is written 
    773          		for ( i = 0, k = (0x60000000 + j); i < 512; i++) {
    774          		    *((volatile unsigned short *)(k)) = descr_table_RT1[i];
    775          		    k += 2;
    776          		}
    777          
    778          	    #endif
    779          
    780          	    #if (ILLEGAL_CMD_DETECT)
    781          		// copy the Illegalization Table array (declared above) into HI-613x.
    782          		// load Illegalization Table for RT1
    783                          
    784          		// write address k starts at table base address 
    785                          k = 0x60000000 + (RT1_ILLEGAL_TABLE_BASE_ADDR << 1);
   \                     ??initialize_613x_RT1_2:
   \   00000174   ........           LDR.W    R0,??DataTable7_7  ;; 0x60000400
   \   00000178   0400               MOVS     R4,R0
    786                          
    787                          for ( i = 0; i < 256; i++) {	
   \   0000017A   0020               MOVS     R0,#+0
   \   0000017C   0600               MOVS     R6,R0
   \                     ??initialize_613x_RT1_3:
   \   0000017E   4FF48070           MOV      R0,#+256
   \   00000182   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000184   8642               CMP      R6,R0
   \   00000186   07D2               BCS.N    ??initialize_613x_RT1_4
    788                              *((volatile unsigned short *)(k)) = illegal_table[i];
   \   00000188   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000018A   00A8               ADD      R0,SP,#+0
   \   0000018C   30F81600           LDRH     R0,[R0, R6, LSL #+1]
   \   00000190   2080               STRH     R0,[R4, #+0]
    789          		    k = k + 2;
   \   00000192   A41C               ADDS     R4,R4,#+2
    790          		}
   \   00000194   761C               ADDS     R6,R6,#+1
   \   00000196   F2E7               B.N      ??initialize_613x_RT1_3
    791          
    792          	    #endif // (ILLEGAL_CMD_DETECT)
    793          
    794          	// ======================================================================================
    795          
    796          
    797          }	// end: initialize_613x_RT1()
   \                     ??initialize_613x_RT1_4:
   \   00000198   0DF5C06D           ADD      SP,SP,#+1536
   \   0000019C   70BD               POP      {R4-R6,PC}       ;; return
    798          
    799          
    800          //--------------------------------------------------------------------------------------
    801          //	This function loads dummy data into the limited set of RT1 transmit buffers 
    802          //	assigned above during initialization. This is only used for testing.
    803          //--------------------------------------------------------------------------------------

   \                                 In section .text, align 2, keep-with-next
    804          void write_dummy_tx_data_RT1(void) {
   \                     write_dummy_tx_data_RT1:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   A0B0               SUB      SP,SP,#+128
    805          	
    806          	unsigned short i, j;
    807          	unsigned short a_data[32] = {0x0101,0x0202,0x0303,0x0404,0x0505,0x0606,0x0707,0x0808,
    808          			             0x0909,0x1010,0x1111,0x1212,0x1313,0x1414,0x1515,0x1616,
    809          				     0x1717,0x1818,0x1919,0x2020,0x2121,0x2222,0x2323,0x2424,
    810          				     0x2525,0x2626,0x2727,0x2828,0x2929,0x3030,0x3131,0x3232};
   \   00000004   10A8               ADD      R0,SP,#+64
   \   00000006   ........           LDR.W    R1,??DataTable7_8
   \   0000000A   4022               MOVS     R2,#+64
   \   0000000C   ........           BL       __aeabi_memcpy4
    811          
    812          	unsigned short b_data[32] = {0xF001,0xF002,0xF003,0xF004,0xF005,0xF006,0xF007,0xF008,
    813          				     0xF009,0xF00A,0xF00B,0xF00C,0xF00D,0xF00E,0xF00F,0xF010,
    814          				     0xF011,0xF012,0xF013,0xF014,0xF015,0xF016,0xF017,0xF018,
    815          				     0xF019,0xF01A,0xF01B,0xF01C,0xF01D,0xF01E,0xF01F,0xF020};
   \   00000010   00A8               ADD      R0,SP,#+0
   \   00000012   ........           LDR.W    R1,??DataTable7_9
   \   00000016   4022               MOVS     R2,#+64
   \   00000018   ........           BL       __aeabi_memcpy4
    816          
    817          
    818                  	unsigned int k;
    819          
    820          		// FOR TESTING PING-PONG, A PAIR OF DPA/DPB Tx BUFFERS: EACH BUFFER RESERVES
    821                          // SPACE FOR MSG INFO WORD AND TIME TAG WORD, PLUS 32 DATA WORDS 
    822          	
    823          		// first a 32-word buffer starting at offset = 0x0866 
    824          		k = (0x60000000 + (0x0866 << 1));
   \   0000001C   ........           LDR.W    R1,??DataTable7_10  ;; 0x600010cc
   \   00000020   0800               MOVS     R0,R1
    825          		// skip 2 addresses for MsgInfo Word and TimeTag word
    826          		k = k + 4;
   \   00000022   001D               ADDS     R0,R0,#+4
    827          		// write the 32 data words...
    828          		for ( i = 0; i < 32; i++) {	
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT1_0:
   \   00000028   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002A   202D               CMP      R5,#+32
   \   0000002C   07D2               BCS.N    ??write_dummy_tx_data_RT1_1
    829          			*((volatile unsigned short *)(k)) = a_data[i];
   \   0000002E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000030   10A9               ADD      R1,SP,#+64
   \   00000032   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   00000036   0180               STRH     R1,[R0, #+0]
    830          			k = k + 2;
   \   00000038   801C               ADDS     R0,R0,#+2
    831          		}
   \   0000003A   6D1C               ADDS     R5,R5,#+1
   \   0000003C   F4E7               B.N      ??write_dummy_tx_data_RT1_0
    832          		
    833          		// next a 32-word buffer starting at offset = 0x0888 
    834          		k = (0x60000000 + (0x0888 << 1));
   \                     ??write_dummy_tx_data_RT1_1:
   \   0000003E   ........           LDR.W    R1,??DataTable7_11  ;; 0x60001110
   \   00000042   0800               MOVS     R0,R1
    835          		// skip 2 addresses for MsgInfo Word and TimeTag word
    836          		k = k + 4;
   \   00000044   001D               ADDS     R0,R0,#+4
    837          		// write the 32 data words...
    838          		for ( i = 0; i < 32; i++) {	
   \   00000046   0021               MOVS     R1,#+0
   \   00000048   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT1_2:
   \   0000004A   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004C   202D               CMP      R5,#+32
   \   0000004E   07D2               BCS.N    ??write_dummy_tx_data_RT1_3
    839          			*((volatile unsigned short *)(k)) = b_data[i];
   \   00000050   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000052   00A9               ADD      R1,SP,#+0
   \   00000054   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   00000058   0180               STRH     R1,[R0, #+0]
    840          			k = k + 2;
   \   0000005A   801C               ADDS     R0,R0,#+2
    841          		}
   \   0000005C   6D1C               ADDS     R5,R5,#+1
   \   0000005E   F4E7               B.N      ??write_dummy_tx_data_RT1_2
    842          
    843          		// ================================================================================= 
    844          
    845          		// FOR TESTING INDEXED MODE, A BUFFER THAT HOLDS 32 32-WORD MESSAGES,
    846          		// REQUIRING INTERLACED MSG INFO AND TIME TAG WORDS FOR EACH MESSAGE 
    847          
    848          		// total 1088-word buffer starting at offset = 0x0D32 
    849          		// this is 32 contiguous segments of 34 words each, 
    850          		k = (0x60000000 + (0x0D32 << 1));
   \                     ??write_dummy_tx_data_RT1_3:
   \   00000060   ........           LDR.W    R1,??DataTable7_12  ;; 0x60001a64
   \   00000064   0800               MOVS     R0,R1
    851          		for ( j = 0; j < 32; j++) {
   \   00000066   0021               MOVS     R1,#+0
   \   00000068   0C00               MOVS     R4,R1
   \                     ??write_dummy_tx_data_RT1_4:
   \   0000006A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000006C   202C               CMP      R4,#+32
   \   0000006E   0FD2               BCS.N    ??write_dummy_tx_data_RT1_5
    852          			// skip 2 addresses at top of 32-word segment for MsgInfo Word and TimeTag word
    853          			k = k + 4; 
   \   00000070   001D               ADDS     R0,R0,#+4
    854          			// write the 32 data words...					
    855          			for ( i = 0; i < 32; i++) {	
   \   00000072   0021               MOVS     R1,#+0
   \   00000074   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT1_6:
   \   00000076   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000078   202D               CMP      R5,#+32
   \   0000007A   07D2               BCS.N    ??write_dummy_tx_data_RT1_7
    856          				*((volatile unsigned short *)(k)) = b_data[i];
   \   0000007C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000007E   00A9               ADD      R1,SP,#+0
   \   00000080   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   00000084   0180               STRH     R1,[R0, #+0]
    857          				k = k + 2;
   \   00000086   801C               ADDS     R0,R0,#+2
    858          			}
   \   00000088   6D1C               ADDS     R5,R5,#+1
   \   0000008A   F4E7               B.N      ??write_dummy_tx_data_RT1_6
    859          		}
   \                     ??write_dummy_tx_data_RT1_7:
   \   0000008C   641C               ADDS     R4,R4,#+1
   \   0000008E   ECE7               B.N      ??write_dummy_tx_data_RT1_4
    860          
    861          		// ================================================================================= 
    862          
    863          		// FOR TESTING CIRCULAR MODE 1, A BUFFER THAT HOLDS 32 32-WORD MESSAGES,
    864          		// REQUIRING INTERLACED MSG INFO AND TIME TAG WORDS FOR EACH MESSAGE  
    865          
    866          		// total 1088-word buffer starting at offset = 0x15D6 
    867          		// this is 32 contiguous segments of 34 words each, 
    868          		k = (0x60000000 + (0x15D6 << 1));
   \                     ??write_dummy_tx_data_RT1_5:
   \   00000090   ........           LDR.W    R1,??DataTable7_13  ;; 0x60002bac
   \   00000094   0800               MOVS     R0,R1
    869          		for ( j = 0; j < 32; j++) {
   \   00000096   0021               MOVS     R1,#+0
   \   00000098   0C00               MOVS     R4,R1
   \                     ??write_dummy_tx_data_RT1_8:
   \   0000009A   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000009C   202C               CMP      R4,#+32
   \   0000009E   0FD2               BCS.N    ??write_dummy_tx_data_RT1_9
    870          			// skip 2 addresses at top of 32-word segment for MsgInfo Word and TimeTag word
    871          			k = k + 4; 
   \   000000A0   001D               ADDS     R0,R0,#+4
    872          			// write the 32 data words...					
    873          			for ( i = 0; i < 32; i++) {	
   \   000000A2   0021               MOVS     R1,#+0
   \   000000A4   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT1_10:
   \   000000A6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A8   202D               CMP      R5,#+32
   \   000000AA   07D2               BCS.N    ??write_dummy_tx_data_RT1_11
    874          				*((volatile unsigned short *)(k)) = a_data[i];
   \   000000AC   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000AE   10A9               ADD      R1,SP,#+64
   \   000000B0   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   000000B4   0180               STRH     R1,[R0, #+0]
    875          				k = k + 2;
   \   000000B6   801C               ADDS     R0,R0,#+2
    876          			}
   \   000000B8   6D1C               ADDS     R5,R5,#+1
   \   000000BA   F4E7               B.N      ??write_dummy_tx_data_RT1_10
    877          		}
   \                     ??write_dummy_tx_data_RT1_11:
   \   000000BC   641C               ADDS     R4,R4,#+1
   \   000000BE   ECE7               B.N      ??write_dummy_tx_data_RT1_8
    878          		// follow with a 32-word safety pad in case of circ-1 buffer overrun
    879          		for ( i = 0; i < 32; i++) {	
   \                     ??write_dummy_tx_data_RT1_9:
   \   000000C0   0021               MOVS     R1,#+0
   \   000000C2   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT1_12:
   \   000000C4   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000C6   202D               CMP      R5,#+32
   \   000000C8   05D2               BCS.N    ??write_dummy_tx_data_RT1_13
    880          			*((volatile unsigned short *)(k)) = 0xBADD;
   \   000000CA   4BF6DD21           MOVW     R1,#+47837
   \   000000CE   0180               STRH     R1,[R0, #+0]
    881          			k = k + 2;
   \   000000D0   801C               ADDS     R0,R0,#+2
    882          		}
   \   000000D2   6D1C               ADDS     R5,R5,#+1
   \   000000D4   F6E7               B.N      ??write_dummy_tx_data_RT1_12
    883          		
    884          		// ================================================================================= 
    885          	
    886          		// FOR TESTING CIRCULAR MODE 2, A CONTIGUOUS 32 X 32-WORD DATA BLOCK 
    887          	
    888          		// total 8192-word buffer with offset range from 0x1E00 to 0x3DFF 
    889          		k = (0x60000000 + (0x1E00 << 1));
   \                     ??write_dummy_tx_data_RT1_13:
   \   000000D6   ........           LDR.W    R1,??DataTable7_14  ;; 0x60003c00
   \   000000DA   0800               MOVS     R0,R1
    890          		// write the 8192 data words using incrementing data pattern...
    891          		for ( i = 0, j = 0; i < 8192; i++, j++) {	
   \   000000DC   0021               MOVS     R1,#+0
   \   000000DE   0D00               MOVS     R5,R1
   \   000000E0   0021               MOVS     R1,#+0
   \   000000E2   0C00               MOVS     R4,R1
   \                     ??write_dummy_tx_data_RT1_14:
   \   000000E4   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000E6   B5F5005F           CMP      R5,#+8192
   \   000000EA   04D2               BCS.N    ??write_dummy_tx_data_RT1_15
    892          			*((volatile unsigned short *)(k)) = j;
   \   000000EC   0480               STRH     R4,[R0, #+0]
    893          			k = k + 2;
   \   000000EE   801C               ADDS     R0,R0,#+2
    894          		}
   \   000000F0   6D1C               ADDS     R5,R5,#+1
   \   000000F2   641C               ADDS     R4,R4,#+1
   \   000000F4   F6E7               B.N      ??write_dummy_tx_data_RT1_14
    895          	
    896          		// ================================================================================= 
    897          
    898          		// for unimplemented transmit SA's. a 32-word buffer starting at offset = 0x1A58 
    899          		k = (0x60000000 + (0x1A58 << 1));
   \                     ??write_dummy_tx_data_RT1_15:
   \   000000F6   ........           LDR.W    R1,??DataTable7_15  ;; 0x600034b0
   \   000000FA   0800               MOVS     R0,R1
    900          		// skip 2 addresses for MsgInfo Word and TimeTag word
    901          		k = k + 4;
   \   000000FC   001D               ADDS     R0,R0,#+4
    902          		// write the 32 data words...
    903          		for ( i = 0; i < 32; i++) {	
   \   000000FE   0021               MOVS     R1,#+0
   \   00000100   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT1_16:
   \   00000102   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000104   202D               CMP      R5,#+32
   \   00000106   05D2               BCS.N    ??write_dummy_tx_data_RT1_17
    904          			*((volatile unsigned short *)(k)) = 0xDEAD;
   \   00000108   4DF6AD61           MOVW     R1,#+57005
   \   0000010C   0180               STRH     R1,[R0, #+0]
    905          			k = k + 2;
   \   0000010E   801C               ADDS     R0,R0,#+2
    906          		}
   \   00000110   6D1C               ADDS     R5,R5,#+1
   \   00000112   F6E7               B.N      ??write_dummy_tx_data_RT1_16
    907          	
    908          	return;
   \                     ??write_dummy_tx_data_RT1_17:
   \   00000114   20B0               ADD      SP,SP,#+128
   \   00000116   30BD               POP      {R4,R5,PC}       ;; return
    909          
    910          }	// end write_dummy_tx_data_RT1()
    911          
    912          
    913          
    914          #endif	  //------------ END RT1 ENABLED ------------
    915          
    916          
    917          
    918          //==========================================================================
    919          
    920          
    921          
    922          #if (RT2_ena)    //------------ RT2 ENABLED ------------
    923          
    924          
    925          //   	This function initializes the Holt HI-613x RT2 by writing 
    926          //	configuration registers in the device. Only RT2 mode option 
    927          //	bits are affected. The program has already called function 
    928          // 	initialize_613x_shared() to initialize the common parameters
    929          //	shared by BC, RT1, RT2 and/or Bus Monitor
    930          //

   \                                 In section .text, align 2, keep-with-next
    931          void initialize_613x_RT2(void) {
   \                     initialize_613x_RT2:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   ADF5C06D           SUB      SP,SP,#+1536
    932          	        
    933          	unsigned int k;
    934          
    935          	unsigned short i,j;
    936                  
    937          	unsigned short descr_table_RT2[512] = {
    938          	/* this array is used to initialize the Descriptor Table. For subaddress-
    939          	receive and subaddress-transmit commands, the array sets the desired data 
    940          	buffer style and initializes data pointer values. 
    941          	
    942          	For mode code commands, use of the "Simplified Mode Command Processing" 
    943          	option is assumed, so the only potential initialization in the mode 
    944          	command half of the table is loading mode data word values for transmit 
    945          	mode commands. 
    946          	
    947          	Only 3 defined mode commands actually transmit a mode data word; MC16, 
    948          	M18 and MC19 decimal. For mode commands MC18 and MC19, the device 
    949          	automatically transmits the correct data word value, NOT fetched from 
    950          	this table. The transmitted value is copied into the table after transmit.
    951          	For MC16, the transmitted value comes from this table.
    952          	
    953          	Only 3 defined mode commands actually receive a mode data word: MC17, 
    954          	MC20 and MC21 decimal. If the terminal is not using "illegal command 
    955          	detection" it will respond "in form" to all valid undefined, reserved or 
    956          	unimplemented mode commands. By providing storage for all possible mode
    957          	commands, the Descriptor Table provides predictable command response to
    958          	all valid mode code commands, as well as a repository for received data. */
    959          
    960          	/* ===================================================================== */
    961          	/*    R T 2   R E C E I V E    S U B A D D R E S S   C O M M A N D S     */
    962          	/* ===================================================================== */
    963          	/*  Note:Subaddresses    ControlWord  DescrWord2  DescrWord3  DescrWord4 */
    964          	/*  0,31 are not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD,
    965          	/*  Rx Subaddress 01  */   0x0004,     0x0800,     0x0822,     0x0844, // ping-pong
    966          	/*  Rx Subaddress 02  */   0x8000,     0x08D0,     0x0020,     0x0D10, // idx-32 ixeqz
    967          	/*  Rx Subaddress 03  */   0x8001,     0x1176,     0x1176,     0x15B6, // cir1 ixeqz (32 MSG BUFFER)
    968          	/*  Rx Subaddress 04  */   0x0000,     0x1A36,     0x0000,     0x1A36, // ----
    969          	/*  Rx Subaddress 05  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |   
    970          	/*  Rx Subaddress 06  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    971          	/*  Rx Subaddress 07  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    972          	/*  Rx Subaddress 08  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    973          	/*  Rx Subaddress 09  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    974          	/*  Rx Subaddress 10  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    975          	/*  Rx Subaddress 11  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    976          	/*  Rx Subaddress 12  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    977          	/*  Rx Subaddress 13  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    978          	/*  Rx Subaddress 14  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    979          	/*  Rx Subaddress 15  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    980          	/*  Rx Subaddress 16  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    981          	/*  Rx Subaddress 17  */   0x0000,     0x1A36,     0x0000,     0x1A36, // shared index sgl-msg
    982          	/*  Rx Subaddress 18  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    983          	/*  Rx Subaddress 19  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    984          	/*  Rx Subaddress 20  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    985          	/*  Rx Subaddress 21  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    986          	/*  Rx Subaddress 22  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    987          	/*  Rx Subaddress 23  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    988          	/*  Rx Subaddress 24  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    989          	/*  Rx Subaddress 25  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    990          	/*  Rx Subaddress 26  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    991          	/*  Rx Subaddress 27  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    992          	/*  Rx Subaddress 28  */   0x0000,     0x1A36,     0x0000,     0x1A36, //     |
    993          	/*  Rx Subaddress 29  */   0x0000,     0x1A36,     0x0000,     0x1A36, // ----
    994          	/*  Rx Subaddress 30  */   0x4000,     0x08AE,     0x0000,     0x08AE, // idx sgl-msg IWA irq
    995          	/*  This row not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD, 
    996          	/*                                                                       */
    997          	/* ===================================================================== */
    998          	/*     R T 2   T R A N S M I T   S U B A D D R E S S   C O M M A N D S   */
    999          	/* ===================================================================== */
   1000          	/*  NOTE: IF BROADCAST COMMANDS ARE SUPPORTED, ACCIDENTAL BROADCAST-     */
   1001          	/*  TRANSMIT COMMANDS WILL UPDATE MIW + TT WORDS AT THE BROADCAST DATA   */
   1002          	/*  POINTER LOCATION (PING-PONG & INDEXED MODES) SO INITIALIZE B'CAST    */
   1003          	/*  POINTERS TO PREDICTABLE ADDRESSES, BUT NOT 0x0000 (CONFIG.REG 1!)    */
   1004          	/*                                                                       */
   1005          	/*  Note:Subaddresses    ControlWord  DescrWord2  DescrWord3  DescrWord4 */
   1006          	/*  0,31 are not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD,
   1007          	/*  Tx Subaddress 01  */   0x0004,     0x0866,     0x0888,     0x08AA, // ping-pong
   1008          	/*  Tx Subaddress 02  */   0x8000,     0x0D32,     0x0020,     0x1172, // idx-32 ixeqz
   1009          	/*  Tx Subaddress 03  */   0x8001,     0x15D6,     0x15D6,     0x1A16, // cir1 ixeqz
   1010          	/*  Tx Subaddress 04  */   0x0000,     0x1A58,     0x0000,     0x1A58, // ----
   1011          	/*  Tx Subaddress 05  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1012          	/*  Tx Subaddress 06  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1013          	/*  Tx Subaddress 07  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1014          	/*  Tx Subaddress 08  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1015          	/*  Tx Subaddress 09  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1016          	/*  Tx Subaddress 10  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1017          	/*  Tx Subaddress 11  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1018          	/*  Tx Subaddress 12  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1019          	/*  Tx Subaddress 13  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1020          	/*  Tx Subaddress 14  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1021          	/*  Tx Subaddress 15  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1022          	/*  Tx Subaddress 16  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1023          	/*  Tx Subaddress 17  */   0x0000,     0x1A58,     0x0000,     0x1A58, // shared index sgl-msg
   1024          	/*  Tx Subaddress 18  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1025          	/*  Tx Subaddress 19  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1026          	/*  Tx Subaddress 20  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1027          	/*  Tx Subaddress 21  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1028          	/*  Tx Subaddress 22  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1029          	/*  Tx Subaddress 23  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1030          	/*  Tx Subaddress 24  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1031          	/*  Tx Subaddress 25  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1032          	/*  Tx Subaddress 26  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1033          	/*  Tx Subaddress 27  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1034          	/*  Tx Subaddress 28  */   0x0000,     0x1A58,     0x0000,     0x1A58, //     |
   1035          	/*  Tx Subaddress 29  */   0x0000,     0x1A58,     0x0000,     0x1A58, // ----
   1036          	/*  Tx Subaddress 30  */   0x0000,     0x08AE,     0x0000,     0x08AE, // idx sgl-msg
   1037          	/*  This row not used */   0xDEAD,     0xDEAD,     0xDEAD,     0xDEAD,
   1038          	/*                                                                       */
   1039          	/* ===================================================================== */
   1040          	/*    R T 2  R E C E I V E   M O D E   C O D E   C O M M A N D S         */
   1041          	/* ===================================================================== */
   1042          	/*                       ControlWord MsgInfoWord  TimeTagWord DataWord   */
   1043          	/* undefined Rx MC 00 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, // ----
   1044          	/*     "     Rx MC 01 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1045          	/*     "     Rx MC 02 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1046          	/*     "     Rx MC 03 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |     
   1047          	/*     "     Rx MC 04 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1048          	/*     "     Rx MC 05 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1049          	/*     "     Rx MC 06 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1050          	/*     "     Rx MC 07 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1051          	/*     "     Rx MC 08 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, // shared index sgl-msg
   1052          	/*     "     Rx MC 09 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1053          	/*     "     Rx MC 10 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1054          	/*     "     Rx MC 11 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1055          	/*     "     Rx MC 12 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1056          	/*     "     Rx MC 13 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1057          	/*     "     Rx MC 14 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1058          	/*     "     Rx MC 15 */   0x0000,     0x1A7A,     0x0000,     0x1A7A, //     |
   1059          	/*     "     Rx MC 16 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // ----
   1060          	/*  DEFINED  Rx MC 17 */   0x0004,     0x1AE4,     0x1AE8,     0x1AEC, /* synchronize with data */
   1061          	/* undefined Rx MC 18 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // shared index sgl-msg
   1062          	/*     "     Rx MC 19 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // shared index sgl-msg
   1063          	/*  DEFINED  Rx MC 20 */   0x0004,     0x1AF0,     0x1AF4,     0x1AF8, /* shutdown selected bus*/
   1064          	/*  DEFINED  Rx MC 21 */   0x0004,     0x1AFC,     0x1B00,     0x1B04, /* override sel bus shutdown*/
   1065          	/*  reserved Rx MC 22 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // ----
   1066          	/*     "     Rx MC 23 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
   1067          	/*     "     Rx MC 24 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
   1068          	/*     "     Rx MC 25 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
   1069          	/*     "     Rx MC 26 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // shared index sgl-msg
   1070          	/*     "     Rx MC 27 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
   1071          	/*     "     Rx MC 28 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
   1072          	/*     "     Rx MC 29 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
   1073          	/*     "     Rx MC 30 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, //     |
   1074          	/*     "     Rx MC 31 */   0x0000,     0x1A7E,     0x0000,     0x1A7E, // ----
   1075          	/*                                                                       */
   1076          	/* ===================================================================== */
   1077          	/*   R T 2  T R A N S M I T   M O D E   C O D E   C O M M A N D S        */
   1078          	/*         using the "Simplified Mode Command Processing" option         */
   1079          	/* ===================================================================== */
   1080          	/*                       ControlWord MsgInfoWord  TimeTagWord DataWord   */
   1081          	/*  DEFINED  Tx MC 00 */   0x4004,     0x1ABA,     0x1ABC,     0x1ABE, /* dynamic bus control,, IWA interrupt */
   1082          	/*     "     Tx MC 01 */   0x0004,     0x1A90,     0x1A92,     0x1A94, /* synchronize */
   1083          	/*     "     Tx MC 02 */   0x0004,     0x1A96,     0x1A98,     0x1A9A, /* transmit status */
   1084          	/*     "     Tx MC 03 */   0x0004,     0x1A9C,     0x1A9E,     0x1AA0, /* initiate self test */
   1085          	/*     "     Tx MC 04 */   0x0004,     0x1AA2,     0x1AA4,     0x1AA6, /* shutdown bus */
   1086          	/*     "     Tx MC 05 */   0x0004,     0x1AA8,     0x1AAA,     0x1AAC, /* overrride shutdown bus */
   1087          	/*     "     Tx MC 06 */   0x0004,     0x1AAE,     0x1AB0,     0x1AB2, /* inhibit terminal flag */
   1088          	/*     "     Tx MC 07 */   0x0004,     0x1AB4,     0x1AB6,     0x1AB8, /* override inhibit term flag */
   1089          	/*     "     Tx MC 08 */   0x0004,     0x1ABA,     0x1ABC,     0x1ABE, /* reset terminal, */
   1090          	/*  reserved Tx MC 09 */   0x0000,     0x1A82,     0x0000,     0x1A82, // ----
   1091          	/*     "     Tx MC 10 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     |
   1092          	/*     "     Tx MC 11 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     |
   1093          	/*     "     Tx MC 12 */   0x0000,     0x1A82,     0x0000,     0x1A82, // shared index sgl-msg
   1094          	/*     "     Tx MC 13 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     |
   1095          	/*     "     Tx MC 14 */   0x0000,     0x1A82,     0x0000,     0x1A82, //     | 
   1096          	/*     "     Tx MC 15 */   0x0000,     0x1A82,     0x0000,     0x1A82, // ----
   1097          	/*  DEFINED  Tx MC 16 */   0x0004,     0x1AC0,     0x1AC4,     0x1AC8, /* transmit vector word */
   1098          	/* undefined Tx MC 17 */   0x0000,     0x1A86,     0x0000,     0x1A86, // shared index sgl-msg
   1099          	/*  DEFINED  Tx MC 18 */   0x0004,     0x1ACC,     0x1AD0,     0x1AD4, /* transmit last command */
   1100          	/*  DEFINED  Tx MC 19 */   0x0004,     0x1AD8,     0x1ADC,     0x1AE0, /* transmit BIT word */
   1101          	/* undefined Tx MC 20 */   0x0000,     0x1A86,     0x0000,     0x1A86, // ----
   1102          	/*     "     Tx MC 21 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1103          	/*  reserved Tx MC 22 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1104          	/*     "     Tx MC 23 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1105          	/*     "     Tx MC 24 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1106          	/*     "     Tx MC 25 */   0x0000,     0x1A86,     0x0000,     0x1A86, // shared index sgl-msg
   1107          	/*     "     Tx MC 26 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1108          	/*     "     Tx MC 27 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1109          	/*     "     Tx MC 28 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1110          	/*     "     Tx MC 29 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     |
   1111          	/*     "     Tx MC 30 */   0x0000,     0x1A86,     0x0000,     0x1A86, //     | 
   1112          	/*     "     Tx MC 31 */   0x0000,     0x1A86,     0x0000,     0x1A86 }; // -- 
   \   00000006   80A8               ADD      R0,SP,#+512
   \   00000008   ........           LDR.W    R1,??DataTable7_16
   \   0000000C   4FF48062           MOV      R2,#+1024
   \   00000010   ........           BL       __aeabi_memcpy4
   1113           
   1114          	// end of descr_table_RT2[512] declaration
   1115          
   1116          
   1117          	unsigned short illegal_table[256] = {
   1118          	/* This array is loaded by the initialization function only when the terminal
   1119          	uses "illegal command detection", that is, when the macro ILLEGAL_CMD_DETECT 
   1120          	= YES in the header file 613x_initialization.h. 
   1121          	
   1122          	When macro ILLEGAL_CMD_DETECT = NO, the default all-zeros table value after 
   1123          	/MR master reset is retained, so all valid commands	get an "in form" response.
   1124          	Terminals not using "illegal command detection" should preserve the RAM's 
   1125          	(all 0x0000) reset state for the table address range to provide consistent 
   1126          	"in form" response for all valid commands. This function call provides this.
   1127             
   1128          	This template illegalizes all mode code commands that are either undefined 
   1129          	or reserved in MIL-STD-1553B. Also, the 3 transmit mode codes that have a 
   1130          	mode data word are made illegal when broadcast. Mode code 0 (dynamic bus 
   1131          	control) cannot be implemented by the HI-613X and is also made illegal.
   1132          	
   1133          	If using this example as a template, please note that the array below 
   1134          	renders the following list of commands illegal:
   1135          
   1136          	  * All undefined and reserved mode code commands
   1137          	  * Broadcast versions of these transmit mode cmds: MC0 MC2 MC16 MC18 MC19
   1138          	  * All broadcast transmit subaddress commands 
   1139          	  * Tx mode code MC0 "dynamic bus control" because BC switch-over not programmed
   1140          	  * Tx mode code MC3 "initiate self test," entirely application specific 
   1141          	  
   1142          	  ******************** PLEASE NOTE NEXT 2 LINES ! *************************
   1143          	  *    All non-broacast receive commands to subaddress 16, and all        *
   1144          	  * transmit commands to subaddress 17 are illegal for demonstration only *
   1145          	  *************************************************************************/
   1146          
   1147          	/* ====================================================================== */
   1148          	/*       RT2 BROADCAST RECEIVE MODE CODE AND SUBADDRESS COMMANDS          */
   1149          	/* ====================================================================== */
   1150          	/*    Setting legal/illegal mode code commands for subaddresses           */
   1151          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
   1152          	/*                                                                        */
   1153          	/*       _____________________ MC15 - MC12 Rx (undefined)                 */
   1154          	/*      |  ____________________ MC11 - MC8 Rx (undefined)                 */
   1155          	/*      | |  ___________________ MC7 - MC4 Rx (undefined)                 */
   1156          	/*      | | |  __________________ MC3 - MC0 Rx (undefined)                */
   1157          	/*      | | | |  _________________ MC31 - MC28 Rx (reserved)              */
   1158          	/*      | | | | |  ________________ MC27 - MC24 Rx (reserved)             */
   1159          	/*      | | | | | |                                                       */
   1160          	/*      | | | | | |       __________ MC23 Rx (reserved)                   */
   1161          	/*      | | | | | |      |  _________ MC22 Rx (reserved)                  */
   1162          	/*      | | | | | |      | |  ________ MC21 Rx (override sel tx shutdown) */ 
   1163          	/*      | | | | | |      | | |  _______ MC20 Rx (selected tx shutdown)    */
   1164          	/*      | | | | | |      | | | |                                          */
   1165          	/*      | | | | | |      | | | |    ____ MC19 Rx (undefined)              */
   1166          	/*      | | | | | |      | | | |   |  ___ MC18 Rx (undefined)             */
   1167          	/*      | | | | | |      | | | |   | |  __ MC17 Rx (sync with data)       */
   1168          	/*      | | | | | |      | | | |   | | |  _ MC16 Rx (undefined)           */
   1169          	/*      | | | | | |      | | | |   | | | |                                */
   1170          	/*      | | | | | |  bin 1 1 0 0   1 1 0 1                                */
   1171          	/*      | | | | | |      -------   -------                                */
   1172          	/*   0x F F F F F F         C         D                                   */
   1173          	/*                                                                        */
   1174          	/*   Broadcast                                                            */
   1175          	/* Rx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
   1176          	/*                 mode codes   word counts   word counts   word counts   */
   1177          	/*                Low    High   Low    High   Low    High   Low    High   */
   1178          	/*  RAM address  0x0100 0x0101 0x0102 0x0103 0x0104 0x0105 0x0106 0x0107  */
   1179                                   0xFFFF,0xFFCD,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1180          	/*   Broadcast                                                            */
   1181          	/* Rx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
   1182          	/*                word counts   word counts   word counts   word counts   */
   1183          	/*                Low    High   Low    High   Low    High   Low    High   */
   1184          	/*  RAM address	 0x0108 0x0109 0x010A 0x010B 0x010C 0x010D 0x010E 0x010F  */
   1185                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1186          	/*   Broadcast                                                            */
   1187          	/* Rx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
   1188          	/*                word counts   word counts   word counts   word counts   */
   1189          	/*                Low    High   Low    High   Low    High   Low    High   */
   1190          	/*  RAM address	 0x0110 0x0111 0x0112 0x0113 0x0114 0x0115 0x0116 0x0117  */
   1191                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1192          	/*   Broadcast                                                            */
   1193          	/* Rx Subaddress -----12-----  -----13-----  -----14-----  -----15-----   */
   1194          	/*                word counts   word counts   word counts   word counts   */
   1195          	/*                Low    High   Low    High   Low    High   Low    High   */
   1196          	/*  RAM address	 0x0118 0x0119 0x011A 0x011B 0x011C 0x011D 0x011E 0x011F  */
   1197                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1198          	/*   Broadcast                                                            */
   1199          	/* Rx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
   1200          	/*                word counts   word counts   word counts   word counts   */
   1201          	/*                Low    High   Low    High   Low    High   Low    High   */
   1202          	/*  RAM address	 0x0120 0x0121 0x0122 0x0123 0x0124 0x0125 0x0126 0x0127  */
   1203                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1204          	/*   Broadcast                                                            */
   1205          	/* Rx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
   1206          	/*                word counts   word counts   word counts   word counts   */
   1207          	/*                Low    High   Low    High   Low    High   Low    High   */
   1208          	/*  RAM address	 0x0128 0x0129 0x012A 0x012B 0x012C 0x012D 0x012E 0x012F  */
   1209                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1210          	/*   Broadcast                                                            */
   1211          	/* Rx Subaddress -----24-----  -----25-----  -----26-----  -----27-----   */
   1212          	/*                word counts   word counts   word counts   word counts   */
   1213          	/*                Low    High   Low    High   Low    High   Low    High   */
   1214          	/*  RAM address	 0x0130 0x0131 0x0132 0x0133 0x0134 0x0135 0x0136 0x0137  */
   1215                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1216          	/*   Broadcast                                              SA31 = SA0    */
   1217          	/* Rx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
   1218          	/*                word counts   word counts   word counts   mode codes    */
   1219          	/*                Low    High   Low    High   Low    High   Low    High   */
   1220          	/*  RAM address	 0x0138 0x0139 0x013A 0x013B 0x013C 0x013D 0x013E 0x013F  */
   1221                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0xFFCD,
   1222          				 	
   1223          	/* ====================================================================== */
   1224          	/*       RT2 BROADCAST TRANSMIT MODE CODE AND SUBADDRESS COMMANDS         */
   1225          	/* ====================================================================== */
   1226          	/*    Setting legal/illegal mode code commands for subaddresses           */
   1227          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
   1228          	/*                                                                        */
   1229          	/*    _________________ MC15 - MC12 Tx (reserved)                         */
   1230          	/*   |                                                                    */
   1231          	/*   |   ________________ MC11 Tx (reserved)                              */
   1232          	/*   |  |  _______________ MC10 Tx (reserved)                             */
   1233          	/*   |  | |  ______________ MC9 Tx (reserved)                             */
   1234          	/*   |  | | |  _____________ MC8 Tx (reset remote terminal)               */
   1235          	/*   |  | | | |                                                           */
   1236          	/*   |  | | | |   ____________ MC7 Tx (override inhibit term flag bit)    */
   1237          	/*   |  | | | |  |  ___________ MC6 Tx (inhibit term flag bit)            */
   1238          	/*   |  | | | |  | |  __________ MC5 Tx (override transmitter shutdown)   */
   1239          	/*   |  | | | |  | | |  _________ MC4 Tx (transmitter shutdown)           */
   1240          	/*   |  | | | |  | | | |                                                  */
   1241          	/*   |  | | | |  | | | |   _______ MC3 Tx (init self test) NOT IN DEMO PGM*/
   1242          	/*   |  | | | |  | | | |  |  ______ MC2 Tx (transmit status) NO BROADCAST */
   1243          	/*   |  | | | |  | | | |  | |  _____ MC1 Tx (synchronize)                 */
   1244          	/*   |  | | | |  | | | |  | | |  ____ MC0 Tx (dyn bus control)NO BROADCAST*/
   1245          	/*   |  | | | |  | | | |  | | | |                      and NOT IMPLEMENTED*/
   1246          	/*   |  | | | |  | | | |  | | | |   __ MC31 - MC28 Tx (reserved)          */
   1247          	/*   |  | | | |  | | | |  | | | |  |  __ MC27 - MC24 Tx (reserved)        */
   1248          	/*   |  | | | |  | | | |  | | | |  | |  __ MC23-22 (res) & MC21-20 (undef)*/ 
   1249          	/*   |  | | | |  | | | |  | | | |  | | |                                  */
   1250          	/*   |  | | | |  | | | |  | | | |  | | |   ____ MC19 Tx NO BROADCAST      */
   1251          	/*   |  | | | |  | | | |  | | | |  | | |  |  ___ MC18 Tx NO BROADCAST     */
   1252          	/*   |  | | | |  | | | |  | | | |  | | |  | |  __ MC17 Tx (undefined)     */
   1253          	/*   |  | | | |  | | | |  | | | |  | | |  | | |  _ MC16 Tx NO BROADCAST   */
   1254          	/*   |  | | | |  | | | |  | | | |  | | |  | | | |                         */
   1255          	/*   |  1 1 1 0  0 0 0 0  1 1 0 1  | | |  1 1 1 1                         */
   1256          	/*   |  -------  -------  -------  | | |  -------                         */
   1257          	/*  0xF    E        0        D     F F F     F                            */
   1258          	/*                                                                        */
   1259              /*   Broadcast                                                            */
   1260          	/* Tx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
   1261          	/*                 mode codes   word counts   word counts   word counts   */
   1262          	/*                Low    High   Low    High   Low    High   Low    High   */
   1263          	/*  RAM address  0x0140 0x0141 0x0102 0x0143 0x0144 0x0145 0x0146 0x0147  */
   1264                                   0xFE0D,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
   1265          	/*   Broadcast                                                            */
   1266          	/* Tx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
   1267          	/*                word counts   word counts   word counts   word counts   */
   1268          	/*                Low    High   Low    High   Low    High   Low    High   */
   1269          	/*  RAM address	 0x0148 0x0149 0x014A 0x014B 0x014C 0x014D 0x014E 0x014F  */
   1270                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
   1271          	/*   Broadcast                                                            */
   1272          	/* Tx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
   1273          	/*                word counts   word counts   word counts   word counts   */
   1274          	/*                Low    High   Low    High   Low    High   Low    High   */
   1275          	/*  RAM address	 0x0150 0x0151 0x0152 0x0153 0x0154 0x0155 0x0156 0x0157  */
   1276                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
   1277          	/*   Broadcast                                                            */
   1278          	/* Tx Subaddress -----12-----  -----13-----  -----14-----  -----15-----   */
   1279          	/*                word counts   word counts   word counts   word counts   */
   1280          	/*                Low    High   Low    High   Low    High   Low    High   */
   1281          	/*  RAM address	 0x0158 0x0159 0x015A 0x015B 0x015C 0x015D 0x015E 0x015F  */
   1282                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
   1283          	/*   Broadcast                                                            */
   1284          	/* Tx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
   1285          	/*                word counts   word counts   word counts   word counts   */
   1286          	/*                Low    High   Low    High   Low    High   Low    High   */
   1287          	/*  RAM address	 0x0160 0x0161 0x0162 0x0163 0x0164 0x0165 0x0166 0x0167  */
   1288                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
   1289          	/*   Broadcast                                                            */
   1290          	/* Tx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
   1291          	/*                word counts   word counts   word counts   word counts   */
   1292          	/*                Low    High   Low    High   Low    High   Low    High   */
   1293          	/*  RAM address	 0x0168 0x0169 0x016A 0x016B 0x016C 0x016D 0x016E 0x016F  */
   1294                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
   1295          	/*   Broadcast                                                            */
   1296          	/* Tx Subaddress -----24-----  -----25-----  -----26-----  -----27-----   */
   1297          	/*                word counts   word counts   word counts   word counts   */
   1298          	/*                Low    High   Low    High   Low    High   Low    High   */
   1299          	/*  RAM address	 0x0170 0x0171 0x0172 0x0173 0x0174 0x0175 0x0176 0x0177  */
   1300                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,	
   1301          	/*   Broadcast                                              SA31 = SA0    */
   1302          	/* Tx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
   1303          	/*                word counts   word counts   word counts   mode codes    */
   1304          	/*                Low    High   Low    High   Low    High   Low    High   */
   1305          	/*  RAM address	 0x0178 0x0179 0x017A 0x017B 0x017C 0x017D 0x017E 0x017F  */
   1306                                   0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFE0D,0xFFFF,	
   1307          
   1308          	/* ====================================================================== */
   1309          	/* RT2 "OWN ADDRESS" NON-BROADCAST RECEIVE MODE CODE & SUBADDRESS COMMANDS*/
   1310          	/* ====================================================================== */
   1311          	/*    Setting legal/illegal mode code commands for subaddresses           */
   1312          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
   1313          	/*                                                                        */
   1314          	/*       _____________________ MC15 - MC12 Rx (undefined)                 */
   1315          	/*      |  ____________________ MC11 - MC8 Rx (undefined)                 */
   1316          	/*      | |  ___________________ MC7 - MC4 Rx (undefined)                 */
   1317          	/*      | | |  __________________ MC3 - MC0 Rx (undefined)                */
   1318          	/*      | | | |  _________________ MC31 - MC28 Rx (reserved)              */
   1319          	/*      | | | | |  ________________ MC27 - MC24 Rx (reserved)             */
   1320          	/*      | | | | | |                                                       */
   1321          	/*      | | | | | |       __________ MC23 Rx (reserved)                   */
   1322          	/*      | | | | | |      |  _________ MC22 Rx (reserved)                  */
   1323          	/*      | | | | | |      | |  ________ MC21 Rx (override sel tx shutdown) */ 
   1324          	/*      | | | | | |      | | |  _______ MC20 Rx (selected tx shutdown)    */
   1325          	/*      | | | | | |      | | | |                                          */
   1326          	/*      | | | | | |      | | | |    ____ MC19 Rx (undefined)              */
   1327          	/*      | | | | | |      | | | |   |  ___ MC18 Rx (undefined)             */
   1328          	/*      | | | | | |      | | | |   | |  __ MC17 Rx (sync with data)       */
   1329          	/*      | | | | | |      | | | |   | | |  _ MC16 Rx (undefined)           */
   1330          	/*      | | | | | |      | | | |   | | | |                                */
   1331          	/*      | | | | | |  bin 1 1 0 0   1 1 0 1                                */
   1332          	/*      | | | | | |      -------   -------                                */
   1333          	/*   0x F F F F F F         C         D                                   */
   1334          	/*                                                                        */
   1335          	/*  Own Address                                                           */
   1336          	/* Rx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
   1337          	/*                 mode codes   word counts   word counts   word counts   */
   1338          	/*                Low    High   Low    High   Low    High   Low    High   */
   1339          	/*  RAM address  0x0180 0x0181 0x0182 0x0183 0x0184 0x0185 0x0186 0x0187  */
   1340                                   0xFFFF,0xFFCD,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1341          	/*  Own Address                                                           */
   1342          	/* Rx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
   1343          	/*                word counts   word counts   word counts   word counts   */
   1344          	/*                Low    High   Low    High   Low    High   Low    High   */
   1345          	/*  RAM address	 0x0188 0x0189 0x018A 0x018B 0x018C 0x018D 0x018E 0x018F  */
   1346                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1347          	/*  Own Address                                                           */
   1348          	/* Rx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
   1349          	/*                word counts   word counts   word counts   word counts   */
   1350          	/*                Low    High   Low    High   Low    High   Low    High   */
   1351          	/*  RAM address	 0x0190 0x0191 0x0192 0x0193 0x0194 0x0195 0x0196 0x0197  */
   1352                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1353          	/*  Own Address                                                           */
   1354          	/* Rx Subaddress -----12-----  -----13-----  -----14-----  -----15-----   */
   1355          	/*                word counts   word counts   word counts   word counts   */
   1356          	/*                Low    High   Low    High   Low    High   Low    High   */
   1357          	/*  RAM address	 0x0198 0x0199 0x019A 0x019B 0x019C 0x019D 0x019E 0x019F  */
   1358                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1359          	/*  Own Address                                                           */
   1360          	/* Rx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
   1361          	/*                word counts   word counts   word counts   word counts   */
   1362          	/*                Low    High   Low    High   Low    High   Low    High   */
   1363          	/*  RAM address	 0x01A0 0x01A1 0x01A2 0x01A3 0x01A4 0x01A5 0x01A6 0x01A7  */
   1364                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1365          	/*  Own Address                                                           */
   1366          	/* Rx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
   1367          	/*                word counts   word counts   word counts   word counts   */
   1368          	/*                Low    High   Low    High   Low    High   Low    High   */
   1369          	/*  RAM address	 0x01A8 0x01A9 0x01AA 0x01AB 0x01AC 0x01AD 0x01AE 0x01AF  */
   1370                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1371          	/*  Own Address                                                           */
   1372          	/* Rx Subaddress -----24-----  -----25-----  -----26-----  -----27-----   */
   1373          	/*                word counts   word counts   word counts   word counts   */
   1374          	/*                Low    High   Low    High   Low    High   Low    High   */
   1375          	/*  RAM address	 0x01B0 0x01B1 0x01B2 0x01B3 0x01B4 0x01B5 0x01B6 0x01B7  */
   1376                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1377          	/*  Own Address                                             SA31 = SA0    */
   1378          	/* Rx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
   1379          	/*                word counts   word counts   word counts   mode codes    */
   1380          	/*                Low    High   Low    High   Low    High   Low    High   */
   1381          	/*  RAM address	 0x01B8 0x01B9 0x01BA 0x01BB 0x01BC 0x01BD 0x01BE 0x01BF  */
   1382                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFFFF,0xFFCD,
   1383          				 	
   1384          	/* ====================================================================== */
   1385          	/* RT2 "OWN ADDRESS" NON-BROADCAST TRANSMIT MODECODE & SUBADDRESS COMMANDS*/
   1386          	/* ====================================================================== */
   1387          	/*    Setting legal/illegal mode code commands for subaddresses           */
   1388          	/*    00 and 31. IMPORTANT: Must repeat values at both locations!         */
   1389          	/*                                                                        */
   1390          	/*    _________________ MC15 - MC12 Tx (reserved)                         */
   1391          	/*   |                                                                    */
   1392          	/*   |   ________________ MC11 Tx (reserved)                              */
   1393          	/*   |  |  _______________ MC10 Tx (reserved)                             */
   1394          	/*   |  | |  ______________ MC9 Tx (reserved)                             */
   1395          	/*   |  | | |  _____________ MC8 Tx (reset remote terminal)               */
   1396          	/*   |  | | | |                                                           */
   1397          	/*   |  | | | |   ____________ MC7 Tx (override inhibit term flag bit)    */
   1398          	/*   |  | | | |  |  ___________ MC6 Tx (inhibit term flag bit)            */
   1399          	/*   |  | | | |  | |  __________ MC5 Tx (override transmitter shutdown)   */
   1400          	/*   |  | | | |  | | |  _________ MC4 Tx (transmitter shutdown)           */
   1401          	/*   |  | | | |  | | | |                                                  */
   1402          	/*   |  | | | |  | | | |   _______ MC3 Tx (init self test) NOT IN DEMO PGM*/
   1403          	/*   |  | | | |  | | | |  |  ______ MC2 Tx (transmit status)              */
   1404          	/*   |  | | | |  | | | |  | |  _____ MC1 Tx (synchronize)                 */
   1405          	/*   |  | | | |  | | | |  | | |  ____ MC0 Tx (dyn bus control) CANNOT DO! */
   1406          	/*   |  | | | |  | | | |  | | | |                                         */
   1407          	/*   |  | | | |  | | | |  | | | |   __ MC31 - MC28 Tx (reserved)          */
   1408          	/*   |  | | | |  | | | |  | | | |  |  __ MC27 - MC24 Tx (reserved)        */
   1409          	/*   |  | | | |  | | | |  | | | |  | |  __ MC23-22 (res) & MC21-20 (undef)*/ 
   1410          	/*   |  | | | |  | | | |  | | | |  | | |                                  */
   1411          	/*   |  | | | |  | | | |  | | | |  | | |   ____ MC19 Tx (tx BIT word)     */
   1412          	/*   |  | | | |  | | | |  | | | |  | | |  |  ___ MC18 Tx (tx last command)*/
   1413          	/*   |  | | | |  | | | |  | | | |  | | |  | |  __ MC17 Tx (undefined)     */
   1414          	/*   |  | | | |  | | | |  | | | |  | | |  | | |  _ MC16 (tx vector word)  */
   1415          	/*   |  | | | |  | | | |  | | | |  | | |  | | | |                         */
   1416          	/*   |  1 1 1 0  0 0 0 0  1 0 0 1  | | |  0 0 1 0                         */
   1417          	/*   |  -------  -------  -------  | | |  -------                         */
   1418          	/*  0xF    E        0        9     F F F     2                            */
   1419          	/*                                                                        */
   1420          	/*  Own Address                                                           */
   1421          	/* Tx Subaddress -----00-----  -----01-----  -----02-----  -----03-----   */
   1422          	/*                 mode codes   word counts   word counts   word counts   */
   1423          	/*                Low    High   Low    High   Low    High   Low    High   */
   1424          	/*  RAM address  0x01C0 0x01C1 0x0102 0x01C3 0x01C4 0x01C5 0x01C6 0x01C7  */
   1425                                   0xFE09,0xFFF2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1426          	/*  Own Address                                                           */
   1427          	/* Tx Subaddress -----04-----  -----05-----  -----06-----  -----07-----   */
   1428          	/*                word counts   word counts   word counts   word counts   */
   1429          	/*                Low    High   Low    High   Low    High   Low    High   */
   1430          	/*  RAM address	 0x01C8 0x01C9 0x01CA 0x01CB 0x01CC 0x01CD 0x01CE 0x01CF  */
   1431                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1432          	/*  Own Address                                                           */
   1433          	/* Tx Subaddress -----08-----  -----09-----  -----10-----  -----11-----   */
   1434          	/*                word counts   word counts   word counts   word counts   */
   1435          	/*                Low    High   Low    High   Low    High   Low    High   */
   1436          	/*  RAM address	 0x01D0 0x01D1 0x01D2 0x01D3 0x01D4 0x01D5 0x01D6 0x01D7  */
   1437                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1438          	/*  Own Address                                                           */
   1439          	/* Tx Subaddress  -----12-----  -----13-----  -----14-----  -----15-----  */
   1440          	/*                word counts   word counts   word counts   word counts   */
   1441          	/*                Low    High   Low    High   Low    High   Low    High   */
   1442          	/*  RAM address	 0x01D8 0x01D9 0x01DA 0x01DB 0x01DC 0x01DD 0x01DE 0x01DF  */
   1443                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1444          	/*  Own Address                                                           */
   1445          	/* Tx Subaddress -----16-----  -----17-----  -----18-----  -----19-----   */
   1446          	/*                word counts   word counts   word counts   word counts   */
   1447          	/*                Low    High   Low    High   Low    High   Low    High   */
   1448          	/*  RAM address	 0x01E0 0x01E1 0x01E2 0x01E3 0x01E4 0x01E5 0x01E6 0x01E7  */
   1449                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1450          	/*  Own Address                                                           */
   1451          	/* Tx Subaddress -----20-----  -----21-----  -----22-----  -----23-----   */
   1452          	/*                word counts   word counts   word counts   word counts   */
   1453          	/*                Low    High   Low    High   Low    High   Low    High   */
   1454          	/*  RAM address	 0x01E8 0x01E9 0x01EA 0x01EB 0x01EC 0x01ED 0x01EE 0x01EF  */
   1455                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1456          	/*  Own Address                                                           */
   1457          	/* Tx Subaddress  -----24-----  -----25-----  -----26-----  -----27-----  */
   1458          	/*                word counts   word counts   word counts   word counts   */
   1459          	/*                Low    High   Low    High   Low    High   Low    High   */
   1460          	/*  RAM address	 0x01F0 0x01F1 0x01F2 0x01F3 0x01F4 0x01F5 0x01F6 0x01F7  */
   1461                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,	
   1462          	/*  Own Address                                             SA31 = SA0    */
   1463          	/* Tx Subaddress -----28-----  -----29-----  -----30-----  -----31-----   */
   1464          	/*                word counts   word counts   word counts   mode codes    */
   1465          	/*                Low    High   Low    High   Low    High   Low    High   */
   1466          	/*  RAM address	 0x01F8 0x01F9 0x01FA 0x01FB 0x01FC 0x01FD 0x01FE 0x01FF  */
   1467                                   0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xFE09,0xFFF2 };	
   \   00000014   00A8               ADD      R0,SP,#+0
   \   00000016   ........           LDR.W    R1,??DataTable7_17
   \   0000001A   4FF40072           MOV      R2,#+512
   \   0000001E   ........           BL       __aeabi_memcpy4
   1468          
   1469          	//  End of illegal_table[256] declaration 
   1470          
   1471          
   1472          	// ====================================================================================== 
   1473          
   1474            	// These parameters are defined in 613x_initialization.h
   1475          
   1476          	i = RTTO_15U|NOTICE2|TRXDB|AUTO_SHUTDN|AUTO_SYNC|MC16OPT|AUTO_MC8_RESET;
   \   00000022   4FF4A770           MOV      R0,#+334
   \   00000026   0600               MOVS     R6,R0
   1477          
   1478          	#if (!SUPPORT_BROADCAST)
   1479          	i |= BCASTINV;
   1480            	#endif
   1481          
   1482          
   1483          	#if (!UNDEF_MCODES_VALID)
   1484          	i |= UMCINV;
   1485            	#endif
   1486          
   1487          	#if (USE_SMCP)
   1488          	i |= SMCP;
   \   00000028   56F08006           ORRS     R6,R6,#0x80
   1489          	#endif
   1490          
   1491          	// HI-6130 uses host bus interface, HI-6131 uses host SPI interface. From 
   1492          	// here, we use bus interface to initialize HI-6130 registers and RAM tables,
   1493          	// or we use SPI to initialize HI-6131 registers and RAM tables       
   1494          
   1495          	// ====================================================================================== 
   1496          
   1497          
   1498          	    pH6130->RT2_CONFIG_REG = i;
   \   0000002C   ........           LDR.W    R0,??DataTable7_6
   \   00000030   0068               LDR      R0,[R0, #+0]
   \   00000032   A0F84060           STRH     R6,[R0, #+64]
   1499          
   1500          		// do not overwrite previously initialized common features 
   1501          		j = pH6130->MASTER_CONFIG_REG & ~(RT2STEX);
   \   00000036   ........           LDR.W    R0,??DataTable7_6
   \   0000003A   0068               LDR      R0,[R0, #+0]
   \   0000003C   0088               LDRH     R0,[R0, #+0]
   \   0000003E   4FF6DF71           MOVW     R1,#+65503
   \   00000042   0840               ANDS     R0,R1,R0
   \   00000044   0500               MOVS     R5,R0
   1502          
   1503          		// if "bus shutdown" mode codes 4 & 20 should disable Tx only but Rx still 
   1504          		// operates normally (NOT RECOMMENDED) then OR in BSDTXO, affecting RT1 & RT2:
   1505          	        pH6130->MASTER_CONFIG_REG = j|RT2ENA|BSDTXO; 
   \   00000046   55F08800           ORRS     R0,R5,#0x88
   \   0000004A   ........           LDR.W    R1,??DataTable7_6
   \   0000004E   0968               LDR      R1,[R1, #+0]
   \   00000050   0880               STRH     R0,[R1, #+0]
   1506          	        pH6130->MASTER_CONFIG_REG = j|RT2ENA;
   \   00000052   55F08000           ORRS     R0,R5,#0x80
   \   00000056   ........           LDR.W    R1,??DataTable7_6
   \   0000005A   0968               LDR      R1,[R1, #+0]
   \   0000005C   0880               STRH     R0,[R1, #+0]
   1507          
   1508          		j = pH6130->HDW_INT_ENABLE_REG & ~(RT2TTM);
   \   0000005E   ........           LDR.W    R0,??DataTable7_6
   \   00000062   0068               LDR      R0,[R0, #+0]
   \   00000064   C08B               LDRH     R0,[R0, #+30]
   \   00000066   4FF6FF61           MOVW     R1,#+65279
   \   0000006A   0840               ANDS     R0,R1,R0
   \   0000006C   0500               MOVS     R5,R0
   1509          		// enable RT2 address parity fail interrupt, but not time tag match interrupt 
   1510          	        pH6130->HDW_INT_ENABLE_REG = j|RT2APF;
   \   0000006E   ....               LDR.N    R0,??DataTable7_6
   \   00000070   0068               LDR      R0,[R0, #+0]
   \   00000072   55F01001           ORRS     R1,R5,#0x10
   \   00000076   C183               STRH     R1,[R0, #+30]
   1511          		
   1512          		j = pH6130->HDW_INT_OUTPUT_ENABLE_REG & ~(RT2TTM);
   \   00000078   ....               LDR.N    R0,??DataTable7_6
   \   0000007A   0068               LDR      R0,[R0, #+0]
   \   0000007C   C08C               LDRH     R0,[R0, #+38]
   \   0000007E   4FF6FF61           MOVW     R1,#+65279
   \   00000082   0840               ANDS     R0,R1,R0
   \   00000084   0500               MOVS     R5,R0
   1513          		// enable pin output for selected interrupts 
   1514          	        pH6130->HDW_INT_OUTPUT_ENABLE_REG = j|RT2APF;
   \   00000086   ....               LDR.N    R0,??DataTable7_6
   \   00000088   0068               LDR      R0,[R0, #+0]
   \   0000008A   55F01001           ORRS     R1,R5,#0x10
   \   0000008E   C184               STRH     R1,[R0, #+38]
   1515          		
   1516          		// for demo, mode code 8 (reset RT) is handled differently for RT1 and RT2.
   1517          		// When MC8 occurs for RT1, the RT1_MC8 interrupt is decoded by this program's
   1518          		// interrupt handler, which asserts RT1RESET in reg 0x0002. When MC8 occurs for 
   1519          		// RT2, that terminal is configured for AUTO_MC8_RESET to automatically assert 
   1520          		// the RT2RESET in reg 0x0002 without host intervention.  
   1521          		j = pH6130->RT_INT_ENABLE_REG & 0x01F8;
   \   00000090   ....               LDR.N    R0,??DataTable7_6
   \   00000092   0068               LDR      R0,[R0, #+0]
   \   00000094   808C               LDRH     R0,[R0, #+36]
   \   00000096   4FF4FC71           MOV      R1,#+504
   \   0000009A   0840               ANDS     R0,R1,R0
   \   0000009C   0500               MOVS     R5,R0
   1522          		// enable RT2 interrupts, but not the Message Error interrupt 
   1523          	        pH6130->RT_INT_ENABLE_REG = j|RT2_IXEQZ|RT2_IWA|RT2_IBR|RT2_MC8;
   \   0000009E   ....               LDR.N    R0,??DataTable7_6
   \   000000A0   0068               LDR      R0,[R0, #+0]
   \   000000A2   55F45441           ORRS     R1,R5,#0xD400
   \   000000A6   8184               STRH     R1,[R0, #+36]
   1524          
   1525          		j = pH6130->RT_INT_OUTPUT_ENABLE_REG & 0x01F8;
   \   000000A8   ....               LDR.N    R0,??DataTable7_6
   \   000000AA   0068               LDR      R0,[R0, #+0]
   \   000000AC   808D               LDRH     R0,[R0, #+44]
   \   000000AE   4FF4FC71           MOV      R1,#+504
   \   000000B2   0840               ANDS     R0,R1,R0
   \   000000B4   0500               MOVS     R5,R0
   1526          		// enable pin output for selected RT2 interrupts 
   1527          	        pH6130->RT_INT_OUTPUT_ENABLE_REG = j|RT2_IXEQZ|RT2_IWA|RT2_IBR|RT2_MC8;
   \   000000B6   ....               LDR.N    R0,??DataTable7_6
   \   000000B8   0068               LDR      R0,[R0, #+0]
   \   000000BA   55F45441           ORRS     R1,R5,#0xD400
   \   000000BE   8185               STRH     R1,[R0, #+44]
   1528          		
   1529          		pH6130->RT2_DESC_TBL_BASE_ADDR_REG = 0x0600; 
   \   000000C0   ....               LDR.N    R0,??DataTable7_6
   \   000000C2   0068               LDR      R0,[R0, #+0]
   \   000000C4   4FF4C061           MOV      R1,#+1536
   \   000000C8   A0F84410           STRH     R1,[R0, #+68]
   1530          		pH6130->RT2_1553_STATUS_BITS_REG = 0x0000;	 
   \   000000CC   ....               LDR.N    R0,??DataTable7_6
   \   000000CE   0068               LDR      R0,[R0, #+0]
   \   000000D0   0021               MOVS     R1,#+0
   \   000000D2   A0F84610           STRH     R1,[R0, #+70]
   1531          		pH6130->RT2_TTAG_UTILITY_REG = 0x0000;	 
   \   000000D6   ....               LDR.N    R0,??DataTable7_6
   \   000000D8   0068               LDR      R0,[R0, #+0]
   \   000000DA   0021               MOVS     R1,#+0
   \   000000DC   A0F89810           STRH     R1,[R0, #+152]
   1532          		pH6130->RT2_BUSA_SELECT_REG = 0xAAAA;		 
   \   000000E0   ....               LDR.N    R0,??DataTable7_6
   \   000000E2   0068               LDR      R0,[R0, #+0]
   \   000000E4   4AF6AA21           MOVW     R1,#+43690
   \   000000E8   A0F84A10           STRH     R1,[R0, #+74]
   1533          		pH6130->RT2_BUSB_SELECT_REG = 0xBBBB;		 
   \   000000EC   ....               LDR.N    R0,??DataTable7_6
   \   000000EE   0068               LDR      R0,[R0, #+0]
   \   000000F0   4BF6BB31           MOVW     R1,#+48059
   \   000000F4   A0F84C10           STRH     R1,[R0, #+76]
   1534          		pH6130->RT2_BIT_WORD_REG = 0x0000;			 
   \   000000F8   ....               LDR.N    R0,??DataTable7_6
   \   000000FA   0068               LDR      R0,[R0, #+0]
   \   000000FC   0021               MOVS     R1,#+0
   \   000000FE   A0F84E10           STRH     R1,[R0, #+78]
   1535          		pH6130->RT2_ALT_BIT_WORD_REG = 0xABCD;			 
   \   00000102   ....               LDR.N    R0,??DataTable7_6
   \   00000104   0068               LDR      R0,[R0, #+0]
   \   00000106   4AF6CD31           MOVW     R1,#+43981
   \   0000010A   A0F85010           STRH     R1,[R0, #+80]
   1536          
   1537          
   1538          		// load the RT2 Descriptor Table
   1539          		// Starting at the table base address written above, copy the RT2 Descriptor 
   1540          		// Table array (declared above) into HI-6130 RAM. 
   1541          		
   1542          		j = pH6130->RT2_DESC_TBL_BASE_ADDR_REG << 1;	// left-shift offset
   \   0000010E   ....               LDR.N    R0,??DataTable7_6
   \   00000110   0068               LDR      R0,[R0, #+0]
   \   00000112   B0F84400           LDRH     R0,[R0, #+68]
   \   00000116   4000               LSLS     R0,R0,#+1
   \   00000118   0500               MOVS     R5,R0
   1543          
   1544          		// If using simplified mode command processing (SMCP), the program is only 
   1545          		// required to initialize Descriptor Word 1 (Control Words) for each mode command 
   1546          		// in the 2nd half of the descriptor table. It is not necessary to initialize 
   1547          		// Descriptor Words 2,3,4 in the 2nd (mode code) half of the Descriptor Table.
   1548          		// THE FIRST HALF OF THE TABLE FOR SUBADDRESS COMMANDS MUST BE FULLY INITIALIZED.  
   1549          
   1550          		#if (USE_SMCP)
   1551          
   1552          			// in subaddress command half of table, every word is written 
   1553          			for ( i = 0, k = (0x60000000 + j); i < 256; i++) {
   \   0000011A   0020               MOVS     R0,#+0
   \   0000011C   0600               MOVS     R6,R0
   \   0000011E   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000120   15F1C040           ADDS     R0,R5,#+1610612736
   \   00000124   0400               MOVS     R4,R0
   \                     ??initialize_613x_RT2_0:
   \   00000126   4FF48070           MOV      R0,#+256
   \   0000012A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000012C   8642               CMP      R6,R0
   \   0000012E   07D2               BCS.N    ??initialize_613x_RT2_1
   1554          				*((volatile unsigned short *)(k)) = descr_table_RT2[i];
   \   00000130   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000132   80A8               ADD      R0,SP,#+512
   \   00000134   30F81600           LDRH     R0,[R0, R6, LSL #+1]
   \   00000138   2080               STRH     R0,[R4, #+0]
   1555          				k += 2;
   \   0000013A   A41C               ADDS     R4,R4,#+2
   1556          			}
   \   0000013C   761C               ADDS     R6,R6,#+1
   \   0000013E   F2E7               B.N      ??initialize_613x_RT2_0
   1557          			// in mode command half of table, just write Control Words, every 4th word 
   1558          			for ( ; i < 512; i++) {
   \                     ??initialize_613x_RT2_1:
   \   00000140   4FF40070           MOV      R0,#+512
   \   00000144   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000146   8642               CMP      R6,R0
   \   00000148   13D2               BCS.N    ??initialize_613x_RT2_2
   1559          				//  just write 4 host-maintained Control Word bits 
   1560          				*((volatile unsigned short *)(k)) = descr_table_RT2[i] & 0xF000; // desc word 1
   \   0000014A   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   0000014C   80A8               ADD      R0,SP,#+512
   \   0000014E   30F81600           LDRH     R0,[R0, R6, LSL #+1]
   \   00000152   10F47040           ANDS     R0,R0,#0xF000
   \   00000156   2080               STRH     R0,[R4, #+0]
   1561          				k += 2;
   \   00000158   A41C               ADDS     R4,R4,#+2
   1562          				*((volatile unsigned short *)(k)) = 0; // desc word 2 = 0
   \   0000015A   0020               MOVS     R0,#+0
   \   0000015C   2080               STRH     R0,[R4, #+0]
   1563          				k += 2;
   \   0000015E   A41C               ADDS     R4,R4,#+2
   1564          				*((volatile unsigned short *)(k)) = 0; // desc word 3 = 0
   \   00000160   0020               MOVS     R0,#+0
   \   00000162   2080               STRH     R0,[R4, #+0]
   1565          				k += 2;
   \   00000164   A41C               ADDS     R4,R4,#+2
   1566          				*((volatile unsigned short *)(k)) = 0; // desc word 4 = 0
   \   00000166   0020               MOVS     R0,#+0
   \   00000168   2080               STRH     R0,[R4, #+0]
   1567          				k += 2;
   \   0000016A   A41C               ADDS     R4,R4,#+2
   1568          				i += 3;
   \   0000016C   F61C               ADDS     R6,R6,#+3
   1569          			}		
   \   0000016E   761C               ADDS     R6,R6,#+1
   \   00000170   E6E7               B.N      ??initialize_613x_RT2_1
   1570          
   1571          		#else // not using SMCP
   1572          
   1573          			// every word in table is written 
   1574          			for ( i = 0, k = (0x60000000 + j); i < 512; i++) {
   1575          				*((volatile unsigned short *)(k)) = descr_table_RT2[i];
   1576          				k += 2;
   1577          			}
   1578          
   1579          		#endif
   1580          
   1581          
   1582          
   1583          		#if (ILLEGAL_CMD_DETECT)
   1584          			// copy the Illegalization Table array 
   1585          			// (declared above) into the HI-6130 RAM for RT2 
   1586          
   1587          			// write address k starts at table base address 
   1588                                  k = 0x60000000 + (RT2_ILLEGAL_TABLE_BASE_ADDR << 1);
   \                     ??initialize_613x_RT2_2:
   \   00000172   ....               LDR.N    R0,??DataTable7_18  ;; 0x60000600
   \   00000174   0400               MOVS     R4,R0
   1589                                  
   1590          			for ( i = 0; i < 256; i++) {	
   \   00000176   0020               MOVS     R0,#+0
   \   00000178   0600               MOVS     R6,R0
   \                     ??initialize_613x_RT2_3:
   \   0000017A   4FF48070           MOV      R0,#+256
   \   0000017E   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000180   8642               CMP      R6,R0
   \   00000182   07D2               BCS.N    ??initialize_613x_RT2_4
   1591          				*((volatile unsigned short *)(k)) = illegal_table[i];
   \   00000184   B6B2               UXTH     R6,R6            ;; ZeroExt  R6,R6,#+16,#+16
   \   00000186   00A8               ADD      R0,SP,#+0
   \   00000188   30F81600           LDRH     R0,[R0, R6, LSL #+1]
   \   0000018C   2080               STRH     R0,[R4, #+0]
   1592          				k += 2;
   \   0000018E   A41C               ADDS     R4,R4,#+2
   1593          			}
   \   00000190   761C               ADDS     R6,R6,#+1
   \   00000192   F2E7               B.N      ??initialize_613x_RT2_3
   1594          
   1595          		#endif // (ILLEGAL_CMD_DETECT)
   1596          
   1597          	// ====================================================================================== 
   1598          
   1599                                  
   1600          }	// initialize_613x_RT2()
   \                     ??initialize_613x_RT2_4:
   \   00000194   0DF5C06D           ADD      SP,SP,#+1536
   \   00000198   70BD               POP      {R4-R6,PC}       ;; return
   1601          
   1602          
   1603          
   1604          
   1605          
   1606          // 	This function loads dummy data into the limited set of RT2 transmit buffers 
   1607          //	assigned above during initialization. This is only used for testing.
   1608           

   \                                 In section .text, align 2, keep-with-next
   1609          void write_dummy_tx_data_RT2(void) {
   \                     write_dummy_tx_data_RT2:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   A0B0               SUB      SP,SP,#+128
   1610          	
   1611          	unsigned short i, j;
   1612          	unsigned short a_data[32] = {0x0101,0x0202,0x0303,0x0404,0x0505,0x0606,0x0707,0x0808,
   1613          				     0x0909,0x1010,0x1111,0x1212,0x1313,0x1414,0x1515,0x1616,
   1614          				     0x1717,0x1818,0x1919,0x2020,0x2121,0x2222,0x2323,0x2424,
   1615          				     0x2525,0x2626,0x2727,0x2828,0x2929,0x3030,0x3131,0x3232};
   \   00000004   10A8               ADD      R0,SP,#+64
   \   00000006   ....               LDR.N    R1,??DataTable7_19
   \   00000008   4022               MOVS     R2,#+64
   \   0000000A   ........           BL       __aeabi_memcpy4
   1616          
   1617          	unsigned short b_data[32] = {0xF001,0xF002,0xF003,0xF004,0xF005,0xF006,0xF007,0xF008,
   1618          				     0xF009,0xF00A,0xF00B,0xF00C,0xF00D,0xF00E,0xF00F,0xF010,
   1619          				     0xF011,0xF012,0xF013,0xF014,0xF015,0xF016,0xF017,0xF018,
   1620          				     0xF019,0xF01A,0xF01B,0xF01C,0xF01D,0xF01E,0xF01F,0xF020};
   \   0000000E   00A8               ADD      R0,SP,#+0
   \   00000010   ....               LDR.N    R1,??DataTable7_20
   \   00000012   4022               MOVS     R2,#+64
   \   00000014   ........           BL       __aeabi_memcpy4
   1621          
   1622          
   1623                          unsigned int k;
   1624          
   1625          		// FOR TESTING PING-PONG, A PAIR OF DPA/DPB Tx BUFFERS: EACH BUFFER RESERVES
   1626                          // SPACE FOR MSG INFO WORD AND TIME TAG WORD, PLUS 32 DATA WORDS 
   1627          	
   1628          		// first a 32-word buffer starting at offset = 0x4066 
   1629          		k = (0x60000000 + (0x4066 << 1));
   \   00000018   ....               LDR.N    R1,??DataTable7_21  ;; 0x600080cc
   \   0000001A   0800               MOVS     R0,R1
   1630          		// skip 2 addresses for MsgInfo Word and TimeTag word
   1631          		k = k + 4;
   \   0000001C   001D               ADDS     R0,R0,#+4
   1632          		// write the 32 data words...
   1633          		for ( i = 0; i < 32; i++) {	
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT2_0:
   \   00000022   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000024   202D               CMP      R5,#+32
   \   00000026   07D2               BCS.N    ??write_dummy_tx_data_RT2_1
   1634          			*((volatile unsigned short *)(k)) = a_data[i];
   \   00000028   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000002A   10A9               ADD      R1,SP,#+64
   \   0000002C   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   00000030   0180               STRH     R1,[R0, #+0]
   1635          			k = k + 2;
   \   00000032   801C               ADDS     R0,R0,#+2
   1636          		}
   \   00000034   6D1C               ADDS     R5,R5,#+1
   \   00000036   F4E7               B.N      ??write_dummy_tx_data_RT2_0
   1637          		
   1638          		// next a 32-word buffer starting at offset = 0x4088 
   1639          		k = (0x60000000 + (0x4088 << 1));
   \                     ??write_dummy_tx_data_RT2_1:
   \   00000038   ....               LDR.N    R1,??DataTable7_22  ;; 0x60008110
   \   0000003A   0800               MOVS     R0,R1
   1640          		// skip 2 addresses for MsgInfo Word and TimeTag word
   1641          		k = k + 4;
   \   0000003C   001D               ADDS     R0,R0,#+4
   1642          		// write the 32 data words...
   1643          		for ( i = 0; i < 32; i++) {	
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT2_2:
   \   00000042   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000044   202D               CMP      R5,#+32
   \   00000046   07D2               BCS.N    ??write_dummy_tx_data_RT2_3
   1644          			*((volatile unsigned short *)(k)) = b_data[i];
   \   00000048   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000004A   00A9               ADD      R1,SP,#+0
   \   0000004C   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   00000050   0180               STRH     R1,[R0, #+0]
   1645          			k = k + 2;
   \   00000052   801C               ADDS     R0,R0,#+2
   1646          		}
   \   00000054   6D1C               ADDS     R5,R5,#+1
   \   00000056   F4E7               B.N      ??write_dummy_tx_data_RT2_2
   1647          
   1648          		// ================================================================================= 
   1649          
   1650          		// FOR TESTING INDEXED MODE, A BUFFER THAT HOLDS 32 32-WORD MESSAGES,
   1651          		// REQUIRING INTERLACED MSG INFO AND TIME TAG WORDS FOR EACH MESSAGE 
   1652          
   1653          		// total 1088-word buffer starting at offset = 0x4532 
   1654          		// this is 32 contiguous segments of 34 words each, 
   1655          		k = (0x60000000 + (0x4532 << 1));
   \                     ??write_dummy_tx_data_RT2_3:
   \   00000058   ....               LDR.N    R1,??DataTable7_23  ;; 0x60008a64
   \   0000005A   0800               MOVS     R0,R1
   1656          		for ( j = 0; j < 32; j++) {
   \   0000005C   0021               MOVS     R1,#+0
   \   0000005E   0C00               MOVS     R4,R1
   \                     ??write_dummy_tx_data_RT2_4:
   \   00000060   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000062   202C               CMP      R4,#+32
   \   00000064   0FD2               BCS.N    ??write_dummy_tx_data_RT2_5
   1657          			// skip 2 addresses at top of 32-word segment for MsgInfo Word and TimeTag word
   1658          			k = k + 4; 
   \   00000066   001D               ADDS     R0,R0,#+4
   1659          			// write the 32 data words...					
   1660          			for ( i = 0; i < 32; i++) {	
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT2_6:
   \   0000006C   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000006E   202D               CMP      R5,#+32
   \   00000070   07D2               BCS.N    ??write_dummy_tx_data_RT2_7
   1661          				*((volatile unsigned short *)(k)) = b_data[i];
   \   00000072   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000074   00A9               ADD      R1,SP,#+0
   \   00000076   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   0000007A   0180               STRH     R1,[R0, #+0]
   1662          				k = k + 2;
   \   0000007C   801C               ADDS     R0,R0,#+2
   1663          			}
   \   0000007E   6D1C               ADDS     R5,R5,#+1
   \   00000080   F4E7               B.N      ??write_dummy_tx_data_RT2_6
   1664          		}
   \                     ??write_dummy_tx_data_RT2_7:
   \   00000082   641C               ADDS     R4,R4,#+1
   \   00000084   ECE7               B.N      ??write_dummy_tx_data_RT2_4
   1665          
   1666          		// ================================================================================= 
   1667          
   1668          		// FOR TESTING CIRCULAR MODE 1, A BUFFER THAT HOLDS 32 32-WORD MESSAGES,
   1669          		// REQUIRING INTERLACED MSG INFO AND TIME TAG WORDS FOR EACH MESSAGE  
   1670          
   1671          		// total 1088-word buffer starting at offset = 0x4DD6 
   1672          		// this is 32 contiguous segments of 34 words each, 
   1673          		k = (0x60000000 + (0x4DD6 << 1));
   \                     ??write_dummy_tx_data_RT2_5:
   \   00000086   ....               LDR.N    R1,??DataTable7_24  ;; 0x60009bac
   \   00000088   0800               MOVS     R0,R1
   1674          		for ( j = 0; j < 32; j++) {
   \   0000008A   0021               MOVS     R1,#+0
   \   0000008C   0C00               MOVS     R4,R1
   \                     ??write_dummy_tx_data_RT2_8:
   \   0000008E   A4B2               UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000090   202C               CMP      R4,#+32
   \   00000092   0FD2               BCS.N    ??write_dummy_tx_data_RT2_9
   1675          			// skip 2 addresses at top of 32-word segment for MsgInfo Word and TimeTag word
   1676          			k = k + 4; 
   \   00000094   001D               ADDS     R0,R0,#+4
   1677          			// write the 32 data words...					
   1678          			for ( i = 0; i < 32; i++) {	
   \   00000096   0021               MOVS     R1,#+0
   \   00000098   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT2_10:
   \   0000009A   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000009C   202D               CMP      R5,#+32
   \   0000009E   07D2               BCS.N    ??write_dummy_tx_data_RT2_11
   1679          				*((volatile unsigned short *)(k)) = a_data[i];
   \   000000A0   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000A2   10A9               ADD      R1,SP,#+64
   \   000000A4   31F81510           LDRH     R1,[R1, R5, LSL #+1]
   \   000000A8   0180               STRH     R1,[R0, #+0]
   1680          				k = k + 2;
   \   000000AA   801C               ADDS     R0,R0,#+2
   1681          			}
   \   000000AC   6D1C               ADDS     R5,R5,#+1
   \   000000AE   F4E7               B.N      ??write_dummy_tx_data_RT2_10
   1682          		}
   \                     ??write_dummy_tx_data_RT2_11:
   \   000000B0   641C               ADDS     R4,R4,#+1
   \   000000B2   ECE7               B.N      ??write_dummy_tx_data_RT2_8
   1683          		// follow with a 32-word safety pad in case of circ-1 buffer overrun
   1684          		for ( i = 0; i < 32; i++) {	
   \                     ??write_dummy_tx_data_RT2_9:
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT2_12:
   \   000000B8   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000BA   202D               CMP      R5,#+32
   \   000000BC   05D2               BCS.N    ??write_dummy_tx_data_RT2_13
   1685          			*((volatile unsigned short *)(k)) = 0xBADD;
   \   000000BE   4BF6DD21           MOVW     R1,#+47837
   \   000000C2   0180               STRH     R1,[R0, #+0]
   1686          			k = k + 2;
   \   000000C4   801C               ADDS     R0,R0,#+2
   1687          		}
   \   000000C6   6D1C               ADDS     R5,R5,#+1
   \   000000C8   F6E7               B.N      ??write_dummy_tx_data_RT2_12
   1688          		
   1689          		// ================================================================================= 
   1690          	
   1691          		// FOR TESTING CIRCULAR MODE 2, A CONTIGUOUS 32 X 32-WORD DATA BLOCK 
   1692          	
   1693          		// total 8192-word buffer with offset range from 0x5600 to 0x75FF 
   1694          		k = (0x60000000 + (0x5600 << 1));
   \                     ??write_dummy_tx_data_RT2_13:
   \   000000CA   ....               LDR.N    R1,??DataTable7_25  ;; 0x6000ac00
   \   000000CC   0800               MOVS     R0,R1
   1695          		// write the 8192 data words using incrementing data pattern...
   1696          		for ( i = 0, j = 0; i < 8192; i++, j++) {	
   \   000000CE   0021               MOVS     R1,#+0
   \   000000D0   0D00               MOVS     R5,R1
   \   000000D2   0021               MOVS     R1,#+0
   \   000000D4   0C00               MOVS     R4,R1
   \                     ??write_dummy_tx_data_RT2_14:
   \   000000D6   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000D8   B5F5005F           CMP      R5,#+8192
   \   000000DC   04D2               BCS.N    ??write_dummy_tx_data_RT2_15
   1697          			*((volatile unsigned short *)(k)) = j;
   \   000000DE   0480               STRH     R4,[R0, #+0]
   1698          			k = k + 2;
   \   000000E0   801C               ADDS     R0,R0,#+2
   1699          		}
   \   000000E2   6D1C               ADDS     R5,R5,#+1
   \   000000E4   641C               ADDS     R4,R4,#+1
   \   000000E6   F6E7               B.N      ??write_dummy_tx_data_RT2_14
   1700          	
   1701          		// ================================================================================= 
   1702          
   1703          		// for unimplemented transmit SA's. a 32-word buffer starting at offset = 0x5258 
   1704          		k = (0x60000000 + (0x5258 << 1));
   \                     ??write_dummy_tx_data_RT2_15:
   \   000000E8   ....               LDR.N    R1,??DataTable7_26  ;; 0x6000a4b0
   \   000000EA   0800               MOVS     R0,R1
   1705          		// skip 2 addresses for MsgInfo Word and TimeTag word
   1706          		k = k + 4;
   \   000000EC   001D               ADDS     R0,R0,#+4
   1707          		// write the 32 data words...
   1708          		for ( i = 0; i < 32; i++) {	
   \   000000EE   0021               MOVS     R1,#+0
   \   000000F0   0D00               MOVS     R5,R1
   \                     ??write_dummy_tx_data_RT2_16:
   \   000000F2   ADB2               UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   000000F4   202D               CMP      R5,#+32
   \   000000F6   05D2               BCS.N    ??write_dummy_tx_data_RT2_17
   1709          			*((volatile unsigned short *)(k)) = 0xDEAD;
   \   000000F8   4DF6AD61           MOVW     R1,#+57005
   \   000000FC   0180               STRH     R1,[R0, #+0]
   1710          			k = k + 2;
   \   000000FE   801C               ADDS     R0,R0,#+2
   1711          		}
   \   00000100   6D1C               ADDS     R5,R5,#+1
   \   00000102   F6E7               B.N      ??write_dummy_tx_data_RT2_16
   1712          
   1713          	
   1714                          
   1715          }	// end write_dummy_tx_data_RT2()
   \                     ??write_dummy_tx_data_RT2_17:
   \   00000104   20B0               ADD      SP,SP,#+128
   \   00000106   30BD               POP      {R4,R5,PC}       ;; return
   1716          
   1717          
   1718          
   1719          #endif	  //------------ END RT2 ENABLED ------------
   1720          
   1721          // 	This function determines whether Op Status register indicates 
   1722          //	RT address parity error/fail (RTAPF). If parity error, a local
   1723          //	error trap executes until reset (no return to calling function).
   1724          //	If RT address in Op Status register does not have parity error,
   1725          //      function returns "1" to calling routine.
   1726          //
   1727          //	parameter indicates "1" or "2" for RT1 or RT2. 
   1728          //	other parameter values = invalid, local error trap
   1729           

   \                                 In section .text, align 2, keep-with-next
   1730          char RTAddr_okay(char RTnum) {
   \                     RTAddr_okay:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0400               MOVS     R4,R0
   1731          
   1732          	unsigned short k,j;
   1733          
   1734          	if ((!RTnum)||(RTnum > 2))  error_trap(2); // invalid parameter
   \   00000004   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   002C               CMP      R4,#+0
   \   00000008   02D0               BEQ.N    ??RTAddr_okay_0
   \   0000000A   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000000C   032C               CMP      R4,#+3
   \   0000000E   02D3               BCC.N    ??RTAddr_okay_1
   \                     ??RTAddr_okay_0:
   \   00000010   0220               MOVS     R0,#+2
   \   00000012   ........           BL       error_trap
   1735          
   1736          	// Check whether Operational Status register indicates RT 
   1737          	// address parity error
   1738          
   1739          
   1740          	    k = pH6130->HDW_PENDING_INT_REG;
   \                     ??RTAddr_okay_1:
   \   00000016   ....               LDR.N    R0,??DataTable7_6
   \   00000018   0068               LDR      R0,[R0, #+0]
   \   0000001A   8089               LDRH     R0,[R0, #+12]
   \   0000001C   0500               MOVS     R5,R0
   1741          
   1742          
   1743          	// register bits 4-3 are RT2APF-RT1APF 
   1744                  j = RTnum << 4 ;
   \   0000001E   E4B2               UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000020   2001               LSLS     R0,R4,#+4
   \   00000022   0600               MOVS     R6,R0
   1745          	if (k & j) {
   \   00000024   2800               MOVS     R0,R5
   \   00000026   80B2               UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000028   3042               TST      R0,R6
   \   0000002A   04D0               BEQ.N    ??RTAddr_okay_2
   1746          
   1747          		/* The active RT address is found in the Operational Status register.
   1748          		Check register here for parity error; if yes, a perpetual "error trap". 
   1749          		is executed. There are four ways parity error can occur:
   1750          		a) If AUTOEN pin = 0 (no auto-initialization), the DIP switch setting 
   1751          		   on the board has parity error.
   1752          		b) If AUTOEN pin = LOCK pin = 1 the DIP switch RT address applies but
   1753          		   the switch setting has parity error. Coming out of reset, the DIP 
   1754          		   switch RT address and parity were latched into the Op Status register.
   1755          		   along with the LOCK bit. When auto-initialize followed, LOCK prevented
   1756          		   overwrite of the register with the EEPROM value for reg 0x2.
   1757          		c) If AUTOEN pin = 1 and LOCK pin = 0, when coming out of reset, the DIP 
   1758          		   switch RT address was latched into the Op Status register.
   1759          		   along with the LOCK bit. When auto-initialize followed, the register
   1760          		   was overwritten with the EEPROM value for reg 0x2. The stored EEPROM 
   1761          		   value for register 0x2 has parity error!
   1762          		d) If the Op Status register LOCK bit equals 0, the host may have 
   1763          		   written an RT address with parity error.
   1764          		For all 4 cases, perpetual red LED double-blink until reset occurs */
   1765          		error_trap(2);	
   \   0000002C   0220               MOVS     R0,#+2
   \   0000002E   ........           BL       error_trap
   1766          
   1767          		return 0;	// execution will not get here
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   00E0               B.N      ??RTAddr_okay_3
   1768          	}
   1769          
   1770          	else return 1;
   \                     ??RTAddr_okay_2:
   \   00000036   0120               MOVS     R0,#+1
   \                     ??RTAddr_okay_3:
   \   00000038   70BD               POP      {R4-R6,PC}       ;; return
   1771          }
   1772          
   1773          
   1774          
   1775          
   1776          //
   1777          //      The next function polls pushbutton SW1 to detect user request for status flag update.	
   1778          //      It reads BUSYBIT and TFLAG DIP switches, then updates "1553 Status Word Bits Register"
   1779          // 	*  if (BUSYBIT switch = 1) THEN (set BUSY bit), ELSE (reset BUSY bit)
   1780          //	*  if (TFLAG switch = 1) THEN (set TERMFLAG bit), ELSE (reset TERMFLAG bit)
   1781          //	Note: The SSYSF (Subsystem Fail) DIP switch is directly wired to HI-613x SSYSF input pin
   1782          //	so no button press is required to change this status bit.
   1783          //
   1784          //	primary purpose: during RT validation tests, it is desirable to have a simple way
   1785          //	to set/reset these status bits
   1786          // 

   \                                 In section .text, align 2, keep-with-next
   1787          void modify_RT_status_bits(void) {
   \                     modify_RT_status_bits:
   \   00000000   00B5               PUSH     {LR}
   \   00000002   89B0               SUB      SP,SP,#+36
   1788            
   1789                  const Pin pinNSW1 = PIN_NSW1;
   \   00000004   00A8               ADD      R0,SP,#+0
   \   00000006   ....               LDR.N    R1,??DataTable7_27
   \   00000008   2022               MOVS     R2,#+32
   \   0000000A   ........           BL       __aeabi_memcpy4
   1790          
   1791          	// SW1 was pressed before this function call 
   1792          	// turn on green LED 
   1793          	AT91C_BASE_PIOA->PIO_CODR = nLEDG;
   \   0000000E   ....               LDR.N    R0,??DataTable7_28  ;; 0x400e0c34
   \   00000010   5FF00051           MOVS     R1,#+536870912
   \   00000014   0160               STR      R1,[R0, #+0]
   1794          
   1795          	// wait for button release
   1796          	while (!PIO_Get(&pinNSW1));
   \                     ??modify_RT_status_bits_0:
   \   00000016   00A8               ADD      R0,SP,#+0
   \   00000018   ........           BL       PIO_Get
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   FAD0               BEQ.N    ??modify_RT_status_bits_0
   1797          
   1798          	// update the RT1 AND RT2 Status Word Bits registers based on DIP switch
   1799          	RTstatusUpdate();
   \   00000020   ........           BL       RTstatusUpdate
   1800          
   1801          	// debounce delay then turn off green LED
   1802          	Delay_x100ms(4);
   \   00000024   0420               MOVS     R0,#+4
   \   00000026   ........           BL       Delay_x100ms
   1803          	AT91C_BASE_PIOA->PIO_SODR = nLEDG;
   \   0000002A   ....               LDR.N    R0,??DataTable7_29  ;; 0x400e0c30
   \   0000002C   5FF00051           MOVS     R1,#+536870912
   \   00000030   0160               STR      R1,[R0, #+0]
   1804          }
   \   00000032   09B0               ADD      SP,SP,#+36
   \   00000034   00BD               POP      {PC}             ;; return
   1805          
   1806          
   1807          //
   1808          //      The next function tests RT1 and RT2 BUSYBIT and TFLAG DIP switch settings,
   1809          //	then updates the HI-613X RT1 and RT2 "1553 Status Word Bits Registers"
   1810          //	IF (BUSYBIT switch = 1) THEN (set BUSY bit), ELSE (reset BUSY bit)
   1811          //	IF (TFLAG switch = 1) THEN (set TERMFLAG bit), ELSE (reset TERMFLAG bit)
   1812          //
   1813          //

   \                                 In section .text, align 2, keep-with-next
   1814          void RTstatusUpdate(void) {
   \                     RTstatusUpdate:
   \   00000000   30B5               PUSH     {R4,R5,LR}
   \   00000002   A1B0               SUB      SP,SP,#+132
   1815          
   1816          	unsigned short out_rt1,out_rt2;
   1817                  const Pin pinRT1TFLG = PIN_RT1TFLG;
   \   00000004   18A8               ADD      R0,SP,#+96
   \   00000006   ....               LDR.N    R1,??DataTable7_30
   \   00000008   2022               MOVS     R2,#+32
   \   0000000A   ........           BL       __aeabi_memcpy4
   1818                  const Pin pinRT1BSY  = PIN_RT1BSY;
   \   0000000E   10A8               ADD      R0,SP,#+64
   \   00000010   ....               LDR.N    R1,??DataTable7_31
   \   00000012   2022               MOVS     R2,#+32
   \   00000014   ........           BL       __aeabi_memcpy4
   1819                  const Pin pinRT2TFLG = PIN_RT2TFLG;
   \   00000018   08A8               ADD      R0,SP,#+32
   \   0000001A   ....               LDR.N    R1,??DataTable7_32
   \   0000001C   2022               MOVS     R2,#+32
   \   0000001E   ........           BL       __aeabi_memcpy4
   1820                  const Pin pinRT2BSY  = PIN_RT2BSY;        
   \   00000022   00A8               ADD      R0,SP,#+0
   \   00000024   ....               LDR.N    R1,??DataTable7_33
   \   00000026   2022               MOVS     R2,#+32
   \   00000028   ........           BL       __aeabi_memcpy4
   1821                 
   1822          	    out_rt1 = pH6130->RT1_1553_STATUS_BITS_REG & ~(BUSY|TERMFLAG);
   \   0000002C   ....               LDR.N    R0,??DataTable7_6
   \   0000002E   0068               LDR      R0,[R0, #+0]
   \   00000030   808E               LDRH     R0,[R0, #+52]
   \   00000032   4FF6F671           MOVW     R1,#+65526
   \   00000036   0840               ANDS     R0,R1,R0
   \   00000038   0400               MOVS     R4,R0
   1823                	    out_rt2 = pH6130->RT2_1553_STATUS_BITS_REG & ~(BUSY|TERMFLAG);
   \   0000003A   ....               LDR.N    R0,??DataTable7_6
   \   0000003C   0068               LDR      R0,[R0, #+0]
   \   0000003E   B0F84600           LDRH     R0,[R0, #+70]
   \   00000042   4FF6F671           MOVW     R1,#+65526
   \   00000046   0840               ANDS     R0,R1,R0
   \   00000048   0500               MOVS     R5,R0
   1824          
   1825                  
   1826          	// set BUSY status bit if "BUSYBIT" switch is high, else reset bit.	        
   1827                  if(PIO_Get(&pinRT1BSY)) out_rt1 |= BUSY;
   \   0000004A   10A8               ADD      R0,SP,#+64
   \   0000004C   ........           BL       PIO_Get
   \   00000050   0028               CMP      R0,#+0
   \   00000052   01D0               BEQ.N    ??RTstatusUpdate_0
   \   00000054   54F00804           ORRS     R4,R4,#0x8
   1828                  if(PIO_Get(&pinRT2BSY)) out_rt2 |= BUSY;
   \                     ??RTstatusUpdate_0:
   \   00000058   00A8               ADD      R0,SP,#+0
   \   0000005A   ........           BL       PIO_Get
   \   0000005E   0028               CMP      R0,#+0
   \   00000060   01D0               BEQ.N    ??RTstatusUpdate_1
   \   00000062   55F00805           ORRS     R5,R5,#0x8
   1829          	// set Terminal Flag (TERMFLAG) status bit if "TFLAG" switch is high, else reset bit.	
   1830          	if(PIO_Get(&pinRT1TFLG)) out_rt1 |= TERMFLAG;
   \                     ??RTstatusUpdate_1:
   \   00000066   18A8               ADD      R0,SP,#+96
   \   00000068   ........           BL       PIO_Get
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   01D0               BEQ.N    ??RTstatusUpdate_2
   \   00000070   54F00104           ORRS     R4,R4,#0x1
   1831          	if(PIO_Get(&pinRT2TFLG)) out_rt2 |= TERMFLAG;
   \                     ??RTstatusUpdate_2:
   \   00000074   08A8               ADD      R0,SP,#+32
   \   00000076   ........           BL       PIO_Get
   \   0000007A   0028               CMP      R0,#+0
   \   0000007C   01D0               BEQ.N    ??RTstatusUpdate_3
   \   0000007E   55F00105           ORRS     R5,R5,#0x1
   1832          
   1833          	///#if (HOST_BUS_INTERFACE)
   1834          	    pH6130->RT1_1553_STATUS_BITS_REG = out_rt1;
   \                     ??RTstatusUpdate_3:
   \   00000082   ....               LDR.N    R0,??DataTable7_6
   \   00000084   0068               LDR      R0,[R0, #+0]
   \   00000086   8486               STRH     R4,[R0, #+52]
   1835          	    pH6130->RT2_1553_STATUS_BITS_REG = out_rt2;
   \   00000088   ....               LDR.N    R0,??DataTable7_6
   \   0000008A   0068               LDR      R0,[R0, #+0]
   \   0000008C   A0F84650           STRH     R5,[R0, #+70]
   1836          
   1837                      
   1838          }  // end RTstatusUpdate()
   \   00000090   21B0               ADD      SP,SP,#+132
   \   00000092   30BD               POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     pRT1i

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   ........           DC32     pRT2i

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   ........           DC32     pRT1d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   ........           DC32     pRT2d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   ........           DC32     `?<Constant {57005, 57005, 57005, 57005, 4, 204`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   ........           DC32     `?<Constant {65535, 65485, 0, 0, 0, 0, 0, 0, 0,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   ........           DC32     pH6130

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   00040060           DC32     0x60000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   ........           DC32     `?<Constant {257, 514, 771, 1028, 1285, 1542, 1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   ........           DC32     `?<Constant {61441, 61442, 61443, 61444, 61445,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   CC100060           DC32     0x600010cc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   10110060           DC32     0x60001110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   641A0060           DC32     0x60001a64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   AC2B0060           DC32     0x60002bac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   003C0060           DC32     0x60003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   B0340060           DC32     0x600034b0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   ........           DC32     `?<Constant {57005, 57005, 57005, 57005, 4, 204_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   ........           DC32     `?<Constant {65535, 65485, 0, 0, 0, 0, 0, 0, 0,_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   00060060           DC32     0x60000600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   ........           DC32     `?<Constant {257, 514, 771, 1028, 1285, 1542, 1_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   ........           DC32     `?<Constant {61441, 61442, 61443, 61444, 61445,_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   CC800060           DC32     0x600080cc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   10810060           DC32     0x60008110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_23:
   \   00000000   648A0060           DC32     0x60008a64

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_24:
   \   00000000   AC9B0060           DC32     0x60009bac

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_25:
   \   00000000   00AC0060           DC32     0x6000ac00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_26:
   \   00000000   B0A40060           DC32     0x6000a4b0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_27:
   \   00000000   ........           DC32     `?<Constant {131072, (AT91S_PIO *)1074662912, 1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_28:
   \   00000000   340C0E40           DC32     0x400e0c34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_29:
   \   00000000   300C0E40           DC32     0x400e0c30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_30:
   \   00000000   ........           DC32     `?<Constant {4096, (AT91S_PIO *)1074663424, 12,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_31:
   \   00000000   ........           DC32     `?<Constant {8192, (AT91S_PIO *)1074663424, 12,`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_32:
   \   00000000   ........           DC32     `?<Constant {16384, (AT91S_PIO *)1074663424, 12`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_33:
   \   00000000   ........           DC32     `?<Constant {32768, (AT91S_PIO *)1074663424, 12`

   \                                 In section .rodata, align 4
   \                     `?<Constant {57005, 57005, 57005, 57005, 4, 204`:
   \   00000000   ADDEADDEADDE       DC16 57005, 57005, 57005, 57005, 4, 2048, 2082, 2116, 32768, 2560, 32
   \              ADDE04000008
   \              220844080080
   \              000A2000    
   \   00000016   100D01807611       DC16 3344, 32769, 4470, 4470, 5558, 32834, 7680, 7680, 7168, 0, 6710, 0
   \              7611B6154280
   \              001E001E001C
   \              0000361A0000
   \   0000002E   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   0000004A   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   00000066   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   00000082   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   0000009E   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   000000BA   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   000000D6   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 16384
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0040    
   \   000000F2   AE080000AE08       DC16 2222, 0, 2222, 57005, 57005, 57005, 57005, 57005, 57005, 57005
   \              ADDEADDEADDE
   \              ADDEADDEADDE
   \              ADDE        
   \   00000106   ADDE04006608       DC16 57005, 4, 2150, 2184, 2218, 32768, 3378, 32, 4466, 32769, 5590
   \              8808AA080080
   \              320D20007211
   \              0180D615    
   \   0000011C   D615161A5280       DC16 5590, 6678, 32850, 7680, 7680, 7168, 0, 6744, 0, 6744, 0, 6744, 0
   \              001E001E001C
   \              0000581A0000
   \              581A0000581A
   \              0000        
   \   00000136   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   00000152   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   0000016E   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   0000018A   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   000001A6   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   000001C2   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   000001DE   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 2222, 0, 2222, 57005
   \              0000581A0000
   \              581A0000581A
   \              0000AE080000
   \              AE08ADDE    
   \   000001FA   ADDEADDEADDE       DC16 57005, 57005, 57005, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A        
   \   00000214   00007A1A0000       DC16 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \   00000232   7A1A00007A1A       DC16 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A0000    
   \   0000024E   7A1A00007A1A       DC16 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A0000    
   \   0000026A   7A1A00007A1A       DC16 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6782, 0
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7E1A0000    
   \   00000286   7E1A0400E41A       DC16 6782, 4, 6884, 6888, 6892, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 4
   \              E81AEC1A0000
   \              7E1A00007E1A
   \              00007E1A0000
   \              7E1A0400    
   \   000002A2   F01AF41AF81A       DC16 6896, 6900, 6904, 4, 6908, 6912, 6916, 0, 6782, 0, 6782, 0, 6782
   \              0400FC1A001B
   \              041B00007E1A
   \              00007E1A0000
   \              7E1A        
   \   000002BC   00007E1A0000       DC16 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0
   \              7E1A00007E1A
   \              00007E1A0000
   \              7E1A00007E1A
   \              00007E1A0000
   \   000002DA   7E1A00007E1A       DC16 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0
   \              00007E1A0000
   \              7E1A00007E1A
   \              00007E1A0000
   \              7E1A0000    
   \   000002F6   7E1A00007E1A       DC16 6782, 0, 6782, 0, 6782, 16388, 6842, 6844, 6846, 4, 6800, 6802
   \              00007E1A0440
   \              BA1ABC1ABE1A
   \              0400901A921A
   \   0000030E   941A0400961A       DC16 6804, 4, 6806, 6808, 6810, 4, 6812, 6814, 6816, 4, 6818, 6820
   \              981A9A1A0400
   \              9C1A9E1AA01A
   \              0400A21AA41A
   \   00000326   A61A0400A81A       DC16 6822, 4, 6824, 6826, 6828, 4, 6830, 6832, 6834, 4, 6836, 6838
   \              AA1AAC1A0400
   \              AE1AB01AB21A
   \              0400B41AB61A
   \   0000033E   B81A0460BA1A       DC16 6840, 24580, 6842, 6844, 6846, 0, 6786, 0, 6786, 0, 6786, 0, 6786
   \              BC1ABE1A0000
   \              821A0000821A
   \              0000821A0000
   \              821A        
   \   00000358   0000821A0000       DC16 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0
   \              821A0000821A
   \              0000821A0000
   \              821A0000821A
   \              0000821A0000
   \   00000376   821A0000821A       DC16 6786, 0, 6786, 0, 6786, 4, 6848, 6852, 6856, 0, 6790, 0, 6790, 4
   \              0000821A0400
   \              C01AC41AC81A
   \              0000861A0000
   \              861A0400    
   \   00000392   CC1AD01AD41A       DC16 6860, 6864, 6868, 4, 6872, 6876, 6880, 0, 6790, 0, 6790, 0, 6790
   \              0400D81ADC1A
   \              E01A0000861A
   \              0000861A0000
   \              861A        
   \   000003AC   0000861A0000       DC16 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0
   \              861A0000861A
   \              0000861A0000
   \              861A0000861A
   \              0000861A0000
   \   000003CA   861A0000861A       DC16 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0
   \              0000861A0000
   \              861A0000861A
   \              0000861A0000
   \              861A0000    
   \   000003E6   861A0000861A       DC16 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790
   \              0000861A0000
   \              861A0000861A
   \              0000861A0000
   \              861A        

   \                                 In section .rodata, align 4
   \                     `?<Constant {65535, 65485, 0, 0, 0, 0, 0, 0, 0,`:
   \   00000000   FFFFCDFF0000       DC16 65535, 65485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000054   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65535
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000FFFF
   \   0000007E   CDFF0DFEFFFF       DC16 65485, 65037, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   00000090   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000A2   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000B4   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000C6   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000D8   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000EA   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000FC   0DFEFFFFFFFF       DC16 65037, 65535, 65535, 65485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              CDFF00000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   0000011E   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   0000014A   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000176   000000000000       DC16 0, 0, 0, 65535, 65485, 65033, 65522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              FFFFCDFF09FE
   \              F2FF00000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001C4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001F0   000000000000       DC16 0, 0, 0, 0, 0, 0, 65033, 65522
   \              000000000000
   \              09FEF2FF    

   \                                 In section .rodata, align 4
   \                     `?<Constant {257, 514, 771, 1028, 1285, 1542, 1`:
   \   00000000   010102020303       DC16 257, 514, 771, 1028, 1285, 1542, 1799, 2056, 2313, 4112, 4369
   \              040405050606
   \              070708080909
   \              10101111    
   \   00000016   121213131414       DC16 4626, 4883, 5140, 5397, 5654, 5911, 6168, 6425, 8224, 8481, 8738
   \              151516161717
   \              181819192020
   \              21212222    
   \   0000002C   232324242525       DC16 8995, 9252, 9509, 9766, 10023, 10280, 10537, 12336, 12593, 12850
   \              262627272828
   \              292930303131
   \              3232        

   \                                 In section .rodata, align 4
   \                     `?<Constant {61441, 61442, 61443, 61444, 61445,`:
   \   00000000   01F002F003F0       DC16 61441, 61442, 61443, 61444, 61445, 61446, 61447, 61448, 61449
   \              04F005F006F0
   \              07F008F009F0
   \   00000012   0AF00BF00CF0       DC16 61450, 61451, 61452, 61453, 61454, 61455, 61456, 61457, 61458
   \              0DF00EF00FF0
   \              10F011F012F0
   \   00000024   13F014F015F0       DC16 61459, 61460, 61461, 61462, 61463, 61464, 61465, 61466, 61467
   \              16F017F018F0
   \              19F01AF01BF0
   \   00000036   1CF01DF01EF0       DC16 61468, 61469, 61470, 61471, 61472
   \              1FF020F0    

   \                                 In section .rodata, align 4
   \                     `?<Constant {57005, 57005, 57005, 57005, 4, 204_1`:
   \   00000000   ADDEADDEADDE       DC16 57005, 57005, 57005, 57005, 4, 2048, 2082, 2116, 32768, 2256, 32
   \              ADDE04000008
   \              220844080080
   \              D0082000    
   \   00000016   100D01807611       DC16 3344, 32769, 4470, 4470, 5558, 0, 6710, 0, 6710, 0, 6710, 0, 6710
   \              7611B6150000
   \              361A0000361A
   \              0000361A0000
   \              361A        
   \   00000030   0000361A0000       DC16 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              361A0000361A
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \   0000004E   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   0000006A   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   00000086   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   000000A2   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   000000BE   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0000
   \              361A0000    
   \   000000DA   361A0000361A       DC16 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 0, 6710, 16384, 2222, 0
   \              0000361A0000
   \              361A0000361A
   \              0000361A0040
   \              AE080000    
   \   000000F6   AE08ADDEADDE       DC16 2222, 57005, 57005, 57005, 57005, 57005, 57005, 57005, 57005, 4
   \              ADDEADDEADDE
   \              ADDEADDEADDE
   \              0400        
   \   0000010A   66088808AA08       DC16 2150, 2184, 2218, 32768, 3378, 32, 4466, 32769, 5590, 5590, 6678
   \              0080320D2000
   \              72110180D615
   \              D615161A    
   \   00000120   0000581A0000       DC16 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              581A0000581A
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \   0000013E   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   0000015A   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   00000176   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   00000192   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   000001AE   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   000001CA   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0, 6744, 0
   \              0000581A0000
   \              581A0000581A
   \              0000581A0000
   \              581A0000    
   \   000001E6   581A0000581A       DC16 6744, 0, 6744, 0, 6744, 0, 2222, 0, 2222, 57005, 57005, 57005
   \              0000581A0000
   \              AE080000AE08
   \              ADDEADDEADDE
   \   000001FE   ADDE00007A1A       DC16 57005, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A0000    
   \   0000021A   7A1A00007A1A       DC16 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A0000    
   \   00000236   7A1A00007A1A       DC16 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A0000    
   \   00000252   7A1A00007A1A       DC16 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007A1A0000
   \              7A1A0000    
   \   0000026E   7A1A00007A1A       DC16 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6778, 0, 6782, 0, 6782, 4
   \              00007A1A0000
   \              7A1A00007A1A
   \              00007E1A0000
   \              7E1A0400    
   \   0000028A   E41AE81AEC1A       DC16 6884, 6888, 6892, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 4, 6896
   \              00007E1A0000
   \              7E1A00007E1A
   \              00007E1A0400
   \              F01A        
   \   000002A4   F41AF81A0400       DC16 6900, 6904, 4, 6908, 6912, 6916, 0, 6782, 0, 6782, 0, 6782, 0
   \              FC1A001B041B
   \              00007E1A0000
   \              7E1A00007E1A
   \              0000        
   \   000002BE   7E1A00007E1A       DC16 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0
   \              00007E1A0000
   \              7E1A00007E1A
   \              00007E1A0000
   \              7E1A0000    
   \   000002DA   7E1A00007E1A       DC16 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0, 6782, 0
   \              00007E1A0000
   \              7E1A00007E1A
   \              00007E1A0000
   \              7E1A0000    
   \   000002F6   7E1A00007E1A       DC16 6782, 0, 6782, 0, 6782, 16388, 6842, 6844, 6846, 4, 6800, 6802
   \              00007E1A0440
   \              BA1ABC1ABE1A
   \              0400901A921A
   \   0000030E   941A0400961A       DC16 6804, 4, 6806, 6808, 6810, 4, 6812, 6814, 6816, 4, 6818, 6820
   \              981A9A1A0400
   \              9C1A9E1AA01A
   \              0400A21AA41A
   \   00000326   A61A0400A81A       DC16 6822, 4, 6824, 6826, 6828, 4, 6830, 6832, 6834, 4, 6836, 6838
   \              AA1AAC1A0400
   \              AE1AB01AB21A
   \              0400B41AB61A
   \   0000033E   B81A0400BA1A       DC16 6840, 4, 6842, 6844, 6846, 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0
   \              BC1ABE1A0000
   \              821A0000821A
   \              0000821A0000
   \              821A0000    
   \   0000035A   821A0000821A       DC16 6786, 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0, 6786, 0
   \              0000821A0000
   \              821A0000821A
   \              0000821A0000
   \              821A0000    
   \   00000376   821A0000821A       DC16 6786, 0, 6786, 0, 6786, 4, 6848, 6852, 6856, 0, 6790, 0, 6790, 4
   \              0000821A0400
   \              C01AC41AC81A
   \              0000861A0000
   \              861A0400    
   \   00000392   CC1AD01AD41A       DC16 6860, 6864, 6868, 4, 6872, 6876, 6880, 0, 6790, 0, 6790, 0, 6790
   \              0400D81ADC1A
   \              E01A0000861A
   \              0000861A0000
   \              861A        
   \   000003AC   0000861A0000       DC16 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0
   \              861A0000861A
   \              0000861A0000
   \              861A0000861A
   \              0000861A0000
   \   000003CA   861A0000861A       DC16 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0
   \              0000861A0000
   \              861A0000861A
   \              0000861A0000
   \              861A0000    
   \   000003E6   861A0000861A       DC16 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790, 0, 6790
   \              0000861A0000
   \              861A0000861A
   \              0000861A0000
   \              861A        

   \                                 In section .rodata, align 4
   \                     `?<Constant {65535, 65485, 0, 0, 0, 0, 0, 0, 0,_1`:
   \   00000000   FFFFCDFF0000       DC16 65535, 65485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000028   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000054   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65535
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000FFFF
   \   0000007E   CDFF0DFEFFFF       DC16 65485, 65037, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   00000090   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000A2   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000B4   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000C6   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000D8   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000EA   FFFFFFFFFFFF       DC16 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535
   \              FFFFFFFFFFFF
   \              FFFFFFFFFFFF
   \   000000FC   0DFEFFFFFFFF       DC16 65037, 65535, 65535, 65485, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              CDFF00000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   0000011E   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   0000014A   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000176   000000000000       DC16 0, 0, 0, 65535, 65485, 65033, 65522, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              FFFFCDFF09FE
   \              F2FF00000000
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001C4   000000000000       DC16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   000001F0   000000000000       DC16 0, 0, 0, 0, 0, 0, 65033, 65522
   \              000000000000
   \              09FEF2FF    

   \                                 In section .rodata, align 4
   \                     `?<Constant {257, 514, 771, 1028, 1285, 1542, 1_1`:
   \   00000000   010102020303       DC16 257, 514, 771, 1028, 1285, 1542, 1799, 2056, 2313, 4112, 4369
   \              040405050606
   \              070708080909
   \              10101111    
   \   00000016   121213131414       DC16 4626, 4883, 5140, 5397, 5654, 5911, 6168, 6425, 8224, 8481, 8738
   \              151516161717
   \              181819192020
   \              21212222    
   \   0000002C   232324242525       DC16 8995, 9252, 9509, 9766, 10023, 10280, 10537, 12336, 12593, 12850
   \              262627272828
   \              292930303131
   \              3232        

   \                                 In section .rodata, align 4
   \                     `?<Constant {61441, 61442, 61443, 61444, 61445,_1`:
   \   00000000   01F002F003F0       DC16 61441, 61442, 61443, 61444, 61445, 61446, 61447, 61448, 61449
   \              04F005F006F0
   \              07F008F009F0
   \   00000012   0AF00BF00CF0       DC16 61450, 61451, 61452, 61453, 61454, 61455, 61456, 61457, 61458
   \              0DF00EF00FF0
   \              10F011F012F0
   \   00000024   13F014F015F0       DC16 61459, 61460, 61461, 61462, 61463, 61464, 61465, 61466, 61467
   \              16F017F018F0
   \              19F01AF01BF0
   \   00000036   1CF01DF01EF0       DC16 61468, 61469, 61470, 61471, 61472
   \              1FF020F0    

   \                                 In section .rodata, align 4
   \                     `?<Constant {131072, (AT91S_PIO *)1074662912, 1`:
   \   00000000   00000200000E       DC32 131072, 400E0E00H
   \              0E40        
   \   00000008   0B0202000000       DC8 11, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   0000001B   0000000000         DC8 0, 0, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {4096, (AT91S_PIO *)1074663424, 12,`:
   \   00000000   001000000010       DC32 4096, 400E1000H
   \              0E40        
   \   00000008   0C0200000000       DC8 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   0000001A   000000000000       DC8 0, 0, 0, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {8192, (AT91S_PIO *)1074663424, 12,`:
   \   00000000   002000000010       DC32 8192, 400E1000H
   \              0E40        
   \   00000008   0C0200000000       DC8 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   0000001A   000000000000       DC8 0, 0, 0, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {16384, (AT91S_PIO *)1074663424, 12`:
   \   00000000   004000000010       DC32 16384, 400E1000H
   \              0E40        
   \   00000008   0C0200000000       DC8 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   0000001A   000000000000       DC8 0, 0, 0, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {32768, (AT91S_PIO *)1074663424, 12`:
   \   00000000   008000000010       DC32 32768, 400E1000H
   \              0E40        
   \   00000008   0C0200000000       DC8 12, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \   0000001A   000000000000       DC8 0, 0, 0, 0, 0, 0
   1839          
   1840          
   1841          
   1842          // end of file
   1843          

   Maximum stack usage in bytes:

     Function                   .cstack
     --------                   -------
     RTAddr_okay                    16
     RT_bus_addressing_examples      4
     RTstatusUpdate                144
     initialize_613x_RT1          1552
     initialize_613x_RT2          1552
     modify_RT_status_bits          40
     write_dummy_tx_data_RT1       140
     write_dummy_tx_data_RT2       140


   Section sizes:

     Function/Label                                   Bytes
     --------------                                   -----
     RT_bus_addressing_examples                        150
     initialize_613x_RT1                               414
     write_dummy_tx_data_RT1                           280
     initialize_613x_RT2                               410
     write_dummy_tx_data_RT2                           264
     RTAddr_okay                                        58
     modify_RT_status_bits                              54
     RTstatusUpdate                                    148
     ??DataTable7                                        4
     ??DataTable7_1                                      4
     ??DataTable7_2                                      4
     ??DataTable7_3                                      4
     ??DataTable7_4                                      4
     ??DataTable7_5                                      4
     ??DataTable7_6                                      4
     ??DataTable7_7                                      4
     ??DataTable7_8                                      4
     ??DataTable7_9                                      4
     ??DataTable7_10                                     4
     ??DataTable7_11                                     4
     ??DataTable7_12                                     4
     ??DataTable7_13                                     4
     ??DataTable7_14                                     4
     ??DataTable7_15                                     4
     ??DataTable7_16                                     4
     ??DataTable7_17                                     4
     ??DataTable7_18                                     4
     ??DataTable7_19                                     4
     ??DataTable7_20                                     4
     ??DataTable7_21                                     4
     ??DataTable7_22                                     4
     ??DataTable7_23                                     4
     ??DataTable7_24                                     4
     ??DataTable7_25                                     4
     ??DataTable7_26                                     4
     ??DataTable7_27                                     4
     ??DataTable7_28                                     4
     ??DataTable7_29                                     4
     ??DataTable7_30                                     4
     ??DataTable7_31                                     4
     ??DataTable7_32                                     4
     ??DataTable7_33                                     4
     ?<Constant {57005, 57005, 57005, 57005, 4, 204   1024
     ?<Constant {65535, 65485, 0, 0, 0, 0, 0, 0, 0,    512
     ?<Constant {257, 514, 771, 1028, 1285, 1542, 1     64
     ?<Constant {61441, 61442, 61443, 61444, 61445,     64
     ?<Constant {57005, 57005, 57005, 57005, 4, 204_1 1024
     ?<Constant {65535, 65485, 0, 0, 0, 0, 0, 0, 0,_1  512
     ?<Constant {257, 514, 771, 1028, 1285, 1542, 1_1   64
     ?<Constant {61441, 61442, 61443, 61444, 61445,_1   64
     ?<Constant {131072, (AT91S_PIO *)1074662912, 1     32
     ?<Constant {4096, (AT91S_PIO *)1074663424, 12,     32
     ?<Constant {8192, (AT91S_PIO *)1074663424, 12,     32
     ?<Constant {16384, (AT91S_PIO *)1074663424, 12     32
     ?<Constant {32768, (AT91S_PIO *)1074663424, 12     32

 
 3 488 bytes in section .rodata
 1 914 bytes in section .text
 
 1 914 bytes of CODE  memory
 3 488 bytes of CONST memory

Errors: none
Warnings: none
